
STM32F746ZG_microROS2_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022fa8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d98  08023178  08023178  00033178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000558  08026f10  08026f10  00036f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000004c0  08027468  08027468  00037468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027928  08027928  0004012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08027928  08027928  00037928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027930  08027930  00037930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08027934  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00043f68  20000130  08027a60  00040130  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20044098  08027a60  00044098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037c90  00000000  00000000  0004015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000853e  00000000  00000000  00077dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002770  00000000  00000000  00080330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025d8  00000000  00000000  00082aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c70  00000000  00000000  00085078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f0c0  00000000  00000000  0009ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121560  00000000  00000000  000d9da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  001fb308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf9c  00000000  00000000  001fb3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000130 	.word	0x20000130
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08023160 	.word	0x08023160

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000134 	.word	0x20000134
 800020c:	08023160 	.word	0x08023160

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_dmul>:
 80002d4:	b570      	push	{r4, r5, r6, lr}
 80002d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002e2:	bf1d      	ittte	ne
 80002e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e8:	ea94 0f0c 	teqne	r4, ip
 80002ec:	ea95 0f0c 	teqne	r5, ip
 80002f0:	f000 f8de 	bleq	80004b0 <__aeabi_dmul+0x1dc>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea81 0603 	eor.w	r6, r1, r3
 80002fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000302:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000306:	bf18      	it	ne
 8000308:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800030c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000310:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000314:	d038      	beq.n	8000388 <__aeabi_dmul+0xb4>
 8000316:	fba0 ce02 	umull	ip, lr, r0, r2
 800031a:	f04f 0500 	mov.w	r5, #0
 800031e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000322:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000326:	fbe0 e503 	umlal	lr, r5, r0, r3
 800032a:	f04f 0600 	mov.w	r6, #0
 800032e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000332:	f09c 0f00 	teq	ip, #0
 8000336:	bf18      	it	ne
 8000338:	f04e 0e01 	orrne.w	lr, lr, #1
 800033c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000340:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000344:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000348:	d204      	bcs.n	8000354 <__aeabi_dmul+0x80>
 800034a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034e:	416d      	adcs	r5, r5
 8000350:	eb46 0606 	adc.w	r6, r6, r6
 8000354:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000358:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800035c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000360:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000364:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000368:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800036c:	bf88      	it	hi
 800036e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000372:	d81e      	bhi.n	80003b2 <__aeabi_dmul+0xde>
 8000374:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000378:	bf08      	it	eq
 800037a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037e:	f150 0000 	adcs.w	r0, r0, #0
 8000382:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800038c:	ea46 0101 	orr.w	r1, r6, r1
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800039c:	bfc2      	ittt	gt
 800039e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a6:	bd70      	popgt	{r4, r5, r6, pc}
 80003a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003ac:	f04f 0e00 	mov.w	lr, #0
 80003b0:	3c01      	subs	r4, #1
 80003b2:	f300 80ab 	bgt.w	800050c <__aeabi_dmul+0x238>
 80003b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003ba:	bfde      	ittt	le
 80003bc:	2000      	movle	r0, #0
 80003be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd70      	pople	{r4, r5, r6, pc}
 80003c4:	f1c4 0400 	rsb	r4, r4, #0
 80003c8:	3c20      	subs	r4, #32
 80003ca:	da35      	bge.n	8000438 <__aeabi_dmul+0x164>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc1b      	bgt.n	8000408 <__aeabi_dmul+0x134>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f305 	lsl.w	r3, r0, r5
 80003dc:	fa20 f004 	lsr.w	r0, r0, r4
 80003e0:	fa01 f205 	lsl.w	r2, r1, r5
 80003e4:	ea40 0002 	orr.w	r0, r0, r2
 80003e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	fa21 f604 	lsr.w	r6, r1, r4
 80003f8:	eb42 0106 	adc.w	r1, r2, r6
 80003fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000400:	bf08      	it	eq
 8000402:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f1c4 040c 	rsb	r4, r4, #12
 800040c:	f1c4 0520 	rsb	r5, r4, #32
 8000410:	fa00 f304 	lsl.w	r3, r0, r4
 8000414:	fa20 f005 	lsr.w	r0, r0, r5
 8000418:	fa01 f204 	lsl.w	r2, r1, r4
 800041c:	ea40 0002 	orr.w	r0, r0, r2
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000428:	f141 0100 	adc.w	r1, r1, #0
 800042c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000430:	bf08      	it	eq
 8000432:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	f1c4 0520 	rsb	r5, r4, #32
 800043c:	fa00 f205 	lsl.w	r2, r0, r5
 8000440:	ea4e 0e02 	orr.w	lr, lr, r2
 8000444:	fa20 f304 	lsr.w	r3, r0, r4
 8000448:	fa01 f205 	lsl.w	r2, r1, r5
 800044c:	ea43 0302 	orr.w	r3, r3, r2
 8000450:	fa21 f004 	lsr.w	r0, r1, r4
 8000454:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000458:	fa21 f204 	lsr.w	r2, r1, r4
 800045c:	ea20 0002 	bic.w	r0, r0, r2
 8000460:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000464:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000468:	bf08      	it	eq
 800046a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046e:	bd70      	pop	{r4, r5, r6, pc}
 8000470:	f094 0f00 	teq	r4, #0
 8000474:	d10f      	bne.n	8000496 <__aeabi_dmul+0x1c2>
 8000476:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800047a:	0040      	lsls	r0, r0, #1
 800047c:	eb41 0101 	adc.w	r1, r1, r1
 8000480:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000484:	bf08      	it	eq
 8000486:	3c01      	subeq	r4, #1
 8000488:	d0f7      	beq.n	800047a <__aeabi_dmul+0x1a6>
 800048a:	ea41 0106 	orr.w	r1, r1, r6
 800048e:	f095 0f00 	teq	r5, #0
 8000492:	bf18      	it	ne
 8000494:	4770      	bxne	lr
 8000496:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800049a:	0052      	lsls	r2, r2, #1
 800049c:	eb43 0303 	adc.w	r3, r3, r3
 80004a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004a4:	bf08      	it	eq
 80004a6:	3d01      	subeq	r5, #1
 80004a8:	d0f7      	beq.n	800049a <__aeabi_dmul+0x1c6>
 80004aa:	ea43 0306 	orr.w	r3, r3, r6
 80004ae:	4770      	bx	lr
 80004b0:	ea94 0f0c 	teq	r4, ip
 80004b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b8:	bf18      	it	ne
 80004ba:	ea95 0f0c 	teqne	r5, ip
 80004be:	d00c      	beq.n	80004da <__aeabi_dmul+0x206>
 80004c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c4:	bf18      	it	ne
 80004c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004ca:	d1d1      	bne.n	8000470 <__aeabi_dmul+0x19c>
 80004cc:	ea81 0103 	eor.w	r1, r1, r3
 80004d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004de:	bf06      	itte	eq
 80004e0:	4610      	moveq	r0, r2
 80004e2:	4619      	moveq	r1, r3
 80004e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e8:	d019      	beq.n	800051e <__aeabi_dmul+0x24a>
 80004ea:	ea94 0f0c 	teq	r4, ip
 80004ee:	d102      	bne.n	80004f6 <__aeabi_dmul+0x222>
 80004f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f4:	d113      	bne.n	800051e <__aeabi_dmul+0x24a>
 80004f6:	ea95 0f0c 	teq	r5, ip
 80004fa:	d105      	bne.n	8000508 <__aeabi_dmul+0x234>
 80004fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000500:	bf1c      	itt	ne
 8000502:	4610      	movne	r0, r2
 8000504:	4619      	movne	r1, r3
 8000506:	d10a      	bne.n	800051e <__aeabi_dmul+0x24a>
 8000508:	ea81 0103 	eor.w	r1, r1, r3
 800050c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000510:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd70      	pop	{r4, r5, r6, pc}
 800051e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000522:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000526:	bd70      	pop	{r4, r5, r6, pc}

08000528 <__aeabi_drsub>:
 8000528:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e002      	b.n	8000534 <__adddf3>
 800052e:	bf00      	nop

08000530 <__aeabi_dsub>:
 8000530:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000534 <__adddf3>:
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800053a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053e:	ea94 0f05 	teq	r4, r5
 8000542:	bf08      	it	eq
 8000544:	ea90 0f02 	teqeq	r0, r2
 8000548:	bf1f      	itttt	ne
 800054a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000552:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000556:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800055a:	f000 80e2 	beq.w	8000722 <__adddf3+0x1ee>
 800055e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000562:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000566:	bfb8      	it	lt
 8000568:	426d      	neglt	r5, r5
 800056a:	dd0c      	ble.n	8000586 <__adddf3+0x52>
 800056c:	442c      	add	r4, r5
 800056e:	ea80 0202 	eor.w	r2, r0, r2
 8000572:	ea81 0303 	eor.w	r3, r1, r3
 8000576:	ea82 0000 	eor.w	r0, r2, r0
 800057a:	ea83 0101 	eor.w	r1, r3, r1
 800057e:	ea80 0202 	eor.w	r2, r0, r2
 8000582:	ea81 0303 	eor.w	r3, r1, r3
 8000586:	2d36      	cmp	r5, #54	; 0x36
 8000588:	bf88      	it	hi
 800058a:	bd30      	pophi	{r4, r5, pc}
 800058c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000590:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000594:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000598:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x70>
 800059e:	4240      	negs	r0, r0
 80005a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005b0:	d002      	beq.n	80005b8 <__adddf3+0x84>
 80005b2:	4252      	negs	r2, r2
 80005b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b8:	ea94 0f05 	teq	r4, r5
 80005bc:	f000 80a7 	beq.w	800070e <__adddf3+0x1da>
 80005c0:	f1a4 0401 	sub.w	r4, r4, #1
 80005c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c8:	db0d      	blt.n	80005e6 <__adddf3+0xb2>
 80005ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ce:	fa22 f205 	lsr.w	r2, r2, r5
 80005d2:	1880      	adds	r0, r0, r2
 80005d4:	f141 0100 	adc.w	r1, r1, #0
 80005d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80005dc:	1880      	adds	r0, r0, r2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	4159      	adcs	r1, r3
 80005e4:	e00e      	b.n	8000604 <__adddf3+0xd0>
 80005e6:	f1a5 0520 	sub.w	r5, r5, #32
 80005ea:	f10e 0e20 	add.w	lr, lr, #32
 80005ee:	2a01      	cmp	r2, #1
 80005f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f4:	bf28      	it	cs
 80005f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005fa:	fa43 f305 	asr.w	r3, r3, r5
 80005fe:	18c0      	adds	r0, r0, r3
 8000600:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000608:	d507      	bpl.n	800061a <__adddf3+0xe6>
 800060a:	f04f 0e00 	mov.w	lr, #0
 800060e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000612:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000616:	eb6e 0101 	sbc.w	r1, lr, r1
 800061a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800061e:	d31b      	bcc.n	8000658 <__adddf3+0x124>
 8000620:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000624:	d30c      	bcc.n	8000640 <__adddf3+0x10c>
 8000626:	0849      	lsrs	r1, r1, #1
 8000628:	ea5f 0030 	movs.w	r0, r0, rrx
 800062c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000630:	f104 0401 	add.w	r4, r4, #1
 8000634:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000638:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800063c:	f080 809a 	bcs.w	8000774 <__adddf3+0x240>
 8000640:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	ea41 0105 	orr.w	r1, r1, r5
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800065c:	4140      	adcs	r0, r0
 800065e:	eb41 0101 	adc.w	r1, r1, r1
 8000662:	3c01      	subs	r4, #1
 8000664:	bf28      	it	cs
 8000666:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800066a:	d2e9      	bcs.n	8000640 <__adddf3+0x10c>
 800066c:	f091 0f00 	teq	r1, #0
 8000670:	bf04      	itt	eq
 8000672:	4601      	moveq	r1, r0
 8000674:	2000      	moveq	r0, #0
 8000676:	fab1 f381 	clz	r3, r1
 800067a:	bf08      	it	eq
 800067c:	3320      	addeq	r3, #32
 800067e:	f1a3 030b 	sub.w	r3, r3, #11
 8000682:	f1b3 0220 	subs.w	r2, r3, #32
 8000686:	da0c      	bge.n	80006a2 <__adddf3+0x16e>
 8000688:	320c      	adds	r2, #12
 800068a:	dd08      	ble.n	800069e <__adddf3+0x16a>
 800068c:	f102 0c14 	add.w	ip, r2, #20
 8000690:	f1c2 020c 	rsb	r2, r2, #12
 8000694:	fa01 f00c 	lsl.w	r0, r1, ip
 8000698:	fa21 f102 	lsr.w	r1, r1, r2
 800069c:	e00c      	b.n	80006b8 <__adddf3+0x184>
 800069e:	f102 0214 	add.w	r2, r2, #20
 80006a2:	bfd8      	it	le
 80006a4:	f1c2 0c20 	rsble	ip, r2, #32
 80006a8:	fa01 f102 	lsl.w	r1, r1, r2
 80006ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006b0:	bfdc      	itt	le
 80006b2:	ea41 010c 	orrle.w	r1, r1, ip
 80006b6:	4090      	lslle	r0, r2
 80006b8:	1ae4      	subs	r4, r4, r3
 80006ba:	bfa2      	ittt	ge
 80006bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006c0:	4329      	orrge	r1, r5
 80006c2:	bd30      	popge	{r4, r5, pc}
 80006c4:	ea6f 0404 	mvn.w	r4, r4
 80006c8:	3c1f      	subs	r4, #31
 80006ca:	da1c      	bge.n	8000706 <__adddf3+0x1d2>
 80006cc:	340c      	adds	r4, #12
 80006ce:	dc0e      	bgt.n	80006ee <__adddf3+0x1ba>
 80006d0:	f104 0414 	add.w	r4, r4, #20
 80006d4:	f1c4 0220 	rsb	r2, r4, #32
 80006d8:	fa20 f004 	lsr.w	r0, r0, r4
 80006dc:	fa01 f302 	lsl.w	r3, r1, r2
 80006e0:	ea40 0003 	orr.w	r0, r0, r3
 80006e4:	fa21 f304 	lsr.w	r3, r1, r4
 80006e8:	ea45 0103 	orr.w	r1, r5, r3
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	f1c4 040c 	rsb	r4, r4, #12
 80006f2:	f1c4 0220 	rsb	r2, r4, #32
 80006f6:	fa20 f002 	lsr.w	r0, r0, r2
 80006fa:	fa01 f304 	lsl.w	r3, r1, r4
 80006fe:	ea40 0003 	orr.w	r0, r0, r3
 8000702:	4629      	mov	r1, r5
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	fa21 f004 	lsr.w	r0, r1, r4
 800070a:	4629      	mov	r1, r5
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	f094 0f00 	teq	r4, #0
 8000712:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000716:	bf06      	itte	eq
 8000718:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800071c:	3401      	addeq	r4, #1
 800071e:	3d01      	subne	r5, #1
 8000720:	e74e      	b.n	80005c0 <__adddf3+0x8c>
 8000722:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000726:	bf18      	it	ne
 8000728:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800072c:	d029      	beq.n	8000782 <__adddf3+0x24e>
 800072e:	ea94 0f05 	teq	r4, r5
 8000732:	bf08      	it	eq
 8000734:	ea90 0f02 	teqeq	r0, r2
 8000738:	d005      	beq.n	8000746 <__adddf3+0x212>
 800073a:	ea54 0c00 	orrs.w	ip, r4, r0
 800073e:	bf04      	itt	eq
 8000740:	4619      	moveq	r1, r3
 8000742:	4610      	moveq	r0, r2
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	ea91 0f03 	teq	r1, r3
 800074a:	bf1e      	ittt	ne
 800074c:	2100      	movne	r1, #0
 800074e:	2000      	movne	r0, #0
 8000750:	bd30      	popne	{r4, r5, pc}
 8000752:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000756:	d105      	bne.n	8000764 <__adddf3+0x230>
 8000758:	0040      	lsls	r0, r0, #1
 800075a:	4149      	adcs	r1, r1
 800075c:	bf28      	it	cs
 800075e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000762:	bd30      	pop	{r4, r5, pc}
 8000764:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000768:	bf3c      	itt	cc
 800076a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800076e:	bd30      	popcc	{r4, r5, pc}
 8000770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000774:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd30      	pop	{r4, r5, pc}
 8000782:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000786:	bf1a      	itte	ne
 8000788:	4619      	movne	r1, r3
 800078a:	4610      	movne	r0, r2
 800078c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000790:	bf1c      	itt	ne
 8000792:	460b      	movne	r3, r1
 8000794:	4602      	movne	r2, r0
 8000796:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800079a:	bf06      	itte	eq
 800079c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007a0:	ea91 0f03 	teqeq	r1, r3
 80007a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007a8:	bd30      	pop	{r4, r5, pc}
 80007aa:	bf00      	nop

080007ac <__aeabi_ui2d>:
 80007ac:	f090 0f00 	teq	r0, #0
 80007b0:	bf04      	itt	eq
 80007b2:	2100      	moveq	r1, #0
 80007b4:	4770      	bxeq	lr
 80007b6:	b530      	push	{r4, r5, lr}
 80007b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c0:	f04f 0500 	mov.w	r5, #0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e750      	b.n	800066c <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_i2d>:
 80007cc:	f090 0f00 	teq	r0, #0
 80007d0:	bf04      	itt	eq
 80007d2:	2100      	moveq	r1, #0
 80007d4:	4770      	bxeq	lr
 80007d6:	b530      	push	{r4, r5, lr}
 80007d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007e4:	bf48      	it	mi
 80007e6:	4240      	negmi	r0, r0
 80007e8:	f04f 0100 	mov.w	r1, #0
 80007ec:	e73e      	b.n	800066c <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_f2d>:
 80007f0:	0042      	lsls	r2, r0, #1
 80007f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fe:	bf1f      	itttt	ne
 8000800:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000804:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000808:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800080c:	4770      	bxne	lr
 800080e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000812:	bf08      	it	eq
 8000814:	4770      	bxeq	lr
 8000816:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800081a:	bf04      	itt	eq
 800081c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000820:	4770      	bxeq	lr
 8000822:	b530      	push	{r4, r5, lr}
 8000824:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000828:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800082c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000830:	e71c      	b.n	800066c <__adddf3+0x138>
 8000832:	bf00      	nop

08000834 <__aeabi_ul2d>:
 8000834:	ea50 0201 	orrs.w	r2, r0, r1
 8000838:	bf08      	it	eq
 800083a:	4770      	bxeq	lr
 800083c:	b530      	push	{r4, r5, lr}
 800083e:	f04f 0500 	mov.w	r5, #0
 8000842:	e00a      	b.n	800085a <__aeabi_l2d+0x16>

08000844 <__aeabi_l2d>:
 8000844:	ea50 0201 	orrs.w	r2, r0, r1
 8000848:	bf08      	it	eq
 800084a:	4770      	bxeq	lr
 800084c:	b530      	push	{r4, r5, lr}
 800084e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000852:	d502      	bpl.n	800085a <__aeabi_l2d+0x16>
 8000854:	4240      	negs	r0, r0
 8000856:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800085a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800085e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000862:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000866:	f43f aed8 	beq.w	800061a <__adddf3+0xe6>
 800086a:	f04f 0203 	mov.w	r2, #3
 800086e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000872:	bf18      	it	ne
 8000874:	3203      	addne	r2, #3
 8000876:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087a:	bf18      	it	ne
 800087c:	3203      	addne	r2, #3
 800087e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	fa00 fc03 	lsl.w	ip, r0, r3
 800088a:	fa20 f002 	lsr.w	r0, r0, r2
 800088e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000892:	ea40 000e 	orr.w	r0, r0, lr
 8000896:	fa21 f102 	lsr.w	r1, r1, r2
 800089a:	4414      	add	r4, r2
 800089c:	e6bd      	b.n	800061a <__adddf3+0xe6>
 800089e:	bf00      	nop

080008a0 <__aeabi_d2uiz>:
 80008a0:	004a      	lsls	r2, r1, #1
 80008a2:	d211      	bcs.n	80008c8 <__aeabi_d2uiz+0x28>
 80008a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008a8:	d211      	bcs.n	80008ce <__aeabi_d2uiz+0x2e>
 80008aa:	d50d      	bpl.n	80008c8 <__aeabi_d2uiz+0x28>
 80008ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b4:	d40e      	bmi.n	80008d4 <__aeabi_d2uiz+0x34>
 80008b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c2:	fa23 f002 	lsr.w	r0, r3, r2
 80008c6:	4770      	bx	lr
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	4770      	bx	lr
 80008ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008d2:	d102      	bne.n	80008da <__aeabi_d2uiz+0x3a>
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d8:	4770      	bx	lr
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	4770      	bx	lr

080008e0 <__aeabi_ldivmod>:
 80008e0:	b97b      	cbnz	r3, 8000902 <__aeabi_ldivmod+0x22>
 80008e2:	b972      	cbnz	r2, 8000902 <__aeabi_ldivmod+0x22>
 80008e4:	2900      	cmp	r1, #0
 80008e6:	bfbe      	ittt	lt
 80008e8:	2000      	movlt	r0, #0
 80008ea:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80008ee:	e006      	blt.n	80008fe <__aeabi_ldivmod+0x1e>
 80008f0:	bf08      	it	eq
 80008f2:	2800      	cmpeq	r0, #0
 80008f4:	bf1c      	itt	ne
 80008f6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008fa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008fe:	f001 b929 	b.w	8001b54 <__aeabi_idiv0>
 8000902:	f1ad 0c08 	sub.w	ip, sp, #8
 8000906:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090a:	2900      	cmp	r1, #0
 800090c:	db09      	blt.n	8000922 <__aeabi_ldivmod+0x42>
 800090e:	2b00      	cmp	r3, #0
 8000910:	db1a      	blt.n	8000948 <__aeabi_ldivmod+0x68>
 8000912:	f000 f84d 	bl	80009b0 <__udivmoddi4>
 8000916:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800091e:	b004      	add	sp, #16
 8000920:	4770      	bx	lr
 8000922:	4240      	negs	r0, r0
 8000924:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000928:	2b00      	cmp	r3, #0
 800092a:	db1b      	blt.n	8000964 <__aeabi_ldivmod+0x84>
 800092c:	f000 f840 	bl	80009b0 <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4240      	negs	r0, r0
 800093c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000940:	4252      	negs	r2, r2
 8000942:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000946:	4770      	bx	lr
 8000948:	4252      	negs	r2, r2
 800094a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800094e:	f000 f82f 	bl	80009b0 <__udivmoddi4>
 8000952:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800095a:	b004      	add	sp, #16
 800095c:	4240      	negs	r0, r0
 800095e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000962:	4770      	bx	lr
 8000964:	4252      	negs	r2, r2
 8000966:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800096a:	f000 f821 	bl	80009b0 <__udivmoddi4>
 800096e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000976:	b004      	add	sp, #16
 8000978:	4252      	negs	r2, r2
 800097a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800097e:	4770      	bx	lr

08000980 <__aeabi_uldivmod>:
 8000980:	b953      	cbnz	r3, 8000998 <__aeabi_uldivmod+0x18>
 8000982:	b94a      	cbnz	r2, 8000998 <__aeabi_uldivmod+0x18>
 8000984:	2900      	cmp	r1, #0
 8000986:	bf08      	it	eq
 8000988:	2800      	cmpeq	r0, #0
 800098a:	bf1c      	itt	ne
 800098c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000990:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000994:	f001 b8de 	b.w	8001b54 <__aeabi_idiv0>
 8000998:	f1ad 0c08 	sub.w	ip, sp, #8
 800099c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009a0:	f000 f806 	bl	80009b0 <__udivmoddi4>
 80009a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009ac:	b004      	add	sp, #16
 80009ae:	4770      	bx	lr

080009b0 <__udivmoddi4>:
 80009b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009b4:	9d08      	ldr	r5, [sp, #32]
 80009b6:	4604      	mov	r4, r0
 80009b8:	468e      	mov	lr, r1
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d14d      	bne.n	8000a5a <__udivmoddi4+0xaa>
 80009be:	428a      	cmp	r2, r1
 80009c0:	4694      	mov	ip, r2
 80009c2:	d969      	bls.n	8000a98 <__udivmoddi4+0xe8>
 80009c4:	fab2 f282 	clz	r2, r2
 80009c8:	b152      	cbz	r2, 80009e0 <__udivmoddi4+0x30>
 80009ca:	fa01 f302 	lsl.w	r3, r1, r2
 80009ce:	f1c2 0120 	rsb	r1, r2, #32
 80009d2:	fa20 f101 	lsr.w	r1, r0, r1
 80009d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80009da:	ea41 0e03 	orr.w	lr, r1, r3
 80009de:	4094      	lsls	r4, r2
 80009e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e4:	0c21      	lsrs	r1, r4, #16
 80009e6:	fbbe f6f8 	udiv	r6, lr, r8
 80009ea:	fa1f f78c 	uxth.w	r7, ip
 80009ee:	fb08 e316 	mls	r3, r8, r6, lr
 80009f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009f6:	fb06 f107 	mul.w	r1, r6, r7
 80009fa:	4299      	cmp	r1, r3
 80009fc:	d90a      	bls.n	8000a14 <__udivmoddi4+0x64>
 80009fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000a02:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a06:	f080 811f 	bcs.w	8000c48 <__udivmoddi4+0x298>
 8000a0a:	4299      	cmp	r1, r3
 8000a0c:	f240 811c 	bls.w	8000c48 <__udivmoddi4+0x298>
 8000a10:	3e02      	subs	r6, #2
 8000a12:	4463      	add	r3, ip
 8000a14:	1a5b      	subs	r3, r3, r1
 8000a16:	b2a4      	uxth	r4, r4
 8000a18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a24:	fb00 f707 	mul.w	r7, r0, r7
 8000a28:	42a7      	cmp	r7, r4
 8000a2a:	d90a      	bls.n	8000a42 <__udivmoddi4+0x92>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a34:	f080 810a 	bcs.w	8000c4c <__udivmoddi4+0x29c>
 8000a38:	42a7      	cmp	r7, r4
 8000a3a:	f240 8107 	bls.w	8000c4c <__udivmoddi4+0x29c>
 8000a3e:	4464      	add	r4, ip
 8000a40:	3802      	subs	r0, #2
 8000a42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a46:	1be4      	subs	r4, r4, r7
 8000a48:	2600      	movs	r6, #0
 8000a4a:	b11d      	cbz	r5, 8000a54 <__udivmoddi4+0xa4>
 8000a4c:	40d4      	lsrs	r4, r2
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e9c5 4300 	strd	r4, r3, [r5]
 8000a54:	4631      	mov	r1, r6
 8000a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d909      	bls.n	8000a72 <__udivmoddi4+0xc2>
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	f000 80ef 	beq.w	8000c42 <__udivmoddi4+0x292>
 8000a64:	2600      	movs	r6, #0
 8000a66:	e9c5 0100 	strd	r0, r1, [r5]
 8000a6a:	4630      	mov	r0, r6
 8000a6c:	4631      	mov	r1, r6
 8000a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a72:	fab3 f683 	clz	r6, r3
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d14a      	bne.n	8000b10 <__udivmoddi4+0x160>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d302      	bcc.n	8000a84 <__udivmoddi4+0xd4>
 8000a7e:	4282      	cmp	r2, r0
 8000a80:	f200 80f9 	bhi.w	8000c76 <__udivmoddi4+0x2c6>
 8000a84:	1a84      	subs	r4, r0, r2
 8000a86:	eb61 0303 	sbc.w	r3, r1, r3
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	469e      	mov	lr, r3
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d0e0      	beq.n	8000a54 <__udivmoddi4+0xa4>
 8000a92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a96:	e7dd      	b.n	8000a54 <__udivmoddi4+0xa4>
 8000a98:	b902      	cbnz	r2, 8000a9c <__udivmoddi4+0xec>
 8000a9a:	deff      	udf	#255	; 0xff
 8000a9c:	fab2 f282 	clz	r2, r2
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	f040 8092 	bne.w	8000bca <__udivmoddi4+0x21a>
 8000aa6:	eba1 010c 	sub.w	r1, r1, ip
 8000aaa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aae:	fa1f fe8c 	uxth.w	lr, ip
 8000ab2:	2601      	movs	r6, #1
 8000ab4:	0c20      	lsrs	r0, r4, #16
 8000ab6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aba:	fb07 1113 	mls	r1, r7, r3, r1
 8000abe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ac2:	fb0e f003 	mul.w	r0, lr, r3
 8000ac6:	4288      	cmp	r0, r1
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x12c>
 8000aca:	eb1c 0101 	adds.w	r1, ip, r1
 8000ace:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ad2:	d202      	bcs.n	8000ada <__udivmoddi4+0x12a>
 8000ad4:	4288      	cmp	r0, r1
 8000ad6:	f200 80cb 	bhi.w	8000c70 <__udivmoddi4+0x2c0>
 8000ada:	4643      	mov	r3, r8
 8000adc:	1a09      	subs	r1, r1, r0
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ae8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000aec:	fb0e fe00 	mul.w	lr, lr, r0
 8000af0:	45a6      	cmp	lr, r4
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x156>
 8000af4:	eb1c 0404 	adds.w	r4, ip, r4
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000afc:	d202      	bcs.n	8000b04 <__udivmoddi4+0x154>
 8000afe:	45a6      	cmp	lr, r4
 8000b00:	f200 80bb 	bhi.w	8000c7a <__udivmoddi4+0x2ca>
 8000b04:	4608      	mov	r0, r1
 8000b06:	eba4 040e 	sub.w	r4, r4, lr
 8000b0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b0e:	e79c      	b.n	8000a4a <__udivmoddi4+0x9a>
 8000b10:	f1c6 0720 	rsb	r7, r6, #32
 8000b14:	40b3      	lsls	r3, r6
 8000b16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b22:	fa01 f306 	lsl.w	r3, r1, r6
 8000b26:	431c      	orrs	r4, r3
 8000b28:	40f9      	lsrs	r1, r7
 8000b2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000b32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b36:	0c20      	lsrs	r0, r4, #16
 8000b38:	fa1f fe8c 	uxth.w	lr, ip
 8000b3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000b40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b44:	fb08 f00e 	mul.w	r0, r8, lr
 8000b48:	4288      	cmp	r0, r1
 8000b4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000b4e:	d90b      	bls.n	8000b68 <__udivmoddi4+0x1b8>
 8000b50:	eb1c 0101 	adds.w	r1, ip, r1
 8000b54:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b58:	f080 8088 	bcs.w	8000c6c <__udivmoddi4+0x2bc>
 8000b5c:	4288      	cmp	r0, r1
 8000b5e:	f240 8085 	bls.w	8000c6c <__udivmoddi4+0x2bc>
 8000b62:	f1a8 0802 	sub.w	r8, r8, #2
 8000b66:	4461      	add	r1, ip
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b70:	fb09 1110 	mls	r1, r9, r0, r1
 8000b74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b7c:	458e      	cmp	lr, r1
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x1e2>
 8000b80:	eb1c 0101 	adds.w	r1, ip, r1
 8000b84:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b88:	d26c      	bcs.n	8000c64 <__udivmoddi4+0x2b4>
 8000b8a:	458e      	cmp	lr, r1
 8000b8c:	d96a      	bls.n	8000c64 <__udivmoddi4+0x2b4>
 8000b8e:	3802      	subs	r0, #2
 8000b90:	4461      	add	r1, ip
 8000b92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b96:	fba0 9402 	umull	r9, r4, r0, r2
 8000b9a:	eba1 010e 	sub.w	r1, r1, lr
 8000b9e:	42a1      	cmp	r1, r4
 8000ba0:	46c8      	mov	r8, r9
 8000ba2:	46a6      	mov	lr, r4
 8000ba4:	d356      	bcc.n	8000c54 <__udivmoddi4+0x2a4>
 8000ba6:	d053      	beq.n	8000c50 <__udivmoddi4+0x2a0>
 8000ba8:	b15d      	cbz	r5, 8000bc2 <__udivmoddi4+0x212>
 8000baa:	ebb3 0208 	subs.w	r2, r3, r8
 8000bae:	eb61 010e 	sbc.w	r1, r1, lr
 8000bb2:	fa01 f707 	lsl.w	r7, r1, r7
 8000bb6:	fa22 f306 	lsr.w	r3, r2, r6
 8000bba:	40f1      	lsrs	r1, r6
 8000bbc:	431f      	orrs	r7, r3
 8000bbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000bc2:	2600      	movs	r6, #0
 8000bc4:	4631      	mov	r1, r6
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	f1c2 0320 	rsb	r3, r2, #32
 8000bce:	40d8      	lsrs	r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	4301      	orrs	r1, r0
 8000bdc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be0:	fa1f fe8c 	uxth.w	lr, ip
 8000be4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000be8:	fb07 3610 	mls	r6, r7, r0, r3
 8000bec:	0c0b      	lsrs	r3, r1, #16
 8000bee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bf2:	fb00 f60e 	mul.w	r6, r0, lr
 8000bf6:	429e      	cmp	r6, r3
 8000bf8:	fa04 f402 	lsl.w	r4, r4, r2
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x260>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c06:	d22f      	bcs.n	8000c68 <__udivmoddi4+0x2b8>
 8000c08:	429e      	cmp	r6, r3
 8000c0a:	d92d      	bls.n	8000c68 <__udivmoddi4+0x2b8>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1b9b      	subs	r3, r3, r6
 8000c12:	b289      	uxth	r1, r1
 8000c14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c18:	fb07 3316 	mls	r3, r7, r6, r3
 8000c1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c20:	fb06 f30e 	mul.w	r3, r6, lr
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x28a>
 8000c28:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c30:	d216      	bcs.n	8000c60 <__udivmoddi4+0x2b0>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d914      	bls.n	8000c60 <__udivmoddi4+0x2b0>
 8000c36:	3e02      	subs	r6, #2
 8000c38:	4461      	add	r1, ip
 8000c3a:	1ac9      	subs	r1, r1, r3
 8000c3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c40:	e738      	b.n	8000ab4 <__udivmoddi4+0x104>
 8000c42:	462e      	mov	r6, r5
 8000c44:	4628      	mov	r0, r5
 8000c46:	e705      	b.n	8000a54 <__udivmoddi4+0xa4>
 8000c48:	4606      	mov	r6, r0
 8000c4a:	e6e3      	b.n	8000a14 <__udivmoddi4+0x64>
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	e6f8      	b.n	8000a42 <__udivmoddi4+0x92>
 8000c50:	454b      	cmp	r3, r9
 8000c52:	d2a9      	bcs.n	8000ba8 <__udivmoddi4+0x1f8>
 8000c54:	ebb9 0802 	subs.w	r8, r9, r2
 8000c58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c5c:	3801      	subs	r0, #1
 8000c5e:	e7a3      	b.n	8000ba8 <__udivmoddi4+0x1f8>
 8000c60:	4646      	mov	r6, r8
 8000c62:	e7ea      	b.n	8000c3a <__udivmoddi4+0x28a>
 8000c64:	4620      	mov	r0, r4
 8000c66:	e794      	b.n	8000b92 <__udivmoddi4+0x1e2>
 8000c68:	4640      	mov	r0, r8
 8000c6a:	e7d1      	b.n	8000c10 <__udivmoddi4+0x260>
 8000c6c:	46d0      	mov	r8, sl
 8000c6e:	e77b      	b.n	8000b68 <__udivmoddi4+0x1b8>
 8000c70:	3b02      	subs	r3, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	e732      	b.n	8000adc <__udivmoddi4+0x12c>
 8000c76:	4630      	mov	r0, r6
 8000c78:	e709      	b.n	8000a8e <__udivmoddi4+0xde>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e742      	b.n	8000b06 <__udivmoddi4+0x156>

08000c80 <selfrel_offset31>:
 8000c80:	6803      	ldr	r3, [r0, #0]
 8000c82:	005a      	lsls	r2, r3, #1
 8000c84:	bf4c      	ite	mi
 8000c86:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000c8a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000c8e:	4418      	add	r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <search_EIT_table>:
 8000c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c98:	b329      	cbz	r1, 8000ce6 <search_EIT_table+0x52>
 8000c9a:	1e4f      	subs	r7, r1, #1
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	4615      	mov	r5, r2
 8000ca0:	463e      	mov	r6, r7
 8000ca2:	f04f 0800 	mov.w	r8, #0
 8000ca6:	eb08 0106 	add.w	r1, r8, r6
 8000caa:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000cae:	1049      	asrs	r1, r1, #1
 8000cb0:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000cb4:	4648      	mov	r0, r9
 8000cb6:	f7ff ffe3 	bl	8000c80 <selfrel_offset31>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	00c8      	lsls	r0, r1, #3
 8000cbe:	3008      	adds	r0, #8
 8000cc0:	428f      	cmp	r7, r1
 8000cc2:	4420      	add	r0, r4
 8000cc4:	d009      	beq.n	8000cda <search_EIT_table+0x46>
 8000cc6:	42ab      	cmp	r3, r5
 8000cc8:	d809      	bhi.n	8000cde <search_EIT_table+0x4a>
 8000cca:	f7ff ffd9 	bl	8000c80 <selfrel_offset31>
 8000cce:	3801      	subs	r0, #1
 8000cd0:	42a8      	cmp	r0, r5
 8000cd2:	d20a      	bcs.n	8000cea <search_EIT_table+0x56>
 8000cd4:	f101 0801 	add.w	r8, r1, #1
 8000cd8:	e7e5      	b.n	8000ca6 <search_EIT_table+0x12>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d905      	bls.n	8000cea <search_EIT_table+0x56>
 8000cde:	4588      	cmp	r8, r1
 8000ce0:	d001      	beq.n	8000ce6 <search_EIT_table+0x52>
 8000ce2:	1e4e      	subs	r6, r1, #1
 8000ce4:	e7df      	b.n	8000ca6 <search_EIT_table+0x12>
 8000ce6:	f04f 0900 	mov.w	r9, #0
 8000cea:	4648      	mov	r0, r9
 8000cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000cf0 <__gnu_unwind_get_pr_addr>:
 8000cf0:	2801      	cmp	r0, #1
 8000cf2:	d007      	beq.n	8000d04 <__gnu_unwind_get_pr_addr+0x14>
 8000cf4:	2802      	cmp	r0, #2
 8000cf6:	d007      	beq.n	8000d08 <__gnu_unwind_get_pr_addr+0x18>
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__gnu_unwind_get_pr_addr+0x1c>)
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	bf0c      	ite	eq
 8000cfe:	4618      	moveq	r0, r3
 8000d00:	2000      	movne	r0, #0
 8000d02:	4770      	bx	lr
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <__gnu_unwind_get_pr_addr+0x20>)
 8000d06:	4770      	bx	lr
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <__gnu_unwind_get_pr_addr+0x24>)
 8000d0a:	4770      	bx	lr
 8000d0c:	080013c9 	.word	0x080013c9
 8000d10:	080013cd 	.word	0x080013cd
 8000d14:	080013d1 	.word	0x080013d1

08000d18 <get_eit_entry>:
 8000d18:	b530      	push	{r4, r5, lr}
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <get_eit_entry+0x90>)
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	4604      	mov	r4, r0
 8000d20:	1e8d      	subs	r5, r1, #2
 8000d22:	b33b      	cbz	r3, 8000d74 <get_eit_entry+0x5c>
 8000d24:	a901      	add	r1, sp, #4
 8000d26:	4628      	mov	r0, r5
 8000d28:	f3af 8000 	nop.w
 8000d2c:	b1e8      	cbz	r0, 8000d6a <get_eit_entry+0x52>
 8000d2e:	9901      	ldr	r1, [sp, #4]
 8000d30:	462a      	mov	r2, r5
 8000d32:	f7ff ffaf 	bl	8000c94 <search_EIT_table>
 8000d36:	4601      	mov	r1, r0
 8000d38:	b1b8      	cbz	r0, 8000d6a <get_eit_entry+0x52>
 8000d3a:	f7ff ffa1 	bl	8000c80 <selfrel_offset31>
 8000d3e:	684b      	ldr	r3, [r1, #4]
 8000d40:	64a0      	str	r0, [r4, #72]	; 0x48
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d02c      	beq.n	8000da0 <get_eit_entry+0x88>
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f101 0004 	add.w	r0, r1, #4
 8000d4c:	db24      	blt.n	8000d98 <get_eit_entry+0x80>
 8000d4e:	f7ff ff97 	bl	8000c80 <selfrel_offset31>
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000d58:	6803      	ldr	r3, [r0, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db11      	blt.n	8000d82 <get_eit_entry+0x6a>
 8000d5e:	f7ff ff8f 	bl	8000c80 <selfrel_offset31>
 8000d62:	6120      	str	r0, [r4, #16]
 8000d64:	2000      	movs	r0, #0
 8000d66:	b003      	add	sp, #12
 8000d68:	bd30      	pop	{r4, r5, pc}
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	2009      	movs	r0, #9
 8000d6e:	6123      	str	r3, [r4, #16]
 8000d70:	b003      	add	sp, #12
 8000d72:	bd30      	pop	{r4, r5, pc}
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <get_eit_entry+0x94>)
 8000d76:	490e      	ldr	r1, [pc, #56]	; (8000db0 <get_eit_entry+0x98>)
 8000d78:	1ac9      	subs	r1, r1, r3
 8000d7a:	10c9      	asrs	r1, r1, #3
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	9101      	str	r1, [sp, #4]
 8000d80:	e7d6      	b.n	8000d30 <get_eit_entry+0x18>
 8000d82:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000d86:	f7ff ffb3 	bl	8000cf0 <__gnu_unwind_get_pr_addr>
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	6120      	str	r0, [r4, #16]
 8000d8e:	bf14      	ite	ne
 8000d90:	2000      	movne	r0, #0
 8000d92:	2009      	moveq	r0, #9
 8000d94:	b003      	add	sp, #12
 8000d96:	bd30      	pop	{r4, r5, pc}
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000d9e:	e7db      	b.n	8000d58 <get_eit_entry+0x40>
 8000da0:	2300      	movs	r3, #0
 8000da2:	6123      	str	r3, [r4, #16]
 8000da4:	2005      	movs	r0, #5
 8000da6:	e7de      	b.n	8000d66 <get_eit_entry+0x4e>
 8000da8:	00000000 	.word	0x00000000
 8000dac:	08027468 	.word	0x08027468
 8000db0:	08027928 	.word	0x08027928

08000db4 <restore_non_core_regs>:
 8000db4:	6803      	ldr	r3, [r0, #0]
 8000db6:	07da      	lsls	r2, r3, #31
 8000db8:	b510      	push	{r4, lr}
 8000dba:	4604      	mov	r4, r0
 8000dbc:	d406      	bmi.n	8000dcc <restore_non_core_regs+0x18>
 8000dbe:	079b      	lsls	r3, r3, #30
 8000dc0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000dc4:	d509      	bpl.n	8000dda <restore_non_core_regs+0x26>
 8000dc6:	f000 fc5b 	bl	8001680 <__gnu_Unwind_Restore_VFP_D>
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	0759      	lsls	r1, r3, #29
 8000dce:	d509      	bpl.n	8000de4 <restore_non_core_regs+0x30>
 8000dd0:	071a      	lsls	r2, r3, #28
 8000dd2:	d50e      	bpl.n	8000df2 <restore_non_core_regs+0x3e>
 8000dd4:	06db      	lsls	r3, r3, #27
 8000dd6:	d513      	bpl.n	8000e00 <restore_non_core_regs+0x4c>
 8000dd8:	bd10      	pop	{r4, pc}
 8000dda:	f000 fc49 	bl	8001670 <__gnu_Unwind_Restore_VFP>
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	0759      	lsls	r1, r3, #29
 8000de2:	d4f5      	bmi.n	8000dd0 <restore_non_core_regs+0x1c>
 8000de4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000de8:	f000 fc52 	bl	8001690 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	071a      	lsls	r2, r3, #28
 8000df0:	d4f0      	bmi.n	8000dd4 <restore_non_core_regs+0x20>
 8000df2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000df6:	f000 fc53 	bl	80016a0 <__gnu_Unwind_Restore_WMMXD>
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	06db      	lsls	r3, r3, #27
 8000dfe:	d4eb      	bmi.n	8000dd8 <restore_non_core_regs+0x24>
 8000e00:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e08:	f000 bc8e 	b.w	8001728 <__gnu_Unwind_Restore_WMMXC>

08000e0c <__gnu_unwind_24bit.constprop.0>:
 8000e0c:	2009      	movs	r0, #9
 8000e0e:	4770      	bx	lr

08000e10 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000e10:	4603      	mov	r3, r0
 8000e12:	6800      	ldr	r0, [r0, #0]
 8000e14:	b100      	cbz	r0, 8000e18 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000e16:	4418      	add	r0, r3
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <_Unwind_DebugHook>:
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <unwind_phase2>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	4604      	mov	r4, r0
 8000e24:	460e      	mov	r6, r1
 8000e26:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f7ff ff75 	bl	8000d18 <get_eit_entry>
 8000e2e:	4605      	mov	r5, r0
 8000e30:	b988      	cbnz	r0, 8000e56 <unwind_phase2+0x36>
 8000e32:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8000e34:	6162      	str	r2, [r4, #20]
 8000e36:	6923      	ldr	r3, [r4, #16]
 8000e38:	4632      	mov	r2, r6
 8000e3a:	4621      	mov	r1, r4
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	4798      	blx	r3
 8000e40:	2808      	cmp	r0, #8
 8000e42:	d0f0      	beq.n	8000e26 <unwind_phase2+0x6>
 8000e44:	2807      	cmp	r0, #7
 8000e46:	d106      	bne.n	8000e56 <unwind_phase2+0x36>
 8000e48:	4628      	mov	r0, r5
 8000e4a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000e4c:	f7ff ffe6 	bl	8000e1c <_Unwind_DebugHook>
 8000e50:	1d30      	adds	r0, r6, #4
 8000e52:	f000 fc01 	bl	8001658 <__restore_core_regs>
 8000e56:	f020 fc7d 	bl	8021754 <abort>
 8000e5a:	bf00      	nop

08000e5c <unwind_phase2_forced>:
 8000e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e60:	1d0d      	adds	r5, r1, #4
 8000e62:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8000e66:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8000e6a:	4607      	mov	r7, r0
 8000e6c:	4614      	mov	r4, r2
 8000e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e70:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000e74:	f10d 0c0c 	add.w	ip, sp, #12
 8000e78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000e88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e8c:	ae02      	add	r6, sp, #8
 8000e8e:	f04f 0e00 	mov.w	lr, #0
 8000e92:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000e96:	f8c6 e000 	str.w	lr, [r6]
 8000e9a:	e020      	b.n	8000ede <unwind_phase2_forced+0x82>
 8000e9c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	a87a      	add	r0, sp, #488	; 0x1e8
 8000ea8:	f020 fdea 	bl	8021a80 <memcpy>
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000eb0:	4639      	mov	r1, r7
 8000eb2:	4650      	mov	r0, sl
 8000eb4:	4798      	blx	r3
 8000eb6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000eb8:	6473      	str	r3, [r6, #68]	; 0x44
 8000eba:	4621      	mov	r1, r4
 8000ebc:	e9cd 6900 	strd	r6, r9, [sp]
 8000ec0:	4605      	mov	r5, r0
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	463a      	mov	r2, r7
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	47c0      	blx	r8
 8000eca:	4604      	mov	r4, r0
 8000ecc:	b9e0      	cbnz	r0, 8000f08 <unwind_phase2_forced+0xac>
 8000ece:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000ed2:	a97a      	add	r1, sp, #488	; 0x1e8
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	f020 fdd3 	bl	8021a80 <memcpy>
 8000eda:	2d08      	cmp	r5, #8
 8000edc:	d11a      	bne.n	8000f14 <unwind_phase2_forced+0xb8>
 8000ede:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000ee0:	4638      	mov	r0, r7
 8000ee2:	f7ff ff19 	bl	8000d18 <get_eit_entry>
 8000ee6:	3409      	adds	r4, #9
 8000ee8:	fa5f fa84 	uxtb.w	sl, r4
 8000eec:	4605      	mov	r5, r0
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d0d4      	beq.n	8000e9c <unwind_phase2_forced+0x40>
 8000ef2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ef4:	6473      	str	r3, [r6, #68]	; 0x44
 8000ef6:	463a      	mov	r2, r7
 8000ef8:	e9cd 6900 	strd	r6, r9, [sp]
 8000efc:	463b      	mov	r3, r7
 8000efe:	f04a 0110 	orr.w	r1, sl, #16
 8000f02:	2001      	movs	r0, #1
 8000f04:	47c0      	blx	r8
 8000f06:	b100      	cbz	r0, 8000f0a <unwind_phase2_forced+0xae>
 8000f08:	2509      	movs	r5, #9
 8000f0a:	4628      	mov	r0, r5
 8000f0c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f14:	2d07      	cmp	r5, #7
 8000f16:	d1f7      	bne.n	8000f08 <unwind_phase2_forced+0xac>
 8000f18:	4620      	mov	r0, r4
 8000f1a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000f1c:	f7ff ff7e 	bl	8000e1c <_Unwind_DebugHook>
 8000f20:	a803      	add	r0, sp, #12
 8000f22:	f000 fb99 	bl	8001658 <__restore_core_regs>
 8000f26:	bf00      	nop

08000f28 <_Unwind_GetCFA>:
 8000f28:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000f2a:	4770      	bx	lr

08000f2c <__gnu_Unwind_RaiseException>:
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000f30:	640b      	str	r3, [r1, #64]	; 0x40
 8000f32:	f101 0c04 	add.w	ip, r1, #4
 8000f36:	460e      	mov	r6, r1
 8000f38:	4605      	mov	r5, r0
 8000f3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000f3e:	b0f9      	sub	sp, #484	; 0x1e4
 8000f40:	ac01      	add	r4, sp, #4
 8000f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f50:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000f54:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f5c:	9700      	str	r7, [sp, #0]
 8000f5e:	e006      	b.n	8000f6e <__gnu_Unwind_RaiseException+0x42>
 8000f60:	692b      	ldr	r3, [r5, #16]
 8000f62:	466a      	mov	r2, sp
 8000f64:	4629      	mov	r1, r5
 8000f66:	4798      	blx	r3
 8000f68:	2808      	cmp	r0, #8
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	d108      	bne.n	8000f80 <__gnu_Unwind_RaiseException+0x54>
 8000f6e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000f70:	4628      	mov	r0, r5
 8000f72:	f7ff fed1 	bl	8000d18 <get_eit_entry>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d0f2      	beq.n	8000f60 <__gnu_Unwind_RaiseException+0x34>
 8000f7a:	2009      	movs	r0, #9
 8000f7c:	b079      	add	sp, #484	; 0x1e4
 8000f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f80:	4668      	mov	r0, sp
 8000f82:	f7ff ff17 	bl	8000db4 <restore_non_core_regs>
 8000f86:	2c06      	cmp	r4, #6
 8000f88:	d1f7      	bne.n	8000f7a <__gnu_Unwind_RaiseException+0x4e>
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	f7ff ff47 	bl	8000e20 <unwind_phase2>
 8000f92:	bf00      	nop

08000f94 <__gnu_Unwind_ForcedUnwind>:
 8000f94:	60c1      	str	r1, [r0, #12]
 8000f96:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f98:	6182      	str	r2, [r0, #24]
 8000f9a:	6419      	str	r1, [r3, #64]	; 0x40
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	e75c      	b.n	8000e5c <unwind_phase2_forced>
 8000fa2:	bf00      	nop

08000fa4 <__gnu_Unwind_Resume>:
 8000fa4:	b570      	push	{r4, r5, r6, lr}
 8000fa6:	68c6      	ldr	r6, [r0, #12]
 8000fa8:	6943      	ldr	r3, [r0, #20]
 8000faa:	640b      	str	r3, [r1, #64]	; 0x40
 8000fac:	b9ae      	cbnz	r6, 8000fda <__gnu_Unwind_Resume+0x36>
 8000fae:	6903      	ldr	r3, [r0, #16]
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	460d      	mov	r5, r1
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	2002      	movs	r0, #2
 8000fba:	4798      	blx	r3
 8000fbc:	2807      	cmp	r0, #7
 8000fbe:	d005      	beq.n	8000fcc <__gnu_Unwind_Resume+0x28>
 8000fc0:	2808      	cmp	r0, #8
 8000fc2:	d10f      	bne.n	8000fe4 <__gnu_Unwind_Resume+0x40>
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f7ff ff2a 	bl	8000e20 <unwind_phase2>
 8000fcc:	4630      	mov	r0, r6
 8000fce:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000fd0:	f7ff ff24 	bl	8000e1c <_Unwind_DebugHook>
 8000fd4:	1d28      	adds	r0, r5, #4
 8000fd6:	f000 fb3f 	bl	8001658 <__restore_core_regs>
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f7ff ff3e 	bl	8000e5c <unwind_phase2_forced>
 8000fe0:	f020 fbb8 	bl	8021754 <abort>
 8000fe4:	f020 fbb6 	bl	8021754 <abort>

08000fe8 <__gnu_Unwind_Resume_or_Rethrow>:
 8000fe8:	68c2      	ldr	r2, [r0, #12]
 8000fea:	b11a      	cbz	r2, 8000ff4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000fec:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000fee:	640a      	str	r2, [r1, #64]	; 0x40
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	e733      	b.n	8000e5c <unwind_phase2_forced>
 8000ff4:	e79a      	b.n	8000f2c <__gnu_Unwind_RaiseException>
 8000ff6:	bf00      	nop

08000ff8 <_Unwind_Complete>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <_Unwind_DeleteException>:
 8000ffc:	6883      	ldr	r3, [r0, #8]
 8000ffe:	4601      	mov	r1, r0
 8001000:	b10b      	cbz	r3, 8001006 <_Unwind_DeleteException+0xa>
 8001002:	2001      	movs	r0, #1
 8001004:	4718      	bx	r3
 8001006:	4770      	bx	lr

08001008 <_Unwind_VRS_Get>:
 8001008:	2901      	cmp	r1, #1
 800100a:	d012      	beq.n	8001032 <_Unwind_VRS_Get+0x2a>
 800100c:	d809      	bhi.n	8001022 <_Unwind_VRS_Get+0x1a>
 800100e:	b973      	cbnz	r3, 800102e <_Unwind_VRS_Get+0x26>
 8001010:	2a0f      	cmp	r2, #15
 8001012:	d80c      	bhi.n	800102e <_Unwind_VRS_Get+0x26>
 8001014:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001018:	4618      	mov	r0, r3
 800101a:	6853      	ldr	r3, [r2, #4]
 800101c:	9a00      	ldr	r2, [sp, #0]
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4770      	bx	lr
 8001022:	3903      	subs	r1, #3
 8001024:	2901      	cmp	r1, #1
 8001026:	bf94      	ite	ls
 8001028:	2001      	movls	r0, #1
 800102a:	2002      	movhi	r0, #2
 800102c:	4770      	bx	lr
 800102e:	2002      	movs	r0, #2
 8001030:	4770      	bx	lr
 8001032:	4608      	mov	r0, r1
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <_Unwind_GetGR>:
 8001038:	b500      	push	{lr}
 800103a:	b085      	sub	sp, #20
 800103c:	460a      	mov	r2, r1
 800103e:	2300      	movs	r3, #0
 8001040:	a903      	add	r1, sp, #12
 8001042:	9100      	str	r1, [sp, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff ffdf 	bl	8001008 <_Unwind_VRS_Get>
 800104a:	9803      	ldr	r0, [sp, #12]
 800104c:	b005      	add	sp, #20
 800104e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001052:	bf00      	nop

08001054 <_Unwind_VRS_Set>:
 8001054:	2901      	cmp	r1, #1
 8001056:	d012      	beq.n	800107e <_Unwind_VRS_Set+0x2a>
 8001058:	d809      	bhi.n	800106e <_Unwind_VRS_Set+0x1a>
 800105a:	b973      	cbnz	r3, 800107a <_Unwind_VRS_Set+0x26>
 800105c:	2a0f      	cmp	r2, #15
 800105e:	d80c      	bhi.n	800107a <_Unwind_VRS_Set+0x26>
 8001060:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8001064:	9a00      	ldr	r2, [sp, #0]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	6042      	str	r2, [r0, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	4770      	bx	lr
 800106e:	3903      	subs	r1, #3
 8001070:	2901      	cmp	r1, #1
 8001072:	bf94      	ite	ls
 8001074:	2001      	movls	r0, #1
 8001076:	2002      	movhi	r0, #2
 8001078:	4770      	bx	lr
 800107a:	2002      	movs	r0, #2
 800107c:	4770      	bx	lr
 800107e:	4608      	mov	r0, r1
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <_Unwind_SetGR>:
 8001084:	b510      	push	{r4, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	2300      	movs	r3, #0
 800108a:	ac03      	add	r4, sp, #12
 800108c:	9203      	str	r2, [sp, #12]
 800108e:	9400      	str	r4, [sp, #0]
 8001090:	460a      	mov	r2, r1
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff ffde 	bl	8001054 <_Unwind_VRS_Set>
 8001098:	b004      	add	sp, #16
 800109a:	bd10      	pop	{r4, pc}

0800109c <__gnu_Unwind_Backtrace>:
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	f102 0c04 	add.w	ip, r2, #4
 80010a6:	4605      	mov	r5, r0
 80010a8:	460c      	mov	r4, r1
 80010aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80010ae:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80010b2:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80010b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80010ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80010be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80010c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80010c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80010ca:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80010ce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80010d2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80010d6:	9616      	str	r6, [sp, #88]	; 0x58
 80010d8:	e010      	b.n	80010fc <__gnu_Unwind_Backtrace+0x60>
 80010da:	f7ff ffd3 	bl	8001084 <_Unwind_SetGR>
 80010de:	4621      	mov	r1, r4
 80010e0:	a816      	add	r0, sp, #88	; 0x58
 80010e2:	47a8      	blx	r5
 80010e4:	4603      	mov	r3, r0
 80010e6:	aa16      	add	r2, sp, #88	; 0x58
 80010e8:	4669      	mov	r1, sp
 80010ea:	2008      	movs	r0, #8
 80010ec:	b983      	cbnz	r3, 8001110 <__gnu_Unwind_Backtrace+0x74>
 80010ee:	9b04      	ldr	r3, [sp, #16]
 80010f0:	4798      	blx	r3
 80010f2:	2805      	cmp	r0, #5
 80010f4:	4606      	mov	r6, r0
 80010f6:	d00c      	beq.n	8001112 <__gnu_Unwind_Backtrace+0x76>
 80010f8:	2809      	cmp	r0, #9
 80010fa:	d009      	beq.n	8001110 <__gnu_Unwind_Backtrace+0x74>
 80010fc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80010fe:	4668      	mov	r0, sp
 8001100:	f7ff fe0a 	bl	8000d18 <get_eit_entry>
 8001104:	4603      	mov	r3, r0
 8001106:	466a      	mov	r2, sp
 8001108:	210c      	movs	r1, #12
 800110a:	a816      	add	r0, sp, #88	; 0x58
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0e4      	beq.n	80010da <__gnu_Unwind_Backtrace+0x3e>
 8001110:	2609      	movs	r6, #9
 8001112:	a816      	add	r0, sp, #88	; 0x58
 8001114:	f7ff fe4e 	bl	8000db4 <restore_non_core_regs>
 8001118:	4630      	mov	r0, r6
 800111a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800111e:	bd70      	pop	{r4, r5, r6, pc}

08001120 <__gnu_unwind_pr_common>:
 8001120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001124:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	461e      	mov	r6, r3
 800112a:	f854 3b04 	ldr.w	r3, [r4], #4
 800112e:	9406      	str	r4, [sp, #24]
 8001130:	460d      	mov	r5, r1
 8001132:	4617      	mov	r7, r2
 8001134:	f000 0803 	and.w	r8, r0, #3
 8001138:	2e00      	cmp	r6, #0
 800113a:	d079      	beq.n	8001230 <__gnu_unwind_pr_common+0x110>
 800113c:	0c1a      	lsrs	r2, r3, #16
 800113e:	041b      	lsls	r3, r3, #16
 8001140:	9305      	str	r3, [sp, #20]
 8001142:	f88d 201d 	strb.w	r2, [sp, #29]
 8001146:	2302      	movs	r3, #2
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800114e:	f88d 301c 	strb.w	r3, [sp, #28]
 8001152:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001154:	f1b8 0f02 	cmp.w	r8, #2
 8001158:	bf08      	it	eq
 800115a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800115c:	f013 0301 	ands.w	r3, r3, #1
 8001160:	d00c      	beq.n	800117c <__gnu_unwind_pr_common+0x5c>
 8001162:	a905      	add	r1, sp, #20
 8001164:	4638      	mov	r0, r7
 8001166:	f000 fb79 	bl	800185c <__gnu_unwind_execute>
 800116a:	b918      	cbnz	r0, 8001174 <__gnu_unwind_pr_common+0x54>
 800116c:	2008      	movs	r0, #8
 800116e:	b009      	add	sp, #36	; 0x24
 8001170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001174:	2009      	movs	r0, #9
 8001176:	b009      	add	sp, #36	; 0x24
 8001178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800117c:	f8d4 a000 	ldr.w	sl, [r4]
 8001180:	f1ba 0f00 	cmp.w	sl, #0
 8001184:	d0ed      	beq.n	8001162 <__gnu_unwind_pr_common+0x42>
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	f000 0308 	and.w	r3, r0, #8
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2e02      	cmp	r6, #2
 8001190:	d04a      	beq.n	8001228 <__gnu_unwind_pr_common+0x108>
 8001192:	f8b4 a000 	ldrh.w	sl, [r4]
 8001196:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 800119a:	3404      	adds	r4, #4
 800119c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800119e:	f029 0b01 	bic.w	fp, r9, #1
 80011a2:	210f      	movs	r1, #15
 80011a4:	4638      	mov	r0, r7
 80011a6:	449b      	add	fp, r3
 80011a8:	f7ff ff46 	bl	8001038 <_Unwind_GetGR>
 80011ac:	4583      	cmp	fp, r0
 80011ae:	d839      	bhi.n	8001224 <__gnu_unwind_pr_common+0x104>
 80011b0:	f02a 0301 	bic.w	r3, sl, #1
 80011b4:	449b      	add	fp, r3
 80011b6:	4583      	cmp	fp, r0
 80011b8:	bf94      	ite	ls
 80011ba:	2000      	movls	r0, #0
 80011bc:	2001      	movhi	r0, #1
 80011be:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	f00a 0a01 	and.w	sl, sl, #1
 80011ca:	ea43 030a 	orr.w	r3, r3, sl
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d049      	beq.n	8001266 <__gnu_unwind_pr_common+0x146>
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d032      	beq.n	800123c <__gnu_unwind_pr_common+0x11c>
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1cc      	bne.n	8001174 <__gnu_unwind_pr_common+0x54>
 80011da:	f1b8 0f00 	cmp.w	r8, #0
 80011de:	d002      	beq.n	80011e6 <__gnu_unwind_pr_common+0xc6>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	f040 80cd 	bne.w	8001380 <__gnu_unwind_pr_common+0x260>
 80011e6:	3404      	adds	r4, #4
 80011e8:	f8d4 a000 	ldr.w	sl, [r4]
 80011ec:	f1ba 0f00 	cmp.w	sl, #0
 80011f0:	d1cd      	bne.n	800118e <__gnu_unwind_pr_common+0x6e>
 80011f2:	a905      	add	r1, sp, #20
 80011f4:	4638      	mov	r0, r7
 80011f6:	f000 fb31 	bl	800185c <__gnu_unwind_execute>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d1ba      	bne.n	8001174 <__gnu_unwind_pr_common+0x54>
 80011fe:	9b01      	ldr	r3, [sp, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0b3      	beq.n	800116c <__gnu_unwind_pr_common+0x4c>
 8001204:	210f      	movs	r1, #15
 8001206:	4638      	mov	r0, r7
 8001208:	f7ff ff16 	bl	8001038 <_Unwind_GetGR>
 800120c:	210e      	movs	r1, #14
 800120e:	4602      	mov	r2, r0
 8001210:	4638      	mov	r0, r7
 8001212:	f7ff ff37 	bl	8001084 <_Unwind_SetGR>
 8001216:	4638      	mov	r0, r7
 8001218:	4a6a      	ldr	r2, [pc, #424]	; (80013c4 <__gnu_unwind_pr_common+0x2a4>)
 800121a:	210f      	movs	r1, #15
 800121c:	f7ff ff32 	bl	8001084 <_Unwind_SetGR>
 8001220:	2007      	movs	r0, #7
 8001222:	e7a8      	b.n	8001176 <__gnu_unwind_pr_common+0x56>
 8001224:	2000      	movs	r0, #0
 8001226:	e7ca      	b.n	80011be <__gnu_unwind_pr_common+0x9e>
 8001228:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800122c:	3408      	adds	r4, #8
 800122e:	e7b5      	b.n	800119c <__gnu_unwind_pr_common+0x7c>
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	9305      	str	r3, [sp, #20]
 8001234:	2303      	movs	r3, #3
 8001236:	f8ad 301c 	strh.w	r3, [sp, #28]
 800123a:	e78a      	b.n	8001152 <__gnu_unwind_pr_common+0x32>
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001242:	f1b8 0f00 	cmp.w	r8, #0
 8001246:	d145      	bne.n	80012d4 <__gnu_unwind_pr_common+0x1b4>
 8001248:	b128      	cbz	r0, 8001256 <__gnu_unwind_pr_common+0x136>
 800124a:	9a02      	ldr	r2, [sp, #8]
 800124c:	2a00      	cmp	r2, #0
 800124e:	d05c      	beq.n	800130a <__gnu_unwind_pr_common+0x1ea>
 8001250:	f1bb 0f00 	cmp.w	fp, #0
 8001254:	d074      	beq.n	8001340 <__gnu_unwind_pr_common+0x220>
 8001256:	2b00      	cmp	r3, #0
 8001258:	da00      	bge.n	800125c <__gnu_unwind_pr_common+0x13c>
 800125a:	3404      	adds	r4, #4
 800125c:	f10b 0b01 	add.w	fp, fp, #1
 8001260:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8001264:	e7c0      	b.n	80011e8 <__gnu_unwind_pr_common+0xc8>
 8001266:	f1b8 0f00 	cmp.w	r8, #0
 800126a:	d119      	bne.n	80012a0 <__gnu_unwind_pr_common+0x180>
 800126c:	b1b0      	cbz	r0, 800129c <__gnu_unwind_pr_common+0x17c>
 800126e:	6863      	ldr	r3, [r4, #4]
 8001270:	6822      	ldr	r2, [r4, #0]
 8001272:	1c99      	adds	r1, r3, #2
 8001274:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001278:	f43f af7c 	beq.w	8001174 <__gnu_unwind_pr_common+0x54>
 800127c:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001280:	3301      	adds	r3, #1
 8001282:	9104      	str	r1, [sp, #16]
 8001284:	f000 8090 	beq.w	80013a8 <__gnu_unwind_pr_common+0x288>
 8001288:	1d20      	adds	r0, r4, #4
 800128a:	f7ff fdc1 	bl	8000e10 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800128e:	ab04      	add	r3, sp, #16
 8001290:	4601      	mov	r1, r0
 8001292:	4628      	mov	r0, r5
 8001294:	f01f fd1e 	bl	8020cd4 <__cxa_type_match>
 8001298:	2800      	cmp	r0, #0
 800129a:	d15b      	bne.n	8001354 <__gnu_unwind_pr_common+0x234>
 800129c:	3408      	adds	r4, #8
 800129e:	e7a3      	b.n	80011e8 <__gnu_unwind_pr_common+0xc8>
 80012a0:	210d      	movs	r1, #13
 80012a2:	4638      	mov	r0, r7
 80012a4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80012a8:	f7ff fec6 	bl	8001038 <_Unwind_GetGR>
 80012ac:	4581      	cmp	r9, r0
 80012ae:	d1f5      	bne.n	800129c <__gnu_unwind_pr_common+0x17c>
 80012b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80012b2:	429c      	cmp	r4, r3
 80012b4:	d1f2      	bne.n	800129c <__gnu_unwind_pr_common+0x17c>
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff fce2 	bl	8000c80 <selfrel_offset31>
 80012bc:	210f      	movs	r1, #15
 80012be:	4602      	mov	r2, r0
 80012c0:	4638      	mov	r0, r7
 80012c2:	f7ff fedf 	bl	8001084 <_Unwind_SetGR>
 80012c6:	4638      	mov	r0, r7
 80012c8:	462a      	mov	r2, r5
 80012ca:	2100      	movs	r1, #0
 80012cc:	f7ff feda 	bl	8001084 <_Unwind_SetGR>
 80012d0:	2007      	movs	r0, #7
 80012d2:	e750      	b.n	8001176 <__gnu_unwind_pr_common+0x56>
 80012d4:	210d      	movs	r1, #13
 80012d6:	4638      	mov	r0, r7
 80012d8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80012dc:	f7ff feac 	bl	8001038 <_Unwind_GetGR>
 80012e0:	4581      	cmp	r9, r0
 80012e2:	d001      	beq.n	80012e8 <__gnu_unwind_pr_common+0x1c8>
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	e7b6      	b.n	8001256 <__gnu_unwind_pr_common+0x136>
 80012e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80012ea:	429c      	cmp	r4, r3
 80012ec:	d1fa      	bne.n	80012e4 <__gnu_unwind_pr_common+0x1c4>
 80012ee:	2304      	movs	r3, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80012f6:	18e3      	adds	r3, r4, r3
 80012f8:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80012fc:	636b      	str	r3, [r5, #52]	; 0x34
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db59      	blt.n	80013b8 <__gnu_unwind_pr_common+0x298>
 8001304:	2301      	movs	r3, #1
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	e7a8      	b.n	800125c <__gnu_unwind_pr_common+0x13c>
 800130a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800130e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001312:	f104 0a04 	add.w	sl, r4, #4
 8001316:	46b0      	mov	r8, r6
 8001318:	4691      	mov	r9, r2
 800131a:	461e      	mov	r6, r3
 800131c:	e00e      	b.n	800133c <__gnu_unwind_pr_common+0x21c>
 800131e:	4650      	mov	r0, sl
 8001320:	9604      	str	r6, [sp, #16]
 8001322:	f7ff fd75 	bl	8000e10 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001326:	2200      	movs	r2, #0
 8001328:	4601      	mov	r1, r0
 800132a:	ab04      	add	r3, sp, #16
 800132c:	4628      	mov	r0, r5
 800132e:	f109 0901 	add.w	r9, r9, #1
 8001332:	f10a 0a04 	add.w	sl, sl, #4
 8001336:	f01f fccd 	bl	8020cd4 <__cxa_type_match>
 800133a:	b9e0      	cbnz	r0, 8001376 <__gnu_unwind_pr_common+0x256>
 800133c:	45d9      	cmp	r9, fp
 800133e:	d1ee      	bne.n	800131e <__gnu_unwind_pr_common+0x1fe>
 8001340:	210d      	movs	r1, #13
 8001342:	4638      	mov	r0, r7
 8001344:	f7ff fe78 	bl	8001038 <_Unwind_GetGR>
 8001348:	9b04      	ldr	r3, [sp, #16]
 800134a:	62ac      	str	r4, [r5, #40]	; 0x28
 800134c:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8001350:	2006      	movs	r0, #6
 8001352:	e710      	b.n	8001176 <__gnu_unwind_pr_common+0x56>
 8001354:	4681      	mov	r9, r0
 8001356:	210d      	movs	r1, #13
 8001358:	4638      	mov	r0, r7
 800135a:	f7ff fe6d 	bl	8001038 <_Unwind_GetGR>
 800135e:	f1b9 0f02 	cmp.w	r9, #2
 8001362:	6228      	str	r0, [r5, #32]
 8001364:	d125      	bne.n	80013b2 <__gnu_unwind_pr_common+0x292>
 8001366:	462b      	mov	r3, r5
 8001368:	9a04      	ldr	r2, [sp, #16]
 800136a:	f843 2f2c 	str.w	r2, [r3, #44]!
 800136e:	626b      	str	r3, [r5, #36]	; 0x24
 8001370:	62ac      	str	r4, [r5, #40]	; 0x28
 8001372:	2006      	movs	r0, #6
 8001374:	e6ff      	b.n	8001176 <__gnu_unwind_pr_common+0x56>
 8001376:	4646      	mov	r6, r8
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800137e:	e76a      	b.n	8001256 <__gnu_unwind_pr_common+0x136>
 8001380:	4620      	mov	r0, r4
 8001382:	f7ff fc7d 	bl	8000c80 <selfrel_offset31>
 8001386:	3404      	adds	r4, #4
 8001388:	4602      	mov	r2, r0
 800138a:	63ac      	str	r4, [r5, #56]	; 0x38
 800138c:	4628      	mov	r0, r5
 800138e:	4614      	mov	r4, r2
 8001390:	f01f fcfe 	bl	8020d90 <__cxa_begin_cleanup>
 8001394:	2800      	cmp	r0, #0
 8001396:	f43f aeed 	beq.w	8001174 <__gnu_unwind_pr_common+0x54>
 800139a:	4638      	mov	r0, r7
 800139c:	4622      	mov	r2, r4
 800139e:	210f      	movs	r1, #15
 80013a0:	f7ff fe70 	bl	8001084 <_Unwind_SetGR>
 80013a4:	2007      	movs	r0, #7
 80013a6:	e6e6      	b.n	8001176 <__gnu_unwind_pr_common+0x56>
 80013a8:	210d      	movs	r1, #13
 80013aa:	4638      	mov	r0, r7
 80013ac:	f7ff fe44 	bl	8001038 <_Unwind_GetGR>
 80013b0:	6228      	str	r0, [r5, #32]
 80013b2:	9b04      	ldr	r3, [sp, #16]
 80013b4:	626b      	str	r3, [r5, #36]	; 0x24
 80013b6:	e7db      	b.n	8001370 <__gnu_unwind_pr_common+0x250>
 80013b8:	f10b 0001 	add.w	r0, fp, #1
 80013bc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80013c0:	e77a      	b.n	80012b8 <__gnu_unwind_pr_common+0x198>
 80013c2:	bf00      	nop
 80013c4:	08021685 	.word	0x08021685

080013c8 <__aeabi_unwind_cpp_pr0>:
 80013c8:	2300      	movs	r3, #0
 80013ca:	e6a9      	b.n	8001120 <__gnu_unwind_pr_common>

080013cc <__aeabi_unwind_cpp_pr1>:
 80013cc:	2301      	movs	r3, #1
 80013ce:	e6a7      	b.n	8001120 <__gnu_unwind_pr_common>

080013d0 <__aeabi_unwind_cpp_pr2>:
 80013d0:	2302      	movs	r3, #2
 80013d2:	e6a5      	b.n	8001120 <__gnu_unwind_pr_common>

080013d4 <_Unwind_VRS_Pop>:
 80013d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013d8:	4606      	mov	r6, r0
 80013da:	b0c3      	sub	sp, #268	; 0x10c
 80013dc:	4615      	mov	r5, r2
 80013de:	461c      	mov	r4, r3
 80013e0:	2904      	cmp	r1, #4
 80013e2:	f200 80bf 	bhi.w	8001564 <_Unwind_VRS_Pop+0x190>
 80013e6:	e8df f001 	tbb	[pc, r1]
 80013ea:	579e      	.short	0x579e
 80013ec:	2dbd      	.short	0x2dbd
 80013ee:	03          	.byte	0x03
 80013ef:	00          	.byte	0x00
 80013f0:	2c00      	cmp	r4, #0
 80013f2:	f040 80b7 	bne.w	8001564 <_Unwind_VRS_Pop+0x190>
 80013f6:	2a10      	cmp	r2, #16
 80013f8:	f200 80b4 	bhi.w	8001564 <_Unwind_VRS_Pop+0x190>
 80013fc:	6803      	ldr	r3, [r0, #0]
 80013fe:	06d8      	lsls	r0, r3, #27
 8001400:	f100 80f9 	bmi.w	80015f6 <_Unwind_VRS_Pop+0x222>
 8001404:	af20      	add	r7, sp, #128	; 0x80
 8001406:	4638      	mov	r0, r7
 8001408:	f000 f998 	bl	800173c <__gnu_Unwind_Save_WMMXC>
 800140c:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800140e:	4639      	mov	r1, r7
 8001410:	2300      	movs	r3, #0
 8001412:	f04f 0c01 	mov.w	ip, #1
 8001416:	fa0c f203 	lsl.w	r2, ip, r3
 800141a:	422a      	tst	r2, r5
 800141c:	4620      	mov	r0, r4
 800141e:	f103 0301 	add.w	r3, r3, #1
 8001422:	d003      	beq.n	800142c <_Unwind_VRS_Pop+0x58>
 8001424:	f850 2b04 	ldr.w	r2, [r0], #4
 8001428:	600a      	str	r2, [r1, #0]
 800142a:	4604      	mov	r4, r0
 800142c:	2b04      	cmp	r3, #4
 800142e:	f101 0104 	add.w	r1, r1, #4
 8001432:	d1f0      	bne.n	8001416 <_Unwind_VRS_Pop+0x42>
 8001434:	4638      	mov	r0, r7
 8001436:	63b4      	str	r4, [r6, #56]	; 0x38
 8001438:	f000 f976 	bl	8001728 <__gnu_Unwind_Restore_WMMXC>
 800143c:	2000      	movs	r0, #0
 800143e:	b043      	add	sp, #268	; 0x10c
 8001440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001444:	2c03      	cmp	r4, #3
 8001446:	f040 808d 	bne.w	8001564 <_Unwind_VRS_Pop+0x190>
 800144a:	b294      	uxth	r4, r2
 800144c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001450:	2b10      	cmp	r3, #16
 8001452:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8001456:	f200 8085 	bhi.w	8001564 <_Unwind_VRS_Pop+0x190>
 800145a:	6803      	ldr	r3, [r0, #0]
 800145c:	071f      	lsls	r7, r3, #28
 800145e:	f100 80d2 	bmi.w	8001606 <_Unwind_VRS_Pop+0x232>
 8001462:	af20      	add	r7, sp, #128	; 0x80
 8001464:	4638      	mov	r0, r7
 8001466:	f000 f93d 	bl	80016e4 <__gnu_Unwind_Save_WMMXD>
 800146a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800146c:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8001470:	b154      	cbz	r4, 8001488 <_Unwind_VRS_Pop+0xb4>
 8001472:	460b      	mov	r3, r1
 8001474:	1ad0      	subs	r0, r2, r3
 8001476:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800147a:	00e4      	lsls	r4, r4, #3
 800147c:	581d      	ldr	r5, [r3, r0]
 800147e:	f843 5b04 	str.w	r5, [r3], #4
 8001482:	428b      	cmp	r3, r1
 8001484:	d1fa      	bne.n	800147c <_Unwind_VRS_Pop+0xa8>
 8001486:	4422      	add	r2, r4
 8001488:	4638      	mov	r0, r7
 800148a:	63b2      	str	r2, [r6, #56]	; 0x38
 800148c:	f000 f908 	bl	80016a0 <__gnu_Unwind_Restore_WMMXD>
 8001490:	2000      	movs	r0, #0
 8001492:	b043      	add	sp, #268	; 0x10c
 8001494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001498:	2c01      	cmp	r4, #1
 800149a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800149e:	b295      	uxth	r5, r2
 80014a0:	d05c      	beq.n	800155c <_Unwind_VRS_Pop+0x188>
 80014a2:	2c05      	cmp	r4, #5
 80014a4:	d15e      	bne.n	8001564 <_Unwind_VRS_Pop+0x190>
 80014a6:	eb08 0905 	add.w	r9, r8, r5
 80014aa:	f1b9 0f20 	cmp.w	r9, #32
 80014ae:	d859      	bhi.n	8001564 <_Unwind_VRS_Pop+0x190>
 80014b0:	f1b8 0f0f 	cmp.w	r8, #15
 80014b4:	d979      	bls.n	80015aa <_Unwind_VRS_Pop+0x1d6>
 80014b6:	46a9      	mov	r9, r5
 80014b8:	2d00      	cmp	r5, #0
 80014ba:	f040 808a 	bne.w	80015d2 <_Unwind_VRS_Pop+0x1fe>
 80014be:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80014c0:	b36d      	cbz	r5, 800151e <_Unwind_VRS_Pop+0x14a>
 80014c2:	af20      	add	r7, sp, #128	; 0x80
 80014c4:	f04f 0900 	mov.w	r9, #0
 80014c8:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80014cc:	3f04      	subs	r7, #4
 80014ce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80014d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80014d6:	f847 1f04 	str.w	r1, [r7, #4]!
 80014da:	42ab      	cmp	r3, r5
 80014dc:	d1f9      	bne.n	80014d2 <_Unwind_VRS_Pop+0xfe>
 80014de:	f1b9 0f00 	cmp.w	r9, #0
 80014e2:	d00f      	beq.n	8001504 <_Unwind_VRS_Pop+0x130>
 80014e4:	466f      	mov	r7, sp
 80014e6:	4641      	mov	r1, r8
 80014e8:	2910      	cmp	r1, #16
 80014ea:	bf38      	it	cc
 80014ec:	2110      	movcc	r1, #16
 80014ee:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80014f2:	3984      	subs	r1, #132	; 0x84
 80014f4:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 80014f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80014fc:	f841 0f04 	str.w	r0, [r1, #4]!
 8001500:	42ab      	cmp	r3, r5
 8001502:	d1f9      	bne.n	80014f8 <_Unwind_VRS_Pop+0x124>
 8001504:	2c01      	cmp	r4, #1
 8001506:	f000 8086 	beq.w	8001616 <_Unwind_VRS_Pop+0x242>
 800150a:	f1b8 0f0f 	cmp.w	r8, #15
 800150e:	63b5      	str	r5, [r6, #56]	; 0x38
 8001510:	d947      	bls.n	80015a2 <_Unwind_VRS_Pop+0x1ce>
 8001512:	f1b9 0f00 	cmp.w	r9, #0
 8001516:	d002      	beq.n	800151e <_Unwind_VRS_Pop+0x14a>
 8001518:	4668      	mov	r0, sp
 800151a:	f000 f8b9 	bl	8001690 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800151e:	2000      	movs	r0, #0
 8001520:	b043      	add	sp, #268	; 0x10c
 8001522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001526:	b9ec      	cbnz	r4, 8001564 <_Unwind_VRS_Pop+0x190>
 8001528:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800152a:	4623      	mov	r3, r4
 800152c:	fa1f fc82 	uxth.w	ip, r2
 8001530:	2401      	movs	r4, #1
 8001532:	1d37      	adds	r7, r6, #4
 8001534:	fa04 f203 	lsl.w	r2, r4, r3
 8001538:	ea12 0f0c 	tst.w	r2, ip
 800153c:	4601      	mov	r1, r0
 800153e:	d004      	beq.n	800154a <_Unwind_VRS_Pop+0x176>
 8001540:	f851 2b04 	ldr.w	r2, [r1], #4
 8001544:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8001548:	4608      	mov	r0, r1
 800154a:	3301      	adds	r3, #1
 800154c:	2b10      	cmp	r3, #16
 800154e:	d1f1      	bne.n	8001534 <_Unwind_VRS_Pop+0x160>
 8001550:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 8001554:	d1e3      	bne.n	800151e <_Unwind_VRS_Pop+0x14a>
 8001556:	63b0      	str	r0, [r6, #56]	; 0x38
 8001558:	4628      	mov	r0, r5
 800155a:	e004      	b.n	8001566 <_Unwind_VRS_Pop+0x192>
 800155c:	eb08 0305 	add.w	r3, r8, r5
 8001560:	2b10      	cmp	r3, #16
 8001562:	d903      	bls.n	800156c <_Unwind_VRS_Pop+0x198>
 8001564:	2002      	movs	r0, #2
 8001566:	b043      	add	sp, #268	; 0x10c
 8001568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800156c:	f1b8 0f0f 	cmp.w	r8, #15
 8001570:	d8f8      	bhi.n	8001564 <_Unwind_VRS_Pop+0x190>
 8001572:	6833      	ldr	r3, [r6, #0]
 8001574:	07da      	lsls	r2, r3, #31
 8001576:	d506      	bpl.n	8001586 <_Unwind_VRS_Pop+0x1b2>
 8001578:	4630      	mov	r0, r6
 800157a:	f023 0303 	bic.w	r3, r3, #3
 800157e:	f840 3b48 	str.w	r3, [r0], #72
 8001582:	f000 f879 	bl	8001678 <__gnu_Unwind_Save_VFP>
 8001586:	af20      	add	r7, sp, #128	; 0x80
 8001588:	4638      	mov	r0, r7
 800158a:	f000 f875 	bl	8001678 <__gnu_Unwind_Save_VFP>
 800158e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001590:	2d00      	cmp	r5, #0
 8001592:	d197      	bne.n	80014c4 <_Unwind_VRS_Pop+0xf0>
 8001594:	461d      	mov	r5, r3
 8001596:	3504      	adds	r5, #4
 8001598:	63b5      	str	r5, [r6, #56]	; 0x38
 800159a:	4638      	mov	r0, r7
 800159c:	f000 f868 	bl	8001670 <__gnu_Unwind_Restore_VFP>
 80015a0:	e7bd      	b.n	800151e <_Unwind_VRS_Pop+0x14a>
 80015a2:	a820      	add	r0, sp, #128	; 0x80
 80015a4:	f000 f86c 	bl	8001680 <__gnu_Unwind_Restore_VFP_D>
 80015a8:	e7b3      	b.n	8001512 <_Unwind_VRS_Pop+0x13e>
 80015aa:	f1b9 0f10 	cmp.w	r9, #16
 80015ae:	d940      	bls.n	8001632 <_Unwind_VRS_Pop+0x25e>
 80015b0:	f1a9 0910 	sub.w	r9, r9, #16
 80015b4:	6833      	ldr	r3, [r6, #0]
 80015b6:	07d9      	lsls	r1, r3, #31
 80015b8:	d508      	bpl.n	80015cc <_Unwind_VRS_Pop+0x1f8>
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	4630      	mov	r0, r6
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	f840 3b48 	str.w	r3, [r0], #72
 80015c8:	f000 f85e 	bl	8001688 <__gnu_Unwind_Save_VFP_D>
 80015cc:	f1b9 0f00 	cmp.w	r9, #0
 80015d0:	d032      	beq.n	8001638 <_Unwind_VRS_Pop+0x264>
 80015d2:	6833      	ldr	r3, [r6, #0]
 80015d4:	075a      	lsls	r2, r3, #29
 80015d6:	d420      	bmi.n	800161a <_Unwind_VRS_Pop+0x246>
 80015d8:	f1b8 0f0f 	cmp.w	r8, #15
 80015dc:	d925      	bls.n	800162a <_Unwind_VRS_Pop+0x256>
 80015de:	466f      	mov	r7, sp
 80015e0:	4638      	mov	r0, r7
 80015e2:	f1c8 0510 	rsb	r5, r8, #16
 80015e6:	f000 f857 	bl	8001698 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80015ea:	2d00      	cmp	r5, #0
 80015ec:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80015ee:	f77f af7a 	ble.w	80014e6 <_Unwind_VRS_Pop+0x112>
 80015f2:	af20      	add	r7, sp, #128	; 0x80
 80015f4:	e768      	b.n	80014c8 <_Unwind_VRS_Pop+0xf4>
 80015f6:	f023 0310 	bic.w	r3, r3, #16
 80015fa:	6033      	str	r3, [r6, #0]
 80015fc:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001600:	f000 f89c 	bl	800173c <__gnu_Unwind_Save_WMMXC>
 8001604:	e6fe      	b.n	8001404 <_Unwind_VRS_Pop+0x30>
 8001606:	f023 0308 	bic.w	r3, r3, #8
 800160a:	6003      	str	r3, [r0, #0]
 800160c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001610:	f000 f868 	bl	80016e4 <__gnu_Unwind_Save_WMMXD>
 8001614:	e725      	b.n	8001462 <_Unwind_VRS_Pop+0x8e>
 8001616:	af20      	add	r7, sp, #128	; 0x80
 8001618:	e7bd      	b.n	8001596 <_Unwind_VRS_Pop+0x1c2>
 800161a:	4630      	mov	r0, r6
 800161c:	f023 0304 	bic.w	r3, r3, #4
 8001620:	f840 3bd0 	str.w	r3, [r0], #208
 8001624:	f000 f838 	bl	8001698 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001628:	e7d6      	b.n	80015d8 <_Unwind_VRS_Pop+0x204>
 800162a:	a820      	add	r0, sp, #128	; 0x80
 800162c:	f000 f82c 	bl	8001688 <__gnu_Unwind_Save_VFP_D>
 8001630:	e7d5      	b.n	80015de <_Unwind_VRS_Pop+0x20a>
 8001632:	f04f 0900 	mov.w	r9, #0
 8001636:	e7bd      	b.n	80015b4 <_Unwind_VRS_Pop+0x1e0>
 8001638:	f1b8 0f0f 	cmp.w	r8, #15
 800163c:	f63f af3f 	bhi.w	80014be <_Unwind_VRS_Pop+0xea>
 8001640:	af20      	add	r7, sp, #128	; 0x80
 8001642:	4638      	mov	r0, r7
 8001644:	f000 f820 	bl	8001688 <__gnu_Unwind_Save_VFP_D>
 8001648:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800164a:	2d00      	cmp	r5, #0
 800164c:	f47f af3a 	bne.w	80014c4 <_Unwind_VRS_Pop+0xf0>
 8001650:	4638      	mov	r0, r7
 8001652:	f000 f815 	bl	8001680 <__gnu_Unwind_Restore_VFP_D>
 8001656:	e762      	b.n	800151e <_Unwind_VRS_Pop+0x14a>

08001658 <__restore_core_regs>:
 8001658:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800165c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001660:	469c      	mov	ip, r3
 8001662:	46a6      	mov	lr, r4
 8001664:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001668:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800166c:	46e5      	mov	sp, ip
 800166e:	bd00      	pop	{pc}

08001670 <__gnu_Unwind_Restore_VFP>:
 8001670:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop

08001678 <__gnu_Unwind_Save_VFP>:
 8001678:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop

08001680 <__gnu_Unwind_Restore_VFP_D>:
 8001680:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop

08001688 <__gnu_Unwind_Save_VFP_D>:
 8001688:	ec80 0b20 	vstmia	r0, {d0-d15}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop

08001690 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001690:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop

08001698 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001698:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop

080016a0 <__gnu_Unwind_Restore_WMMXD>:
 80016a0:	ecf0 0102 	ldfe	f0, [r0], #8
 80016a4:	ecf0 1102 	ldfe	f1, [r0], #8
 80016a8:	ecf0 2102 	ldfe	f2, [r0], #8
 80016ac:	ecf0 3102 	ldfe	f3, [r0], #8
 80016b0:	ecf0 4102 	ldfe	f4, [r0], #8
 80016b4:	ecf0 5102 	ldfe	f5, [r0], #8
 80016b8:	ecf0 6102 	ldfe	f6, [r0], #8
 80016bc:	ecf0 7102 	ldfe	f7, [r0], #8
 80016c0:	ecf0 8102 	ldfp	f0, [r0], #8
 80016c4:	ecf0 9102 	ldfp	f1, [r0], #8
 80016c8:	ecf0 a102 	ldfp	f2, [r0], #8
 80016cc:	ecf0 b102 	ldfp	f3, [r0], #8
 80016d0:	ecf0 c102 	ldfp	f4, [r0], #8
 80016d4:	ecf0 d102 	ldfp	f5, [r0], #8
 80016d8:	ecf0 e102 	ldfp	f6, [r0], #8
 80016dc:	ecf0 f102 	ldfp	f7, [r0], #8
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop

080016e4 <__gnu_Unwind_Save_WMMXD>:
 80016e4:	ece0 0102 	stfe	f0, [r0], #8
 80016e8:	ece0 1102 	stfe	f1, [r0], #8
 80016ec:	ece0 2102 	stfe	f2, [r0], #8
 80016f0:	ece0 3102 	stfe	f3, [r0], #8
 80016f4:	ece0 4102 	stfe	f4, [r0], #8
 80016f8:	ece0 5102 	stfe	f5, [r0], #8
 80016fc:	ece0 6102 	stfe	f6, [r0], #8
 8001700:	ece0 7102 	stfe	f7, [r0], #8
 8001704:	ece0 8102 	stfp	f0, [r0], #8
 8001708:	ece0 9102 	stfp	f1, [r0], #8
 800170c:	ece0 a102 	stfp	f2, [r0], #8
 8001710:	ece0 b102 	stfp	f3, [r0], #8
 8001714:	ece0 c102 	stfp	f4, [r0], #8
 8001718:	ece0 d102 	stfp	f5, [r0], #8
 800171c:	ece0 e102 	stfp	f6, [r0], #8
 8001720:	ece0 f102 	stfp	f7, [r0], #8
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop

08001728 <__gnu_Unwind_Restore_WMMXC>:
 8001728:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800172c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001730:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001734:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop

0800173c <__gnu_Unwind_Save_WMMXC>:
 800173c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001740:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001744:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001748:	fca0 b101 	stc2	1, cr11, [r0], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <_Unwind_RaiseException>:
 8001750:	46ec      	mov	ip, sp
 8001752:	b500      	push	{lr}
 8001754:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001758:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001764:	a901      	add	r1, sp, #4
 8001766:	f7ff fbe1 	bl	8000f2c <__gnu_Unwind_RaiseException>
 800176a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800176e:	b012      	add	sp, #72	; 0x48
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <_Unwind_Resume>:
 8001774:	46ec      	mov	ip, sp
 8001776:	b500      	push	{lr}
 8001778:	e92d 5000 	stmdb	sp!, {ip, lr}
 800177c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001788:	a901      	add	r1, sp, #4
 800178a:	f7ff fc0b 	bl	8000fa4 <__gnu_Unwind_Resume>
 800178e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001792:	b012      	add	sp, #72	; 0x48
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop

08001798 <_Unwind_Resume_or_Rethrow>:
 8001798:	46ec      	mov	ip, sp
 800179a:	b500      	push	{lr}
 800179c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80017a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80017ac:	a901      	add	r1, sp, #4
 80017ae:	f7ff fc1b 	bl	8000fe8 <__gnu_Unwind_Resume_or_Rethrow>
 80017b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80017b6:	b012      	add	sp, #72	; 0x48
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <_Unwind_ForcedUnwind>:
 80017bc:	46ec      	mov	ip, sp
 80017be:	b500      	push	{lr}
 80017c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80017c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80017d0:	ab01      	add	r3, sp, #4
 80017d2:	f7ff fbdf 	bl	8000f94 <__gnu_Unwind_ForcedUnwind>
 80017d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80017da:	b012      	add	sp, #72	; 0x48
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop

080017e0 <_Unwind_Backtrace>:
 80017e0:	46ec      	mov	ip, sp
 80017e2:	b500      	push	{lr}
 80017e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80017e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80017f4:	aa01      	add	r2, sp, #4
 80017f6:	f7ff fc51 	bl	800109c <__gnu_Unwind_Backtrace>
 80017fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80017fe:	b012      	add	sp, #72	; 0x48
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <next_unwind_byte>:
 8001804:	7a02      	ldrb	r2, [r0, #8]
 8001806:	4603      	mov	r3, r0
 8001808:	b97a      	cbnz	r2, 800182a <next_unwind_byte+0x26>
 800180a:	7a42      	ldrb	r2, [r0, #9]
 800180c:	b1a2      	cbz	r2, 8001838 <next_unwind_byte+0x34>
 800180e:	6841      	ldr	r1, [r0, #4]
 8001810:	3a01      	subs	r2, #1
 8001812:	b410      	push	{r4}
 8001814:	7242      	strb	r2, [r0, #9]
 8001816:	6808      	ldr	r0, [r1, #0]
 8001818:	2203      	movs	r2, #3
 800181a:	1d0c      	adds	r4, r1, #4
 800181c:	721a      	strb	r2, [r3, #8]
 800181e:	0202      	lsls	r2, r0, #8
 8001820:	605c      	str	r4, [r3, #4]
 8001822:	0e00      	lsrs	r0, r0, #24
 8001824:	bc10      	pop	{r4}
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	4770      	bx	lr
 800182a:	6800      	ldr	r0, [r0, #0]
 800182c:	3a01      	subs	r2, #1
 800182e:	721a      	strb	r2, [r3, #8]
 8001830:	0202      	lsls	r2, r0, #8
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	0e00      	lsrs	r0, r0, #24
 8001836:	4770      	bx	lr
 8001838:	20b0      	movs	r0, #176	; 0xb0
 800183a:	4770      	bx	lr

0800183c <_Unwind_GetGR.constprop.0>:
 800183c:	b500      	push	{lr}
 800183e:	b085      	sub	sp, #20
 8001840:	2300      	movs	r3, #0
 8001842:	aa03      	add	r2, sp, #12
 8001844:	9200      	str	r2, [sp, #0]
 8001846:	4619      	mov	r1, r3
 8001848:	220c      	movs	r2, #12
 800184a:	f7ff fbdd 	bl	8001008 <_Unwind_VRS_Get>
 800184e:	9803      	ldr	r0, [sp, #12]
 8001850:	b005      	add	sp, #20
 8001852:	f85d fb04 	ldr.w	pc, [sp], #4
 8001856:	bf00      	nop

08001858 <unwind_UCB_from_context>:
 8001858:	e7f0      	b.n	800183c <_Unwind_GetGR.constprop.0>
 800185a:	bf00      	nop

0800185c <__gnu_unwind_execute>:
 800185c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001860:	4605      	mov	r5, r0
 8001862:	b085      	sub	sp, #20
 8001864:	460e      	mov	r6, r1
 8001866:	f04f 0800 	mov.w	r8, #0
 800186a:	4630      	mov	r0, r6
 800186c:	f7ff ffca 	bl	8001804 <next_unwind_byte>
 8001870:	28b0      	cmp	r0, #176	; 0xb0
 8001872:	4604      	mov	r4, r0
 8001874:	f000 80ba 	beq.w	80019ec <__gnu_unwind_execute+0x190>
 8001878:	0607      	lsls	r7, r0, #24
 800187a:	d520      	bpl.n	80018be <__gnu_unwind_execute+0x62>
 800187c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001880:	2b80      	cmp	r3, #128	; 0x80
 8001882:	d04d      	beq.n	8001920 <__gnu_unwind_execute+0xc4>
 8001884:	2b90      	cmp	r3, #144	; 0x90
 8001886:	d036      	beq.n	80018f6 <__gnu_unwind_execute+0x9a>
 8001888:	2ba0      	cmp	r3, #160	; 0xa0
 800188a:	d060      	beq.n	800194e <__gnu_unwind_execute+0xf2>
 800188c:	2bb0      	cmp	r3, #176	; 0xb0
 800188e:	d074      	beq.n	800197a <__gnu_unwind_execute+0x11e>
 8001890:	2bc0      	cmp	r3, #192	; 0xc0
 8001892:	f000 808b 	beq.w	80019ac <__gnu_unwind_execute+0x150>
 8001896:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800189a:	2bd0      	cmp	r3, #208	; 0xd0
 800189c:	d10b      	bne.n	80018b6 <__gnu_unwind_execute+0x5a>
 800189e:	f000 0207 	and.w	r2, r0, #7
 80018a2:	3201      	adds	r2, #1
 80018a4:	2305      	movs	r3, #5
 80018a6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018aa:	2101      	movs	r1, #1
 80018ac:	4628      	mov	r0, r5
 80018ae:	f7ff fd91 	bl	80013d4 <_Unwind_VRS_Pop>
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d0d9      	beq.n	800186a <__gnu_unwind_execute+0xe>
 80018b6:	2009      	movs	r0, #9
 80018b8:	b005      	add	sp, #20
 80018ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018be:	0083      	lsls	r3, r0, #2
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	1d1f      	adds	r7, r3, #4
 80018c4:	f10d 090c 	add.w	r9, sp, #12
 80018c8:	2300      	movs	r3, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	f8cd 9000 	str.w	r9, [sp]
 80018d0:	220d      	movs	r2, #13
 80018d2:	4628      	mov	r0, r5
 80018d4:	f7ff fb98 	bl	8001008 <_Unwind_VRS_Get>
 80018d8:	9b03      	ldr	r3, [sp, #12]
 80018da:	f8cd 9000 	str.w	r9, [sp]
 80018de:	0660      	lsls	r0, r4, #25
 80018e0:	bf4c      	ite	mi
 80018e2:	1bdf      	submi	r7, r3, r7
 80018e4:	18ff      	addpl	r7, r7, r3
 80018e6:	2300      	movs	r3, #0
 80018e8:	220d      	movs	r2, #13
 80018ea:	4619      	mov	r1, r3
 80018ec:	4628      	mov	r0, r5
 80018ee:	9703      	str	r7, [sp, #12]
 80018f0:	f7ff fbb0 	bl	8001054 <_Unwind_VRS_Set>
 80018f4:	e7b9      	b.n	800186a <__gnu_unwind_execute+0xe>
 80018f6:	f000 030d 	and.w	r3, r0, #13
 80018fa:	2b0d      	cmp	r3, #13
 80018fc:	d0db      	beq.n	80018b6 <__gnu_unwind_execute+0x5a>
 80018fe:	af03      	add	r7, sp, #12
 8001900:	2300      	movs	r3, #0
 8001902:	f000 020f 	and.w	r2, r0, #15
 8001906:	4619      	mov	r1, r3
 8001908:	9700      	str	r7, [sp, #0]
 800190a:	4628      	mov	r0, r5
 800190c:	f7ff fb7c 	bl	8001008 <_Unwind_VRS_Get>
 8001910:	2300      	movs	r3, #0
 8001912:	9700      	str	r7, [sp, #0]
 8001914:	220d      	movs	r2, #13
 8001916:	4619      	mov	r1, r3
 8001918:	4628      	mov	r0, r5
 800191a:	f7ff fb9b 	bl	8001054 <_Unwind_VRS_Set>
 800191e:	e7a4      	b.n	800186a <__gnu_unwind_execute+0xe>
 8001920:	4630      	mov	r0, r6
 8001922:	f7ff ff6f 	bl	8001804 <next_unwind_byte>
 8001926:	0224      	lsls	r4, r4, #8
 8001928:	4320      	orrs	r0, r4
 800192a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800192e:	d0c2      	beq.n	80018b6 <__gnu_unwind_execute+0x5a>
 8001930:	0104      	lsls	r4, r0, #4
 8001932:	2300      	movs	r3, #0
 8001934:	b2a2      	uxth	r2, r4
 8001936:	4619      	mov	r1, r3
 8001938:	4628      	mov	r0, r5
 800193a:	f7ff fd4b 	bl	80013d4 <_Unwind_VRS_Pop>
 800193e:	2800      	cmp	r0, #0
 8001940:	d1b9      	bne.n	80018b6 <__gnu_unwind_execute+0x5a>
 8001942:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001946:	bf18      	it	ne
 8001948:	f04f 0801 	movne.w	r8, #1
 800194c:	e78d      	b.n	800186a <__gnu_unwind_execute+0xe>
 800194e:	43c2      	mvns	r2, r0
 8001950:	f002 0307 	and.w	r3, r2, #7
 8001954:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001958:	411a      	asrs	r2, r3
 800195a:	0701      	lsls	r1, r0, #28
 800195c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	bf48      	it	mi
 8001966:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800196a:	4619      	mov	r1, r3
 800196c:	4628      	mov	r0, r5
 800196e:	f7ff fd31 	bl	80013d4 <_Unwind_VRS_Pop>
 8001972:	2800      	cmp	r0, #0
 8001974:	f43f af79 	beq.w	800186a <__gnu_unwind_execute+0xe>
 8001978:	e79d      	b.n	80018b6 <__gnu_unwind_execute+0x5a>
 800197a:	28b1      	cmp	r0, #177	; 0xb1
 800197c:	d03b      	beq.n	80019f6 <__gnu_unwind_execute+0x19a>
 800197e:	28b2      	cmp	r0, #178	; 0xb2
 8001980:	f000 8093 	beq.w	8001aaa <__gnu_unwind_execute+0x24e>
 8001984:	28b3      	cmp	r0, #179	; 0xb3
 8001986:	d041      	beq.n	8001a0c <__gnu_unwind_execute+0x1b0>
 8001988:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800198c:	2bb4      	cmp	r3, #180	; 0xb4
 800198e:	d092      	beq.n	80018b6 <__gnu_unwind_execute+0x5a>
 8001990:	f000 0207 	and.w	r2, r0, #7
 8001994:	3201      	adds	r2, #1
 8001996:	2301      	movs	r3, #1
 8001998:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800199c:	4619      	mov	r1, r3
 800199e:	4628      	mov	r0, r5
 80019a0:	f7ff fd18 	bl	80013d4 <_Unwind_VRS_Pop>
 80019a4:	2800      	cmp	r0, #0
 80019a6:	f43f af60 	beq.w	800186a <__gnu_unwind_execute+0xe>
 80019aa:	e784      	b.n	80018b6 <__gnu_unwind_execute+0x5a>
 80019ac:	28c6      	cmp	r0, #198	; 0xc6
 80019ae:	d04a      	beq.n	8001a46 <__gnu_unwind_execute+0x1ea>
 80019b0:	28c7      	cmp	r0, #199	; 0xc7
 80019b2:	d054      	beq.n	8001a5e <__gnu_unwind_execute+0x202>
 80019b4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80019b8:	2bc0      	cmp	r3, #192	; 0xc0
 80019ba:	d063      	beq.n	8001a84 <__gnu_unwind_execute+0x228>
 80019bc:	28c8      	cmp	r0, #200	; 0xc8
 80019be:	d068      	beq.n	8001a92 <__gnu_unwind_execute+0x236>
 80019c0:	28c9      	cmp	r0, #201	; 0xc9
 80019c2:	f47f af78 	bne.w	80018b6 <__gnu_unwind_execute+0x5a>
 80019c6:	4630      	mov	r0, r6
 80019c8:	f7ff ff1c 	bl	8001804 <next_unwind_byte>
 80019cc:	0302      	lsls	r2, r0, #12
 80019ce:	f000 000f 	and.w	r0, r0, #15
 80019d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80019d6:	3001      	adds	r0, #1
 80019d8:	4302      	orrs	r2, r0
 80019da:	2101      	movs	r1, #1
 80019dc:	2305      	movs	r3, #5
 80019de:	4628      	mov	r0, r5
 80019e0:	f7ff fcf8 	bl	80013d4 <_Unwind_VRS_Pop>
 80019e4:	2800      	cmp	r0, #0
 80019e6:	f43f af40 	beq.w	800186a <__gnu_unwind_execute+0xe>
 80019ea:	e764      	b.n	80018b6 <__gnu_unwind_execute+0x5a>
 80019ec:	f1b8 0f00 	cmp.w	r8, #0
 80019f0:	d018      	beq.n	8001a24 <__gnu_unwind_execute+0x1c8>
 80019f2:	2000      	movs	r0, #0
 80019f4:	e760      	b.n	80018b8 <__gnu_unwind_execute+0x5c>
 80019f6:	4630      	mov	r0, r6
 80019f8:	f7ff ff04 	bl	8001804 <next_unwind_byte>
 80019fc:	4602      	mov	r2, r0
 80019fe:	2800      	cmp	r0, #0
 8001a00:	f43f af59 	beq.w	80018b6 <__gnu_unwind_execute+0x5a>
 8001a04:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001a08:	d0c8      	beq.n	800199c <__gnu_unwind_execute+0x140>
 8001a0a:	e754      	b.n	80018b6 <__gnu_unwind_execute+0x5a>
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	f7ff fef9 	bl	8001804 <next_unwind_byte>
 8001a12:	0302      	lsls	r2, r0, #12
 8001a14:	f000 030f 	and.w	r3, r0, #15
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	2301      	movs	r3, #1
 8001a22:	e7bb      	b.n	800199c <__gnu_unwind_execute+0x140>
 8001a24:	ac03      	add	r4, sp, #12
 8001a26:	4643      	mov	r3, r8
 8001a28:	220e      	movs	r2, #14
 8001a2a:	4641      	mov	r1, r8
 8001a2c:	9400      	str	r4, [sp, #0]
 8001a2e:	4628      	mov	r0, r5
 8001a30:	f7ff faea 	bl	8001008 <_Unwind_VRS_Get>
 8001a34:	9400      	str	r4, [sp, #0]
 8001a36:	4643      	mov	r3, r8
 8001a38:	220f      	movs	r2, #15
 8001a3a:	4641      	mov	r1, r8
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	f7ff fb09 	bl	8001054 <_Unwind_VRS_Set>
 8001a42:	4640      	mov	r0, r8
 8001a44:	e738      	b.n	80018b8 <__gnu_unwind_execute+0x5c>
 8001a46:	4630      	mov	r0, r6
 8001a48:	f7ff fedc 	bl	8001804 <next_unwind_byte>
 8001a4c:	0302      	lsls	r2, r0, #12
 8001a4e:	f000 030f 	and.w	r3, r0, #15
 8001a52:	3301      	adds	r3, #1
 8001a54:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e79e      	b.n	800199c <__gnu_unwind_execute+0x140>
 8001a5e:	4630      	mov	r0, r6
 8001a60:	f7ff fed0 	bl	8001804 <next_unwind_byte>
 8001a64:	4602      	mov	r2, r0
 8001a66:	2800      	cmp	r0, #0
 8001a68:	f43f af25 	beq.w	80018b6 <__gnu_unwind_execute+0x5a>
 8001a6c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001a70:	f47f af21 	bne.w	80018b6 <__gnu_unwind_execute+0x5a>
 8001a74:	2104      	movs	r1, #4
 8001a76:	4628      	mov	r0, r5
 8001a78:	f7ff fcac 	bl	80013d4 <_Unwind_VRS_Pop>
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	f43f aef4 	beq.w	800186a <__gnu_unwind_execute+0xe>
 8001a82:	e718      	b.n	80018b6 <__gnu_unwind_execute+0x5a>
 8001a84:	f000 020f 	and.w	r2, r0, #15
 8001a88:	3201      	adds	r2, #1
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001a90:	e784      	b.n	800199c <__gnu_unwind_execute+0x140>
 8001a92:	4630      	mov	r0, r6
 8001a94:	f7ff feb6 	bl	8001804 <next_unwind_byte>
 8001a98:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001a9c:	f000 030f 	and.w	r3, r0, #15
 8001aa0:	3210      	adds	r2, #16
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001aa8:	e797      	b.n	80019da <__gnu_unwind_execute+0x17e>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f10d 090c 	add.w	r9, sp, #12
 8001ab0:	220d      	movs	r2, #13
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f8cd 9000 	str.w	r9, [sp]
 8001ab8:	4628      	mov	r0, r5
 8001aba:	f7ff faa5 	bl	8001008 <_Unwind_VRS_Get>
 8001abe:	4630      	mov	r0, r6
 8001ac0:	f7ff fea0 	bl	8001804 <next_unwind_byte>
 8001ac4:	0602      	lsls	r2, r0, #24
 8001ac6:	f04f 0402 	mov.w	r4, #2
 8001aca:	d50c      	bpl.n	8001ae6 <__gnu_unwind_execute+0x28a>
 8001acc:	9b03      	ldr	r3, [sp, #12]
 8001ace:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001ad2:	40a0      	lsls	r0, r4
 8001ad4:	4418      	add	r0, r3
 8001ad6:	9003      	str	r0, [sp, #12]
 8001ad8:	4630      	mov	r0, r6
 8001ada:	f7ff fe93 	bl	8001804 <next_unwind_byte>
 8001ade:	0603      	lsls	r3, r0, #24
 8001ae0:	f104 0407 	add.w	r4, r4, #7
 8001ae4:	d4f2      	bmi.n	8001acc <__gnu_unwind_execute+0x270>
 8001ae6:	9b03      	ldr	r3, [sp, #12]
 8001ae8:	f8cd 9000 	str.w	r9, [sp]
 8001aec:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001af0:	40a2      	lsls	r2, r4
 8001af2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001af6:	441a      	add	r2, r3
 8001af8:	2300      	movs	r3, #0
 8001afa:	9203      	str	r2, [sp, #12]
 8001afc:	4619      	mov	r1, r3
 8001afe:	220d      	movs	r2, #13
 8001b00:	4628      	mov	r0, r5
 8001b02:	f7ff faa7 	bl	8001054 <_Unwind_VRS_Set>
 8001b06:	e6b0      	b.n	800186a <__gnu_unwind_execute+0xe>

08001b08 <__gnu_unwind_frame>:
 8001b08:	b510      	push	{r4, lr}
 8001b0a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001b0c:	6853      	ldr	r3, [r2, #4]
 8001b0e:	b084      	sub	sp, #16
 8001b10:	f04f 0c03 	mov.w	ip, #3
 8001b14:	3208      	adds	r2, #8
 8001b16:	021c      	lsls	r4, r3, #8
 8001b18:	4608      	mov	r0, r1
 8001b1a:	0e1b      	lsrs	r3, r3, #24
 8001b1c:	a901      	add	r1, sp, #4
 8001b1e:	9401      	str	r4, [sp, #4]
 8001b20:	9202      	str	r2, [sp, #8]
 8001b22:	f88d c00c 	strb.w	ip, [sp, #12]
 8001b26:	f88d 300d 	strb.w	r3, [sp, #13]
 8001b2a:	f7ff fe97 	bl	800185c <__gnu_unwind_execute>
 8001b2e:	b004      	add	sp, #16
 8001b30:	bd10      	pop	{r4, pc}
 8001b32:	bf00      	nop

08001b34 <_Unwind_GetRegionStart>:
 8001b34:	b508      	push	{r3, lr}
 8001b36:	f7ff fe8f 	bl	8001858 <unwind_UCB_from_context>
 8001b3a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001b3c:	bd08      	pop	{r3, pc}
 8001b3e:	bf00      	nop

08001b40 <_Unwind_GetLanguageSpecificData>:
 8001b40:	b508      	push	{r3, lr}
 8001b42:	f7ff fe89 	bl	8001858 <unwind_UCB_from_context>
 8001b46:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001b48:	79c3      	ldrb	r3, [r0, #7]
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001b50:	bd08      	pop	{r3, pc}
 8001b52:	bf00      	nop

08001b54 <__aeabi_idiv0>:
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop

08001b58 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8001b64:	f007 fe50 	bl	8009808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001b68:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <pvPortMallocMicroROS+0x114>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001b70:	f000 f930 	bl	8001dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001b74:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <pvPortMallocMicroROS+0x118>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d16d      	bne.n	8001c5c <pvPortMallocMicroROS+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00d      	beq.n	8001ba2 <pvPortMallocMicroROS+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8001b86:	2208      	movs	r2, #8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <pvPortMallocMicroROS+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f023 0307 	bic.w	r3, r3, #7
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d059      	beq.n	8001c5c <pvPortMallocMicroROS+0x104>
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <pvPortMallocMicroROS+0x11c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d854      	bhi.n	8001c5c <pvPortMallocMicroROS+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <pvPortMallocMicroROS+0x120>)
 8001bb4:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8001bb6:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <pvPortMallocMicroROS+0x120>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001bbc:	e004      	b.n	8001bc8 <pvPortMallocMicroROS+0x70>
				{
					pxPreviousBlock = pxBlock;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d903      	bls.n	8001bda <pvPortMallocMicroROS+0x82>
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f1      	bne.n	8001bbe <pvPortMallocMicroROS+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001bda:	4b24      	ldr	r3, [pc, #144]	; (8001c6c <pvPortMallocMicroROS+0x114>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d03b      	beq.n	8001c5c <pvPortMallocMicroROS+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1ad2      	subs	r2, r2, r3
 8001bfe:	2308      	movs	r3, #8
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d90f      	bls.n	8001c26 <pvPortMallocMicroROS+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	1ad2      	subs	r2, r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001c20:	68b8      	ldr	r0, [r7, #8]
 8001c22:	f000 f93b 	bl	8001e9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <pvPortMallocMicroROS+0x11c>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <pvPortMallocMicroROS+0x11c>)
 8001c32:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <pvPortMallocMicroROS+0x11c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <pvPortMallocMicroROS+0x124>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d203      	bcs.n	8001c48 <pvPortMallocMicroROS+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <pvPortMallocMicroROS+0x11c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <pvPortMallocMicroROS+0x124>)
 8001c46:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <pvPortMallocMicroROS+0x118>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001c5c:	f007 fde2 	bl	8009824 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8001c60:	68fb      	ldr	r3, [r7, #12]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	200187f4 	.word	0x200187f4
 8001c70:	20018800 	.word	0x20018800
 8001c74:	200187f8 	.word	0x200187f8
 8001c78:	200187ec 	.word	0x200187ec
 8001c7c:	200187fc 	.word	0x200187fc

08001c80 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d027      	beq.n	8001ce2 <vPortFreeMicroROS+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001c92:	2308      	movs	r3, #8
 8001c94:	425b      	negs	r3, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4413      	add	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <vPortFreeMicroROS+0x6c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d019      	beq.n	8001ce2 <vPortFreeMicroROS+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <vPortFreeMicroROS+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <vPortFreeMicroROS+0x6c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001cc6:	f007 fd9f 	bl	8009808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <vPortFreeMicroROS+0x70>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <vPortFreeMicroROS+0x70>)
 8001cd6:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001cd8:	68b8      	ldr	r0, [r7, #8]
 8001cda:	f000 f8df 	bl	8001e9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001cde:	f007 fda1 	bl	8009824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20018800 	.word	0x20018800
 8001cf0:	200187f8 	.word	0x200187f8

08001cf4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001d00:	2308      	movs	r3, #8
 8001d02:	425b      	negs	r3, r3
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4413      	add	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <getBlockSize+0x38>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]

	return count;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20018800 	.word	0x20018800

08001d30 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001d3a:	f007 fd65 	bl	8009808 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001d3e:	6838      	ldr	r0, [r7, #0]
 8001d40:	f7ff ff0a 	bl	8001b58 <pvPortMallocMicroROS>
 8001d44:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d017      	beq.n	8001d7c <pvPortReallocMicroROS+0x4c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d014      	beq.n	8001d7c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffce 	bl	8001cf4 <getBlockSize>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	1a9b      	subs	r3, r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d201      	bcs.n	8001d6c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	68b8      	ldr	r0, [r7, #8]
 8001d72:	f01f fe85 	bl	8021a80 <memcpy>

		vPortFreeMicroROS(pv);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ff82 	bl	8001c80 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001d7c:	f007 fd52 	bl	8009824 <xTaskResumeAll>

	return newmem;
 8001d80:	68bb      	ldr	r3, [r7, #8]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001d94:	f007 fd38 	bl	8009808 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	fb02 f303 	mul.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff fed8 	bl	8001b58 <pvPortMallocMicroROS>
 8001da8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001dae:	e004      	b.n	8001dba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	613a      	str	r2, [r7, #16]
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	617a      	str	r2, [r7, #20]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f5      	bne.n	8001db0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001dc4:	f007 fd2e 	bl	8009824 <xTaskResumeAll>
  	return mem;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <prvHeapInit+0xac>)
 8001ddc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <prvHeapInit+0xb0>)
 8001de0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00c      	beq.n	8001e06 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3307      	adds	r3, #7
 8001df0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f023 0307 	bic.w	r3, r3, #7
 8001df8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <prvHeapInit+0xb0>)
 8001e02:	4413      	add	r3, r2
 8001e04:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <prvHeapInit+0xb4>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <prvHeapInit+0xb4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001e1e:	2208      	movs	r2, #8
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f023 0307 	bic.w	r3, r3, #7
 8001e2c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <prvHeapInit+0xb8>)
 8001e32:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001e34:	4b15      	ldr	r3, [pc, #84]	; (8001e8c <prvHeapInit+0xb8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <prvHeapInit+0xb8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	1ad2      	subs	r2, r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <prvHeapInit+0xb8>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <prvHeapInit+0xbc>)
 8001e60:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <prvHeapInit+0xc0>)
 8001e68:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <prvHeapInit+0xc4>)
 8001e6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e70:	601a      	str	r2, [r3, #0]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	000186a0 	.word	0x000186a0
 8001e84:	2000014c 	.word	0x2000014c
 8001e88:	200187ec 	.word	0x200187ec
 8001e8c:	200187f4 	.word	0x200187f4
 8001e90:	200187fc 	.word	0x200187fc
 8001e94:	200187f8 	.word	0x200187f8
 8001e98:	20018800 	.word	0x20018800

08001e9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <prvInsertBlockIntoFreeList+0xac>)
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	e002      	b.n	8001eb0 <prvInsertBlockIntoFreeList+0x14>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d8f7      	bhi.n	8001eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d108      	bne.n	8001ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	441a      	add	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	441a      	add	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d118      	bne.n	8001f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <prvInsertBlockIntoFreeList+0xb0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d00d      	beq.n	8001f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	441a      	add	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e008      	b.n	8001f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <prvInsertBlockIntoFreeList+0xb0>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e003      	b.n	8001f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d002      	beq.n	8001f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	200187ec 	.word	0x200187ec
 8001f4c:	200187f4 	.word	0x200187f4

08001f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f54:	f000 fe1f 	bl	8002b96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f58:	f000 f81a 	bl	8001f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5c:	f000 f8de 	bl	800211c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001f60:	f000 f87e 	bl	8002060 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001f64:	f000 f8ac 	bl	80020c0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f68:	f005 fcfa 	bl	8007960 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001f6c:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <main+0x34>)
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <main+0x38>)
 8001f72:	f005 fd87 	bl	8007a84 <osThreadNew>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <main+0x3c>)
 8001f7a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f7c:	f005 fd24 	bl	80079c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <main+0x30>
 8001f82:	bf00      	nop
 8001f84:	08026124 	.word	0x08026124
 8001f88:	08002285 	.word	0x08002285
 8001f8c:	20018c8c 	.word	0x20018c8c

08001f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b094      	sub	sp, #80	; 0x50
 8001f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	2230      	movs	r2, #48	; 0x30
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f01f fd96 	bl	8021ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fb4:	f002 fb9c 	bl	80046f0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <SystemClock_Config+0xc8>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a26      	ldr	r2, [pc, #152]	; (8002058 <SystemClock_Config+0xc8>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <SystemClock_Config+0xc8>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fd0:	4b22      	ldr	r3, [pc, #136]	; (800205c <SystemClock_Config+0xcc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fd8:	4a20      	ldr	r2, [pc, #128]	; (800205c <SystemClock_Config+0xcc>)
 8001fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <SystemClock_Config+0xcc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fec:	2301      	movs	r3, #1
 8001fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ff0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ffa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002000:	2304      	movs	r3, #4
 8002002:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002004:	2348      	movs	r3, #72	; 0x48
 8002006:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002008:	2302      	movs	r3, #2
 800200a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800200c:	2303      	movs	r3, #3
 800200e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002010:	f107 0320 	add.w	r3, r7, #32
 8002014:	4618      	mov	r0, r3
 8002016:	f002 fb7b 	bl	8004710 <HAL_RCC_OscConfig>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002020:	f000 f9c6 	bl	80023b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002024:	230f      	movs	r3, #15
 8002026:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002028:	2302      	movs	r3, #2
 800202a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002034:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	2102      	movs	r1, #2
 8002040:	4618      	mov	r0, r3
 8002042:	f002 fe09 	bl	8004c58 <HAL_RCC_ClockConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800204c:	f000 f9b0 	bl	80023b0 <Error_Handler>
  }
}
 8002050:	bf00      	nop
 8002052:	3750      	adds	r7, #80	; 0x50
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	40007000 	.word	0x40007000

08002060 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <MX_USART3_UART_Init+0x5c>)
 8002068:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 800206c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002070:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 8002086:	220c      	movs	r2, #12
 8002088:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_USART3_UART_Init+0x58>)
 80020a4:	f003 ff00 	bl	8005ea8 <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020ae:	f000 f97f 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20018804 	.word	0x20018804
 80020bc:	40004800 	.word	0x40004800

080020c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80020ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020ce:	2206      	movs	r2, #6
 80020d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020d4:	2202      	movs	r2, #2
 80020d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80020de:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020e0:	2202      	movs	r2, #2
 80020e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002104:	f002 f9ab 	bl	800445e <HAL_PCD_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800210e:	f000 f94f 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20018888 	.word	0x20018888

0800211c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08c      	sub	sp, #48	; 0x30
 8002120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 031c 	add.w	r3, r7, #28
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002132:	4b47      	ldr	r3, [pc, #284]	; (8002250 <MX_GPIO_Init+0x134>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a46      	ldr	r2, [pc, #280]	; (8002250 <MX_GPIO_Init+0x134>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b44      	ldr	r3, [pc, #272]	; (8002250 <MX_GPIO_Init+0x134>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <MX_GPIO_Init+0x134>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a40      	ldr	r2, [pc, #256]	; (8002250 <MX_GPIO_Init+0x134>)
 8002150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b3e      	ldr	r3, [pc, #248]	; (8002250 <MX_GPIO_Init+0x134>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <MX_GPIO_Init+0x134>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a3a      	ldr	r2, [pc, #232]	; (8002250 <MX_GPIO_Init+0x134>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b38      	ldr	r3, [pc, #224]	; (8002250 <MX_GPIO_Init+0x134>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	4b35      	ldr	r3, [pc, #212]	; (8002250 <MX_GPIO_Init+0x134>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a34      	ldr	r2, [pc, #208]	; (8002250 <MX_GPIO_Init+0x134>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b32      	ldr	r3, [pc, #200]	; (8002250 <MX_GPIO_Init+0x134>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002192:	4b2f      	ldr	r3, [pc, #188]	; (8002250 <MX_GPIO_Init+0x134>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a2e      	ldr	r2, [pc, #184]	; (8002250 <MX_GPIO_Init+0x134>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <MX_GPIO_Init+0x134>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021aa:	4b29      	ldr	r3, [pc, #164]	; (8002250 <MX_GPIO_Init+0x134>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a28      	ldr	r2, [pc, #160]	; (8002250 <MX_GPIO_Init+0x134>)
 80021b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b26      	ldr	r3, [pc, #152]	; (8002250 <MX_GPIO_Init+0x134>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80021c8:	4822      	ldr	r0, [pc, #136]	; (8002254 <MX_GPIO_Init+0x138>)
 80021ca:	f002 f92f 	bl	800442c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2140      	movs	r1, #64	; 0x40
 80021d2:	4821      	ldr	r0, [pc, #132]	; (8002258 <MX_GPIO_Init+0x13c>)
 80021d4:	f002 f92a 	bl	800442c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80021d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	481b      	ldr	r0, [pc, #108]	; (800225c <MX_GPIO_Init+0x140>)
 80021f0:	f001 ff70 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80021f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80021f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	4619      	mov	r1, r3
 800220c:	4811      	ldr	r0, [pc, #68]	; (8002254 <MX_GPIO_Init+0x138>)
 800220e:	f001 ff61 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002212:	2340      	movs	r3, #64	; 0x40
 8002214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002216:	2301      	movs	r3, #1
 8002218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	480b      	ldr	r0, [pc, #44]	; (8002258 <MX_GPIO_Init+0x13c>)
 800222a:	f001 ff53 	bl	80040d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_GPIO_Init+0x13c>)
 8002242:	f001 ff47 	bl	80040d4 <HAL_GPIO_Init>

}
 8002246:	bf00      	nop
 8002248:	3730      	adds	r7, #48	; 0x30
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	40020400 	.word	0x40020400
 8002258:	40021800 	.word	0x40021800
 800225c:	40020800 	.word	0x40020800

08002260 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8002268:	1d39      	adds	r1, r7, #4
 800226a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800226e:	2201      	movs	r2, #1
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <__io_putchar+0x20>)
 8002272:	f003 fe67 	bl	8005f44 <HAL_UART_Transmit>
  return ch;
 8002276:	687b      	ldr	r3, [r7, #4]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20018804 	.word	0x20018804

08002284 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002284:	b5b0      	push	{r4, r5, r7, lr}
 8002286:	b0aa      	sub	sp, #168	; 0xa8
 8002288:	af00      	add	r7, sp, #0
 800228a:	61f8      	str	r0, [r7, #28]
  /* init code for LWIP */
  MX_LWIP_Init();
 800228c:	f004 fdda 	bl	8006e44 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002290:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002294:	4618      	mov	r0, r3
 8002296:	f014 fda1 	bl	8016ddc <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <StartDefaultTask+0xe0>)
 800229c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  freeRTOS_allocator.deallocate = microros_deallocate;
 80022a0:	4b31      	ldr	r3, [pc, #196]	; (8002368 <StartDefaultTask+0xe4>)
 80022a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  freeRTOS_allocator.reallocate = microros_reallocate;
 80022a6:	4b31      	ldr	r3, [pc, #196]	; (800236c <StartDefaultTask+0xe8>)
 80022a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80022ac:	4b30      	ldr	r3, [pc, #192]	; (8002370 <StartDefaultTask+0xec>)
 80022ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80022b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022b6:	4618      	mov	r0, r3
 80022b8:	f014 fd9e 	bl	8016df8 <rcutils_set_default_allocator>
 80022bc:	4603      	mov	r3, r0
 80022be:	f083 0301 	eor.w	r3, r3, #1
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <StartDefaultTask+0x4e>
	 printf("Error on default allocators (line %d)\n", __LINE__);
 80022c8:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80022cc:	4829      	ldr	r0, [pc, #164]	; (8002374 <StartDefaultTask+0xf0>)
 80022ce:	f01f fcfd 	bl	8021ccc <iprintf>
  std_msgs__msg__Int32 msg;
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();
 80022d2:	463b      	mov	r3, r7
 80022d4:	4618      	mov	r0, r3
 80022d6:	f014 fdaf 	bl	8016e38 <rcutils_get_default_allocator>
 80022da:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80022de:	463d      	mov	r5, r7
 80022e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e4:	682b      	ldr	r3, [r5, #0]
 80022e6:	6023      	str	r3, [r4, #0]

  //create init_options
  rclc_support_init(&support, 0, NULL, &allocator);
 80022e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ec:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	f014 fca4 	bl	8016c40 <rclc_support_init>

  // create node
  rclc_node_init_default(&node, "cubemx_node", "", &support);
 80022f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022fc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002300:	4a1d      	ldr	r2, [pc, #116]	; (8002378 <StartDefaultTask+0xf4>)
 8002302:	491e      	ldr	r1, [pc, #120]	; (800237c <StartDefaultTask+0xf8>)
 8002304:	f014 fcec 	bl	8016ce0 <rclc_node_init_default>

  // create publisher
  rclc_publisher_init_default(
 8002308:	f014 fffe 	bl	8017308 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800230c:	4602      	mov	r2, r0
 800230e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002312:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <StartDefaultTask+0xfc>)
 8002318:	f014 fd22 	bl	8016d60 <rclc_publisher_init_default>
    &publisher,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "cubemx_publisher");

  msg.data = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  // printf("Task  State   Prio    Stack    Num");
  // printf("**********************************");
  // printf(ptrTaskList);
  // printf("**********************************");

  printf("Start \n");
 8002322:	4818      	ldr	r0, [pc, #96]	; (8002384 <StartDefaultTask+0x100>)
 8002324:	f01f fd58 	bl	8021dd8 <puts>

  for(;;) {
	//printf("publish: %ld \n", msg.data);
    //(void)! rcl_publish(&publisher, &msg, NULL);
    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8002328:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800232c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002330:	2200      	movs	r2, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f014 fc60 	bl	8016bf8 <rcl_publish>
 8002338:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (ret != RCL_RET_OK)
 800233c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <StartDefaultTask+0xcc>
    {
      printf("Error publishing (line %d)\n", __LINE__);
 8002344:	f240 119d 	movw	r1, #413	; 0x19d
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <StartDefaultTask+0x104>)
 800234a:	f01f fcbf 	bl	8021ccc <iprintf>
 800234e:	e004      	b.n	800235a <StartDefaultTask+0xd6>
    }else{
      msg.data++;
 8002350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002354:	3301      	adds	r3, #1
 8002356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    osDelay(portTICK_RATE_MS*1000);
 800235a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800235e:	f005 fc37 	bl	8007bd0 <osDelay>
  for(;;) {
 8002362:	e7e1      	b.n	8002328 <StartDefaultTask+0xa4>
 8002364:	080023bd 	.word	0x080023bd
 8002368:	08002401 	.word	0x08002401
 800236c:	08002439 	.word	0x08002439
 8002370:	080024a5 	.word	0x080024a5
 8002374:	08023184 	.word	0x08023184
 8002378:	080231ac 	.word	0x080231ac
 800237c:	080231b0 	.word	0x080231b0
 8002380:	080231bc 	.word	0x080231bc
 8002384:	080231d0 	.word	0x080231d0
 8002388:	080231d8 	.word	0x080231d8

0800238c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d101      	bne.n	80023a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800239e:	f000 fc07 	bl	8002bb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40010000 	.word	0x40010000

080023b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b4:	b672      	cpsid	i
}
 80023b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <Error_Handler+0x8>
	...

080023bc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80023c6:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <microros_allocate+0x3c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <microros_allocate+0x3c>)
 80023d4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <microros_allocate+0x40>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <microros_allocate+0x40>)
 80023e4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7ff fbb6 	bl	8001b58 <pvPortMallocMicroROS>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20018c90 	.word	0x20018c90
 80023fc:	20018c94 	.word	0x20018c94

08002400 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00c      	beq.n	800242a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff fc6f 	bl	8001cf4 <getBlockSize>
 8002416:	4603      	mov	r3, r0
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <microros_deallocate+0x34>)
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	461a      	mov	r2, r3
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <microros_deallocate+0x34>)
 8002422:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff fc2b 	bl	8001c80 <vPortFreeMicroROS>
  }
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20018c94 	.word	0x20018c94

08002438 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <microros_reallocate+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	461a      	mov	r2, r3
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <microros_reallocate+0x64>)
 8002452:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <microros_reallocate+0x68>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	4413      	add	r3, r2
 800245e:	461a      	mov	r2, r3
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <microros_reallocate+0x68>)
 8002462:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d104      	bne.n	8002474 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800246a:	68b8      	ldr	r0, [r7, #8]
 800246c:	f7ff fb74 	bl	8001b58 <pvPortMallocMicroROS>
 8002470:	4603      	mov	r3, r0
 8002472:	e00e      	b.n	8002492 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f7ff fc3d 	bl	8001cf4 <getBlockSize>
 800247a:	4603      	mov	r3, r0
 800247c:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <microros_reallocate+0x68>)
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	461a      	mov	r2, r3
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <microros_reallocate+0x68>)
 8002486:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff fc50 	bl	8001d30 <pvPortReallocMicroROS>
 8002490:	4603      	mov	r3, r0
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20018c90 	.word	0x20018c90
 80024a0:	20018c94 	.word	0x20018c94

080024a4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	fb02 f303 	mul.w	r3, r2, r3
 80024b8:	4a0c      	ldr	r2, [pc, #48]	; (80024ec <microros_zero_allocate+0x48>)
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4413      	add	r3, r2
 80024be:	461a      	mov	r2, r3
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <microros_zero_allocate+0x48>)
 80024c2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <microros_zero_allocate+0x4c>)
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	4413      	add	r3, r2
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <microros_zero_allocate+0x4c>)
 80024d6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f7ff fc55 	bl	8001d8a <pvPortCallocMicroROS>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20018c90 	.word	0x20018c90
 80024f0:	20018c94 	.word	0x20018c94
 80024f4:	00000000 	.word	0x00000000

080024f8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80024f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800250a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800250e:	a320      	add	r3, pc, #128	; (adr r3, 8002590 <UTILS_NanosecondsToTimespec+0x98>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f7fe f9e4 	bl	80008e0 <__aeabi_ldivmod>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002522:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002526:	a31a      	add	r3, pc, #104	; (adr r3, 8002590 <UTILS_NanosecondsToTimespec+0x98>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f7fe f9d8 	bl	80008e0 <__aeabi_ldivmod>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	da20      	bge.n	800257e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <UTILS_NanosecondsToTimespec+0x90>)
 8002542:	fb82 1203 	smull	r1, r2, r2, r3
 8002546:	1712      	asrs	r2, r2, #28
 8002548:	17db      	asrs	r3, r3, #31
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	6979      	ldr	r1, [r7, #20]
 8002558:	17c8      	asrs	r0, r1, #31
 800255a:	460c      	mov	r4, r1
 800255c:	4605      	mov	r5, r0
 800255e:	ebb2 0804 	subs.w	r8, r2, r4
 8002562:	eb63 0905 	sbc.w	r9, r3, r5
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	4906      	ldr	r1, [pc, #24]	; (800258c <UTILS_NanosecondsToTimespec+0x94>)
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	441a      	add	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]
    }
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002588:	44b82fa1 	.word	0x44b82fa1
 800258c:	3b9aca00 	.word	0x3b9aca00
 8002590:	3b9aca00 	.word	0x3b9aca00
 8002594:	00000000 	.word	0x00000000

08002598 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800259c:	b08e      	sub	sp, #56	; 0x38
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24
 80025a2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80025a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025a8:	2300      	movs	r3, #0
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80025ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025be:	4618      	mov	r0, r3
 80025c0:	f007 fb68 	bl	8009c94 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	17da      	asrs	r2, r3, #31
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	61fa      	str	r2, [r7, #28]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	69b9      	ldr	r1, [r7, #24]
 80025d6:	000b      	movs	r3, r1
 80025d8:	2200      	movs	r2, #0
 80025da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	2200      	movs	r2, #0
 80025e2:	461c      	mov	r4, r3
 80025e4:	4615      	mov	r5, r2
 80025e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025ea:	1911      	adds	r1, r2, r4
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	416b      	adcs	r3, r5
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80025f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80025fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	f04f 0400 	mov.w	r4, #0
 8002606:	f04f 0500 	mov.w	r5, #0
 800260a:	015d      	lsls	r5, r3, #5
 800260c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002610:	0154      	lsls	r4, r2, #5
 8002612:	4622      	mov	r2, r4
 8002614:	462b      	mov	r3, r5
 8002616:	ebb2 0800 	subs.w	r8, r2, r0
 800261a:	eb63 0901 	sbc.w	r9, r3, r1
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800262a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800262e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002632:	4690      	mov	r8, r2
 8002634:	4699      	mov	r9, r3
 8002636:	eb18 0a00 	adds.w	sl, r8, r0
 800263a:	eb49 0b01 	adc.w	fp, r9, r1
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800264a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800264e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002652:	ebb2 040a 	subs.w	r4, r2, sl
 8002656:	603c      	str	r4, [r7, #0]
 8002658:	eb63 030b 	sbc.w	r3, r3, fp
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002662:	4623      	mov	r3, r4
 8002664:	181b      	adds	r3, r3, r0
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	462b      	mov	r3, r5
 800266a:	eb41 0303 	adc.w	r3, r1, r3
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	6a3a      	ldr	r2, [r7, #32]
 8002672:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002676:	f7ff ff3f 	bl	80024f8 <UTILS_NanosecondsToTimespec>

    return 0;
 800267a:	2300      	movs	r3, #0
 800267c:	4618      	mov	r0, r3
 800267e:	3738      	adds	r7, #56	; 0x38
 8002680:	46bd      	mov	sp, r7
 8002682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_MspInit+0x4c>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <HAL_MspInit+0x4c>)
 8002694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_MspInit+0x4c>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <HAL_MspInit+0x4c>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <HAL_MspInit+0x4c>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_MspInit+0x4c>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026be:	2200      	movs	r2, #0
 80026c0:	210f      	movs	r1, #15
 80026c2:	f06f 0001 	mvn.w	r0, #1
 80026c6:	f000 fb6f 	bl	8002da8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0aa      	sub	sp, #168	; 0xa8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f0:	f107 0310 	add.w	r3, r7, #16
 80026f4:	2284      	movs	r2, #132	; 0x84
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f01f f9e9 	bl	8021ad0 <memset>
  if(huart->Instance==USART3)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_UART_MspInit+0xb4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d13c      	bne.n	8002782 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800270e:	2300      	movs	r3, #0
 8002710:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fcf6 	bl	8005108 <HAL_RCCEx_PeriphCLKConfig>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002722:	f7ff fe45 	bl	80023b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002726:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_UART_MspInit+0xb8>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a19      	ldr	r2, [pc, #100]	; (8002790 <HAL_UART_MspInit+0xb8>)
 800272c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_UART_MspInit+0xb8>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_UART_MspInit+0xb8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a13      	ldr	r2, [pc, #76]	; (8002790 <HAL_UART_MspInit+0xb8>)
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b11      	ldr	r3, [pc, #68]	; (8002790 <HAL_UART_MspInit+0xb8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002756:	f44f 7340 	mov.w	r3, #768	; 0x300
 800275a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002770:	2307      	movs	r3, #7
 8002772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002776:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800277a:	4619      	mov	r1, r3
 800277c:	4805      	ldr	r0, [pc, #20]	; (8002794 <HAL_UART_MspInit+0xbc>)
 800277e:	f001 fca9 	bl	80040d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002782:	bf00      	nop
 8002784:	37a8      	adds	r7, #168	; 0xa8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40004800 	.word	0x40004800
 8002790:	40023800 	.word	0x40023800
 8002794:	40020c00 	.word	0x40020c00

08002798 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b0ac      	sub	sp, #176	; 0xb0
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027b0:	f107 0318 	add.w	r3, r7, #24
 80027b4:	2284      	movs	r2, #132	; 0x84
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f01f f989 	bl	8021ad0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027c6:	d159      	bne.n	800287c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80027c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027d4:	f107 0318 	add.w	r3, r7, #24
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 fc95 	bl	8005108 <HAL_RCCEx_PeriphCLKConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80027e4:	f7ff fde4 	bl	80023b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e8:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_PCD_MspInit+0xec>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	4a25      	ldr	r2, [pc, #148]	; (8002884 <HAL_PCD_MspInit+0xec>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6313      	str	r3, [r2, #48]	; 0x30
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_PCD_MspInit+0xec>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002800:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800281a:	230a      	movs	r3, #10
 800281c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002824:	4619      	mov	r1, r3
 8002826:	4818      	ldr	r0, [pc, #96]	; (8002888 <HAL_PCD_MspInit+0xf0>)
 8002828:	f001 fc54 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800282c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002834:	2300      	movs	r3, #0
 8002836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002844:	4619      	mov	r1, r3
 8002846:	4810      	ldr	r0, [pc, #64]	; (8002888 <HAL_PCD_MspInit+0xf0>)
 8002848:	f001 fc44 	bl	80040d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_PCD_MspInit+0xec>)
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <HAL_PCD_MspInit+0xec>)
 8002852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002856:	6353      	str	r3, [r2, #52]	; 0x34
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_PCD_MspInit+0xec>)
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_PCD_MspInit+0xec>)
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <HAL_PCD_MspInit+0xec>)
 800286a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800286e:	6453      	str	r3, [r2, #68]	; 0x44
 8002870:	4b04      	ldr	r3, [pc, #16]	; (8002884 <HAL_PCD_MspInit+0xec>)
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800287c:	bf00      	nop
 800287e:	37b0      	adds	r7, #176	; 0xb0
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	40020000 	.word	0x40020000

0800288c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08c      	sub	sp, #48	; 0x30
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800289c:	2200      	movs	r2, #0
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	2019      	movs	r0, #25
 80028a2:	f000 fa81 	bl	8002da8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028a6:	2019      	movs	r0, #25
 80028a8:	f000 fa9a 	bl	8002de0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80028ac:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <HAL_InitTick+0x9c>)
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <HAL_InitTick+0x9c>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6453      	str	r3, [r2, #68]	; 0x44
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_InitTick+0x9c>)
 80028ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028c4:	f107 0210 	add.w	r2, r7, #16
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fbe8 	bl	80050a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80028d4:	f002 fbd2 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 80028d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	4a13      	ldr	r2, [pc, #76]	; (800292c <HAL_InitTick+0xa0>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9b      	lsrs	r3, r3, #18
 80028e4:	3b01      	subs	r3, #1
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_InitTick+0xa4>)
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <HAL_InitTick+0xa8>)
 80028ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_InitTick+0xa4>)
 80028f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028f6:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <HAL_InitTick+0xa4>)
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_InitTick+0xa4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_InitTick+0xa4>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002908:	4809      	ldr	r0, [pc, #36]	; (8002930 <HAL_InitTick+0xa4>)
 800290a:	f002 ffed 	bl	80058e8 <HAL_TIM_Base_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002914:	4806      	ldr	r0, [pc, #24]	; (8002930 <HAL_InitTick+0xa4>)
 8002916:	f003 f849 	bl	80059ac <HAL_TIM_Base_Start_IT>
 800291a:	4603      	mov	r3, r0
 800291c:	e000      	b.n	8002920 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
}
 8002920:	4618      	mov	r0, r3
 8002922:	3730      	adds	r7, #48	; 0x30
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	431bde83 	.word	0x431bde83
 8002930:	20018c98 	.word	0x20018c98
 8002934:	40010000 	.word	0x40010000

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800293c:	e7fe      	b.n	800293c <NMI_Handler+0x4>

0800293e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <HardFault_Handler+0x4>

08002944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <MemManage_Handler+0x4>

0800294a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <BusFault_Handler+0x4>

08002950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <UsageFault_Handler+0x4>

08002956 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800296a:	f003 f897 	bl	8005a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20018c98 	.word	0x20018c98

08002978 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <ETH_IRQHandler+0x10>)
 800297e:	f000 fe1b 	bl	80035b8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2001be18 	.word	0x2001be18

0800298c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
	return 1;
 8002990:	2301      	movs	r3, #1
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_kill>:

int _kill(int pid, int sig)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <_kill+0x20>)
 80029a8:	2216      	movs	r2, #22
 80029aa:	601a      	str	r2, [r3, #0]
	return -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	20044078 	.word	0x20044078

080029c0 <_exit>:

void _exit (int status)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ffe5 	bl	800299c <_kill>
	while (1) {}		/* Make sure we hang here */
 80029d2:	e7fe      	b.n	80029d2 <_exit+0x12>

080029d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e00a      	b.n	80029fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029e6:	f3af 8000 	nop.w
 80029ea:	4601      	mov	r1, r0
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	60ba      	str	r2, [r7, #8]
 80029f2:	b2ca      	uxtb	r2, r1
 80029f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	dbf0      	blt.n	80029e6 <_read+0x12>
	}

return len;
 8002a04:	687b      	ldr	r3, [r7, #4]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e009      	b.n	8002a34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	60ba      	str	r2, [r7, #8]
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fc19 	bl	8002260 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	dbf1      	blt.n	8002a20 <_write+0x12>
	}
	return len;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <_close>:

int _close(int file)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a6e:	605a      	str	r2, [r3, #4]
	return 0;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <_isatty>:

int _isatty(int file)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
	return 1;
 8002a86:	2301      	movs	r3, #1
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
	return 0;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <_sbrk+0x5c>)
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <_sbrk+0x60>)
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <_sbrk+0x64>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <_sbrk+0x64>)
 8002ace:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <_sbrk+0x68>)
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <_sbrk+0x64>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d205      	bcs.n	8002aec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <_sbrk+0x6c>)
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aea:	e009      	b.n	8002b00 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <_sbrk+0x64>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <_sbrk+0x64>)
 8002afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	20050000 	.word	0x20050000
 8002b10:	00000400 	.word	0x00000400
 8002b14:	20018ce8 	.word	0x20018ce8
 8002b18:	20044098 	.word	0x20044098
 8002b1c:	20044078 	.word	0x20044078

08002b20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <SystemInit+0x20>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <SystemInit+0x20>)
 8002b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b48:	480d      	ldr	r0, [pc, #52]	; (8002b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b4a:	490e      	ldr	r1, [pc, #56]	; (8002b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b50:	e002      	b.n	8002b58 <LoopCopyDataInit>

08002b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b56:	3304      	adds	r3, #4

08002b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b5c:	d3f9      	bcc.n	8002b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b60:	4c0b      	ldr	r4, [pc, #44]	; (8002b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b64:	e001      	b.n	8002b6a <LoopFillZerobss>

08002b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b68:	3204      	adds	r2, #4

08002b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b6c:	d3fb      	bcc.n	8002b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b6e:	f7ff ffd7 	bl	8002b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b72:	f01e ff3d 	bl	80219f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b76:	f7ff f9eb 	bl	8001f50 <main>
  bx  lr    
 8002b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b84:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8002b88:	08027934 	.word	0x08027934
  ldr r2, =_sbss
 8002b8c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002b90:	20044098 	.word	0x20044098

08002b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <ADC_IRQHandler>

08002b96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b9a:	2003      	movs	r0, #3
 8002b9c:	f000 f8f9 	bl	8002d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba0:	200f      	movs	r0, #15
 8002ba2:	f7ff fe73 	bl	800288c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba6:	f7ff fd6f 	bl	8002688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_IncTick+0x20>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_IncTick+0x24>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <HAL_IncTick+0x24>)
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	2000000c 	.word	0x2000000c
 8002bd4:	20018cec 	.word	0x20018cec

08002bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return uwTick;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_GetTick+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20018cec 	.word	0x20018cec

08002bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff ffee 	bl	8002bd8 <HAL_GetTick>
 8002bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c08:	d005      	beq.n	8002c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_Delay+0x44>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4413      	add	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c16:	bf00      	nop
 8002c18:	f7ff ffde 	bl	8002bd8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d8f7      	bhi.n	8002c18 <HAL_Delay+0x28>
  {
  }
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000000c 	.word	0x2000000c

08002c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <__NVIC_SetPriorityGrouping+0x40>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c54:	4013      	ands	r3, r2
 8002c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <__NVIC_SetPriorityGrouping+0x44>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c66:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <__NVIC_SetPriorityGrouping+0x40>)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	60d3      	str	r3, [r2, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00
 8002c7c:	05fa0000 	.word	0x05fa0000

08002c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c84:	4b04      	ldr	r3, [pc, #16]	; (8002c98 <__NVIC_GetPriorityGrouping+0x18>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	f003 0307 	and.w	r3, r3, #7
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	db0b      	blt.n	8002cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4907      	ldr	r1, [pc, #28]	; (8002cd4 <__NVIC_EnableIRQ+0x38>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	; (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
         );
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff4c 	bl	8002c38 <__NVIC_SetPriorityGrouping>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dba:	f7ff ff61 	bl	8002c80 <__NVIC_GetPriorityGrouping>
 8002dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	6978      	ldr	r0, [r7, #20]
 8002dc6:	f7ff ffb1 	bl	8002d2c <NVIC_EncodePriority>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff80 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002dd8:	bf00      	nop
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff54 	bl	8002c9c <__NVIC_EnableIRQ>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002e0c:	4ba0      	ldr	r3, [pc, #640]	; (8003090 <HAL_ETH_Init+0x294>)
 8002e0e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e180      	b.n	8003124 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f004 f966 	bl	8007108 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e3c:	4b95      	ldr	r3, [pc, #596]	; (8003094 <HAL_ETH_Init+0x298>)
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	4a94      	ldr	r2, [pc, #592]	; (8003094 <HAL_ETH_Init+0x298>)
 8002e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e46:	6453      	str	r3, [r2, #68]	; 0x44
 8002e48:	4b92      	ldr	r3, [pc, #584]	; (8003094 <HAL_ETH_Init+0x298>)
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002e54:	4b90      	ldr	r3, [pc, #576]	; (8003098 <HAL_ETH_Init+0x29c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a8f      	ldr	r2, [pc, #572]	; (8003098 <HAL_ETH_Init+0x29c>)
 8002e5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e5e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002e60:	4b8d      	ldr	r3, [pc, #564]	; (8003098 <HAL_ETH_Init+0x29c>)
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	498b      	ldr	r1, [pc, #556]	; (8003098 <HAL_ETH_Init+0x29c>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e84:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e86:	f7ff fea7 	bl	8002bd8 <HAL_GetTick>
 8002e8a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002e8c:	e011      	b.n	8002eb2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002e8e:	f7ff fea3 	bl	8002bd8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e9c:	d909      	bls.n	8002eb2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e138      	b.n	8003124 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e4      	bne.n	8002e8e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f023 031c 	bic.w	r3, r3, #28
 8002ed2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002ed4:	f002 f8b2 	bl	800503c <HAL_RCC_GetHCLKFreq>
 8002ed8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4a6f      	ldr	r2, [pc, #444]	; (800309c <HAL_ETH_Init+0x2a0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d908      	bls.n	8002ef4 <HAL_ETH_Init+0xf8>
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4a6e      	ldr	r2, [pc, #440]	; (80030a0 <HAL_ETH_Init+0x2a4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d804      	bhi.n	8002ef4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f043 0308 	orr.w	r3, r3, #8
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	e027      	b.n	8002f44 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4a6a      	ldr	r2, [pc, #424]	; (80030a0 <HAL_ETH_Init+0x2a4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d908      	bls.n	8002f0e <HAL_ETH_Init+0x112>
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	4a64      	ldr	r2, [pc, #400]	; (8003090 <HAL_ETH_Init+0x294>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d204      	bcs.n	8002f0e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f043 030c 	orr.w	r3, r3, #12
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	e01a      	b.n	8002f44 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4a5f      	ldr	r2, [pc, #380]	; (8003090 <HAL_ETH_Init+0x294>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d303      	bcc.n	8002f1e <HAL_ETH_Init+0x122>
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4a62      	ldr	r2, [pc, #392]	; (80030a4 <HAL_ETH_Init+0x2a8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d911      	bls.n	8002f42 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	4a60      	ldr	r2, [pc, #384]	; (80030a4 <HAL_ETH_Init+0x2a8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d908      	bls.n	8002f38 <HAL_ETH_Init+0x13c>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	4a5f      	ldr	r2, [pc, #380]	; (80030a8 <HAL_ETH_Init+0x2ac>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d804      	bhi.n	8002f38 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e005      	b.n	8002f44 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f043 0310 	orr.w	r3, r3, #16
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	e000      	b.n	8002f44 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002f42:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002f4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f50:	2100      	movs	r1, #0
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fc10 	bl	8003778 <HAL_ETH_WritePHYRegister>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002f62:	6939      	ldr	r1, [r7, #16]
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fdc5 	bl	8003af4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0d6      	b.n	8003124 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002f76:	20ff      	movs	r0, #255	; 0xff
 8002f78:	f7ff fe3a 	bl	8002bf0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 80a4 	beq.w	80030ce <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f86:	f7ff fe27 	bl	8002bd8 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	461a      	mov	r2, r3
 8002f92:	2101      	movs	r1, #1
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fb87 	bl	80036a8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002f9a:	f7ff fe1d 	bl	8002bd8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d90f      	bls.n	8002fcc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002fb0:	6939      	ldr	r1, [r7, #16]
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fd9e 	bl	8003af4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e0ab      	b.n	8003124 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0da      	beq.n	8002f8c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002fd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fda:	2100      	movs	r1, #0
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fbcb 	bl	8003778 <HAL_ETH_WritePHYRegister>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00b      	beq.n	8003000 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002fec:	6939      	ldr	r1, [r7, #16]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fd80 	bl	8003af4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e091      	b.n	8003124 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003000:	f7ff fdea 	bl	8002bd8 <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003006:	f107 030c 	add.w	r3, r7, #12
 800300a:	461a      	mov	r2, r3
 800300c:	2101      	movs	r1, #1
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fb4a 	bl	80036a8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003014:	f7ff fde0 	bl	8002bd8 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d90f      	bls.n	8003046 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800302a:	6939      	ldr	r1, [r7, #16]
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fd61 	bl	8003af4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e06e      	b.n	8003124 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0da      	beq.n	8003006 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003050:	f107 030c 	add.w	r3, r7, #12
 8003054:	461a      	mov	r2, r3
 8003056:	2110      	movs	r1, #16
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fb25 	bl	80036a8 <HAL_ETH_ReadPHYRegister>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003068:	6939      	ldr	r1, [r7, #16]
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fd42 	bl	8003af4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003078:	2301      	movs	r3, #1
 800307a:	e053      	b.n	8003124 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d012      	beq.n	80030ac <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	e010      	b.n	80030b2 <HAL_ETH_Init+0x2b6>
 8003090:	03938700 	.word	0x03938700
 8003094:	40023800 	.word	0x40023800
 8003098:	40013800 	.word	0x40013800
 800309c:	01312cff 	.word	0x01312cff
 80030a0:	02160ebf 	.word	0x02160ebf
 80030a4:	05f5e0ff 	.word	0x05f5e0ff
 80030a8:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	e026      	b.n	8003112 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	e021      	b.n	8003112 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	08db      	lsrs	r3, r3, #3
 80030d4:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80030de:	4313      	orrs	r3, r2
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	2100      	movs	r1, #0
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fb46 	bl	8003778 <HAL_ETH_WritePHYRegister>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80030f6:	6939      	ldr	r1, [r7, #16]
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fcfb 	bl	8003af4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e00c      	b.n	8003124 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800310a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800310e:	f7ff fd6f 	bl	8002bf0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003112:	6939      	ldr	r1, [r7, #16]
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fced 	bl	8003af4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_ETH_DMATxDescListInit+0x20>
 8003148:	2302      	movs	r3, #2
 800314a:	e051      	b.n	80031f0 <HAL_ETH_DMATxDescListInit+0xc4>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e030      	b.n	80031ca <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	015b      	lsls	r3, r3, #5
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	4413      	add	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003178:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003180:	fb02 f303 	mul.w	r3, r2, r3
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	4413      	add	r3, r2
 8003188:	461a      	mov	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d105      	bne.n	80031a2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d208      	bcs.n	80031be <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	3301      	adds	r3, #1
 80031b0:	015b      	lsls	r3, r3, #5
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	4413      	add	r3, r2
 80031b6:	461a      	mov	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	60da      	str	r2, [r3, #12]
 80031bc:	e002      	b.n	80031c4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3301      	adds	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d3ca      	bcc.n	8003168 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031dc:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_ETH_DMARxDescListInit+0x20>
 8003218:	2302      	movs	r3, #2
 800321a:	e055      	b.n	80032c8 <HAL_ETH_DMARxDescListInit+0xcc>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e034      	b.n	80032a2 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	015b      	lsls	r3, r3, #5
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	4413      	add	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003248:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003250:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	461a      	mov	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	3b01      	subs	r3, #1
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	429a      	cmp	r2, r3
 8003282:	d208      	bcs.n	8003296 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	015b      	lsls	r3, r3, #5
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	4413      	add	r3, r2
 800328e:	461a      	mov	r2, r3
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	e002      	b.n	800329c <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3301      	adds	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d3c6      	bcc.n	8003238 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032b4:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_ETH_TransmitFrame+0x24>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e0cc      	b.n	8003492 <HAL_ETH_TransmitFrame+0x1be>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800331e:	2301      	movs	r3, #1
 8003320:	e0b7      	b.n	8003492 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	da09      	bge.n	8003340 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2212      	movs	r2, #18
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0a8      	b.n	8003492 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003346:	4293      	cmp	r3, r2
 8003348:	d915      	bls.n	8003376 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <HAL_ETH_TransmitFrame+0x1cc>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	0a9b      	lsrs	r3, r3, #10
 8003354:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	4b51      	ldr	r3, [pc, #324]	; (80034a0 <HAL_ETH_TransmitFrame+0x1cc>)
 800335a:	fba3 1302 	umull	r1, r3, r3, r2
 800335e:	0a9b      	lsrs	r3, r3, #10
 8003360:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3301      	adds	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e001      	b.n	800337a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8003376:	2301      	movs	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d11c      	bne.n	80033ba <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800338e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800339a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033aa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	461a      	mov	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80033b8:	e04b      	b.n	8003452 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	e044      	b.n	800344a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033ce:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d107      	bne.n	80033e6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033e4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80033ee:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d116      	bne.n	8003428 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003408:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a25      	ldr	r2, [pc, #148]	; (80034a4 <HAL_ETH_TransmitFrame+0x1d0>)
 800340e:	fb03 f202 	mul.w	r2, r3, r2
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	4413      	add	r3, r2
 8003416:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800341a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003426:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003436:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	461a      	mov	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	3301      	adds	r3, #1
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	429a      	cmp	r2, r3
 8003450:	d3b6      	bcc.n	80033c0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800346c:	461a      	mov	r2, r3
 800346e:	2304      	movs	r3, #4
 8003470:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800347a:	461a      	mov	r2, r3
 800347c:	2300      	movs	r3, #0
 800347e:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	ac02b00b 	.word	0xac02b00b
 80034a4:	fffffa0c 	.word	0xfffffa0c

080034a8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80034be:	2302      	movs	r3, #2
 80034c0:	e074      	b.n	80035ac <HAL_ETH_GetReceivedFrame_IT+0x104>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80034d2:	e05a      	b.n	800358a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	3301      	adds	r3, #1
 80034d8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e8:	d10d      	bne.n	8003506 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	461a      	mov	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
 8003504:	e041      	b.n	800358a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10b      	bne.n	800352c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	461a      	mov	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	629a      	str	r2, [r3, #40]	; 0x28
 800352a:	e02e      	b.n	800358a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	2b01      	cmp	r3, #1
 8003544:	d103      	bne.n	800354e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0c1b      	lsrs	r3, r3, #16
 8003556:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800355a:	1f1a      	subs	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	461a      	mov	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	e010      	b.n	80035ac <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	db02      	blt.n	800359a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d99c      	bls.n	80034d4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b40      	cmp	r3, #64	; 0x40
 80035d0:	d112      	bne.n	80035f8 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f003 fe58 	bl	8007288 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e0:	461a      	mov	r2, r3
 80035e2:	2340      	movs	r3, #64	; 0x40
 80035e4:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f6:	e01a      	b.n	800362e <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d111      	bne.n	800362e <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f838 	bl	8003680 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003618:	461a      	mov	r2, r3
 800361a:	2301      	movs	r3, #1
 800361c:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003636:	461a      	mov	r2, r3
 8003638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800363c:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800364c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003650:	d112      	bne.n	8003678 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f81e 	bl	8003694 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003660:	461a      	mov	r2, r3
 8003662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003666:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	460b      	mov	r3, r1
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b82      	cmp	r3, #130	; 0x82
 80036c8:	d101      	bne.n	80036ce <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	e050      	b.n	8003770 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2282      	movs	r2, #130	; 0x82
 80036d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 031c 	and.w	r3, r3, #28
 80036e4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8a1b      	ldrh	r3, [r3, #16]
 80036ea:	02db      	lsls	r3, r3, #11
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80036f4:	897b      	ldrh	r3, [r7, #10]
 80036f6:	019b      	lsls	r3, r3, #6
 80036f8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f023 0302 	bic.w	r3, r3, #2
 8003708:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800371a:	f7ff fa5d 	bl	8002bd8 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003720:	e015      	b.n	800374e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003722:	f7ff fa59 	bl	8002bd8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003730:	d309      	bcc.n	8003746 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e014      	b.n	8003770 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e4      	bne.n	8003722 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	b29b      	uxth	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	460b      	mov	r3, r1
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b42      	cmp	r3, #66	; 0x42
 8003798:	d101      	bne.n	800379e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800379a:	2302      	movs	r3, #2
 800379c:	e04e      	b.n	800383c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2242      	movs	r2, #66	; 0x42
 80037a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 031c 	and.w	r3, r3, #28
 80037b4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8a1b      	ldrh	r3, [r3, #16]
 80037ba:	02db      	lsls	r3, r3, #11
 80037bc:	b29b      	uxth	r3, r3
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80037c4:	897b      	ldrh	r3, [r7, #10]
 80037c6:	019b      	lsls	r3, r3, #6
 80037c8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80037f4:	f7ff f9f0 	bl	8002bd8 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037fa:	e015      	b.n	8003828 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80037fc:	f7ff f9ec 	bl	8002bd8 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380a:	d309      	bcc.n	8003820 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e00d      	b.n	800383c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e4      	bne.n	80037fc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_ETH_Start+0x16>
 8003856:	2302      	movs	r3, #2
 8003858:	e01f      	b.n	800389a <HAL_ETH_Start+0x56>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fb40 	bl	8003ef0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fb77 	bl	8003f64 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fc06 	bl	8004088 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fbab 	bl	8003fd8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fbd4 	bl	8004030 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <HAL_ETH_Stop+0x16>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e01f      	b.n	80038f8 <HAL_ETH_Stop+0x56>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2202      	movs	r2, #2
 80038c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fb9b 	bl	8004004 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fbc4 	bl	800405c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fb62 	bl	8003f9e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fbd4 	bl	8004088 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fb22 	bl	8003f2a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_ETH_ConfigMAC+0x1c>
 8003918:	2302      	movs	r3, #2
 800391a:	e0e4      	b.n	8003ae6 <HAL_ETH_ConfigMAC+0x1e6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80b1 	beq.w	8003a96 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4b6c      	ldr	r3, [pc, #432]	; (8003af0 <HAL_ETH_ConfigMAC+0x1f0>)
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800394c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003952:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003958:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800395e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003964:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800396a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003970:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003976:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800397c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003982:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003988:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800398e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80039a6:	2001      	movs	r0, #1
 80039a8:	f7ff f922 	bl	8002bf0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80039bc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80039c2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80039c8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80039ce:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80039d4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80039da:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80039e6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80039e8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80039f2:	2001      	movs	r0, #1
 80039f4:	f7ff f8fc 	bl	8002bf0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a08:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a12:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003a22:	4013      	ands	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003a30:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003a36:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003a3c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003a42:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003a48:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a60:	2001      	movs	r0, #1
 8003a62:	f7ff f8c5 	bl	8002bf0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a86:	2001      	movs	r0, #1
 8003a88:	f7ff f8b2 	bl	8002bf0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	61da      	str	r2, [r3, #28]
 8003a94:	e01e      	b.n	8003ad4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003aa4:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	f7ff f892 	bl	8002bf0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	ff20810f 	.word	0xff20810f

08003af4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b0b0      	sub	sp, #192	; 0xc0
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b10:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b18:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003b22:	2300      	movs	r3, #0
 8003b24:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b40:	e001      	b.n	8003b46 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b4a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b50:	2300      	movs	r3, #0
 8003b52:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003b60:	2340      	movs	r3, #64	; 0x40
 8003b62:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_NONE;
 8003b76:	2310      	movs	r3, #16
 8003b78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003bc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bcc:	4ba9      	ldr	r3, [pc, #676]	; (8003e74 <ETH_MACDMAConfig+0x380>)
 8003bce:	4013      	ands	r3, r2
 8003bd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003bd8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003bdc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003be0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003be6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003bea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003bee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003bf4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003bf8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003bfc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003c00:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003c04:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003c06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003c08:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003c0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c1c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c28:	2001      	movs	r0, #1
 8003c2a:	f7fe ffe1 	bl	8002bf0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c36:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003c38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003c3c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003c3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003c40:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003c42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003c46:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003c4c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003c52:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003c58:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003c5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003c64:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003c66:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c72:	2001      	movs	r0, #1
 8003c74:	f7fe ffbc 	bl	8002bf0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c80:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c8a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003c94:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003ca0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ca4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003ca8:	4013      	ands	r3, r2
 8003caa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003cae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cb2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003cb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003cb8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003cba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003cbe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003cc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003cc4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003cca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003ccc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003cd0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003cd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ce4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f7fe ff7d 	bl	8002bf0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cfe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003d00:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003d04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f7fe ff68 	bl	8002bf0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d28:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d32:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003d38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d3c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003d46:	2300      	movs	r3, #0
 8003d48:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003d4e:	2304      	movs	r3, #4
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003d58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d5c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d68:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d72:	2300      	movs	r3, #0
 8003d74:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003d84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d88:	4b3b      	ldr	r3, [pc, #236]	; (8003e78 <ETH_MACDMAConfig+0x384>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d90:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003d92:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d94:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003d96:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003d98:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003d9a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003d9c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003d9e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003da0:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003da2:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003da4:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003da6:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003da8:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003dac:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003db0:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003db2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dca:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f7fe ff08 	bl	8002bf0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de8:	461a      	mov	r2, r3
 8003dea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003dee:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003df4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003df8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003dfc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003e00:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8003e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e04:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003e06:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003e0a:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e18:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e28:	2001      	movs	r0, #1
 8003e2a:	f7fe fee1 	bl	8002bf0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e36:	461a      	mov	r2, r3
 8003e38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e3c:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d10b      	bne.n	8003e5e <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4e:	69d9      	ldr	r1, [r3, #28]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <ETH_MACDMAConfig+0x388>)
 8003e56:	430b      	orrs	r3, r1
 8003e58:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e5c:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	461a      	mov	r2, r3
 8003e64:	2100      	movs	r1, #0
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f80a 	bl	8003e80 <ETH_MACAddressConfig>
}
 8003e6c:	bf00      	nop
 8003e6e:	37c0      	adds	r7, #192	; 0xc0
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	ff20810f 	.word	0xff20810f
 8003e78:	f8de3f23 	.word	0xf8de3f23
 8003e7c:	00010040 	.word	0x00010040

08003e80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3305      	adds	r3, #5
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	3204      	adds	r2, #4
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <ETH_MACAddressConfig+0x68>)
 8003ea2:	4413      	add	r3, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3303      	adds	r3, #3
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	061a      	lsls	r2, r3, #24
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	7812      	ldrb	r2, [r2, #0]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <ETH_MACAddressConfig+0x6c>)
 8003ed2:	4413      	add	r3, r2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6013      	str	r3, [r2, #0]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40028040 	.word	0x40028040
 8003eec:	40028044 	.word	0x40028044

08003ef0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0208 	orr.w	r2, r2, #8
 8003f0a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f14:	2001      	movs	r0, #1
 8003f16:	f7fe fe6b 	bl	8002bf0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0208 	bic.w	r2, r2, #8
 8003f44:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f7fe fe4e 	bl	8002bf0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	601a      	str	r2, [r3, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0204 	orr.w	r2, r2, #4
 8003f7e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f88:	2001      	movs	r0, #1
 8003f8a:	f7fe fe31 	bl	8002bf0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	601a      	str	r2, [r3, #0]
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0204 	bic.w	r2, r2, #4
 8003fb8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fc2:	2001      	movs	r0, #1
 8003fc4:	f7fe fe14 	bl	8002bf0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6812      	ldr	r2, [r2, #0]
 8003fee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ff2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ff6:	6193      	str	r3, [r2, #24]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800401e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004022:	6193      	str	r3, [r2, #24]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	f043 0302 	orr.w	r3, r3, #2
 800404a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800404e:	6193      	str	r3, [r2, #24]
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	f023 0302 	bic.w	r3, r3, #2
 8004076:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800407a:	6193      	str	r3, [r2, #24]
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004090:	2300      	movs	r3, #0
 8004092:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040aa:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80040b8:	2001      	movs	r0, #1
 80040ba:	f7fe fd99 	bl	8002bf0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040c8:	6193      	str	r3, [r2, #24]
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	e175      	b.n	80043e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80040f4:	2201      	movs	r2, #1
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	f040 8164 	bne.w	80043da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d005      	beq.n	800412a <HAL_GPIO_Init+0x56>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d130      	bne.n	800418c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2203      	movs	r2, #3
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004160:	2201      	movs	r2, #1
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 0201 	and.w	r2, r3, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b03      	cmp	r3, #3
 8004196:	d017      	beq.n	80041c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	2203      	movs	r2, #3
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d123      	bne.n	800421c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	220f      	movs	r2, #15
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	69b9      	ldr	r1, [r7, #24]
 8004218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0203 	and.w	r2, r3, #3
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80be 	beq.w	80043da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425e:	4b66      	ldr	r3, [pc, #408]	; (80043f8 <HAL_GPIO_Init+0x324>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	4a65      	ldr	r2, [pc, #404]	; (80043f8 <HAL_GPIO_Init+0x324>)
 8004264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004268:	6453      	str	r3, [r2, #68]	; 0x44
 800426a:	4b63      	ldr	r3, [pc, #396]	; (80043f8 <HAL_GPIO_Init+0x324>)
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004276:	4a61      	ldr	r2, [pc, #388]	; (80043fc <HAL_GPIO_Init+0x328>)
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	089b      	lsrs	r3, r3, #2
 800427c:	3302      	adds	r3, #2
 800427e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	220f      	movs	r2, #15
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a58      	ldr	r2, [pc, #352]	; (8004400 <HAL_GPIO_Init+0x32c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d037      	beq.n	8004312 <HAL_GPIO_Init+0x23e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a57      	ldr	r2, [pc, #348]	; (8004404 <HAL_GPIO_Init+0x330>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d031      	beq.n	800430e <HAL_GPIO_Init+0x23a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a56      	ldr	r2, [pc, #344]	; (8004408 <HAL_GPIO_Init+0x334>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d02b      	beq.n	800430a <HAL_GPIO_Init+0x236>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a55      	ldr	r2, [pc, #340]	; (800440c <HAL_GPIO_Init+0x338>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d025      	beq.n	8004306 <HAL_GPIO_Init+0x232>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a54      	ldr	r2, [pc, #336]	; (8004410 <HAL_GPIO_Init+0x33c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01f      	beq.n	8004302 <HAL_GPIO_Init+0x22e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a53      	ldr	r2, [pc, #332]	; (8004414 <HAL_GPIO_Init+0x340>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d019      	beq.n	80042fe <HAL_GPIO_Init+0x22a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a52      	ldr	r2, [pc, #328]	; (8004418 <HAL_GPIO_Init+0x344>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_GPIO_Init+0x226>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a51      	ldr	r2, [pc, #324]	; (800441c <HAL_GPIO_Init+0x348>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00d      	beq.n	80042f6 <HAL_GPIO_Init+0x222>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a50      	ldr	r2, [pc, #320]	; (8004420 <HAL_GPIO_Init+0x34c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d007      	beq.n	80042f2 <HAL_GPIO_Init+0x21e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a4f      	ldr	r2, [pc, #316]	; (8004424 <HAL_GPIO_Init+0x350>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d101      	bne.n	80042ee <HAL_GPIO_Init+0x21a>
 80042ea:	2309      	movs	r3, #9
 80042ec:	e012      	b.n	8004314 <HAL_GPIO_Init+0x240>
 80042ee:	230a      	movs	r3, #10
 80042f0:	e010      	b.n	8004314 <HAL_GPIO_Init+0x240>
 80042f2:	2308      	movs	r3, #8
 80042f4:	e00e      	b.n	8004314 <HAL_GPIO_Init+0x240>
 80042f6:	2307      	movs	r3, #7
 80042f8:	e00c      	b.n	8004314 <HAL_GPIO_Init+0x240>
 80042fa:	2306      	movs	r3, #6
 80042fc:	e00a      	b.n	8004314 <HAL_GPIO_Init+0x240>
 80042fe:	2305      	movs	r3, #5
 8004300:	e008      	b.n	8004314 <HAL_GPIO_Init+0x240>
 8004302:	2304      	movs	r3, #4
 8004304:	e006      	b.n	8004314 <HAL_GPIO_Init+0x240>
 8004306:	2303      	movs	r3, #3
 8004308:	e004      	b.n	8004314 <HAL_GPIO_Init+0x240>
 800430a:	2302      	movs	r3, #2
 800430c:	e002      	b.n	8004314 <HAL_GPIO_Init+0x240>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_GPIO_Init+0x240>
 8004312:	2300      	movs	r3, #0
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	f002 0203 	and.w	r2, r2, #3
 800431a:	0092      	lsls	r2, r2, #2
 800431c:	4093      	lsls	r3, r2
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4313      	orrs	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004324:	4935      	ldr	r1, [pc, #212]	; (80043fc <HAL_GPIO_Init+0x328>)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	089b      	lsrs	r3, r3, #2
 800432a:	3302      	adds	r3, #2
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004332:	4b3d      	ldr	r3, [pc, #244]	; (8004428 <HAL_GPIO_Init+0x354>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004356:	4a34      	ldr	r2, [pc, #208]	; (8004428 <HAL_GPIO_Init+0x354>)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800435c:	4b32      	ldr	r3, [pc, #200]	; (8004428 <HAL_GPIO_Init+0x354>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004380:	4a29      	ldr	r2, [pc, #164]	; (8004428 <HAL_GPIO_Init+0x354>)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004386:	4b28      	ldr	r3, [pc, #160]	; (8004428 <HAL_GPIO_Init+0x354>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043aa:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <HAL_GPIO_Init+0x354>)
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043b0:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <HAL_GPIO_Init+0x354>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4013      	ands	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043d4:	4a14      	ldr	r2, [pc, #80]	; (8004428 <HAL_GPIO_Init+0x354>)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3301      	adds	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	f67f ae86 	bls.w	80040f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	3724      	adds	r7, #36	; 0x24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40013800 	.word	0x40013800
 8004400:	40020000 	.word	0x40020000
 8004404:	40020400 	.word	0x40020400
 8004408:	40020800 	.word	0x40020800
 800440c:	40020c00 	.word	0x40020c00
 8004410:	40021000 	.word	0x40021000
 8004414:	40021400 	.word	0x40021400
 8004418:	40021800 	.word	0x40021800
 800441c:	40021c00 	.word	0x40021c00
 8004420:	40022000 	.word	0x40022000
 8004424:	40022400 	.word	0x40022400
 8004428:	40013c00 	.word	0x40013c00

0800442c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	807b      	strh	r3, [r7, #2]
 8004438:	4613      	mov	r3, r2
 800443a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800443c:	787b      	ldrb	r3, [r7, #1]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004442:	887a      	ldrh	r2, [r7, #2]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004448:	e003      	b.n	8004452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800444a:	887b      	ldrh	r3, [r7, #2]
 800444c:	041a      	lsls	r2, r3, #16
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	619a      	str	r2, [r3, #24]
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800445e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004460:	b08f      	sub	sp, #60	; 0x3c
 8004462:	af0a      	add	r7, sp, #40	; 0x28
 8004464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e116      	b.n	800469e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fe f984 	bl	8002798 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2203      	movs	r2, #3
 8004494:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f002 fa32 	bl	8006918 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	687e      	ldr	r6, [r7, #4]
 80044bc:	466d      	mov	r5, sp
 80044be:	f106 0410 	add.w	r4, r6, #16
 80044c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80044ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80044d2:	1d33      	adds	r3, r6, #4
 80044d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044d6:	6838      	ldr	r0, [r7, #0]
 80044d8:	f002 f9c6 	bl	8006868 <USB_CoreInit>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0d7      	b.n	800469e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f002 fa20 	bl	800693a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
 80044fe:	e04a      	b.n	8004596 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004500:	7bfa      	ldrb	r2, [r7, #15]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	333d      	adds	r3, #61	; 0x3d
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004514:	7bfa      	ldrb	r2, [r7, #15]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	333c      	adds	r3, #60	; 0x3c
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	b298      	uxth	r0, r3
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	3342      	adds	r3, #66	; 0x42
 800453c:	4602      	mov	r2, r0
 800453e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	333f      	adds	r3, #63	; 0x3f
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004554:	7bfa      	ldrb	r2, [r7, #15]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	3344      	adds	r3, #68	; 0x44
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3348      	adds	r3, #72	; 0x48
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800457c:	7bfa      	ldrb	r2, [r7, #15]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	3350      	adds	r3, #80	; 0x50
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	3301      	adds	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d3af      	bcc.n	8004500 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	e044      	b.n	8004630 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045bc:	7bfa      	ldrb	r2, [r7, #15]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045d2:	7bfa      	ldrb	r2, [r7, #15]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	3301      	adds	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
 8004630:	7bfa      	ldrb	r2, [r7, #15]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d3b5      	bcc.n	80045a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	687e      	ldr	r6, [r7, #4]
 8004642:	466d      	mov	r5, sp
 8004644:	f106 0410 	add.w	r4, r6, #16
 8004648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800464a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800464e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004650:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004654:	e885 0003 	stmia.w	r5, {r0, r1}
 8004658:	1d33      	adds	r3, r6, #4
 800465a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800465c:	6838      	ldr	r0, [r7, #0]
 800465e:	f002 f9b9 	bl	80069d4 <USB_DevInit>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e014      	b.n	800469e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	2b01      	cmp	r3, #1
 800468a:	d102      	bne.n	8004692 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f80b 	bl	80046a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f002 fb73 	bl	8006d82 <USB_DevDisconnect>

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080046a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046d6:	4b05      	ldr	r3, [pc, #20]	; (80046ec <HAL_PCDEx_ActivateLPM+0x44>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	10000003 	.word	0x10000003

080046f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046f4:	4b05      	ldr	r3, [pc, #20]	; (800470c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a04      	ldr	r2, [pc, #16]	; (800470c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fe:	6013      	str	r3, [r2, #0]
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40007000 	.word	0x40007000

08004710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004718:	2300      	movs	r3, #0
 800471a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e291      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8087 	beq.w	8004842 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004734:	4b96      	ldr	r3, [pc, #600]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b04      	cmp	r3, #4
 800473e:	d00c      	beq.n	800475a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004740:	4b93      	ldr	r3, [pc, #588]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b08      	cmp	r3, #8
 800474a:	d112      	bne.n	8004772 <HAL_RCC_OscConfig+0x62>
 800474c:	4b90      	ldr	r3, [pc, #576]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004758:	d10b      	bne.n	8004772 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475a:	4b8d      	ldr	r3, [pc, #564]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d06c      	beq.n	8004840 <HAL_RCC_OscConfig+0x130>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d168      	bne.n	8004840 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e26b      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x7a>
 800477c:	4b84      	ldr	r3, [pc, #528]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a83      	ldr	r2, [pc, #524]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	e02e      	b.n	80047e8 <HAL_RCC_OscConfig+0xd8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0x9c>
 8004792:	4b7f      	ldr	r3, [pc, #508]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a7e      	ldr	r2, [pc, #504]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	4b7c      	ldr	r3, [pc, #496]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a7b      	ldr	r2, [pc, #492]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80047a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e01d      	b.n	80047e8 <HAL_RCC_OscConfig+0xd8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCC_OscConfig+0xc0>
 80047b6:	4b76      	ldr	r3, [pc, #472]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a75      	ldr	r2, [pc, #468]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80047bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	4b73      	ldr	r3, [pc, #460]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a72      	ldr	r2, [pc, #456]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80047c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e00b      	b.n	80047e8 <HAL_RCC_OscConfig+0xd8>
 80047d0:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a6e      	ldr	r2, [pc, #440]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80047d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	4b6c      	ldr	r3, [pc, #432]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a6b      	ldr	r2, [pc, #428]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80047e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d013      	beq.n	8004818 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fe f9f2 	bl	8002bd8 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f8:	f7fe f9ee 	bl	8002bd8 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	; 0x64
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e21f      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480a:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0xe8>
 8004816:	e014      	b.n	8004842 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fe f9de 	bl	8002bd8 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004820:	f7fe f9da 	bl	8002bd8 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b64      	cmp	r3, #100	; 0x64
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e20b      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004832:	4b57      	ldr	r3, [pc, #348]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x110>
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d069      	beq.n	8004922 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800484e:	4b50      	ldr	r3, [pc, #320]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00b      	beq.n	8004872 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485a:	4b4d      	ldr	r3, [pc, #308]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b08      	cmp	r3, #8
 8004864:	d11c      	bne.n	80048a0 <HAL_RCC_OscConfig+0x190>
 8004866:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d116      	bne.n	80048a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004872:	4b47      	ldr	r3, [pc, #284]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_RCC_OscConfig+0x17a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d001      	beq.n	800488a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e1df      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488a:	4b41      	ldr	r3, [pc, #260]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	493d      	ldr	r1, [pc, #244]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 800489a:	4313      	orrs	r3, r2
 800489c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489e:	e040      	b.n	8004922 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d023      	beq.n	80048f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a8:	4b39      	ldr	r3, [pc, #228]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a38      	ldr	r2, [pc, #224]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80048ae:	f043 0301 	orr.w	r3, r3, #1
 80048b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fe f990 	bl	8002bd8 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048bc:	f7fe f98c 	bl	8002bd8 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e1bd      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ce:	4b30      	ldr	r3, [pc, #192]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b2d      	ldr	r3, [pc, #180]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4929      	ldr	r1, [pc, #164]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
 80048ee:	e018      	b.n	8004922 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f0:	4b27      	ldr	r3, [pc, #156]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a26      	ldr	r2, [pc, #152]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 80048f6:	f023 0301 	bic.w	r3, r3, #1
 80048fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fc:	f7fe f96c 	bl	8002bd8 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004904:	f7fe f968 	bl	8002bd8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e199      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004916:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d038      	beq.n	80049a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d019      	beq.n	800496a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004936:	4b16      	ldr	r3, [pc, #88]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800493a:	4a15      	ldr	r2, [pc, #84]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004942:	f7fe f949 	bl	8002bd8 <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800494a:	f7fe f945 	bl	8002bd8 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e176      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800495c:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 800495e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0f0      	beq.n	800494a <HAL_RCC_OscConfig+0x23a>
 8004968:	e01a      	b.n	80049a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 800496c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496e:	4a08      	ldr	r2, [pc, #32]	; (8004990 <HAL_RCC_OscConfig+0x280>)
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004976:	f7fe f92f 	bl	8002bd8 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497c:	e00a      	b.n	8004994 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497e:	f7fe f92b 	bl	8002bd8 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d903      	bls.n	8004994 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e15c      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
 8004990:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004994:	4b91      	ldr	r3, [pc, #580]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ee      	bne.n	800497e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80a4 	beq.w	8004af6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ae:	4b8b      	ldr	r3, [pc, #556]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10d      	bne.n	80049d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ba:	4b88      	ldr	r3, [pc, #544]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	4a87      	ldr	r2, [pc, #540]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 80049c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6413      	str	r3, [r2, #64]	; 0x40
 80049c6:	4b85      	ldr	r3, [pc, #532]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049d2:	2301      	movs	r3, #1
 80049d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049d6:	4b82      	ldr	r3, [pc, #520]	; (8004be0 <HAL_RCC_OscConfig+0x4d0>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d118      	bne.n	8004a14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80049e2:	4b7f      	ldr	r3, [pc, #508]	; (8004be0 <HAL_RCC_OscConfig+0x4d0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a7e      	ldr	r2, [pc, #504]	; (8004be0 <HAL_RCC_OscConfig+0x4d0>)
 80049e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ee:	f7fe f8f3 	bl	8002bd8 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f6:	f7fe f8ef 	bl	8002bd8 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b64      	cmp	r3, #100	; 0x64
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e120      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a08:	4b75      	ldr	r3, [pc, #468]	; (8004be0 <HAL_RCC_OscConfig+0x4d0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d106      	bne.n	8004a2a <HAL_RCC_OscConfig+0x31a>
 8004a1c:	4b6f      	ldr	r3, [pc, #444]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a20:	4a6e      	ldr	r2, [pc, #440]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	6713      	str	r3, [r2, #112]	; 0x70
 8004a28:	e02d      	b.n	8004a86 <HAL_RCC_OscConfig+0x376>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x33c>
 8004a32:	4b6a      	ldr	r3, [pc, #424]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a36:	4a69      	ldr	r2, [pc, #420]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a38:	f023 0301 	bic.w	r3, r3, #1
 8004a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a3e:	4b67      	ldr	r3, [pc, #412]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a42:	4a66      	ldr	r2, [pc, #408]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a44:	f023 0304 	bic.w	r3, r3, #4
 8004a48:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4a:	e01c      	b.n	8004a86 <HAL_RCC_OscConfig+0x376>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d10c      	bne.n	8004a6e <HAL_RCC_OscConfig+0x35e>
 8004a54:	4b61      	ldr	r3, [pc, #388]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	4a60      	ldr	r2, [pc, #384]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a5a:	f043 0304 	orr.w	r3, r3, #4
 8004a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004a60:	4b5e      	ldr	r3, [pc, #376]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a5d      	ldr	r2, [pc, #372]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6c:	e00b      	b.n	8004a86 <HAL_RCC_OscConfig+0x376>
 8004a6e:	4b5b      	ldr	r3, [pc, #364]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4a5a      	ldr	r2, [pc, #360]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7a:	4b58      	ldr	r3, [pc, #352]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	4a57      	ldr	r2, [pc, #348]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004a80:	f023 0304 	bic.w	r3, r3, #4
 8004a84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d015      	beq.n	8004aba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8e:	f7fe f8a3 	bl	8002bd8 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a94:	e00a      	b.n	8004aac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a96:	f7fe f89f 	bl	8002bd8 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e0ce      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aac:	4b4b      	ldr	r3, [pc, #300]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0ee      	beq.n	8004a96 <HAL_RCC_OscConfig+0x386>
 8004ab8:	e014      	b.n	8004ae4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aba:	f7fe f88d 	bl	8002bd8 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac2:	f7fe f889 	bl	8002bd8 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e0b8      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ad8:	4b40      	ldr	r3, [pc, #256]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1ee      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d105      	bne.n	8004af6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aea:	4b3c      	ldr	r3, [pc, #240]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	4a3b      	ldr	r2, [pc, #236]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80a4 	beq.w	8004c48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b00:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d06b      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d149      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b14:	4b31      	ldr	r3, [pc, #196]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a30      	ldr	r2, [pc, #192]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fe f85a 	bl	8002bd8 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b28:	f7fe f856 	bl	8002bd8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e087      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3a:	4b28      	ldr	r3, [pc, #160]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	019b      	lsls	r3, r3, #6
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	085b      	lsrs	r3, r3, #1
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	041b      	lsls	r3, r3, #16
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	061b      	lsls	r3, r3, #24
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	4a1b      	ldr	r2, [pc, #108]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b74:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fe f82a 	bl	8002bd8 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b88:	f7fe f826 	bl	8002bd8 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e057      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9a:	4b10      	ldr	r3, [pc, #64]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0x478>
 8004ba6:	e04f      	b.n	8004c48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a0b      	ldr	r2, [pc, #44]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb4:	f7fe f810 	bl	8002bd8 <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bbc:	f7fe f80c 	bl	8002bd8 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e03d      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bce:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <HAL_RCC_OscConfig+0x4cc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f0      	bne.n	8004bbc <HAL_RCC_OscConfig+0x4ac>
 8004bda:	e035      	b.n	8004c48 <HAL_RCC_OscConfig+0x538>
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004be4:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_RCC_OscConfig+0x544>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d028      	beq.n	8004c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d121      	bne.n	8004c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d11a      	bne.n	8004c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c14:	4013      	ands	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d111      	bne.n	8004c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	085b      	lsrs	r3, r3, #1
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800

08004c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0d0      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c70:	4b6a      	ldr	r3, [pc, #424]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d910      	bls.n	8004ca0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7e:	4b67      	ldr	r3, [pc, #412]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 020f 	bic.w	r2, r3, #15
 8004c86:	4965      	ldr	r1, [pc, #404]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8e:	4b63      	ldr	r3, [pc, #396]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d001      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0b8      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d020      	beq.n	8004cee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cb8:	4b59      	ldr	r3, [pc, #356]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4a58      	ldr	r2, [pc, #352]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cd0:	4b53      	ldr	r3, [pc, #332]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	4a52      	ldr	r2, [pc, #328]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cdc:	4b50      	ldr	r3, [pc, #320]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	494d      	ldr	r1, [pc, #308]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d040      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d107      	bne.n	8004d12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d02:	4b47      	ldr	r3, [pc, #284]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d115      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e07f      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d107      	bne.n	8004d2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d1a:	4b41      	ldr	r3, [pc, #260]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e073      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2a:	4b3d      	ldr	r3, [pc, #244]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e06b      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d3a:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 0203 	bic.w	r2, r3, #3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4936      	ldr	r1, [pc, #216]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4c:	f7fd ff44 	bl	8002bd8 <HAL_GetTick>
 8004d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d54:	f7fd ff40 	bl	8002bd8 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e053      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6a:	4b2d      	ldr	r3, [pc, #180]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 020c 	and.w	r2, r3, #12
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d1eb      	bne.n	8004d54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d7c:	4b27      	ldr	r3, [pc, #156]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d210      	bcs.n	8004dac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8a:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 020f 	bic.w	r2, r3, #15
 8004d92:	4922      	ldr	r1, [pc, #136]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9a:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d001      	beq.n	8004dac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e032      	b.n	8004e12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004db8:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4916      	ldr	r1, [pc, #88]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0308 	and.w	r3, r3, #8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004dd6:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	490e      	ldr	r1, [pc, #56]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004dea:	f000 f821 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 8004dee:	4602      	mov	r2, r0
 8004df0:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <HAL_RCC_ClockConfig+0x1c8>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	490a      	ldr	r1, [pc, #40]	; (8004e24 <HAL_RCC_ClockConfig+0x1cc>)
 8004dfc:	5ccb      	ldrb	r3, [r1, r3]
 8004dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004e02:	4a09      	ldr	r2, [pc, #36]	; (8004e28 <HAL_RCC_ClockConfig+0x1d0>)
 8004e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <HAL_RCC_ClockConfig+0x1d4>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fd fd3e 	bl	800288c <HAL_InitTick>

  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40023c00 	.word	0x40023c00
 8004e20:	40023800 	.word	0x40023800
 8004e24:	08026148 	.word	0x08026148
 8004e28:	20000004 	.word	0x20000004
 8004e2c:	20000008 	.word	0x20000008

08004e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e34:	b094      	sub	sp, #80	; 0x50
 8004e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e40:	2300      	movs	r3, #0
 8004e42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e48:	4b79      	ldr	r3, [pc, #484]	; (8005030 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d00d      	beq.n	8004e70 <HAL_RCC_GetSysClockFreq+0x40>
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	f200 80e1 	bhi.w	800501c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_RCC_GetSysClockFreq+0x34>
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d003      	beq.n	8004e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8004e62:	e0db      	b.n	800501c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e64:	4b73      	ldr	r3, [pc, #460]	; (8005034 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e68:	e0db      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e6a:	4b73      	ldr	r3, [pc, #460]	; (8005038 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e6e:	e0d8      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e70:	4b6f      	ldr	r3, [pc, #444]	; (8005030 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e78:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e7a:	4b6d      	ldr	r3, [pc, #436]	; (8005030 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d063      	beq.n	8004f4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e86:	4b6a      	ldr	r3, [pc, #424]	; (8005030 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	099b      	lsrs	r3, r3, #6
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e98:	633b      	str	r3, [r7, #48]	; 0x30
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	462b      	mov	r3, r5
 8004ea6:	f04f 0000 	mov.w	r0, #0
 8004eaa:	f04f 0100 	mov.w	r1, #0
 8004eae:	0159      	lsls	r1, r3, #5
 8004eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb4:	0150      	lsls	r0, r2, #5
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4621      	mov	r1, r4
 8004ebc:	1a51      	subs	r1, r2, r1
 8004ebe:	6139      	str	r1, [r7, #16]
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ed4:	4659      	mov	r1, fp
 8004ed6:	018b      	lsls	r3, r1, #6
 8004ed8:	4651      	mov	r1, sl
 8004eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ede:	4651      	mov	r1, sl
 8004ee0:	018a      	lsls	r2, r1, #6
 8004ee2:	4651      	mov	r1, sl
 8004ee4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ee8:	4659      	mov	r1, fp
 8004eea:	eb63 0901 	sbc.w	r9, r3, r1
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f02:	4690      	mov	r8, r2
 8004f04:	4699      	mov	r9, r3
 8004f06:	4623      	mov	r3, r4
 8004f08:	eb18 0303 	adds.w	r3, r8, r3
 8004f0c:	60bb      	str	r3, [r7, #8]
 8004f0e:	462b      	mov	r3, r5
 8004f10:	eb49 0303 	adc.w	r3, r9, r3
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f22:	4629      	mov	r1, r5
 8004f24:	024b      	lsls	r3, r1, #9
 8004f26:	4621      	mov	r1, r4
 8004f28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	024a      	lsls	r2, r1, #9
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f36:	2200      	movs	r2, #0
 8004f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f40:	f7fb fd1e 	bl	8000980 <__aeabi_uldivmod>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4613      	mov	r3, r2
 8004f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f4c:	e058      	b.n	8005000 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4e:	4b38      	ldr	r3, [pc, #224]	; (8005030 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	2200      	movs	r2, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	4611      	mov	r1, r2
 8004f5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f5e:	623b      	str	r3, [r7, #32]
 8004f60:	2300      	movs	r3, #0
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
 8004f64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f68:	4642      	mov	r2, r8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	f04f 0000 	mov.w	r0, #0
 8004f70:	f04f 0100 	mov.w	r1, #0
 8004f74:	0159      	lsls	r1, r3, #5
 8004f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f7a:	0150      	lsls	r0, r2, #5
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4641      	mov	r1, r8
 8004f82:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f86:	4649      	mov	r1, r9
 8004f88:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fa0:	ebb2 040a 	subs.w	r4, r2, sl
 8004fa4:	eb63 050b 	sbc.w	r5, r3, fp
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	00eb      	lsls	r3, r5, #3
 8004fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fb6:	00e2      	lsls	r2, r4, #3
 8004fb8:	4614      	mov	r4, r2
 8004fba:	461d      	mov	r5, r3
 8004fbc:	4643      	mov	r3, r8
 8004fbe:	18e3      	adds	r3, r4, r3
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	eb45 0303 	adc.w	r3, r5, r3
 8004fc8:	607b      	str	r3, [r7, #4]
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	028b      	lsls	r3, r1, #10
 8004fda:	4621      	mov	r1, r4
 8004fdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	028a      	lsls	r2, r1, #10
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fea:	2200      	movs	r2, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	61fa      	str	r2, [r7, #28]
 8004ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ff4:	f7fb fcc4 	bl	8000980 <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_RCC_GetSysClockFreq+0x200>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	0c1b      	lsrs	r3, r3, #16
 8005006:	f003 0303 	and.w	r3, r3, #3
 800500a:	3301      	adds	r3, #1
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005010:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800501a:	e002      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800501c:	4b05      	ldr	r3, [pc, #20]	; (8005034 <HAL_RCC_GetSysClockFreq+0x204>)
 800501e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005024:	4618      	mov	r0, r3
 8005026:	3750      	adds	r7, #80	; 0x50
 8005028:	46bd      	mov	sp, r7
 800502a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800502e:	bf00      	nop
 8005030:	40023800 	.word	0x40023800
 8005034:	00f42400 	.word	0x00f42400
 8005038:	007a1200 	.word	0x007a1200

0800503c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <HAL_RCC_GetHCLKFreq+0x14>)
 8005042:	681b      	ldr	r3, [r3, #0]
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000004 	.word	0x20000004

08005054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005058:	f7ff fff0 	bl	800503c <HAL_RCC_GetHCLKFreq>
 800505c:	4602      	mov	r2, r0
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	0a9b      	lsrs	r3, r3, #10
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	4903      	ldr	r1, [pc, #12]	; (8005078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800506a:	5ccb      	ldrb	r3, [r1, r3]
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40023800 	.word	0x40023800
 8005078:	08026158 	.word	0x08026158

0800507c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005080:	f7ff ffdc 	bl	800503c <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	0b5b      	lsrs	r3, r3, #13
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4903      	ldr	r1, [pc, #12]	; (80050a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40023800 	.word	0x40023800
 80050a0:	08026158 	.word	0x08026158

080050a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	220f      	movs	r2, #15
 80050b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050b4:	4b12      	ldr	r3, [pc, #72]	; (8005100 <HAL_RCC_GetClockConfig+0x5c>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0203 	and.w	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <HAL_RCC_GetClockConfig+0x5c>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <HAL_RCC_GetClockConfig+0x5c>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <HAL_RCC_GetClockConfig+0x5c>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	08db      	lsrs	r3, r3, #3
 80050de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050e6:	4b07      	ldr	r3, [pc, #28]	; (8005104 <HAL_RCC_GetClockConfig+0x60>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 020f 	and.w	r2, r3, #15
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	601a      	str	r2, [r3, #0]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	40023800 	.word	0x40023800
 8005104:	40023c00 	.word	0x40023c00

08005108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d012      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005130:	4b69      	ldr	r3, [pc, #420]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	4a68      	ldr	r2, [pc, #416]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005136:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800513a:	6093      	str	r3, [r2, #8]
 800513c:	4b66      	ldr	r3, [pc, #408]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005144:	4964      	ldr	r1, [pc, #400]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005146:	4313      	orrs	r3, r2
 8005148:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005152:	2301      	movs	r3, #1
 8005154:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d017      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005162:	4b5d      	ldr	r3, [pc, #372]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005170:	4959      	ldr	r1, [pc, #356]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005180:	d101      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005182:	2301      	movs	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800518e:	2301      	movs	r3, #1
 8005190:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d017      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800519e:	4b4e      	ldr	r3, [pc, #312]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	494a      	ldr	r1, [pc, #296]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051bc:	d101      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80051be:	2301      	movs	r3, #1
 80051c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80051ca:	2301      	movs	r3, #1
 80051cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f000 808b 	beq.w	8005302 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051ec:	4b3a      	ldr	r3, [pc, #232]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	4a39      	ldr	r2, [pc, #228]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f6:	6413      	str	r3, [r2, #64]	; 0x40
 80051f8:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005204:	4b35      	ldr	r3, [pc, #212]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a34      	ldr	r2, [pc, #208]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800520a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005210:	f7fd fce2 	bl	8002bd8 <HAL_GetTick>
 8005214:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005216:	e008      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005218:	f7fd fcde 	bl	8002bd8 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b64      	cmp	r3, #100	; 0x64
 8005224:	d901      	bls.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e357      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800522a:	4b2c      	ldr	r3, [pc, #176]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005236:	4b28      	ldr	r3, [pc, #160]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d035      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	429a      	cmp	r2, r3
 8005252:	d02e      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005254:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800525e:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005262:	4a1d      	ldr	r2, [pc, #116]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005268:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526e:	4a1a      	ldr	r2, [pc, #104]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005274:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005276:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800527c:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	d114      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd fca6 	bl	8002bd8 <HAL_GetTick>
 800528c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528e:	e00a      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005290:	f7fd fca2 	bl	8002bd8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	f241 3288 	movw	r2, #5000	; 0x1388
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e319      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0ee      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052be:	d111      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80052c0:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052cc:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052ce:	400b      	ands	r3, r1
 80052d0:	4901      	ldr	r1, [pc, #4]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
 80052d6:	e00b      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052d8:	40023800 	.word	0x40023800
 80052dc:	40007000 	.word	0x40007000
 80052e0:	0ffffcff 	.word	0x0ffffcff
 80052e4:	4baa      	ldr	r3, [pc, #680]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4aa9      	ldr	r2, [pc, #676]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052ee:	6093      	str	r3, [r2, #8]
 80052f0:	4ba7      	ldr	r3, [pc, #668]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052fc:	49a4      	ldr	r1, [pc, #656]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b00      	cmp	r3, #0
 800530c:	d010      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800530e:	4ba0      	ldr	r3, [pc, #640]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005314:	4a9e      	ldr	r2, [pc, #632]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800531a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800531e:	4b9c      	ldr	r3, [pc, #624]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005320:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	4999      	ldr	r1, [pc, #612]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800533c:	4b94      	ldr	r3, [pc, #592]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005342:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800534a:	4991      	ldr	r1, [pc, #580]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800535e:	4b8c      	ldr	r3, [pc, #560]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005364:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800536c:	4988      	ldr	r1, [pc, #544]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005380:	4b83      	ldr	r3, [pc, #524]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800538e:	4980      	ldr	r1, [pc, #512]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053a2:	4b7b      	ldr	r3, [pc, #492]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	4977      	ldr	r1, [pc, #476]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053c4:	4b72      	ldr	r3, [pc, #456]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	f023 0203 	bic.w	r2, r3, #3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	496f      	ldr	r1, [pc, #444]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053e6:	4b6a      	ldr	r3, [pc, #424]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ec:	f023 020c 	bic.w	r2, r3, #12
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f4:	4966      	ldr	r1, [pc, #408]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005408:	4b61      	ldr	r3, [pc, #388]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	495e      	ldr	r1, [pc, #376]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800542a:	4b59      	ldr	r3, [pc, #356]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005430:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005438:	4955      	ldr	r1, [pc, #340]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800544c:	4b50      	ldr	r3, [pc, #320]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	494d      	ldr	r1, [pc, #308]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800546e:	4b48      	ldr	r3, [pc, #288]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547c:	4944      	ldr	r1, [pc, #272]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005490:	4b3f      	ldr	r3, [pc, #252]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005496:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549e:	493c      	ldr	r1, [pc, #240]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80054b2:	4b37      	ldr	r3, [pc, #220]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054c0:	4933      	ldr	r1, [pc, #204]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054d4:	4b2e      	ldr	r3, [pc, #184]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054e2:	492b      	ldr	r1, [pc, #172]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d011      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054f6:	4b26      	ldr	r3, [pc, #152]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005504:	4922      	ldr	r1, [pc, #136]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005514:	d101      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005516:	2301      	movs	r3, #1
 8005518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005526:	2301      	movs	r3, #1
 8005528:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005536:	4b16      	ldr	r3, [pc, #88]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005544:	4912      	ldr	r1, [pc, #72]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00b      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005558:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005568:	4909      	ldr	r1, [pc, #36]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d006      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 80d9 	beq.w	8005736 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005584:	4b02      	ldr	r3, [pc, #8]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a01      	ldr	r2, [pc, #4]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800558a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800558e:	e001      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005590:	40023800 	.word	0x40023800
 8005594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005596:	f7fd fb1f 	bl	8002bd8 <HAL_GetTick>
 800559a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800559c:	e008      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800559e:	f7fd fb1b 	bl	8002bd8 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b64      	cmp	r3, #100	; 0x64
 80055aa:	d901      	bls.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e194      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055b0:	4b6c      	ldr	r3, [pc, #432]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f0      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d021      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d11d      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055d0:	4b64      	ldr	r3, [pc, #400]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d6:	0c1b      	lsrs	r3, r3, #16
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055de:	4b61      	ldr	r3, [pc, #388]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e4:	0e1b      	lsrs	r3, r3, #24
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	019a      	lsls	r2, r3, #6
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	431a      	orrs	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	061b      	lsls	r3, r3, #24
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	071b      	lsls	r3, r3, #28
 8005604:	4957      	ldr	r1, [pc, #348]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800562a:	2b00      	cmp	r3, #0
 800562c:	d02e      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005636:	d129      	bne.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005638:	4b4a      	ldr	r3, [pc, #296]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800563e:	0c1b      	lsrs	r3, r3, #16
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005646:	4b47      	ldr	r3, [pc, #284]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800564c:	0f1b      	lsrs	r3, r3, #28
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	019a      	lsls	r2, r3, #6
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	061b      	lsls	r3, r3, #24
 8005666:	431a      	orrs	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	071b      	lsls	r3, r3, #28
 800566c:	493d      	ldr	r1, [pc, #244]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005674:	4b3b      	ldr	r3, [pc, #236]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800567a:	f023 021f 	bic.w	r2, r3, #31
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	3b01      	subs	r3, #1
 8005684:	4937      	ldr	r1, [pc, #220]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01d      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005698:	4b32      	ldr	r3, [pc, #200]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800569a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800569e:	0e1b      	lsrs	r3, r3, #24
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056a6:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ac:	0f1b      	lsrs	r3, r3, #28
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	019a      	lsls	r2, r3, #6
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	041b      	lsls	r3, r3, #16
 80056c0:	431a      	orrs	r2, r3
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	061b      	lsls	r3, r3, #24
 80056c6:	431a      	orrs	r2, r3
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	071b      	lsls	r3, r3, #28
 80056cc:	4925      	ldr	r1, [pc, #148]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d011      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	019a      	lsls	r2, r3, #6
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	041b      	lsls	r3, r3, #16
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	061b      	lsls	r3, r3, #24
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	071b      	lsls	r3, r3, #28
 80056fc:	4919      	ldr	r1, [pc, #100]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005704:	4b17      	ldr	r3, [pc, #92]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800570a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800570e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005710:	f7fd fa62 	bl	8002bd8 <HAL_GetTick>
 8005714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005716:	e008      	b.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005718:	f7fd fa5e 	bl	8002bd8 <HAL_GetTick>
 800571c:	4602      	mov	r2, r0
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	2b64      	cmp	r3, #100	; 0x64
 8005724:	d901      	bls.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e0d7      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800572a:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f0      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b01      	cmp	r3, #1
 800573a:	f040 80cd 	bne.w	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a08      	ldr	r2, [pc, #32]	; (8005764 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800574a:	f7fd fa45 	bl	8002bd8 <HAL_GetTick>
 800574e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005750:	e00a      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005752:	f7fd fa41 	bl	8002bd8 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b64      	cmp	r3, #100	; 0x64
 800575e:	d903      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e0ba      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005764:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005768:	4b5e      	ldr	r3, [pc, #376]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005774:	d0ed      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005792:	2b00      	cmp	r3, #0
 8005794:	d02e      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d12a      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800579e:	4b51      	ldr	r3, [pc, #324]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057ac:	4b4d      	ldr	r3, [pc, #308]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b2:	0f1b      	lsrs	r3, r3, #28
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	019a      	lsls	r2, r3, #6
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	041b      	lsls	r3, r3, #16
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	061b      	lsls	r3, r3, #24
 80057cc:	431a      	orrs	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	071b      	lsls	r3, r3, #28
 80057d2:	4944      	ldr	r1, [pc, #272]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057da:	4b42      	ldr	r3, [pc, #264]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e8:	3b01      	subs	r3, #1
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	493d      	ldr	r1, [pc, #244]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d022      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005808:	d11d      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800580a:	4b36      	ldr	r3, [pc, #216]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005810:	0e1b      	lsrs	r3, r3, #24
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005818:	4b32      	ldr	r3, [pc, #200]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	0f1b      	lsrs	r3, r3, #28
 8005820:	f003 0307 	and.w	r3, r3, #7
 8005824:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	019a      	lsls	r2, r3, #6
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	041b      	lsls	r3, r3, #16
 8005832:	431a      	orrs	r2, r3
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	061b      	lsls	r3, r3, #24
 8005838:	431a      	orrs	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	071b      	lsls	r3, r3, #28
 800583e:	4929      	ldr	r1, [pc, #164]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d028      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005852:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	0e1b      	lsrs	r3, r3, #24
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005860:	4b20      	ldr	r3, [pc, #128]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	0c1b      	lsrs	r3, r3, #16
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	019a      	lsls	r2, r3, #6
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	431a      	orrs	r2, r3
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	061b      	lsls	r3, r3, #24
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	071b      	lsls	r3, r3, #28
 8005886:	4917      	ldr	r1, [pc, #92]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800588e:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	4911      	ldr	r1, [pc, #68]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058a4:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a0e      	ldr	r2, [pc, #56]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b0:	f7fd f992 	bl	8002bd8 <HAL_GetTick>
 80058b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058b6:	e008      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058b8:	f7fd f98e 	bl	8002bd8 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b64      	cmp	r3, #100	; 0x64
 80058c4:	d901      	bls.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e007      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ca:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d6:	d1ef      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40023800 	.word	0x40023800

080058e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e049      	b.n	800598e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f841 	bl	8005996 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3304      	adds	r3, #4
 8005924:	4619      	mov	r1, r3
 8005926:	4610      	mov	r0, r2
 8005928:	f000 fa00 	bl	8005d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d001      	beq.n	80059c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e054      	b.n	8005a6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68da      	ldr	r2, [r3, #12]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a26      	ldr	r2, [pc, #152]	; (8005a7c <HAL_TIM_Base_Start_IT+0xd0>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d022      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ee:	d01d      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a22      	ldr	r2, [pc, #136]	; (8005a80 <HAL_TIM_Base_Start_IT+0xd4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d018      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a21      	ldr	r2, [pc, #132]	; (8005a84 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a1f      	ldr	r2, [pc, #124]	; (8005a88 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00e      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <HAL_TIM_Base_Start_IT+0xe0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d009      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a1c      	ldr	r2, [pc, #112]	; (8005a90 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x80>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d115      	bne.n	8005a58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <HAL_TIM_Base_Start_IT+0xec>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b06      	cmp	r3, #6
 8005a3c:	d015      	beq.n	8005a6a <HAL_TIM_Base_Start_IT+0xbe>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a44:	d011      	beq.n	8005a6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0201 	orr.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a56:	e008      	b.n	8005a6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	e000      	b.n	8005a6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40001800 	.word	0x40001800
 8005a98:	00010007 	.word	0x00010007

08005a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d122      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d11b      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0202 	mvn.w	r2, #2
 8005ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f905 	bl	8005cee <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8f7 	bl	8005cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f908 	bl	8005d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d122      	bne.n	8005b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d11b      	bne.n	8005b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0204 	mvn.w	r2, #4
 8005b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f8db 	bl	8005cee <HAL_TIM_IC_CaptureCallback>
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f8cd 	bl	8005cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f8de 	bl	8005d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d122      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d11b      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0208 	mvn.w	r2, #8
 8005b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2204      	movs	r2, #4
 8005b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f8b1 	bl	8005cee <HAL_TIM_IC_CaptureCallback>
 8005b8c:	e005      	b.n	8005b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8a3 	bl	8005cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f8b4 	bl	8005d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0310 	and.w	r3, r3, #16
 8005baa:	2b10      	cmp	r3, #16
 8005bac:	d122      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0310 	and.w	r3, r3, #16
 8005bb8:	2b10      	cmp	r3, #16
 8005bba:	d11b      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0210 	mvn.w	r2, #16
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f887 	bl	8005cee <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f879 	bl	8005cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f88a 	bl	8005d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d10e      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d107      	bne.n	8005c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0201 	mvn.w	r2, #1
 8005c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fc fbb6 	bl	800238c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d10e      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c38:	2b80      	cmp	r3, #128	; 0x80
 8005c3a:	d107      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f91a 	bl	8005e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c5a:	d10e      	bne.n	8005c7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b80      	cmp	r3, #128	; 0x80
 8005c68:	d107      	bne.n	8005c7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f90d 	bl	8005e94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c84:	2b40      	cmp	r3, #64	; 0x40
 8005c86:	d10e      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b40      	cmp	r3, #64	; 0x40
 8005c94:	d107      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f838 	bl	8005d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d10e      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d107      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f06f 0220 	mvn.w	r2, #32
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f8cd 	bl	8005e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a40      	ldr	r2, [pc, #256]	; (8005e40 <TIM_Base_SetConfig+0x114>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d013      	beq.n	8005d6c <TIM_Base_SetConfig+0x40>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4a:	d00f      	beq.n	8005d6c <TIM_Base_SetConfig+0x40>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a3d      	ldr	r2, [pc, #244]	; (8005e44 <TIM_Base_SetConfig+0x118>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00b      	beq.n	8005d6c <TIM_Base_SetConfig+0x40>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a3c      	ldr	r2, [pc, #240]	; (8005e48 <TIM_Base_SetConfig+0x11c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d007      	beq.n	8005d6c <TIM_Base_SetConfig+0x40>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a3b      	ldr	r2, [pc, #236]	; (8005e4c <TIM_Base_SetConfig+0x120>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d003      	beq.n	8005d6c <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a3a      	ldr	r2, [pc, #232]	; (8005e50 <TIM_Base_SetConfig+0x124>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d108      	bne.n	8005d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a2f      	ldr	r2, [pc, #188]	; (8005e40 <TIM_Base_SetConfig+0x114>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d02b      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8c:	d027      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a2c      	ldr	r2, [pc, #176]	; (8005e44 <TIM_Base_SetConfig+0x118>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d023      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a2b      	ldr	r2, [pc, #172]	; (8005e48 <TIM_Base_SetConfig+0x11c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01f      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a2a      	ldr	r2, [pc, #168]	; (8005e4c <TIM_Base_SetConfig+0x120>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01b      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a29      	ldr	r2, [pc, #164]	; (8005e50 <TIM_Base_SetConfig+0x124>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d017      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a28      	ldr	r2, [pc, #160]	; (8005e54 <TIM_Base_SetConfig+0x128>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a27      	ldr	r2, [pc, #156]	; (8005e58 <TIM_Base_SetConfig+0x12c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00f      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a26      	ldr	r2, [pc, #152]	; (8005e5c <TIM_Base_SetConfig+0x130>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00b      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a25      	ldr	r2, [pc, #148]	; (8005e60 <TIM_Base_SetConfig+0x134>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d007      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a24      	ldr	r2, [pc, #144]	; (8005e64 <TIM_Base_SetConfig+0x138>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d003      	beq.n	8005dde <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a23      	ldr	r2, [pc, #140]	; (8005e68 <TIM_Base_SetConfig+0x13c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d108      	bne.n	8005df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <TIM_Base_SetConfig+0x114>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_Base_SetConfig+0xf8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a0c      	ldr	r2, [pc, #48]	; (8005e50 <TIM_Base_SetConfig+0x124>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d103      	bne.n	8005e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	615a      	str	r2, [r3, #20]
}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00
 8005e50:	40010400 	.word	0x40010400
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400
 8005e5c:	40014800 	.word	0x40014800
 8005e60:	40001800 	.word	0x40001800
 8005e64:	40001c00 	.word	0x40001c00
 8005e68:	40002000 	.word	0x40002000

08005e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e040      	b.n	8005f3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fc fc04 	bl	80026d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2224      	movs	r2, #36	; 0x24
 8005ed4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0201 	bic.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f8c0 	bl	800606c <UART_SetConfig>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e022      	b.n	8005f3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fb18 	bl	8006534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fb9f 	bl	8006678 <UART_CheckIdleState>
 8005f3a:	4603      	mov	r3, r0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3708      	adds	r7, #8
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	603b      	str	r3, [r7, #0]
 8005f50:	4613      	mov	r3, r2
 8005f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	f040 8081 	bne.w	8006060 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <HAL_UART_Transmit+0x26>
 8005f64:	88fb      	ldrh	r3, [r7, #6]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e079      	b.n	8006062 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_UART_Transmit+0x38>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e072      	b.n	8006062 <HAL_UART_Transmit+0x11e>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2221      	movs	r2, #33	; 0x21
 8005f90:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f92:	f7fc fe21 	bl	8002bd8 <HAL_GetTick>
 8005f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	88fa      	ldrh	r2, [r7, #6]
 8005f9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	88fa      	ldrh	r2, [r7, #6]
 8005fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb0:	d108      	bne.n	8005fc4 <HAL_UART_Transmit+0x80>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	e003      	b.n	8005fcc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005fd4:	e02c      	b.n	8006030 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2180      	movs	r1, #128	; 0x80
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 fb7c 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e038      	b.n	8006062 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006004:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	3302      	adds	r3, #2
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	e007      	b.n	800601e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	781a      	ldrb	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	3301      	adds	r3, #1
 800601c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1cc      	bne.n	8005fd6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2200      	movs	r2, #0
 8006044:	2140      	movs	r1, #64	; 0x40
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fb49 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e005      	b.n	8006062 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	e000      	b.n	8006062 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006060:	2302      	movs	r3, #2
  }
}
 8006062:	4618      	mov	r0, r3
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689a      	ldr	r2, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	4ba6      	ldr	r3, [pc, #664]	; (8006330 <UART_SetConfig+0x2c4>)
 8006098:	4013      	ands	r3, r2
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6812      	ldr	r2, [r2, #0]
 800609e:	6979      	ldr	r1, [r7, #20]
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68da      	ldr	r2, [r3, #12]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	430a      	orrs	r2, r1
 80060dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a94      	ldr	r2, [pc, #592]	; (8006334 <UART_SetConfig+0x2c8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d120      	bne.n	800612a <UART_SetConfig+0xbe>
 80060e8:	4b93      	ldr	r3, [pc, #588]	; (8006338 <UART_SetConfig+0x2cc>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d816      	bhi.n	8006124 <UART_SetConfig+0xb8>
 80060f6:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <UART_SetConfig+0x90>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	0800610d 	.word	0x0800610d
 8006100:	08006119 	.word	0x08006119
 8006104:	08006113 	.word	0x08006113
 8006108:	0800611f 	.word	0x0800611f
 800610c:	2301      	movs	r3, #1
 800610e:	77fb      	strb	r3, [r7, #31]
 8006110:	e150      	b.n	80063b4 <UART_SetConfig+0x348>
 8006112:	2302      	movs	r3, #2
 8006114:	77fb      	strb	r3, [r7, #31]
 8006116:	e14d      	b.n	80063b4 <UART_SetConfig+0x348>
 8006118:	2304      	movs	r3, #4
 800611a:	77fb      	strb	r3, [r7, #31]
 800611c:	e14a      	b.n	80063b4 <UART_SetConfig+0x348>
 800611e:	2308      	movs	r3, #8
 8006120:	77fb      	strb	r3, [r7, #31]
 8006122:	e147      	b.n	80063b4 <UART_SetConfig+0x348>
 8006124:	2310      	movs	r3, #16
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e144      	b.n	80063b4 <UART_SetConfig+0x348>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a83      	ldr	r2, [pc, #524]	; (800633c <UART_SetConfig+0x2d0>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d132      	bne.n	800619a <UART_SetConfig+0x12e>
 8006134:	4b80      	ldr	r3, [pc, #512]	; (8006338 <UART_SetConfig+0x2cc>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	f003 030c 	and.w	r3, r3, #12
 800613e:	2b0c      	cmp	r3, #12
 8006140:	d828      	bhi.n	8006194 <UART_SetConfig+0x128>
 8006142:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <UART_SetConfig+0xdc>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	0800617d 	.word	0x0800617d
 800614c:	08006195 	.word	0x08006195
 8006150:	08006195 	.word	0x08006195
 8006154:	08006195 	.word	0x08006195
 8006158:	08006189 	.word	0x08006189
 800615c:	08006195 	.word	0x08006195
 8006160:	08006195 	.word	0x08006195
 8006164:	08006195 	.word	0x08006195
 8006168:	08006183 	.word	0x08006183
 800616c:	08006195 	.word	0x08006195
 8006170:	08006195 	.word	0x08006195
 8006174:	08006195 	.word	0x08006195
 8006178:	0800618f 	.word	0x0800618f
 800617c:	2300      	movs	r3, #0
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e118      	b.n	80063b4 <UART_SetConfig+0x348>
 8006182:	2302      	movs	r3, #2
 8006184:	77fb      	strb	r3, [r7, #31]
 8006186:	e115      	b.n	80063b4 <UART_SetConfig+0x348>
 8006188:	2304      	movs	r3, #4
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e112      	b.n	80063b4 <UART_SetConfig+0x348>
 800618e:	2308      	movs	r3, #8
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	e10f      	b.n	80063b4 <UART_SetConfig+0x348>
 8006194:	2310      	movs	r3, #16
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e10c      	b.n	80063b4 <UART_SetConfig+0x348>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a68      	ldr	r2, [pc, #416]	; (8006340 <UART_SetConfig+0x2d4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d120      	bne.n	80061e6 <UART_SetConfig+0x17a>
 80061a4:	4b64      	ldr	r3, [pc, #400]	; (8006338 <UART_SetConfig+0x2cc>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061ae:	2b30      	cmp	r3, #48	; 0x30
 80061b0:	d013      	beq.n	80061da <UART_SetConfig+0x16e>
 80061b2:	2b30      	cmp	r3, #48	; 0x30
 80061b4:	d814      	bhi.n	80061e0 <UART_SetConfig+0x174>
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d009      	beq.n	80061ce <UART_SetConfig+0x162>
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d810      	bhi.n	80061e0 <UART_SetConfig+0x174>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <UART_SetConfig+0x15c>
 80061c2:	2b10      	cmp	r3, #16
 80061c4:	d006      	beq.n	80061d4 <UART_SetConfig+0x168>
 80061c6:	e00b      	b.n	80061e0 <UART_SetConfig+0x174>
 80061c8:	2300      	movs	r3, #0
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e0f2      	b.n	80063b4 <UART_SetConfig+0x348>
 80061ce:	2302      	movs	r3, #2
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e0ef      	b.n	80063b4 <UART_SetConfig+0x348>
 80061d4:	2304      	movs	r3, #4
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e0ec      	b.n	80063b4 <UART_SetConfig+0x348>
 80061da:	2308      	movs	r3, #8
 80061dc:	77fb      	strb	r3, [r7, #31]
 80061de:	e0e9      	b.n	80063b4 <UART_SetConfig+0x348>
 80061e0:	2310      	movs	r3, #16
 80061e2:	77fb      	strb	r3, [r7, #31]
 80061e4:	e0e6      	b.n	80063b4 <UART_SetConfig+0x348>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a56      	ldr	r2, [pc, #344]	; (8006344 <UART_SetConfig+0x2d8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d120      	bne.n	8006232 <UART_SetConfig+0x1c6>
 80061f0:	4b51      	ldr	r3, [pc, #324]	; (8006338 <UART_SetConfig+0x2cc>)
 80061f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061fa:	2bc0      	cmp	r3, #192	; 0xc0
 80061fc:	d013      	beq.n	8006226 <UART_SetConfig+0x1ba>
 80061fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006200:	d814      	bhi.n	800622c <UART_SetConfig+0x1c0>
 8006202:	2b80      	cmp	r3, #128	; 0x80
 8006204:	d009      	beq.n	800621a <UART_SetConfig+0x1ae>
 8006206:	2b80      	cmp	r3, #128	; 0x80
 8006208:	d810      	bhi.n	800622c <UART_SetConfig+0x1c0>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <UART_SetConfig+0x1a8>
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d006      	beq.n	8006220 <UART_SetConfig+0x1b4>
 8006212:	e00b      	b.n	800622c <UART_SetConfig+0x1c0>
 8006214:	2300      	movs	r3, #0
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e0cc      	b.n	80063b4 <UART_SetConfig+0x348>
 800621a:	2302      	movs	r3, #2
 800621c:	77fb      	strb	r3, [r7, #31]
 800621e:	e0c9      	b.n	80063b4 <UART_SetConfig+0x348>
 8006220:	2304      	movs	r3, #4
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e0c6      	b.n	80063b4 <UART_SetConfig+0x348>
 8006226:	2308      	movs	r3, #8
 8006228:	77fb      	strb	r3, [r7, #31]
 800622a:	e0c3      	b.n	80063b4 <UART_SetConfig+0x348>
 800622c:	2310      	movs	r3, #16
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e0c0      	b.n	80063b4 <UART_SetConfig+0x348>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a44      	ldr	r2, [pc, #272]	; (8006348 <UART_SetConfig+0x2dc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d125      	bne.n	8006288 <UART_SetConfig+0x21c>
 800623c:	4b3e      	ldr	r3, [pc, #248]	; (8006338 <UART_SetConfig+0x2cc>)
 800623e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800624a:	d017      	beq.n	800627c <UART_SetConfig+0x210>
 800624c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006250:	d817      	bhi.n	8006282 <UART_SetConfig+0x216>
 8006252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006256:	d00b      	beq.n	8006270 <UART_SetConfig+0x204>
 8006258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800625c:	d811      	bhi.n	8006282 <UART_SetConfig+0x216>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <UART_SetConfig+0x1fe>
 8006262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006266:	d006      	beq.n	8006276 <UART_SetConfig+0x20a>
 8006268:	e00b      	b.n	8006282 <UART_SetConfig+0x216>
 800626a:	2300      	movs	r3, #0
 800626c:	77fb      	strb	r3, [r7, #31]
 800626e:	e0a1      	b.n	80063b4 <UART_SetConfig+0x348>
 8006270:	2302      	movs	r3, #2
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e09e      	b.n	80063b4 <UART_SetConfig+0x348>
 8006276:	2304      	movs	r3, #4
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e09b      	b.n	80063b4 <UART_SetConfig+0x348>
 800627c:	2308      	movs	r3, #8
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e098      	b.n	80063b4 <UART_SetConfig+0x348>
 8006282:	2310      	movs	r3, #16
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e095      	b.n	80063b4 <UART_SetConfig+0x348>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2f      	ldr	r2, [pc, #188]	; (800634c <UART_SetConfig+0x2e0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d125      	bne.n	80062de <UART_SetConfig+0x272>
 8006292:	4b29      	ldr	r3, [pc, #164]	; (8006338 <UART_SetConfig+0x2cc>)
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800629c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a0:	d017      	beq.n	80062d2 <UART_SetConfig+0x266>
 80062a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a6:	d817      	bhi.n	80062d8 <UART_SetConfig+0x26c>
 80062a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ac:	d00b      	beq.n	80062c6 <UART_SetConfig+0x25a>
 80062ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b2:	d811      	bhi.n	80062d8 <UART_SetConfig+0x26c>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <UART_SetConfig+0x254>
 80062b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062bc:	d006      	beq.n	80062cc <UART_SetConfig+0x260>
 80062be:	e00b      	b.n	80062d8 <UART_SetConfig+0x26c>
 80062c0:	2301      	movs	r3, #1
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e076      	b.n	80063b4 <UART_SetConfig+0x348>
 80062c6:	2302      	movs	r3, #2
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e073      	b.n	80063b4 <UART_SetConfig+0x348>
 80062cc:	2304      	movs	r3, #4
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	e070      	b.n	80063b4 <UART_SetConfig+0x348>
 80062d2:	2308      	movs	r3, #8
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e06d      	b.n	80063b4 <UART_SetConfig+0x348>
 80062d8:	2310      	movs	r3, #16
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e06a      	b.n	80063b4 <UART_SetConfig+0x348>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1b      	ldr	r2, [pc, #108]	; (8006350 <UART_SetConfig+0x2e4>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d138      	bne.n	800635a <UART_SetConfig+0x2ee>
 80062e8:	4b13      	ldr	r3, [pc, #76]	; (8006338 <UART_SetConfig+0x2cc>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80062f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062f6:	d017      	beq.n	8006328 <UART_SetConfig+0x2bc>
 80062f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062fc:	d82a      	bhi.n	8006354 <UART_SetConfig+0x2e8>
 80062fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006302:	d00b      	beq.n	800631c <UART_SetConfig+0x2b0>
 8006304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006308:	d824      	bhi.n	8006354 <UART_SetConfig+0x2e8>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <UART_SetConfig+0x2aa>
 800630e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006312:	d006      	beq.n	8006322 <UART_SetConfig+0x2b6>
 8006314:	e01e      	b.n	8006354 <UART_SetConfig+0x2e8>
 8006316:	2300      	movs	r3, #0
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e04b      	b.n	80063b4 <UART_SetConfig+0x348>
 800631c:	2302      	movs	r3, #2
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	e048      	b.n	80063b4 <UART_SetConfig+0x348>
 8006322:	2304      	movs	r3, #4
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	e045      	b.n	80063b4 <UART_SetConfig+0x348>
 8006328:	2308      	movs	r3, #8
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e042      	b.n	80063b4 <UART_SetConfig+0x348>
 800632e:	bf00      	nop
 8006330:	efff69f3 	.word	0xefff69f3
 8006334:	40011000 	.word	0x40011000
 8006338:	40023800 	.word	0x40023800
 800633c:	40004400 	.word	0x40004400
 8006340:	40004800 	.word	0x40004800
 8006344:	40004c00 	.word	0x40004c00
 8006348:	40005000 	.word	0x40005000
 800634c:	40011400 	.word	0x40011400
 8006350:	40007800 	.word	0x40007800
 8006354:	2310      	movs	r3, #16
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e02c      	b.n	80063b4 <UART_SetConfig+0x348>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a72      	ldr	r2, [pc, #456]	; (8006528 <UART_SetConfig+0x4bc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d125      	bne.n	80063b0 <UART_SetConfig+0x344>
 8006364:	4b71      	ldr	r3, [pc, #452]	; (800652c <UART_SetConfig+0x4c0>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800636e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006372:	d017      	beq.n	80063a4 <UART_SetConfig+0x338>
 8006374:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006378:	d817      	bhi.n	80063aa <UART_SetConfig+0x33e>
 800637a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637e:	d00b      	beq.n	8006398 <UART_SetConfig+0x32c>
 8006380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006384:	d811      	bhi.n	80063aa <UART_SetConfig+0x33e>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <UART_SetConfig+0x326>
 800638a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800638e:	d006      	beq.n	800639e <UART_SetConfig+0x332>
 8006390:	e00b      	b.n	80063aa <UART_SetConfig+0x33e>
 8006392:	2300      	movs	r3, #0
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e00d      	b.n	80063b4 <UART_SetConfig+0x348>
 8006398:	2302      	movs	r3, #2
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e00a      	b.n	80063b4 <UART_SetConfig+0x348>
 800639e:	2304      	movs	r3, #4
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e007      	b.n	80063b4 <UART_SetConfig+0x348>
 80063a4:	2308      	movs	r3, #8
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e004      	b.n	80063b4 <UART_SetConfig+0x348>
 80063aa:	2310      	movs	r3, #16
 80063ac:	77fb      	strb	r3, [r7, #31]
 80063ae:	e001      	b.n	80063b4 <UART_SetConfig+0x348>
 80063b0:	2310      	movs	r3, #16
 80063b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063bc:	d15b      	bne.n	8006476 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80063be:	7ffb      	ldrb	r3, [r7, #31]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d828      	bhi.n	8006416 <UART_SetConfig+0x3aa>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <UART_SetConfig+0x360>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	080063f9 	.word	0x080063f9
 80063d4:	08006401 	.word	0x08006401
 80063d8:	08006417 	.word	0x08006417
 80063dc:	08006407 	.word	0x08006407
 80063e0:	08006417 	.word	0x08006417
 80063e4:	08006417 	.word	0x08006417
 80063e8:	08006417 	.word	0x08006417
 80063ec:	0800640f 	.word	0x0800640f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f0:	f7fe fe30 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 80063f4:	61b8      	str	r0, [r7, #24]
        break;
 80063f6:	e013      	b.n	8006420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f8:	f7fe fe40 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 80063fc:	61b8      	str	r0, [r7, #24]
        break;
 80063fe:	e00f      	b.n	8006420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006400:	4b4b      	ldr	r3, [pc, #300]	; (8006530 <UART_SetConfig+0x4c4>)
 8006402:	61bb      	str	r3, [r7, #24]
        break;
 8006404:	e00c      	b.n	8006420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006406:	f7fe fd13 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 800640a:	61b8      	str	r0, [r7, #24]
        break;
 800640c:	e008      	b.n	8006420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006412:	61bb      	str	r3, [r7, #24]
        break;
 8006414:	e004      	b.n	8006420 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	77bb      	strb	r3, [r7, #30]
        break;
 800641e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d074      	beq.n	8006510 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	005a      	lsls	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	441a      	add	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	fbb2 f3f3 	udiv	r3, r2, r3
 800643a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b0f      	cmp	r3, #15
 8006440:	d916      	bls.n	8006470 <UART_SetConfig+0x404>
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006448:	d212      	bcs.n	8006470 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f023 030f 	bic.w	r3, r3, #15
 8006452:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	b29b      	uxth	r3, r3
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	b29a      	uxth	r2, r3
 8006460:	89fb      	ldrh	r3, [r7, #14]
 8006462:	4313      	orrs	r3, r2
 8006464:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	89fa      	ldrh	r2, [r7, #14]
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	e04f      	b.n	8006510 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	77bb      	strb	r3, [r7, #30]
 8006474:	e04c      	b.n	8006510 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006476:	7ffb      	ldrb	r3, [r7, #31]
 8006478:	2b08      	cmp	r3, #8
 800647a:	d828      	bhi.n	80064ce <UART_SetConfig+0x462>
 800647c:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <UART_SetConfig+0x418>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	080064a9 	.word	0x080064a9
 8006488:	080064b1 	.word	0x080064b1
 800648c:	080064b9 	.word	0x080064b9
 8006490:	080064cf 	.word	0x080064cf
 8006494:	080064bf 	.word	0x080064bf
 8006498:	080064cf 	.word	0x080064cf
 800649c:	080064cf 	.word	0x080064cf
 80064a0:	080064cf 	.word	0x080064cf
 80064a4:	080064c7 	.word	0x080064c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a8:	f7fe fdd4 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 80064ac:	61b8      	str	r0, [r7, #24]
        break;
 80064ae:	e013      	b.n	80064d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b0:	f7fe fde4 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 80064b4:	61b8      	str	r0, [r7, #24]
        break;
 80064b6:	e00f      	b.n	80064d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b8:	4b1d      	ldr	r3, [pc, #116]	; (8006530 <UART_SetConfig+0x4c4>)
 80064ba:	61bb      	str	r3, [r7, #24]
        break;
 80064bc:	e00c      	b.n	80064d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064be:	f7fe fcb7 	bl	8004e30 <HAL_RCC_GetSysClockFreq>
 80064c2:	61b8      	str	r0, [r7, #24]
        break;
 80064c4:	e008      	b.n	80064d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ca:	61bb      	str	r3, [r7, #24]
        break;
 80064cc:	e004      	b.n	80064d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	77bb      	strb	r3, [r7, #30]
        break;
 80064d6:	bf00      	nop
    }

    if (pclk != 0U)
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d018      	beq.n	8006510 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	085a      	lsrs	r2, r3, #1
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	441a      	add	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b0f      	cmp	r3, #15
 80064f6:	d909      	bls.n	800650c <UART_SetConfig+0x4a0>
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fe:	d205      	bcs.n	800650c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	60da      	str	r2, [r3, #12]
 800650a:	e001      	b.n	8006510 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800651c:	7fbb      	ldrb	r3, [r7, #30]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3720      	adds	r7, #32
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40007c00 	.word	0x40007c00
 800652c:	40023800 	.word	0x40023800
 8006530:	00f42400 	.word	0x00f42400

08006534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	f003 0308 	and.w	r3, r3, #8
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00a      	beq.n	8006608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d01a      	beq.n	800664a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	430a      	orrs	r2, r1
 8006628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006632:	d10a      	bne.n	800664a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	605a      	str	r2, [r3, #4]
  }
}
 800666c:	bf00      	nop
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af02      	add	r7, sp, #8
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006688:	f7fc faa6 	bl	8002bd8 <HAL_GetTick>
 800668c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b08      	cmp	r3, #8
 800669a:	d10e      	bne.n	80066ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800669c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f817 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e00d      	b.n	80066d6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b09c      	sub	sp, #112	; 0x70
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	4613      	mov	r3, r2
 80066ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ee:	e0a5      	b.n	800683c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f6:	f000 80a1 	beq.w	800683c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fa:	f7fc fa6d 	bl	8002bd8 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006706:	429a      	cmp	r2, r3
 8006708:	d302      	bcc.n	8006710 <UART_WaitOnFlagUntilTimeout+0x32>
 800670a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800670c:	2b00      	cmp	r3, #0
 800670e:	d13e      	bne.n	800678e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800671e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006724:	667b      	str	r3, [r7, #100]	; 0x64
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800672e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006730:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006734:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800673c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e6      	bne.n	8006710 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3308      	adds	r3, #8
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	663b      	str	r3, [r7, #96]	; 0x60
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3308      	adds	r3, #8
 8006760:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006762:	64ba      	str	r2, [r7, #72]	; 0x48
 8006764:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e067      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d04f      	beq.n	800683c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067aa:	d147      	bne.n	800683c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d4:	637b      	str	r3, [r7, #52]	; 0x34
 80067d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067dc:	e841 2300 	strex	r3, r2, [r1]
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e6      	bne.n	80067b6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3308      	adds	r3, #8
 80067ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	613b      	str	r3, [r7, #16]
   return(result);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f023 0301 	bic.w	r3, r3, #1
 80067fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3308      	adds	r3, #8
 8006806:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006808:	623a      	str	r2, [r7, #32]
 800680a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	69f9      	ldr	r1, [r7, #28]
 800680e:	6a3a      	ldr	r2, [r7, #32]
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	61bb      	str	r3, [r7, #24]
   return(result);
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e5      	bne.n	80067e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e010      	b.n	800685e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	69da      	ldr	r2, [r3, #28]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	4013      	ands	r3, r2
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	429a      	cmp	r2, r3
 800684a:	bf0c      	ite	eq
 800684c:	2301      	moveq	r3, #1
 800684e:	2300      	movne	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	79fb      	ldrb	r3, [r7, #7]
 8006856:	429a      	cmp	r2, r3
 8006858:	f43f af4a 	beq.w	80066f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3770      	adds	r7, #112	; 0x70
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006868:	b084      	sub	sp, #16
 800686a:	b580      	push	{r7, lr}
 800686c:	b084      	sub	sp, #16
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	f107 001c 	add.w	r0, r7, #28
 8006876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	2b01      	cmp	r3, #1
 800687e:	d120      	bne.n	80068c2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	4b20      	ldr	r3, [pc, #128]	; (8006914 <USB_CoreInit+0xac>)
 8006892:	4013      	ands	r3, r2
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d105      	bne.n	80068b6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa92 	bl	8006de0 <USB_CoreReset>
 80068bc:	4603      	mov	r3, r0
 80068be:	73fb      	strb	r3, [r7, #15]
 80068c0:	e010      	b.n	80068e4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa86 	bl	8006de0 <USB_CoreReset>
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80068e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d10b      	bne.n	8006902 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f043 0206 	orr.w	r2, r3, #6
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f043 0220 	orr.w	r2, r3, #32
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800690e:	b004      	add	sp, #16
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	ffbdffbf 	.word	0xffbdffbf

08006918 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f023 0201 	bic.w	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d115      	bne.n	8006988 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006968:	2001      	movs	r0, #1
 800696a:	f7fc f941 	bl	8002bf0 <HAL_Delay>
      ms++;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3301      	adds	r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fa25 	bl	8006dc4 <USB_GetMode>
 800697a:	4603      	mov	r3, r0
 800697c:	2b01      	cmp	r3, #1
 800697e:	d01e      	beq.n	80069be <USB_SetCurrentMode+0x84>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b31      	cmp	r3, #49	; 0x31
 8006984:	d9f0      	bls.n	8006968 <USB_SetCurrentMode+0x2e>
 8006986:	e01a      	b.n	80069be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d115      	bne.n	80069ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800699a:	2001      	movs	r0, #1
 800699c:	f7fc f928 	bl	8002bf0 <HAL_Delay>
      ms++;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa0c 	bl	8006dc4 <USB_GetMode>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <USB_SetCurrentMode+0x84>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b31      	cmp	r3, #49	; 0x31
 80069b6:	d9f0      	bls.n	800699a <USB_SetCurrentMode+0x60>
 80069b8:	e001      	b.n	80069be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e005      	b.n	80069ca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2b32      	cmp	r3, #50	; 0x32
 80069c2:	d101      	bne.n	80069c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069d4:	b084      	sub	sp, #16
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b086      	sub	sp, #24
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069ee:	2300      	movs	r3, #0
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	e009      	b.n	8006a08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3340      	adds	r3, #64	; 0x40
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	2200      	movs	r2, #0
 8006a00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	3301      	adds	r3, #1
 8006a06:	613b      	str	r3, [r7, #16]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2b0e      	cmp	r3, #14
 8006a0c:	d9f2      	bls.n	80069f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d11c      	bne.n	8006a4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a22:	f043 0302 	orr.w	r3, r3, #2
 8006a26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e005      	b.n	8006a5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a60:	461a      	mov	r2, r3
 8006a62:	2300      	movs	r3, #0
 8006a64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a74:	461a      	mov	r2, r3
 8006a76:	680b      	ldr	r3, [r1, #0]
 8006a78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d10c      	bne.n	8006a9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d104      	bne.n	8006a90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a86:	2100      	movs	r1, #0
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f961 	bl	8006d50 <USB_SetDevSpeed>
 8006a8e:	e008      	b.n	8006aa2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a90:	2101      	movs	r1, #1
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f95c 	bl	8006d50 <USB_SetDevSpeed>
 8006a98:	e003      	b.n	8006aa2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a9a:	2103      	movs	r1, #3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f957 	bl	8006d50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006aa2:	2110      	movs	r1, #16
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8f3 	bl	8006c90 <USB_FlushTxFifo>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f91d 	bl	8006cf4 <USB_FlushRxFifo>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aca:	461a      	mov	r2, r3
 8006acc:	2300      	movs	r3, #0
 8006ace:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	e043      	b.n	8006b76 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b04:	d118      	bne.n	8006b38 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	461a      	mov	r2, r3
 8006b1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	e013      	b.n	8006b4a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	e008      	b.n	8006b4a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b44:	461a      	mov	r2, r3
 8006b46:	2300      	movs	r3, #0
 8006b48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b56:	461a      	mov	r2, r3
 8006b58:	2300      	movs	r3, #0
 8006b5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	3301      	adds	r3, #1
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d3b7      	bcc.n	8006aee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b7e:	2300      	movs	r3, #0
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	e043      	b.n	8006c0c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b9a:	d118      	bne.n	8006bce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d10a      	bne.n	8006bb8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	e013      	b.n	8006be0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	e008      	b.n	8006be0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bda:	461a      	mov	r2, r3
 8006bdc:	2300      	movs	r3, #0
 8006bde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bec:	461a      	mov	r2, r3
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	613b      	str	r3, [r7, #16]
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d3b7      	bcc.n	8006b84 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d105      	bne.n	8006c48 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	f043 0210 	orr.w	r2, r3, #16
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699a      	ldr	r2, [r3, #24]
 8006c4c:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <USB_DevInit+0x2b4>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f043 0208 	orr.w	r2, r3, #8
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d105      	bne.n	8006c78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <USB_DevInit+0x2b8>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c84:	b004      	add	sp, #16
 8006c86:	4770      	bx	lr
 8006c88:	803c3800 	.word	0x803c3800
 8006c8c:	40000004 	.word	0x40000004

08006c90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	4a12      	ldr	r2, [pc, #72]	; (8006cf0 <USB_FlushTxFifo+0x60>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e01a      	b.n	8006ce4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	daf3      	bge.n	8006c9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	019b      	lsls	r3, r3, #6
 8006cbe:	f043 0220 	orr.w	r2, r3, #32
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <USB_FlushTxFifo+0x60>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e006      	b.n	8006ce4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d0f1      	beq.n	8006cc6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	00030d40 	.word	0x00030d40

08006cf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <USB_FlushRxFifo+0x58>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d901      	bls.n	8006d10 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e017      	b.n	8006d40 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	daf3      	bge.n	8006d00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2210      	movs	r2, #16
 8006d20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	4a08      	ldr	r2, [pc, #32]	; (8006d4c <USB_FlushRxFifo+0x58>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d901      	bls.n	8006d32 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e006      	b.n	8006d40 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	d0f1      	beq.n	8006d22 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	00030d40 	.word	0x00030d40

08006d50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d70:	4313      	orrs	r3, r2
 8006d72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d9c:	f023 0303 	bic.w	r3, r3, #3
 8006da0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006db0:	f043 0302 	orr.w	r3, r3, #2
 8006db4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <USB_CoreReset+0x60>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d901      	bls.n	8006dfc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e01a      	b.n	8006e32 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	daf3      	bge.n	8006dec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f043 0201 	orr.w	r2, r3, #1
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <USB_CoreReset+0x60>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d901      	bls.n	8006e24 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e006      	b.n	8006e32 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d0f1      	beq.n	8006e14 <USB_CoreReset+0x34>

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	00030d40 	.word	0x00030d40

08006e44 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006e4a:	4ba0      	ldr	r3, [pc, #640]	; (80070cc <MX_LWIP_Init+0x288>)
 8006e4c:	22c0      	movs	r2, #192	; 0xc0
 8006e4e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006e50:	4b9e      	ldr	r3, [pc, #632]	; (80070cc <MX_LWIP_Init+0x288>)
 8006e52:	22a8      	movs	r2, #168	; 0xa8
 8006e54:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 11;
 8006e56:	4b9d      	ldr	r3, [pc, #628]	; (80070cc <MX_LWIP_Init+0x288>)
 8006e58:	220b      	movs	r2, #11
 8006e5a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8006e5c:	4b9b      	ldr	r3, [pc, #620]	; (80070cc <MX_LWIP_Init+0x288>)
 8006e5e:	2202      	movs	r2, #2
 8006e60:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006e62:	4b9b      	ldr	r3, [pc, #620]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006e64:	22ff      	movs	r2, #255	; 0xff
 8006e66:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006e68:	4b99      	ldr	r3, [pc, #612]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006e6a:	22ff      	movs	r2, #255	; 0xff
 8006e6c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006e6e:	4b98      	ldr	r3, [pc, #608]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006e70:	22ff      	movs	r2, #255	; 0xff
 8006e72:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006e74:	4b96      	ldr	r3, [pc, #600]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006e7a:	4b96      	ldr	r3, [pc, #600]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006e7c:	22c0      	movs	r2, #192	; 0xc0
 8006e7e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006e80:	4b94      	ldr	r3, [pc, #592]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006e82:	22a8      	movs	r2, #168	; 0xa8
 8006e84:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006e86:	4b93      	ldr	r3, [pc, #588]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006e8c:	4b91      	ldr	r3, [pc, #580]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006e92:	2100      	movs	r1, #0
 8006e94:	2000      	movs	r0, #0
 8006e96:	f004 f97b 	bl	800b190 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006e9a:	4b8c      	ldr	r3, [pc, #560]	; (80070cc <MX_LWIP_Init+0x288>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	061a      	lsls	r2, r3, #24
 8006ea0:	4b8a      	ldr	r3, [pc, #552]	; (80070cc <MX_LWIP_Init+0x288>)
 8006ea2:	785b      	ldrb	r3, [r3, #1]
 8006ea4:	041b      	lsls	r3, r3, #16
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	4b88      	ldr	r3, [pc, #544]	; (80070cc <MX_LWIP_Init+0x288>)
 8006eaa:	789b      	ldrb	r3, [r3, #2]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	4a86      	ldr	r2, [pc, #536]	; (80070cc <MX_LWIP_Init+0x288>)
 8006eb2:	78d2      	ldrb	r2, [r2, #3]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	061a      	lsls	r2, r3, #24
 8006eb8:	4b84      	ldr	r3, [pc, #528]	; (80070cc <MX_LWIP_Init+0x288>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	0619      	lsls	r1, r3, #24
 8006ebe:	4b83      	ldr	r3, [pc, #524]	; (80070cc <MX_LWIP_Init+0x288>)
 8006ec0:	785b      	ldrb	r3, [r3, #1]
 8006ec2:	041b      	lsls	r3, r3, #16
 8006ec4:	4319      	orrs	r1, r3
 8006ec6:	4b81      	ldr	r3, [pc, #516]	; (80070cc <MX_LWIP_Init+0x288>)
 8006ec8:	789b      	ldrb	r3, [r3, #2]
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	497f      	ldr	r1, [pc, #508]	; (80070cc <MX_LWIP_Init+0x288>)
 8006ed0:	78c9      	ldrb	r1, [r1, #3]
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006eda:	431a      	orrs	r2, r3
 8006edc:	4b7b      	ldr	r3, [pc, #492]	; (80070cc <MX_LWIP_Init+0x288>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	0619      	lsls	r1, r3, #24
 8006ee2:	4b7a      	ldr	r3, [pc, #488]	; (80070cc <MX_LWIP_Init+0x288>)
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	041b      	lsls	r3, r3, #16
 8006ee8:	4319      	orrs	r1, r3
 8006eea:	4b78      	ldr	r3, [pc, #480]	; (80070cc <MX_LWIP_Init+0x288>)
 8006eec:	789b      	ldrb	r3, [r3, #2]
 8006eee:	021b      	lsls	r3, r3, #8
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	4976      	ldr	r1, [pc, #472]	; (80070cc <MX_LWIP_Init+0x288>)
 8006ef4:	78c9      	ldrb	r1, [r1, #3]
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006efe:	431a      	orrs	r2, r3
 8006f00:	4b72      	ldr	r3, [pc, #456]	; (80070cc <MX_LWIP_Init+0x288>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	0619      	lsls	r1, r3, #24
 8006f06:	4b71      	ldr	r3, [pc, #452]	; (80070cc <MX_LWIP_Init+0x288>)
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	041b      	lsls	r3, r3, #16
 8006f0c:	4319      	orrs	r1, r3
 8006f0e:	4b6f      	ldr	r3, [pc, #444]	; (80070cc <MX_LWIP_Init+0x288>)
 8006f10:	789b      	ldrb	r3, [r3, #2]
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	430b      	orrs	r3, r1
 8006f16:	496d      	ldr	r1, [pc, #436]	; (80070cc <MX_LWIP_Init+0x288>)
 8006f18:	78c9      	ldrb	r1, [r1, #3]
 8006f1a:	430b      	orrs	r3, r1
 8006f1c:	0e1b      	lsrs	r3, r3, #24
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	4a6d      	ldr	r2, [pc, #436]	; (80070d8 <MX_LWIP_Init+0x294>)
 8006f22:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006f24:	4b6a      	ldr	r3, [pc, #424]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	061a      	lsls	r2, r3, #24
 8006f2a:	4b69      	ldr	r3, [pc, #420]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	431a      	orrs	r2, r3
 8006f32:	4b67      	ldr	r3, [pc, #412]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f34:	789b      	ldrb	r3, [r3, #2]
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	4a65      	ldr	r2, [pc, #404]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f3c:	78d2      	ldrb	r2, [r2, #3]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	061a      	lsls	r2, r3, #24
 8006f42:	4b63      	ldr	r3, [pc, #396]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	0619      	lsls	r1, r3, #24
 8006f48:	4b61      	ldr	r3, [pc, #388]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	041b      	lsls	r3, r3, #16
 8006f4e:	4319      	orrs	r1, r3
 8006f50:	4b5f      	ldr	r3, [pc, #380]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f52:	789b      	ldrb	r3, [r3, #2]
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	430b      	orrs	r3, r1
 8006f58:	495d      	ldr	r1, [pc, #372]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f5a:	78c9      	ldrb	r1, [r1, #3]
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f64:	431a      	orrs	r2, r3
 8006f66:	4b5a      	ldr	r3, [pc, #360]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	0619      	lsls	r1, r3, #24
 8006f6c:	4b58      	ldr	r3, [pc, #352]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	041b      	lsls	r3, r3, #16
 8006f72:	4319      	orrs	r1, r3
 8006f74:	4b56      	ldr	r3, [pc, #344]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f76:	789b      	ldrb	r3, [r3, #2]
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	430b      	orrs	r3, r1
 8006f7c:	4954      	ldr	r1, [pc, #336]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f7e:	78c9      	ldrb	r1, [r1, #3]
 8006f80:	430b      	orrs	r3, r1
 8006f82:	0a1b      	lsrs	r3, r3, #8
 8006f84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	4b51      	ldr	r3, [pc, #324]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	0619      	lsls	r1, r3, #24
 8006f90:	4b4f      	ldr	r3, [pc, #316]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	4319      	orrs	r1, r3
 8006f98:	4b4d      	ldr	r3, [pc, #308]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006f9a:	789b      	ldrb	r3, [r3, #2]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	430b      	orrs	r3, r1
 8006fa0:	494b      	ldr	r1, [pc, #300]	; (80070d0 <MX_LWIP_Init+0x28c>)
 8006fa2:	78c9      	ldrb	r1, [r1, #3]
 8006fa4:	430b      	orrs	r3, r1
 8006fa6:	0e1b      	lsrs	r3, r3, #24
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	4a4c      	ldr	r2, [pc, #304]	; (80070dc <MX_LWIP_Init+0x298>)
 8006fac:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006fae:	4b49      	ldr	r3, [pc, #292]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	061a      	lsls	r2, r3, #24
 8006fb4:	4b47      	ldr	r3, [pc, #284]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	041b      	lsls	r3, r3, #16
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	4b45      	ldr	r3, [pc, #276]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006fbe:	789b      	ldrb	r3, [r3, #2]
 8006fc0:	021b      	lsls	r3, r3, #8
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	4a43      	ldr	r2, [pc, #268]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006fc6:	78d2      	ldrb	r2, [r2, #3]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	061a      	lsls	r2, r3, #24
 8006fcc:	4b41      	ldr	r3, [pc, #260]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	0619      	lsls	r1, r3, #24
 8006fd2:	4b40      	ldr	r3, [pc, #256]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	4319      	orrs	r1, r3
 8006fda:	4b3e      	ldr	r3, [pc, #248]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006fdc:	789b      	ldrb	r3, [r3, #2]
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	493c      	ldr	r1, [pc, #240]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006fe4:	78c9      	ldrb	r1, [r1, #3]
 8006fe6:	430b      	orrs	r3, r1
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	4b38      	ldr	r3, [pc, #224]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	0619      	lsls	r1, r3, #24
 8006ff6:	4b37      	ldr	r3, [pc, #220]	; (80070d4 <MX_LWIP_Init+0x290>)
 8006ff8:	785b      	ldrb	r3, [r3, #1]
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	4319      	orrs	r1, r3
 8006ffe:	4b35      	ldr	r3, [pc, #212]	; (80070d4 <MX_LWIP_Init+0x290>)
 8007000:	789b      	ldrb	r3, [r3, #2]
 8007002:	021b      	lsls	r3, r3, #8
 8007004:	430b      	orrs	r3, r1
 8007006:	4933      	ldr	r1, [pc, #204]	; (80070d4 <MX_LWIP_Init+0x290>)
 8007008:	78c9      	ldrb	r1, [r1, #3]
 800700a:	430b      	orrs	r3, r1
 800700c:	0a1b      	lsrs	r3, r3, #8
 800700e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007012:	431a      	orrs	r2, r3
 8007014:	4b2f      	ldr	r3, [pc, #188]	; (80070d4 <MX_LWIP_Init+0x290>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	0619      	lsls	r1, r3, #24
 800701a:	4b2e      	ldr	r3, [pc, #184]	; (80070d4 <MX_LWIP_Init+0x290>)
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	4319      	orrs	r1, r3
 8007022:	4b2c      	ldr	r3, [pc, #176]	; (80070d4 <MX_LWIP_Init+0x290>)
 8007024:	789b      	ldrb	r3, [r3, #2]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	430b      	orrs	r3, r1
 800702a:	492a      	ldr	r1, [pc, #168]	; (80070d4 <MX_LWIP_Init+0x290>)
 800702c:	78c9      	ldrb	r1, [r1, #3]
 800702e:	430b      	orrs	r3, r1
 8007030:	0e1b      	lsrs	r3, r3, #24
 8007032:	4313      	orrs	r3, r2
 8007034:	4a2a      	ldr	r2, [pc, #168]	; (80070e0 <MX_LWIP_Init+0x29c>)
 8007036:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007038:	4b2a      	ldr	r3, [pc, #168]	; (80070e4 <MX_LWIP_Init+0x2a0>)
 800703a:	9302      	str	r3, [sp, #8]
 800703c:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <MX_LWIP_Init+0x2a4>)
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	2300      	movs	r3, #0
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4b26      	ldr	r3, [pc, #152]	; (80070e0 <MX_LWIP_Init+0x29c>)
 8007046:	4a25      	ldr	r2, [pc, #148]	; (80070dc <MX_LWIP_Init+0x298>)
 8007048:	4923      	ldr	r1, [pc, #140]	; (80070d8 <MX_LWIP_Init+0x294>)
 800704a:	4828      	ldr	r0, [pc, #160]	; (80070ec <MX_LWIP_Init+0x2a8>)
 800704c:	f005 f970 	bl	800c330 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007050:	4826      	ldr	r0, [pc, #152]	; (80070ec <MX_LWIP_Init+0x2a8>)
 8007052:	f005 fb33 	bl	800c6bc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007056:	4b25      	ldr	r3, [pc, #148]	; (80070ec <MX_LWIP_Init+0x2a8>)
 8007058:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800705c:	089b      	lsrs	r3, r3, #2
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007068:	4820      	ldr	r0, [pc, #128]	; (80070ec <MX_LWIP_Init+0x2a8>)
 800706a:	f005 fb37 	bl	800c6dc <netif_set_up>
 800706e:	e002      	b.n	8007076 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007070:	481e      	ldr	r0, [pc, #120]	; (80070ec <MX_LWIP_Init+0x2a8>)
 8007072:	f005 fba9 	bl	800c7c8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007076:	491e      	ldr	r1, [pc, #120]	; (80070f0 <MX_LWIP_Init+0x2ac>)
 8007078:	481c      	ldr	r0, [pc, #112]	; (80070ec <MX_LWIP_Init+0x2a8>)
 800707a:	f005 fc3b 	bl	800c8f4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800707e:	2200      	movs	r2, #0
 8007080:	2101      	movs	r1, #1
 8007082:	2001      	movs	r0, #1
 8007084:	f000 ff52 	bl	8007f2c <osSemaphoreNew>
 8007088:	4603      	mov	r3, r0
 800708a:	4a1a      	ldr	r2, [pc, #104]	; (80070f4 <MX_LWIP_Init+0x2b0>)
 800708c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800708e:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <MX_LWIP_Init+0x2b4>)
 8007090:	4a16      	ldr	r2, [pc, #88]	; (80070ec <MX_LWIP_Init+0x2a8>)
 8007092:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8007094:	4b17      	ldr	r3, [pc, #92]	; (80070f4 <MX_LWIP_Init+0x2b0>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a17      	ldr	r2, [pc, #92]	; (80070f8 <MX_LWIP_Init+0x2b4>)
 800709a:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800709c:	2224      	movs	r2, #36	; 0x24
 800709e:	2100      	movs	r1, #0
 80070a0:	4816      	ldr	r0, [pc, #88]	; (80070fc <MX_LWIP_Init+0x2b8>)
 80070a2:	f01a fd15 	bl	8021ad0 <memset>
  attributes.name = "LinkThr";
 80070a6:	4b15      	ldr	r3, [pc, #84]	; (80070fc <MX_LWIP_Init+0x2b8>)
 80070a8:	4a15      	ldr	r2, [pc, #84]	; (8007100 <MX_LWIP_Init+0x2bc>)
 80070aa:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80070ac:	4b13      	ldr	r3, [pc, #76]	; (80070fc <MX_LWIP_Init+0x2b8>)
 80070ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070b2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80070b4:	4b11      	ldr	r3, [pc, #68]	; (80070fc <MX_LWIP_Init+0x2b8>)
 80070b6:	2210      	movs	r2, #16
 80070b8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80070ba:	4a10      	ldr	r2, [pc, #64]	; (80070fc <MX_LWIP_Init+0x2b8>)
 80070bc:	490e      	ldr	r1, [pc, #56]	; (80070f8 <MX_LWIP_Init+0x2b4>)
 80070be:	4811      	ldr	r0, [pc, #68]	; (8007104 <MX_LWIP_Init+0x2c0>)
 80070c0:	f000 fce0 	bl	8007a84 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80070c4:	bf00      	nop
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20018d44 	.word	0x20018d44
 80070d0:	20018d48 	.word	0x20018d48
 80070d4:	20018d4c 	.word	0x20018d4c
 80070d8:	20018d38 	.word	0x20018d38
 80070dc:	20018d3c 	.word	0x20018d3c
 80070e0:	20018d40 	.word	0x20018d40
 80070e4:	0800b0cd 	.word	0x0800b0cd
 80070e8:	08007761 	.word	0x08007761
 80070ec:	20018cfc 	.word	0x20018cfc
 80070f0:	08007845 	.word	0x08007845
 80070f4:	20018cf0 	.word	0x20018cf0
 80070f8:	20018cf4 	.word	0x20018cf4
 80070fc:	20018d50 	.word	0x20018d50
 8007100:	080231f4 	.word	0x080231f4
 8007104:	080077cd 	.word	0x080077cd

08007108 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08e      	sub	sp, #56	; 0x38
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	609a      	str	r2, [r3, #8]
 800711c:	60da      	str	r2, [r3, #12]
 800711e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a52      	ldr	r2, [pc, #328]	; (8007270 <HAL_ETH_MspInit+0x168>)
 8007126:	4293      	cmp	r3, r2
 8007128:	f040 809e 	bne.w	8007268 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800712c:	4b51      	ldr	r3, [pc, #324]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	4a50      	ldr	r2, [pc, #320]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 8007132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007136:	6313      	str	r3, [r2, #48]	; 0x30
 8007138:	4b4e      	ldr	r3, [pc, #312]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007140:	623b      	str	r3, [r7, #32]
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	4b4b      	ldr	r3, [pc, #300]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	4a4a      	ldr	r2, [pc, #296]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 800714a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800714e:	6313      	str	r3, [r2, #48]	; 0x30
 8007150:	4b48      	ldr	r3, [pc, #288]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007158:	61fb      	str	r3, [r7, #28]
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4b45      	ldr	r3, [pc, #276]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	4a44      	ldr	r2, [pc, #272]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 8007162:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007166:	6313      	str	r3, [r2, #48]	; 0x30
 8007168:	4b42      	ldr	r3, [pc, #264]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007174:	4b3f      	ldr	r3, [pc, #252]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	4a3e      	ldr	r2, [pc, #248]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 800717a:	f043 0304 	orr.w	r3, r3, #4
 800717e:	6313      	str	r3, [r2, #48]	; 0x30
 8007180:	4b3c      	ldr	r3, [pc, #240]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	617b      	str	r3, [r7, #20]
 800718a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800718c:	4b39      	ldr	r3, [pc, #228]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	4a38      	ldr	r2, [pc, #224]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	6313      	str	r3, [r2, #48]	; 0x30
 8007198:	4b36      	ldr	r3, [pc, #216]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071a4:	4b33      	ldr	r3, [pc, #204]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	4a32      	ldr	r2, [pc, #200]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 80071aa:	f043 0302 	orr.w	r3, r3, #2
 80071ae:	6313      	str	r3, [r2, #48]	; 0x30
 80071b0:	4b30      	ldr	r3, [pc, #192]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80071bc:	4b2d      	ldr	r3, [pc, #180]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	4a2c      	ldr	r2, [pc, #176]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 80071c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c6:	6313      	str	r3, [r2, #48]	; 0x30
 80071c8:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <HAL_ETH_MspInit+0x16c>)
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	60bb      	str	r3, [r7, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80071d4:	2332      	movs	r3, #50	; 0x32
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d8:	2302      	movs	r3, #2
 80071da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071e0:	2303      	movs	r3, #3
 80071e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071e4:	230b      	movs	r3, #11
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ec:	4619      	mov	r1, r3
 80071ee:	4822      	ldr	r0, [pc, #136]	; (8007278 <HAL_ETH_MspInit+0x170>)
 80071f0:	f7fc ff70 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80071f4:	2386      	movs	r3, #134	; 0x86
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071f8:	2302      	movs	r3, #2
 80071fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fc:	2300      	movs	r3, #0
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007200:	2303      	movs	r3, #3
 8007202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007204:	230b      	movs	r3, #11
 8007206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800720c:	4619      	mov	r1, r3
 800720e:	481b      	ldr	r0, [pc, #108]	; (800727c <HAL_ETH_MspInit+0x174>)
 8007210:	f7fc ff60 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800721a:	2302      	movs	r3, #2
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800721e:	2300      	movs	r3, #0
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007222:	2303      	movs	r3, #3
 8007224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007226:	230b      	movs	r3, #11
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800722a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800722e:	4619      	mov	r1, r3
 8007230:	4813      	ldr	r0, [pc, #76]	; (8007280 <HAL_ETH_MspInit+0x178>)
 8007232:	f7fc ff4f 	bl	80040d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007236:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800723c:	2302      	movs	r3, #2
 800723e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007240:	2300      	movs	r3, #0
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007244:	2303      	movs	r3, #3
 8007246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007248:	230b      	movs	r3, #11
 800724a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800724c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007250:	4619      	mov	r1, r3
 8007252:	480c      	ldr	r0, [pc, #48]	; (8007284 <HAL_ETH_MspInit+0x17c>)
 8007254:	f7fc ff3e 	bl	80040d4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007258:	2200      	movs	r2, #0
 800725a:	2105      	movs	r1, #5
 800725c:	203d      	movs	r0, #61	; 0x3d
 800725e:	f7fb fda3 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007262:	203d      	movs	r0, #61	; 0x3d
 8007264:	f7fb fdbc 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007268:	bf00      	nop
 800726a:	3738      	adds	r7, #56	; 0x38
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40028000 	.word	0x40028000
 8007274:	40023800 	.word	0x40023800
 8007278:	40020800 	.word	0x40020800
 800727c:	40020000 	.word	0x40020000
 8007280:	40020400 	.word	0x40020400
 8007284:	40021800 	.word	0x40021800

08007288 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8007290:	4b04      	ldr	r3, [pc, #16]	; (80072a4 <HAL_ETH_RxCpltCallback+0x1c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	f000 ff4b 	bl	8008130 <osSemaphoreRelease>
}
 800729a:	bf00      	nop
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	2001be14 	.word	0x2001be14

080072a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b090      	sub	sp, #64	; 0x40
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80072b4:	4b61      	ldr	r3, [pc, #388]	; (800743c <low_level_init+0x194>)
 80072b6:	4a62      	ldr	r2, [pc, #392]	; (8007440 <low_level_init+0x198>)
 80072b8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80072ba:	4b60      	ldr	r3, [pc, #384]	; (800743c <low_level_init+0x194>)
 80072bc:	2201      	movs	r2, #1
 80072be:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80072c0:	4b5e      	ldr	r3, [pc, #376]	; (800743c <low_level_init+0x194>)
 80072c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072c6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80072c8:	4b5c      	ldr	r3, [pc, #368]	; (800743c <low_level_init+0x194>)
 80072ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072ce:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80072d0:	4b5a      	ldr	r3, [pc, #360]	; (800743c <low_level_init+0x194>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80072d6:	2300      	movs	r3, #0
 80072d8:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80072da:	2380      	movs	r3, #128	; 0x80
 80072dc:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80072de:	23e1      	movs	r3, #225	; 0xe1
 80072e0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80072e6:	2300      	movs	r3, #0
 80072e8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80072ea:	2300      	movs	r3, #0
 80072ec:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80072ee:	4a53      	ldr	r2, [pc, #332]	; (800743c <low_level_init+0x194>)
 80072f0:	f107 030c 	add.w	r3, r7, #12
 80072f4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80072f6:	4b51      	ldr	r3, [pc, #324]	; (800743c <low_level_init+0x194>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80072fc:	4b4f      	ldr	r3, [pc, #316]	; (800743c <low_level_init+0x194>)
 80072fe:	2200      	movs	r2, #0
 8007300:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007302:	4b4e      	ldr	r3, [pc, #312]	; (800743c <low_level_init+0x194>)
 8007304:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007308:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
  netif->flags |= NETIF_FLAG_IGMP;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007310:	f043 0320 	orr.w	r3, r3, #32
 8007314:	b2da      	uxtb	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800731c:	4847      	ldr	r0, [pc, #284]	; (800743c <low_level_init+0x194>)
 800731e:	f7fb fd6d 	bl	8002dfc <HAL_ETH_Init>
 8007322:	4603      	mov	r3, r0
 8007324:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8007328:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800732c:	2b00      	cmp	r3, #0
 800732e:	d108      	bne.n	8007342 <low_level_init+0x9a>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007336:	f043 0304 	orr.w	r3, r3, #4
 800733a:	b2da      	uxtb	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007342:	2304      	movs	r3, #4
 8007344:	4a3f      	ldr	r2, [pc, #252]	; (8007444 <low_level_init+0x19c>)
 8007346:	4940      	ldr	r1, [pc, #256]	; (8007448 <low_level_init+0x1a0>)
 8007348:	483c      	ldr	r0, [pc, #240]	; (800743c <low_level_init+0x194>)
 800734a:	f7fb feef 	bl	800312c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800734e:	2304      	movs	r3, #4
 8007350:	4a3e      	ldr	r2, [pc, #248]	; (800744c <low_level_init+0x1a4>)
 8007352:	493f      	ldr	r1, [pc, #252]	; (8007450 <low_level_init+0x1a8>)
 8007354:	4839      	ldr	r0, [pc, #228]	; (800743c <low_level_init+0x194>)
 8007356:	f7fb ff51 	bl	80031fc <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2206      	movs	r2, #6
 800735e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007362:	4b36      	ldr	r3, [pc, #216]	; (800743c <low_level_init+0x194>)
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	781a      	ldrb	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800736e:	4b33      	ldr	r3, [pc, #204]	; (800743c <low_level_init+0x194>)
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	785a      	ldrb	r2, [r3, #1]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800737a:	4b30      	ldr	r3, [pc, #192]	; (800743c <low_level_init+0x194>)
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	789a      	ldrb	r2, [r3, #2]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007386:	4b2d      	ldr	r3, [pc, #180]	; (800743c <low_level_init+0x194>)
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	78da      	ldrb	r2, [r3, #3]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007392:	4b2a      	ldr	r3, [pc, #168]	; (800743c <low_level_init+0x194>)
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	791a      	ldrb	r2, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800739e:	4b27      	ldr	r3, [pc, #156]	; (800743c <low_level_init+0x194>)
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	795a      	ldrb	r2, [r3, #5]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80073b0:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80073b8:	f043 030a 	orr.w	r3, r3, #10
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80073c4:	2200      	movs	r2, #0
 80073c6:	2101      	movs	r1, #1
 80073c8:	2001      	movs	r0, #1
 80073ca:	f000 fdaf 	bl	8007f2c <osSemaphoreNew>
 80073ce:	4603      	mov	r3, r0
 80073d0:	4a20      	ldr	r2, [pc, #128]	; (8007454 <low_level_init+0x1ac>)
 80073d2:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80073d4:	f107 0314 	add.w	r3, r7, #20
 80073d8:	2224      	movs	r2, #36	; 0x24
 80073da:	2100      	movs	r1, #0
 80073dc:	4618      	mov	r0, r3
 80073de:	f01a fb77 	bl	8021ad0 <memset>
  attributes.name = "EthIf";
 80073e2:	4b1d      	ldr	r3, [pc, #116]	; (8007458 <low_level_init+0x1b0>)
 80073e4:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80073e6:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 80073ec:	2330      	movs	r3, #48	; 0x30
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80073f0:	f107 0314 	add.w	r3, r7, #20
 80073f4:	461a      	mov	r2, r3
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4818      	ldr	r0, [pc, #96]	; (800745c <low_level_init+0x1b4>)
 80073fa:	f000 fb43 	bl	8007a84 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80073fe:	480f      	ldr	r0, [pc, #60]	; (800743c <low_level_init+0x194>)
 8007400:	f7fc fa20 	bl	8003844 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007404:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007408:	461a      	mov	r2, r3
 800740a:	211d      	movs	r1, #29
 800740c:	480b      	ldr	r0, [pc, #44]	; (800743c <low_level_init+0x194>)
 800740e:	f7fc f94b 	bl	80036a8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	f043 030b 	orr.w	r3, r3, #11
 8007418:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	461a      	mov	r2, r3
 800741e:	211d      	movs	r1, #29
 8007420:	4806      	ldr	r0, [pc, #24]	; (800743c <low_level_init+0x194>)
 8007422:	f7fc f9a9 	bl	8003778 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007426:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800742a:	461a      	mov	r2, r3
 800742c:	211d      	movs	r1, #29
 800742e:	4803      	ldr	r0, [pc, #12]	; (800743c <low_level_init+0x194>)
 8007430:	f7fc f93a 	bl	80036a8 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007434:	bf00      	nop
 8007436:	3740      	adds	r7, #64	; 0x40
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	2001be18 	.word	0x2001be18
 8007440:	40028000 	.word	0x40028000
 8007444:	2001a644 	.word	0x2001a644
 8007448:	20018df4 	.word	0x20018df4
 800744c:	20018e74 	.word	0x20018e74
 8007450:	20018d74 	.word	0x20018d74
 8007454:	2001be14 	.word	0x2001be14
 8007458:	080231fc 	.word	0x080231fc
 800745c:	08007701 	.word	0x08007701

08007460 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	; 0x28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800746a:	4b4b      	ldr	r3, [pc, #300]	; (8007598 <low_level_output+0x138>)
 800746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007482:	4b45      	ldr	r3, [pc, #276]	; (8007598 <low_level_output+0x138>)
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007488:	2300      	movs	r3, #0
 800748a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	623b      	str	r3, [r7, #32]
 8007490:	e05a      	b.n	8007548 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	da03      	bge.n	80074a2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800749a:	23f8      	movs	r3, #248	; 0xf8
 800749c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80074a0:	e05c      	b.n	800755c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	895b      	ldrh	r3, [r3, #10]
 80074a6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80074ac:	e02f      	b.n	800750e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	18d0      	adds	r0, r2, r3
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	18d1      	adds	r1, r2, r3
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80074c2:	1a9b      	subs	r3, r3, r2
 80074c4:	461a      	mov	r2, r3
 80074c6:	f01a fadb 	bl	8021a80 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	da03      	bge.n	80074e0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80074d8:	23f8      	movs	r3, #248	; 0xf8
 80074da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80074de:	e03d      	b.n	800755c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80074f0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80074fc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007508:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	4413      	add	r3, r2
 8007514:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007518:	4293      	cmp	r3, r2
 800751a:	d8c8      	bhi.n	80074ae <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	18d0      	adds	r0, r2, r3
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4413      	add	r3, r2
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4619      	mov	r1, r3
 800752e:	f01a faa7 	bl	8021a80 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4413      	add	r3, r2
 8007538:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	623b      	str	r3, [r7, #32]
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1a1      	bne.n	8007492 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800754e:	6979      	ldr	r1, [r7, #20]
 8007550:	4811      	ldr	r0, [pc, #68]	; (8007598 <low_level_output+0x138>)
 8007552:	f7fb febf 	bl	80032d4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800755c:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <low_level_output+0x138>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00d      	beq.n	800758a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <low_level_output+0x138>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007576:	461a      	mov	r2, r3
 8007578:	2320      	movs	r3, #32
 800757a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800757c:	4b06      	ldr	r3, [pc, #24]	; (8007598 <low_level_output+0x138>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007584:	461a      	mov	r2, r3
 8007586:	2300      	movs	r3, #0
 8007588:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800758a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800758e:	4618      	mov	r0, r3
 8007590:	3728      	adds	r7, #40	; 0x28
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	2001be18 	.word	0x2001be18

0800759c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08c      	sub	sp, #48	; 0x30
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80075a8:	2300      	movs	r3, #0
 80075aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80075bc:	2300      	movs	r3, #0
 80075be:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80075c0:	484e      	ldr	r0, [pc, #312]	; (80076fc <low_level_input+0x160>)
 80075c2:	f7fb ff71 	bl	80034a8 <HAL_ETH_GetReceivedFrame_IT>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <low_level_input+0x34>

    return NULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	e091      	b.n	80076f4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80075d0:	4b4a      	ldr	r3, [pc, #296]	; (80076fc <low_level_input+0x160>)
 80075d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80075d6:	4b49      	ldr	r3, [pc, #292]	; (80076fc <low_level_input+0x160>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80075dc:	89fb      	ldrh	r3, [r7, #14]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d007      	beq.n	80075f2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80075e2:	89fb      	ldrh	r3, [r7, #14]
 80075e4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80075e8:	4619      	mov	r1, r3
 80075ea:	2000      	movs	r0, #0
 80075ec:	f005 fa4c 	bl	800ca88 <pbuf_alloc>
 80075f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80075f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d04b      	beq.n	8007690 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80075f8:	4b40      	ldr	r3, [pc, #256]	; (80076fc <low_level_input+0x160>)
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	62bb      	str	r3, [r7, #40]	; 0x28
 8007606:	e040      	b.n	800768a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760a:	895b      	ldrh	r3, [r3, #10]
 800760c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800760e:	2300      	movs	r3, #0
 8007610:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007612:	e021      	b.n	8007658 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	18d0      	adds	r0, r2, r3
 800761c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	18d1      	adds	r1, r2, r3
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	461a      	mov	r2, r3
 800762c:	f01a fa28 	bl	8021a80 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	4413      	add	r3, r2
 8007642:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007646:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007652:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007662:	4293      	cmp	r3, r2
 8007664:	d8d6      	bhi.n	8007614 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	18d0      	adds	r0, r2, r3
 800766e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4619      	mov	r1, r3
 8007678:	f01a fa02 	bl	8021a80 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800767c:	69fa      	ldr	r2, [r7, #28]
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	4413      	add	r3, r2
 8007682:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	62bb      	str	r3, [r7, #40]	; 0x28
 800768a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1bb      	bne.n	8007608 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007690:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <low_level_input+0x160>)
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	e00b      	b.n	80076b4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	3301      	adds	r3, #1
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	4b11      	ldr	r3, [pc, #68]	; (80076fc <low_level_input+0x160>)
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d3ee      	bcc.n	800769c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80076be:	4b0f      	ldr	r3, [pc, #60]	; (80076fc <low_level_input+0x160>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80076c4:	4b0d      	ldr	r3, [pc, #52]	; (80076fc <low_level_input+0x160>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00d      	beq.n	80076f2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80076d6:	4b09      	ldr	r3, [pc, #36]	; (80076fc <low_level_input+0x160>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076de:	461a      	mov	r2, r3
 80076e0:	2380      	movs	r3, #128	; 0x80
 80076e2:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <low_level_input+0x160>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076ec:	461a      	mov	r2, r3
 80076ee:	2300      	movs	r3, #0
 80076f0:	6093      	str	r3, [r2, #8]
  }
  return p;
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3730      	adds	r7, #48	; 0x30
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	2001be18 	.word	0x2001be18

08007700 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800770c:	4b12      	ldr	r3, [pc, #72]	; (8007758 <ethernetif_input+0x58>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fca5 	bl	8008064 <osSemaphoreAcquire>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1f5      	bne.n	800770c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8007720:	480e      	ldr	r0, [pc, #56]	; (800775c <ethernetif_input+0x5c>)
 8007722:	f00f f944 	bl	80169ae <sys_mutex_lock>
        p = low_level_input( netif );
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff ff38 	bl	800759c <low_level_input>
 800772c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00a      	beq.n	800774a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	68f9      	ldr	r1, [r7, #12]
 800773a:	68b8      	ldr	r0, [r7, #8]
 800773c:	4798      	blx	r3
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007744:	68b8      	ldr	r0, [r7, #8]
 8007746:	f005 fc83 	bl	800d050 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800774a:	4804      	ldr	r0, [pc, #16]	; (800775c <ethernetif_input+0x5c>)
 800774c:	f00f f93e 	bl	80169cc <sys_mutex_unlock>
      } while(p!=NULL);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e4      	bne.n	8007720 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007756:	e7d9      	b.n	800770c <ethernetif_input+0xc>
 8007758:	2001be14 	.word	0x2001be14
 800775c:	20035334 	.word	0x20035334

08007760 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <ethernetif_init+0x1c>
 800776e:	4b0e      	ldr	r3, [pc, #56]	; (80077a8 <ethernetif_init+0x48>)
 8007770:	f240 223b 	movw	r2, #571	; 0x23b
 8007774:	490d      	ldr	r1, [pc, #52]	; (80077ac <ethernetif_init+0x4c>)
 8007776:	480e      	ldr	r0, [pc, #56]	; (80077b0 <ethernetif_init+0x50>)
 8007778:	f01a faa8 	bl	8021ccc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2273      	movs	r2, #115	; 0x73
 8007780:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2274      	movs	r2, #116	; 0x74
 8007788:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a09      	ldr	r2, [pc, #36]	; (80077b4 <ethernetif_init+0x54>)
 8007790:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <ethernetif_init+0x58>)
 8007796:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fd85 	bl	80072a8 <low_level_init>

  return ERR_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	08023204 	.word	0x08023204
 80077ac:	08023220 	.word	0x08023220
 80077b0:	08023230 	.word	0x08023230
 80077b4:	080140c1 	.word	0x080140c1
 80077b8:	08007461 	.word	0x08007461

080077bc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80077c0:	f7fb fa0a 	bl	8002bd8 <HAL_GetTick>
 80077c4:	4603      	mov	r3, r0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80077dc:	f107 0308 	add.w	r3, r7, #8
 80077e0:	461a      	mov	r2, r3
 80077e2:	2101      	movs	r1, #1
 80077e4:	4816      	ldr	r0, [pc, #88]	; (8007840 <ethernetif_set_link+0x74>)
 80077e6:	f7fb ff5f 	bl	80036a8 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d108      	bne.n	8007814 <ethernetif_set_link+0x48>
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d005      	beq.n	8007814 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4618      	mov	r0, r3
 800780e:	f005 f80d 	bl	800c82c <netif_set_link_up>
 8007812:	e011      	b.n	8007838 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800781c:	089b      	lsrs	r3, r3, #2
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d007      	beq.n	8007838 <ethernetif_set_link+0x6c>
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d104      	bne.n	8007838 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4618      	mov	r0, r3
 8007834:	f005 f82e 	bl	800c894 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8007838:	20c8      	movs	r0, #200	; 0xc8
 800783a:	f000 f9c9 	bl	8007bd0 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800783e:	e7cd      	b.n	80077dc <ethernetif_set_link+0x10>
 8007840:	2001be18 	.word	0x2001be18

08007844 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800785a:	089b      	lsrs	r3, r3, #2
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d05d      	beq.n	8007922 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007866:	4b34      	ldr	r3, [pc, #208]	; (8007938 <ethernetif_update_config+0xf4>)
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d03f      	beq.n	80078ee <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800786e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007872:	2100      	movs	r1, #0
 8007874:	4830      	ldr	r0, [pc, #192]	; (8007938 <ethernetif_update_config+0xf4>)
 8007876:	f7fb ff7f 	bl	8003778 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800787a:	f7fb f9ad 	bl	8002bd8 <HAL_GetTick>
 800787e:	4603      	mov	r3, r0
 8007880:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007882:	f107 0308 	add.w	r3, r7, #8
 8007886:	461a      	mov	r2, r3
 8007888:	2101      	movs	r1, #1
 800788a:	482b      	ldr	r0, [pc, #172]	; (8007938 <ethernetif_update_config+0xf4>)
 800788c:	f7fb ff0c 	bl	80036a8 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007890:	f7fb f9a2 	bl	8002bd8 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800789e:	d828      	bhi.n	80078f2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f003 0320 	and.w	r3, r3, #32
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0eb      	beq.n	8007882 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80078aa:	f107 0308 	add.w	r3, r7, #8
 80078ae:	461a      	mov	r2, r3
 80078b0:	2110      	movs	r1, #16
 80078b2:	4821      	ldr	r0, [pc, #132]	; (8007938 <ethernetif_update_config+0xf4>)
 80078b4:	f7fb fef8 	bl	80036a8 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80078c2:	4b1d      	ldr	r3, [pc, #116]	; (8007938 <ethernetif_update_config+0xf4>)
 80078c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078c8:	60da      	str	r2, [r3, #12]
 80078ca:	e002      	b.n	80078d2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80078cc:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <ethernetif_update_config+0xf4>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f003 0302 	and.w	r3, r3, #2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80078dc:	4b16      	ldr	r3, [pc, #88]	; (8007938 <ethernetif_update_config+0xf4>)
 80078de:	2200      	movs	r2, #0
 80078e0:	609a      	str	r2, [r3, #8]
 80078e2:	e016      	b.n	8007912 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80078e4:	4b14      	ldr	r3, [pc, #80]	; (8007938 <ethernetif_update_config+0xf4>)
 80078e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	e011      	b.n	8007912 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80078ee:	bf00      	nop
 80078f0:	e000      	b.n	80078f4 <ethernetif_update_config+0xb0>
          goto error;
 80078f2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80078f4:	4b10      	ldr	r3, [pc, #64]	; (8007938 <ethernetif_update_config+0xf4>)
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	08db      	lsrs	r3, r3, #3
 80078fa:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80078fc:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <ethernetif_update_config+0xf4>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	085b      	lsrs	r3, r3, #1
 8007902:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007904:	4313      	orrs	r3, r2
 8007906:	b29b      	uxth	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	2100      	movs	r1, #0
 800790c:	480a      	ldr	r0, [pc, #40]	; (8007938 <ethernetif_update_config+0xf4>)
 800790e:	f7fb ff33 	bl	8003778 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007912:	2100      	movs	r1, #0
 8007914:	4808      	ldr	r0, [pc, #32]	; (8007938 <ethernetif_update_config+0xf4>)
 8007916:	f7fb fff3 	bl	8003900 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800791a:	4807      	ldr	r0, [pc, #28]	; (8007938 <ethernetif_update_config+0xf4>)
 800791c:	f7fb ff92 	bl	8003844 <HAL_ETH_Start>
 8007920:	e002      	b.n	8007928 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007922:	4805      	ldr	r0, [pc, #20]	; (8007938 <ethernetif_update_config+0xf4>)
 8007924:	f7fb ffbd 	bl	80038a2 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f807 	bl	800793c <ethernetif_notify_conn_changed>
}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	2001be18 	.word	0x2001be18

0800793c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007950:	b480      	push	{r7}
 8007952:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8007954:	bf00      	nop
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
	...

08007960 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007966:	f3ef 8305 	mrs	r3, IPSR
 800796a:	60bb      	str	r3, [r7, #8]
  return(result);
 800796c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10f      	bne.n	8007992 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007972:	f3ef 8310 	mrs	r3, PRIMASK
 8007976:	607b      	str	r3, [r7, #4]
  return(result);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d105      	bne.n	800798a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800797e:	f3ef 8311 	mrs	r3, BASEPRI
 8007982:	603b      	str	r3, [r7, #0]
  return(result);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <osKernelInitialize+0x3a>
 800798a:	4b0e      	ldr	r3, [pc, #56]	; (80079c4 <osKernelInitialize+0x64>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d103      	bne.n	800799a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007992:	f06f 0305 	mvn.w	r3, #5
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	e00c      	b.n	80079b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800799a:	4b0a      	ldr	r3, [pc, #40]	; (80079c4 <osKernelInitialize+0x64>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d105      	bne.n	80079ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80079a2:	4b08      	ldr	r3, [pc, #32]	; (80079c4 <osKernelInitialize+0x64>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e002      	b.n	80079b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80079ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80079b4:	68fb      	ldr	r3, [r7, #12]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	2001be60 	.word	0x2001be60

080079c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079ce:	f3ef 8305 	mrs	r3, IPSR
 80079d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80079d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10f      	bne.n	80079fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079da:	f3ef 8310 	mrs	r3, PRIMASK
 80079de:	607b      	str	r3, [r7, #4]
  return(result);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d105      	bne.n	80079f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079e6:	f3ef 8311 	mrs	r3, BASEPRI
 80079ea:	603b      	str	r3, [r7, #0]
  return(result);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d007      	beq.n	8007a02 <osKernelStart+0x3a>
 80079f2:	4b0f      	ldr	r3, [pc, #60]	; (8007a30 <osKernelStart+0x68>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d103      	bne.n	8007a02 <osKernelStart+0x3a>
    stat = osErrorISR;
 80079fa:	f06f 0305 	mvn.w	r3, #5
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	e010      	b.n	8007a24 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a02:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <osKernelStart+0x68>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d109      	bne.n	8007a1e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a0a:	f7ff ffa1 	bl	8007950 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a0e:	4b08      	ldr	r3, [pc, #32]	; (8007a30 <osKernelStart+0x68>)
 8007a10:	2202      	movs	r2, #2
 8007a12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a14:	f001 fe96 	bl	8009744 <vTaskStartScheduler>
      stat = osOK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e002      	b.n	8007a24 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007a24:	68fb      	ldr	r3, [r7, #12]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	2001be60 	.word	0x2001be60

08007a34 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a3a:	f3ef 8305 	mrs	r3, IPSR
 8007a3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a40:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10f      	bne.n	8007a66 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a46:	f3ef 8310 	mrs	r3, PRIMASK
 8007a4a:	607b      	str	r3, [r7, #4]
  return(result);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d105      	bne.n	8007a5e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a52:	f3ef 8311 	mrs	r3, BASEPRI
 8007a56:	603b      	str	r3, [r7, #0]
  return(result);
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <osKernelGetTickCount+0x3a>
 8007a5e:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <osKernelGetTickCount+0x4c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d103      	bne.n	8007a6e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8007a66:	f001 ff7b 	bl	8009960 <xTaskGetTickCountFromISR>
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	e002      	b.n	8007a74 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8007a6e:	f001 ff67 	bl	8009940 <xTaskGetTickCount>
 8007a72:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8007a74:	68fb      	ldr	r3, [r7, #12]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	2001be60 	.word	0x2001be60

08007a84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b090      	sub	sp, #64	; 0x40
 8007a88:	af04      	add	r7, sp, #16
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a94:	f3ef 8305 	mrs	r3, IPSR
 8007a98:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a9a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f040 808f 	bne.w	8007bc0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8007aa6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d105      	bne.n	8007aba <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007aae:	f3ef 8311 	mrs	r3, BASEPRI
 8007ab2:	617b      	str	r3, [r7, #20]
  return(result);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <osThreadNew+0x3e>
 8007aba:	4b44      	ldr	r3, [pc, #272]	; (8007bcc <osThreadNew+0x148>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d07e      	beq.n	8007bc0 <osThreadNew+0x13c>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d07b      	beq.n	8007bc0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8007ac8:	2380      	movs	r3, #128	; 0x80
 8007aca:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8007acc:	2318      	movs	r3, #24
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ad8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d045      	beq.n	8007b6c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d002      	beq.n	8007aee <osThreadNew+0x6a>
        name = attr->name;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d008      	beq.n	8007b14 <osThreadNew+0x90>
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	2b38      	cmp	r3, #56	; 0x38
 8007b06:	d805      	bhi.n	8007b14 <osThreadNew+0x90>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <osThreadNew+0x94>
        return (NULL);
 8007b14:	2300      	movs	r3, #0
 8007b16:	e054      	b.n	8007bc2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	089b      	lsrs	r3, r3, #2
 8007b26:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00e      	beq.n	8007b4e <osThreadNew+0xca>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	2bcb      	cmp	r3, #203	; 0xcb
 8007b36:	d90a      	bls.n	8007b4e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d006      	beq.n	8007b4e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <osThreadNew+0xca>
        mem = 1;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	623b      	str	r3, [r7, #32]
 8007b4c:	e010      	b.n	8007b70 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10c      	bne.n	8007b70 <osThreadNew+0xec>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d108      	bne.n	8007b70 <osThreadNew+0xec>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d104      	bne.n	8007b70 <osThreadNew+0xec>
          mem = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	623b      	str	r3, [r7, #32]
 8007b6a:	e001      	b.n	8007b70 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d110      	bne.n	8007b98 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b7e:	9202      	str	r2, [sp, #8]
 8007b80:	9301      	str	r3, [sp, #4]
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f001 fc37 	bl	8009400 <xTaskCreateStatic>
 8007b92:	4603      	mov	r3, r0
 8007b94:	613b      	str	r3, [r7, #16]
 8007b96:	e013      	b.n	8007bc0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d110      	bne.n	8007bc0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	f107 0310 	add.w	r3, r7, #16
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f001 fc58 	bl	8009466 <xTaskCreate>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d001      	beq.n	8007bc0 <osThreadNew+0x13c>
          hTask = NULL;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007bc0:	693b      	ldr	r3, [r7, #16]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3730      	adds	r7, #48	; 0x30
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	2001be60 	.word	0x2001be60

08007bd0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bd8:	f3ef 8305 	mrs	r3, IPSR
 8007bdc:	613b      	str	r3, [r7, #16]
  return(result);
 8007bde:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10f      	bne.n	8007c04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be4:	f3ef 8310 	mrs	r3, PRIMASK
 8007be8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d105      	bne.n	8007bfc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8007bf4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d007      	beq.n	8007c0c <osDelay+0x3c>
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <osDelay+0x58>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d103      	bne.n	8007c0c <osDelay+0x3c>
    stat = osErrorISR;
 8007c04:	f06f 0305 	mvn.w	r3, #5
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	e007      	b.n	8007c1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fd70 	bl	80096fc <vTaskDelay>
    }
  }

  return (stat);
 8007c1c:	697b      	ldr	r3, [r7, #20]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	2001be60 	.word	0x2001be60

08007c2c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08a      	sub	sp, #40	; 0x28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c38:	f3ef 8305 	mrs	r3, IPSR
 8007c3c:	613b      	str	r3, [r7, #16]
  return(result);
 8007c3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f040 8085 	bne.w	8007d50 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c46:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d105      	bne.n	8007c5e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c52:	f3ef 8311 	mrs	r3, BASEPRI
 8007c56:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <osMutexNew+0x3a>
 8007c5e:	4b3f      	ldr	r3, [pc, #252]	; (8007d5c <osMutexNew+0x130>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d074      	beq.n	8007d50 <osMutexNew+0x124>
    if (attr != NULL) {
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	623b      	str	r3, [r7, #32]
 8007c72:	e001      	b.n	8007c78 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007c74:	2300      	movs	r3, #0
 8007c76:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <osMutexNew+0x5c>
      rmtx = 1U;
 8007c82:	2301      	movs	r3, #1
 8007c84:	61fb      	str	r3, [r7, #28]
 8007c86:	e001      	b.n	8007c8c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	f003 0308 	and.w	r3, r3, #8
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d15c      	bne.n	8007d50 <osMutexNew+0x124>
      mem = -1;
 8007c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c9a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d015      	beq.n	8007cce <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d006      	beq.n	8007cb8 <osMutexNew+0x8c>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	2b4f      	cmp	r3, #79	; 0x4f
 8007cb0:	d902      	bls.n	8007cb8 <osMutexNew+0x8c>
          mem = 1;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	61bb      	str	r3, [r7, #24]
 8007cb6:	e00c      	b.n	8007cd2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d108      	bne.n	8007cd2 <osMutexNew+0xa6>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d104      	bne.n	8007cd2 <osMutexNew+0xa6>
            mem = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61bb      	str	r3, [r7, #24]
 8007ccc:	e001      	b.n	8007cd2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d112      	bne.n	8007cfe <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d007      	beq.n	8007cee <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	2004      	movs	r0, #4
 8007ce6:	f000 fe08 	bl	80088fa <xQueueCreateMutexStatic>
 8007cea:	6278      	str	r0, [r7, #36]	; 0x24
 8007cec:	e016      	b.n	8007d1c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	2001      	movs	r0, #1
 8007cf6:	f000 fe00 	bl	80088fa <xQueueCreateMutexStatic>
 8007cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8007cfc:	e00e      	b.n	8007d1c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10b      	bne.n	8007d1c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d004      	beq.n	8007d14 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007d0a:	2004      	movs	r0, #4
 8007d0c:	f000 fddd 	bl	80088ca <xQueueCreateMutex>
 8007d10:	6278      	str	r0, [r7, #36]	; 0x24
 8007d12:	e003      	b.n	8007d1c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007d14:	2001      	movs	r0, #1
 8007d16:	f000 fdd8 	bl	80088ca <xQueueCreateMutex>
 8007d1a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00c      	beq.n	8007d3c <osMutexNew+0x110>
        if (attr != NULL) {
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <osMutexNew+0x104>
          name = attr->name;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	e001      	b.n	8007d34 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007d30:	2300      	movs	r3, #0
 8007d32:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007d34:	6979      	ldr	r1, [r7, #20]
 8007d36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d38:	f001 fada 	bl	80092f0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d006      	beq.n	8007d50 <osMutexNew+0x124>
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	f043 0301 	orr.w	r3, r3, #1
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3728      	adds	r7, #40	; 0x28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	2001be60 	.word	0x2001be60

08007d60 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f023 0301 	bic.w	r3, r3, #1
 8007d70:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d7e:	f3ef 8305 	mrs	r3, IPSR
 8007d82:	613b      	str	r3, [r7, #16]
  return(result);
 8007d84:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10f      	bne.n	8007daa <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d105      	bne.n	8007da2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d96:	f3ef 8311 	mrs	r3, BASEPRI
 8007d9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d007      	beq.n	8007db2 <osMutexAcquire+0x52>
 8007da2:	4b1d      	ldr	r3, [pc, #116]	; (8007e18 <osMutexAcquire+0xb8>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d103      	bne.n	8007db2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8007daa:	f06f 0305 	mvn.w	r3, #5
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	e02c      	b.n	8007e0c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d103      	bne.n	8007dc0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8007db8:	f06f 0303 	mvn.w	r3, #3
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	e025      	b.n	8007e0c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d011      	beq.n	8007dea <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	69b8      	ldr	r0, [r7, #24]
 8007dca:	f000 fdd7 	bl	800897c <xQueueTakeMutexRecursive>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d01b      	beq.n	8007e0c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8007dda:	f06f 0301 	mvn.w	r3, #1
 8007dde:	61fb      	str	r3, [r7, #28]
 8007de0:	e014      	b.n	8007e0c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007de2:	f06f 0302 	mvn.w	r3, #2
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	e010      	b.n	8007e0c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	69b8      	ldr	r0, [r7, #24]
 8007dee:	f001 f81f 	bl	8008e30 <xQueueSemaphoreTake>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d009      	beq.n	8007e0c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8007dfe:	f06f 0301 	mvn.w	r3, #1
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	e002      	b.n	8007e0c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8007e06:	f06f 0302 	mvn.w	r3, #2
 8007e0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007e0c:	69fb      	ldr	r3, [r7, #28]
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3720      	adds	r7, #32
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	2001be60 	.word	0x2001be60

08007e1c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e38:	f3ef 8305 	mrs	r3, IPSR
 8007e3c:	613b      	str	r3, [r7, #16]
  return(result);
 8007e3e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10f      	bne.n	8007e64 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e44:	f3ef 8310 	mrs	r3, PRIMASK
 8007e48:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d105      	bne.n	8007e5c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e50:	f3ef 8311 	mrs	r3, BASEPRI
 8007e54:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <osMutexRelease+0x50>
 8007e5c:	4b16      	ldr	r3, [pc, #88]	; (8007eb8 <osMutexRelease+0x9c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d103      	bne.n	8007e6c <osMutexRelease+0x50>
    stat = osErrorISR;
 8007e64:	f06f 0305 	mvn.w	r3, #5
 8007e68:	61fb      	str	r3, [r7, #28]
 8007e6a:	e01f      	b.n	8007eac <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d103      	bne.n	8007e7a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8007e72:	f06f 0303 	mvn.w	r3, #3
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	e018      	b.n	8007eac <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d009      	beq.n	8007e94 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007e80:	69b8      	ldr	r0, [r7, #24]
 8007e82:	f000 fd55 	bl	8008930 <xQueueGiveMutexRecursive>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d00f      	beq.n	8007eac <osMutexRelease+0x90>
        stat = osErrorResource;
 8007e8c:	f06f 0302 	mvn.w	r3, #2
 8007e90:	61fb      	str	r3, [r7, #28]
 8007e92:	e00b      	b.n	8007eac <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007e94:	2300      	movs	r3, #0
 8007e96:	2200      	movs	r2, #0
 8007e98:	2100      	movs	r1, #0
 8007e9a:	69b8      	ldr	r0, [r7, #24]
 8007e9c:	f000 fdc6 	bl	8008a2c <xQueueGenericSend>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d002      	beq.n	8007eac <osMutexRelease+0x90>
        stat = osErrorResource;
 8007ea6:	f06f 0302 	mvn.w	r3, #2
 8007eaa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8007eac:	69fb      	ldr	r3, [r7, #28]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3720      	adds	r7, #32
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	2001be60 	.word	0x2001be60

08007ebc <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f023 0301 	bic.w	r3, r3, #1
 8007eca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ecc:	f3ef 8305 	mrs	r3, IPSR
 8007ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ed2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10f      	bne.n	8007ef8 <osMutexDelete+0x3c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8007edc:	613b      	str	r3, [r7, #16]
  return(result);
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d105      	bne.n	8007ef0 <osMutexDelete+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ee4:	f3ef 8311 	mrs	r3, BASEPRI
 8007ee8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d007      	beq.n	8007f00 <osMutexDelete+0x44>
 8007ef0:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <osMutexDelete+0x6c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d103      	bne.n	8007f00 <osMutexDelete+0x44>
    stat = osErrorISR;
 8007ef8:	f06f 0305 	mvn.w	r3, #5
 8007efc:	61fb      	str	r3, [r7, #28]
 8007efe:	e00e      	b.n	8007f1e <osMutexDelete+0x62>
  }
  else if (hMutex == NULL) {
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <osMutexDelete+0x52>
    stat = osErrorParameter;
 8007f06:	f06f 0303 	mvn.w	r3, #3
 8007f0a:	61fb      	str	r3, [r7, #28]
 8007f0c:	e007      	b.n	8007f1e <osMutexDelete+0x62>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 8007f0e:	69b8      	ldr	r0, [r7, #24]
 8007f10:	f001 fa18 	bl	8009344 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hMutex);
 8007f18:	69b8      	ldr	r0, [r7, #24]
 8007f1a:	f001 f8ac 	bl	8009076 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007f1e:	69fb      	ldr	r3, [r7, #28]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3720      	adds	r7, #32
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	2001be60 	.word	0x2001be60

08007f2c <osSemaphoreNew>:

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08c      	sub	sp, #48	; 0x30
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f3c:	f3ef 8305 	mrs	r3, IPSR
 8007f40:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f040 8086 	bne.w	8008056 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4e:	617b      	str	r3, [r7, #20]
  return(result);
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d105      	bne.n	8007f62 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f56:	f3ef 8311 	mrs	r3, BASEPRI
 8007f5a:	613b      	str	r3, [r7, #16]
  return(result);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <osSemaphoreNew+0x3e>
 8007f62:	4b3f      	ldr	r3, [pc, #252]	; (8008060 <osSemaphoreNew+0x134>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d075      	beq.n	8008056 <osSemaphoreNew+0x12a>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d072      	beq.n	8008056 <osSemaphoreNew+0x12a>
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d86e      	bhi.n	8008056 <osSemaphoreNew+0x12a>
    mem = -1;
 8007f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d015      	beq.n	8007fb0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d006      	beq.n	8007f9a <osSemaphoreNew+0x6e>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	2b4f      	cmp	r3, #79	; 0x4f
 8007f92:	d902      	bls.n	8007f9a <osSemaphoreNew+0x6e>
        mem = 1;
 8007f94:	2301      	movs	r3, #1
 8007f96:	623b      	str	r3, [r7, #32]
 8007f98:	e00c      	b.n	8007fb4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d108      	bne.n	8007fb4 <osSemaphoreNew+0x88>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d104      	bne.n	8007fb4 <osSemaphoreNew+0x88>
          mem = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	623b      	str	r3, [r7, #32]
 8007fae:	e001      	b.n	8007fb4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fba:	d04c      	beq.n	8008056 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d128      	bne.n	8008014 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d10a      	bne.n	8007fde <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	2203      	movs	r2, #3
 8007fce:	9200      	str	r2, [sp, #0]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	f000 fbe7 	bl	80087a8 <xQueueGenericCreateStatic>
 8007fda:	6278      	str	r0, [r7, #36]	; 0x24
 8007fdc:	e005      	b.n	8007fea <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007fde:	2203      	movs	r2, #3
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	f000 fc02 	bl	80087ec <xQueueGenericCreate>
 8007fe8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d022      	beq.n	8008036 <osSemaphoreNew+0x10a>
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d01f      	beq.n	8008036 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ffe:	f000 fd15 	bl	8008a2c <xQueueGenericSend>
 8008002:	4603      	mov	r3, r0
 8008004:	2b01      	cmp	r3, #1
 8008006:	d016      	beq.n	8008036 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800800a:	f001 f834 	bl	8009076 <vQueueDelete>
            hSemaphore = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
 8008012:	e010      	b.n	8008036 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d108      	bne.n	800802c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	461a      	mov	r2, r3
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fcd2 	bl	80089cc <xQueueCreateCountingSemaphoreStatic>
 8008028:	6278      	str	r0, [r7, #36]	; 0x24
 800802a:	e004      	b.n	8008036 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 fce6 	bl	8008a00 <xQueueCreateCountingSemaphore>
 8008034:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00c      	beq.n	8008056 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <osSemaphoreNew+0x11e>
          name = attr->name;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	61fb      	str	r3, [r7, #28]
 8008048:	e001      	b.n	800804e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800804a:	2300      	movs	r3, #0
 800804c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800804e:	69f9      	ldr	r1, [r7, #28]
 8008050:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008052:	f001 f94d 	bl	80092f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008058:	4618      	mov	r0, r3
 800805a:	3728      	adds	r7, #40	; 0x28
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	2001be60 	.word	0x2001be60

08008064 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b088      	sub	sp, #32
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008072:	2300      	movs	r3, #0
 8008074:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d103      	bne.n	8008084 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800807c:	f06f 0303 	mvn.w	r3, #3
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	e04b      	b.n	800811c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008084:	f3ef 8305 	mrs	r3, IPSR
 8008088:	617b      	str	r3, [r7, #20]
  return(result);
 800808a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10f      	bne.n	80080b0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008090:	f3ef 8310 	mrs	r3, PRIMASK
 8008094:	613b      	str	r3, [r7, #16]
  return(result);
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d105      	bne.n	80080a8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800809c:	f3ef 8311 	mrs	r3, BASEPRI
 80080a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d026      	beq.n	80080f6 <osSemaphoreAcquire+0x92>
 80080a8:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <osSemaphoreAcquire+0xc4>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d122      	bne.n	80080f6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80080b6:	f06f 0303 	mvn.w	r3, #3
 80080ba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80080bc:	e02d      	b.n	800811a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80080be:	2300      	movs	r3, #0
 80080c0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80080c2:	f107 0308 	add.w	r3, r7, #8
 80080c6:	461a      	mov	r2, r3
 80080c8:	2100      	movs	r1, #0
 80080ca:	69b8      	ldr	r0, [r7, #24]
 80080cc:	f000 ff78 	bl	8008fc0 <xQueueReceiveFromISR>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d003      	beq.n	80080de <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80080d6:	f06f 0302 	mvn.w	r3, #2
 80080da:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80080dc:	e01d      	b.n	800811a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01a      	beq.n	800811a <osSemaphoreAcquire+0xb6>
 80080e4:	4b11      	ldr	r3, [pc, #68]	; (800812c <osSemaphoreAcquire+0xc8>)
 80080e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80080f4:	e011      	b.n	800811a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	69b8      	ldr	r0, [r7, #24]
 80080fa:	f000 fe99 	bl	8008e30 <xQueueSemaphoreTake>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b01      	cmp	r3, #1
 8008102:	d00b      	beq.n	800811c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800810a:	f06f 0301 	mvn.w	r3, #1
 800810e:	61fb      	str	r3, [r7, #28]
 8008110:	e004      	b.n	800811c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008112:	f06f 0302 	mvn.w	r3, #2
 8008116:	61fb      	str	r3, [r7, #28]
 8008118:	e000      	b.n	800811c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800811a:	bf00      	nop
      }
    }
  }

  return (stat);
 800811c:	69fb      	ldr	r3, [r7, #28]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3720      	adds	r7, #32
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	2001be60 	.word	0x2001be60
 800812c:	e000ed04 	.word	0xe000ed04

08008130 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800813c:	2300      	movs	r3, #0
 800813e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d103      	bne.n	800814e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008146:	f06f 0303 	mvn.w	r3, #3
 800814a:	61fb      	str	r3, [r7, #28]
 800814c:	e03e      	b.n	80081cc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800814e:	f3ef 8305 	mrs	r3, IPSR
 8008152:	617b      	str	r3, [r7, #20]
  return(result);
 8008154:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10f      	bne.n	800817a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800815a:	f3ef 8310 	mrs	r3, PRIMASK
 800815e:	613b      	str	r3, [r7, #16]
  return(result);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008166:	f3ef 8311 	mrs	r3, BASEPRI
 800816a:	60fb      	str	r3, [r7, #12]
  return(result);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d01e      	beq.n	80081b0 <osSemaphoreRelease+0x80>
 8008172:	4b19      	ldr	r3, [pc, #100]	; (80081d8 <osSemaphoreRelease+0xa8>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d11a      	bne.n	80081b0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800817a:	2300      	movs	r3, #0
 800817c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800817e:	f107 0308 	add.w	r3, r7, #8
 8008182:	4619      	mov	r1, r3
 8008184:	69b8      	ldr	r0, [r7, #24]
 8008186:	f000 fd59 	bl	8008c3c <xQueueGiveFromISR>
 800818a:	4603      	mov	r3, r0
 800818c:	2b01      	cmp	r3, #1
 800818e:	d003      	beq.n	8008198 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008190:	f06f 0302 	mvn.w	r3, #2
 8008194:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008196:	e018      	b.n	80081ca <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d015      	beq.n	80081ca <osSemaphoreRelease+0x9a>
 800819e:	4b0f      	ldr	r3, [pc, #60]	; (80081dc <osSemaphoreRelease+0xac>)
 80081a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081ae:	e00c      	b.n	80081ca <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80081b0:	2300      	movs	r3, #0
 80081b2:	2200      	movs	r2, #0
 80081b4:	2100      	movs	r1, #0
 80081b6:	69b8      	ldr	r0, [r7, #24]
 80081b8:	f000 fc38 	bl	8008a2c <xQueueGenericSend>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d004      	beq.n	80081cc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80081c2:	f06f 0302 	mvn.w	r3, #2
 80081c6:	61fb      	str	r3, [r7, #28]
 80081c8:	e000      	b.n	80081cc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80081ca:	bf00      	nop
    }
  }

  return (stat);
 80081cc:	69fb      	ldr	r3, [r7, #28]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3720      	adds	r7, #32
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	2001be60 	.word	0x2001be60
 80081dc:	e000ed04 	.word	0xe000ed04

080081e0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ec:	f3ef 8305 	mrs	r3, IPSR
 80081f0:	617b      	str	r3, [r7, #20]
  return(result);
 80081f2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10f      	bne.n	8008218 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f8:	f3ef 8310 	mrs	r3, PRIMASK
 80081fc:	613b      	str	r3, [r7, #16]
  return(result);
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d105      	bne.n	8008210 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008204:	f3ef 8311 	mrs	r3, BASEPRI
 8008208:	60fb      	str	r3, [r7, #12]
  return(result);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d007      	beq.n	8008220 <osSemaphoreDelete+0x40>
 8008210:	4b0d      	ldr	r3, [pc, #52]	; (8008248 <osSemaphoreDelete+0x68>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b02      	cmp	r3, #2
 8008216:	d103      	bne.n	8008220 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8008218:	f06f 0305 	mvn.w	r3, #5
 800821c:	61fb      	str	r3, [r7, #28]
 800821e:	e00e      	b.n	800823e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d103      	bne.n	800822e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8008226:	f06f 0303 	mvn.w	r3, #3
 800822a:	61fb      	str	r3, [r7, #28]
 800822c:	e007      	b.n	800823e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800822e:	69b8      	ldr	r0, [r7, #24]
 8008230:	f001 f888 	bl	8009344 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008234:	2300      	movs	r3, #0
 8008236:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8008238:	69b8      	ldr	r0, [r7, #24]
 800823a:	f000 ff1c 	bl	8009076 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800823e:	69fb      	ldr	r3, [r7, #28]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3720      	adds	r7, #32
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	2001be60 	.word	0x2001be60

0800824c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800824c:	b580      	push	{r7, lr}
 800824e:	b08c      	sub	sp, #48	; 0x30
 8008250:	af02      	add	r7, sp, #8
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008258:	2300      	movs	r3, #0
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800825c:	f3ef 8305 	mrs	r3, IPSR
 8008260:	61bb      	str	r3, [r7, #24]
  return(result);
 8008262:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008264:	2b00      	cmp	r3, #0
 8008266:	d16f      	bne.n	8008348 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008268:	f3ef 8310 	mrs	r3, PRIMASK
 800826c:	617b      	str	r3, [r7, #20]
  return(result);
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d105      	bne.n	8008280 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008274:	f3ef 8311 	mrs	r3, BASEPRI
 8008278:	613b      	str	r3, [r7, #16]
  return(result);
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d003      	beq.n	8008288 <osMessageQueueNew+0x3c>
 8008280:	4b34      	ldr	r3, [pc, #208]	; (8008354 <osMessageQueueNew+0x108>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b02      	cmp	r3, #2
 8008286:	d05f      	beq.n	8008348 <osMessageQueueNew+0xfc>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d05c      	beq.n	8008348 <osMessageQueueNew+0xfc>
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d059      	beq.n	8008348 <osMessageQueueNew+0xfc>
    mem = -1;
 8008294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008298:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d029      	beq.n	80082f4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d012      	beq.n	80082ce <osMessageQueueNew+0x82>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b4f      	cmp	r3, #79	; 0x4f
 80082ae:	d90e      	bls.n	80082ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00a      	beq.n	80082ce <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	695a      	ldr	r2, [r3, #20]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	68b9      	ldr	r1, [r7, #8]
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d302      	bcc.n	80082ce <osMessageQueueNew+0x82>
        mem = 1;
 80082c8:	2301      	movs	r3, #1
 80082ca:	623b      	str	r3, [r7, #32]
 80082cc:	e014      	b.n	80082f8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d110      	bne.n	80082f8 <osMessageQueueNew+0xac>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10c      	bne.n	80082f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d108      	bne.n	80082f8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <osMessageQueueNew+0xac>
          mem = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	623b      	str	r3, [r7, #32]
 80082f2:	e001      	b.n	80082f8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d10b      	bne.n	8008316 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691a      	ldr	r2, [r3, #16]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2100      	movs	r1, #0
 8008308:	9100      	str	r1, [sp, #0]
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 fa4b 	bl	80087a8 <xQueueGenericCreateStatic>
 8008312:	6278      	str	r0, [r7, #36]	; 0x24
 8008314:	e008      	b.n	8008328 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d105      	bne.n	8008328 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800831c:	2200      	movs	r2, #0
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 fa63 	bl	80087ec <xQueueGenericCreate>
 8008326:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <osMessageQueueNew+0xf0>
        name = attr->name;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	61fb      	str	r3, [r7, #28]
 800833a:	e001      	b.n	8008340 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800833c:	2300      	movs	r3, #0
 800833e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008340:	69f9      	ldr	r1, [r7, #28]
 8008342:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008344:	f000 ffd4 	bl	80092f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800834a:	4618      	mov	r0, r3
 800834c:	3728      	adds	r7, #40	; 0x28
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	2001be60 	.word	0x2001be60

08008358 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	; 0x28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	4613      	mov	r3, r2
 8008366:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800836c:	2300      	movs	r3, #0
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008370:	f3ef 8305 	mrs	r3, IPSR
 8008374:	61fb      	str	r3, [r7, #28]
  return(result);
 8008376:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10f      	bne.n	800839c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800837c:	f3ef 8310 	mrs	r3, PRIMASK
 8008380:	61bb      	str	r3, [r7, #24]
  return(result);
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d105      	bne.n	8008394 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008388:	f3ef 8311 	mrs	r3, BASEPRI
 800838c:	617b      	str	r3, [r7, #20]
  return(result);
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d02c      	beq.n	80083ee <osMessageQueuePut+0x96>
 8008394:	4b28      	ldr	r3, [pc, #160]	; (8008438 <osMessageQueuePut+0xe0>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b02      	cmp	r3, #2
 800839a:	d128      	bne.n	80083ee <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d005      	beq.n	80083ae <osMessageQueuePut+0x56>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d002      	beq.n	80083ae <osMessageQueuePut+0x56>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80083ae:	f06f 0303 	mvn.w	r3, #3
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083b4:	e039      	b.n	800842a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80083ba:	f107 0210 	add.w	r2, r7, #16
 80083be:	2300      	movs	r3, #0
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	6a38      	ldr	r0, [r7, #32]
 80083c4:	f000 fbdc 	bl	8008b80 <xQueueGenericSendFromISR>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d003      	beq.n	80083d6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80083ce:	f06f 0302 	mvn.w	r3, #2
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083d4:	e029      	b.n	800842a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d026      	beq.n	800842a <osMessageQueuePut+0xd2>
 80083dc:	4b17      	ldr	r3, [pc, #92]	; (800843c <osMessageQueuePut+0xe4>)
 80083de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083ec:	e01d      	b.n	800842a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <osMessageQueuePut+0xa2>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80083fa:	f06f 0303 	mvn.w	r3, #3
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
 8008400:	e014      	b.n	800842c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008402:	2300      	movs	r3, #0
 8008404:	683a      	ldr	r2, [r7, #0]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	6a38      	ldr	r0, [r7, #32]
 800840a:	f000 fb0f 	bl	8008a2c <xQueueGenericSend>
 800840e:	4603      	mov	r3, r0
 8008410:	2b01      	cmp	r3, #1
 8008412:	d00b      	beq.n	800842c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800841a:	f06f 0301 	mvn.w	r3, #1
 800841e:	627b      	str	r3, [r7, #36]	; 0x24
 8008420:	e004      	b.n	800842c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008422:	f06f 0302 	mvn.w	r3, #2
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
 8008428:	e000      	b.n	800842c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800842a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800842e:	4618      	mov	r0, r3
 8008430:	3728      	adds	r7, #40	; 0x28
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	2001be60 	.word	0x2001be60
 800843c:	e000ed04 	.word	0xe000ed04

08008440 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008440:	b580      	push	{r7, lr}
 8008442:	b08a      	sub	sp, #40	; 0x28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008452:	2300      	movs	r3, #0
 8008454:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008456:	f3ef 8305 	mrs	r3, IPSR
 800845a:	61fb      	str	r3, [r7, #28]
  return(result);
 800845c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10f      	bne.n	8008482 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008462:	f3ef 8310 	mrs	r3, PRIMASK
 8008466:	61bb      	str	r3, [r7, #24]
  return(result);
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d105      	bne.n	800847a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800846e:	f3ef 8311 	mrs	r3, BASEPRI
 8008472:	617b      	str	r3, [r7, #20]
  return(result);
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d02c      	beq.n	80084d4 <osMessageQueueGet+0x94>
 800847a:	4b28      	ldr	r3, [pc, #160]	; (800851c <osMessageQueueGet+0xdc>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d128      	bne.n	80084d4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <osMessageQueueGet+0x54>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <osMessageQueueGet+0x54>
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d003      	beq.n	800849c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008494:	f06f 0303 	mvn.w	r3, #3
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800849a:	e038      	b.n	800850e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800849c:	2300      	movs	r3, #0
 800849e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80084a0:	f107 0310 	add.w	r3, r7, #16
 80084a4:	461a      	mov	r2, r3
 80084a6:	68b9      	ldr	r1, [r7, #8]
 80084a8:	6a38      	ldr	r0, [r7, #32]
 80084aa:	f000 fd89 	bl	8008fc0 <xQueueReceiveFromISR>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d003      	beq.n	80084bc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80084b4:	f06f 0302 	mvn.w	r3, #2
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80084ba:	e028      	b.n	800850e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d025      	beq.n	800850e <osMessageQueueGet+0xce>
 80084c2:	4b17      	ldr	r3, [pc, #92]	; (8008520 <osMessageQueueGet+0xe0>)
 80084c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80084d2:	e01c      	b.n	800850e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <osMessageQueueGet+0xa0>
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80084e0:	f06f 0303 	mvn.w	r3, #3
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
 80084e6:	e013      	b.n	8008510 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	68b9      	ldr	r1, [r7, #8]
 80084ec:	6a38      	ldr	r0, [r7, #32]
 80084ee:	f000 fbfd 	bl	8008cec <xQueueReceive>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d00b      	beq.n	8008510 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80084fe:	f06f 0301 	mvn.w	r3, #1
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
 8008504:	e004      	b.n	8008510 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008506:	f06f 0302 	mvn.w	r3, #2
 800850a:	627b      	str	r3, [r7, #36]	; 0x24
 800850c:	e000      	b.n	8008510 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800850e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008512:	4618      	mov	r0, r3
 8008514:	3728      	adds	r7, #40	; 0x28
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	2001be60 	.word	0x2001be60
 8008520:	e000ed04 	.word	0xe000ed04

08008524 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4a07      	ldr	r2, [pc, #28]	; (8008550 <vApplicationGetIdleTaskMemory+0x2c>)
 8008534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	4a06      	ldr	r2, [pc, #24]	; (8008554 <vApplicationGetIdleTaskMemory+0x30>)
 800853a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2280      	movs	r2, #128	; 0x80
 8008540:	601a      	str	r2, [r3, #0]
}
 8008542:	bf00      	nop
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	2001be64 	.word	0x2001be64
 8008554:	2001bf30 	.word	0x2001bf30

08008558 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4a07      	ldr	r2, [pc, #28]	; (8008584 <vApplicationGetTimerTaskMemory+0x2c>)
 8008568:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4a06      	ldr	r2, [pc, #24]	; (8008588 <vApplicationGetTimerTaskMemory+0x30>)
 800856e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008576:	601a      	str	r2, [r3, #0]
}
 8008578:	bf00      	nop
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr
 8008584:	2001c130 	.word	0x2001c130
 8008588:	2001c1fc 	.word	0x2001c1fc

0800858c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f103 0208 	add.w	r2, r3, #8
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f103 0208 	add.w	r2, r3, #8
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f103 0208 	add.w	r2, r3, #8
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085da:	bf00      	nop
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085e6:	b480      	push	{r7}
 80085e8:	b085      	sub	sp, #20
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	601a      	str	r2, [r3, #0]
}
 8008622:	bf00      	nop
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008644:	d103      	bne.n	800864e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	e00c      	b.n	8008668 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3308      	adds	r3, #8
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	e002      	b.n	800865c <vListInsert+0x2e>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	429a      	cmp	r2, r3
 8008666:	d2f6      	bcs.n	8008656 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	601a      	str	r2, [r3, #0]
}
 8008694:	bf00      	nop
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6892      	ldr	r2, [r2, #8]
 80086b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6852      	ldr	r2, [r2, #4]
 80086c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d103      	bne.n	80086d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	1e5a      	subs	r2, r3, #1
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3714      	adds	r7, #20
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8008702:	f002 f98f 	bl	800aa24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870e:	68f9      	ldr	r1, [r7, #12]
 8008710:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008712:	fb01 f303 	mul.w	r3, r1, r3
 8008716:	441a      	add	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008732:	3b01      	subs	r3, #1
 8008734:	68f9      	ldr	r1, [r7, #12]
 8008736:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008738:	fb01 f303 	mul.w	r3, r1, r3
 800873c:	441a      	add	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	22ff      	movs	r2, #255	; 0xff
 8008746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	22ff      	movs	r2, #255	; 0xff
 800874e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d114      	bne.n	8008782 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d01a      	beq.n	8008796 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3310      	adds	r3, #16
 8008764:	4618      	mov	r0, r3
 8008766:	f001 fa3f 	bl	8009be8 <xTaskRemoveFromEventList>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d012      	beq.n	8008796 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008770:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <xQueueGenericReset+0xb0>)
 8008772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	e009      	b.n	8008796 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3310      	adds	r3, #16
 8008786:	4618      	mov	r0, r3
 8008788:	f7ff ff00 	bl	800858c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3324      	adds	r3, #36	; 0x24
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fefb 	bl	800858c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008796:	f002 f961 	bl	800aa5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800879a:	2301      	movs	r3, #1
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af02      	add	r7, sp, #8
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087b6:	2350      	movs	r3, #80	; 0x50
 80087b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087ba:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00d      	beq.n	80087e2 <xQueueGenericCreateStatic+0x3a>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2201      	movs	r2, #1
 80087ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	4613      	mov	r3, r2
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	68b9      	ldr	r1, [r7, #8]
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 f837 	bl	8008850 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087e2:	697b      	ldr	r3, [r7, #20]
	}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08a      	sub	sp, #40	; 0x28
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4613      	mov	r3, r2
 80087f8:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d102      	bne.n	8008806 <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008800:	2300      	movs	r3, #0
 8008802:	61fb      	str	r3, [r7, #28]
 8008804:	e004      	b.n	8008810 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	fb02 f303 	mul.w	r3, r2, r3
 800880e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3350      	adds	r3, #80	; 0x50
 8008814:	4618      	mov	r0, r3
 8008816:	f002 f9d7 	bl	800abc8 <pvPortMalloc>
 800881a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d011      	beq.n	8008846 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	3350      	adds	r3, #80	; 0x50
 800882a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008834:	79fa      	ldrb	r2, [r7, #7]
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4613      	mov	r3, r2
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f805 	bl	8008850 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008846:	69bb      	ldr	r3, [r7, #24]
	}
 8008848:	4618      	mov	r0, r3
 800884a:	3720      	adds	r7, #32
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d103      	bne.n	800886c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	e002      	b.n	8008872 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800887e:	2101      	movs	r1, #1
 8008880:	69b8      	ldr	r0, [r7, #24]
 8008882:	f7ff ff37 	bl	80086f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	78fa      	ldrb	r2, [r7, #3]
 800888a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00e      	beq.n	80088c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80088b6:	2300      	movs	r3, #0
 80088b8:	2200      	movs	r2, #0
 80088ba:	2100      	movs	r1, #0
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f8b5 	bl	8008a2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80088c2:	bf00      	nop
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b086      	sub	sp, #24
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	4603      	mov	r3, r0
 80088d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088d4:	2301      	movs	r3, #1
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	2300      	movs	r3, #0
 80088da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80088dc:	79fb      	ldrb	r3, [r7, #7]
 80088de:	461a      	mov	r2, r3
 80088e0:	6939      	ldr	r1, [r7, #16]
 80088e2:	6978      	ldr	r0, [r7, #20]
 80088e4:	f7ff ff82 	bl	80087ec <xQueueGenericCreate>
 80088e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7ff ffd3 	bl	8008896 <prvInitialiseMutex>

		return xNewQueue;
 80088f0:	68fb      	ldr	r3, [r7, #12]
	}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b088      	sub	sp, #32
 80088fe:	af02      	add	r7, sp, #8
 8008900:	4603      	mov	r3, r0
 8008902:	6039      	str	r1, [r7, #0]
 8008904:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008906:	2301      	movs	r3, #1
 8008908:	617b      	str	r3, [r7, #20]
 800890a:	2300      	movs	r3, #0
 800890c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2200      	movs	r2, #0
 8008916:	6939      	ldr	r1, [r7, #16]
 8008918:	6978      	ldr	r0, [r7, #20]
 800891a:	f7ff ff45 	bl	80087a8 <xQueueGenericCreateStatic>
 800891e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f7ff ffb8 	bl	8008896 <prvInitialiseMutex>

		return xNewQueue;
 8008926:	68fb      	ldr	r3, [r7, #12]
	}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008930:	b590      	push	{r4, r7, lr}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	60bb      	str	r3, [r7, #8]
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	689c      	ldr	r4, [r3, #8]
 8008940:	f001 faf2 	bl	8009f28 <xTaskGetCurrentTaskHandle>
 8008944:	4603      	mov	r3, r0
 8008946:	429c      	cmp	r4, r3
 8008948:	d111      	bne.n	800896e <xQueueGiveMutexRecursive+0x3e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	1e5a      	subs	r2, r3, #1
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d105      	bne.n	8008968 <xQueueGiveMutexRecursive+0x38>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800895c:	2300      	movs	r3, #0
 800895e:	2200      	movs	r2, #0
 8008960:	2100      	movs	r1, #0
 8008962:	68b8      	ldr	r0, [r7, #8]
 8008964:	f000 f862 	bl	8008a2c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008968:	2301      	movs	r3, #1
 800896a:	60fb      	str	r3, [r7, #12]
 800896c:	e001      	b.n	8008972 <xQueueGiveMutexRecursive+0x42>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800896e:	2300      	movs	r3, #0
 8008970:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008972:	68fb      	ldr	r3, [r7, #12]
	}
 8008974:	4618      	mov	r0, r3
 8008976:	3714      	adds	r7, #20
 8008978:	46bd      	mov	sp, r7
 800897a:	bd90      	pop	{r4, r7, pc}

0800897c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800897c:	b590      	push	{r4, r7, lr}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	60bb      	str	r3, [r7, #8]
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	689c      	ldr	r4, [r3, #8]
 800898e:	f001 facb 	bl	8009f28 <xTaskGetCurrentTaskHandle>
 8008992:	4603      	mov	r3, r0
 8008994:	429c      	cmp	r4, r3
 8008996:	d107      	bne.n	80089a8 <xQueueTakeMutexRecursive+0x2c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80089a2:	2301      	movs	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	e00c      	b.n	80089c2 <xQueueTakeMutexRecursive+0x46>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	68b8      	ldr	r0, [r7, #8]
 80089ac:	f000 fa40 	bl	8008e30 <xQueueSemaphoreTake>
 80089b0:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d004      	beq.n	80089c2 <xQueueTakeMutexRecursive+0x46>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80089c2:	68fb      	ldr	r3, [r7, #12]
	}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd90      	pop	{r4, r7, pc}

080089cc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af02      	add	r7, sp, #8
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80089d8:	2302      	movs	r3, #2
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	2100      	movs	r1, #0
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f7ff fee0 	bl	80087a8 <xQueueGenericCreateStatic>
 80089e8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <xQueueCreateCountingSemaphoreStatic+0x2a>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80089f6:	697b      	ldr	r3, [r7, #20]
	}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3718      	adds	r7, #24
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
		configASSERT( uxInitialCount <= uxMaxCount );

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff feec 	bl	80087ec <xQueueGenericCreate>
 8008a14:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <xQueueCreateCountingSemaphore+0x22>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008a22:	68fb      	ldr	r3, [r7, #12]
	}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08a      	sub	sp, #40	; 0x28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a42:	f001 ffef 	bl	800aa24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d302      	bcc.n	8008a58 <xQueueGenericSend+0x2c>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d129      	bne.n	8008aac <xQueueGenericSend+0x80>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	68b9      	ldr	r1, [r7, #8]
 8008a5c:	6a38      	ldr	r0, [r7, #32]
 8008a5e:	f000 fb37 	bl	80090d0 <prvCopyDataToQueue>
 8008a62:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d010      	beq.n	8008a8e <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	3324      	adds	r3, #36	; 0x24
 8008a70:	4618      	mov	r0, r3
 8008a72:	f001 f8b9 	bl	8009be8 <xTaskRemoveFromEventList>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d013      	beq.n	8008aa4 <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a7c:	4b3f      	ldr	r3, [pc, #252]	; (8008b7c <xQueueGenericSend+0x150>)
 8008a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	e00a      	b.n	8008aa4 <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d007      	beq.n	8008aa4 <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a94:	4b39      	ldr	r3, [pc, #228]	; (8008b7c <xQueueGenericSend+0x150>)
 8008a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a9a:	601a      	str	r2, [r3, #0]
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008aa4:	f001 ffda 	bl	800aa5c <vPortExitCritical>
				return pdPASS;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e063      	b.n	8008b74 <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d103      	bne.n	8008aba <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ab2:	f001 ffd3 	bl	800aa5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e05c      	b.n	8008b74 <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d106      	bne.n	8008ace <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ac0:	f107 0314 	add.w	r3, r7, #20
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 f8fd 	bl	8009cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008aca:	2301      	movs	r3, #1
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ace:	f001 ffc5 	bl	800aa5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ad2:	f000 fe99 	bl	8009808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ad6:	f001 ffa5 	bl	800aa24 <vPortEnterCritical>
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ae0:	b25b      	sxtb	r3, r3
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ae6:	d103      	bne.n	8008af0 <xQueueGenericSend+0xc4>
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008af6:	b25b      	sxtb	r3, r3
 8008af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008afc:	d103      	bne.n	8008b06 <xQueueGenericSend+0xda>
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b06:	f001 ffa9 	bl	800aa5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b0a:	1d3a      	adds	r2, r7, #4
 8008b0c:	f107 0314 	add.w	r3, r7, #20
 8008b10:	4611      	mov	r1, r2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 f8ec 	bl	8009cf0 <xTaskCheckForTimeOut>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d124      	bne.n	8008b68 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b1e:	6a38      	ldr	r0, [r7, #32]
 8008b20:	f000 fbce 	bl	80092c0 <prvIsQueueFull>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d018      	beq.n	8008b5c <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	3310      	adds	r3, #16
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 f824 	bl	8009b80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b38:	6a38      	ldr	r0, [r7, #32]
 8008b3a:	f000 fb59 	bl	80091f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b3e:	f000 fe71 	bl	8009824 <xTaskResumeAll>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f47f af7c 	bne.w	8008a42 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
 8008b4a:	4b0c      	ldr	r3, [pc, #48]	; (8008b7c <xQueueGenericSend+0x150>)
 8008b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	e772      	b.n	8008a42 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b5c:	6a38      	ldr	r0, [r7, #32]
 8008b5e:	f000 fb47 	bl	80091f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b62:	f000 fe5f 	bl	8009824 <xTaskResumeAll>
 8008b66:	e76c      	b.n	8008a42 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b68:	6a38      	ldr	r0, [r7, #32]
 8008b6a:	f000 fb41 	bl	80091f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b6e:	f000 fe59 	bl	8009824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3728      	adds	r7, #40	; 0x28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	e000ed04 	.word	0xe000ed04

08008b80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08c      	sub	sp, #48	; 0x30
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	62bb      	str	r3, [r7, #40]	; 0x28
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b92:	f002 f803 	bl	800ab9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b96:	f3ef 8211 	mrs	r2, BASEPRI
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	b672      	cpsid	i
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	b662      	cpsie	i
 8008bae:	61fa      	str	r2, [r7, #28]
 8008bb0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d302      	bcc.n	8008bc8 <xQueueGenericSendFromISR+0x48>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d12c      	bne.n	8008c22 <xQueueGenericSendFromISR+0xa2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	68b9      	ldr	r1, [r7, #8]
 8008bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bd8:	f000 fa7a 	bl	80090d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bdc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be4:	d112      	bne.n	8008c0c <xQueueGenericSendFromISR+0x8c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d016      	beq.n	8008c1c <xQueueGenericSendFromISR+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	3324      	adds	r3, #36	; 0x24
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fff8 	bl	8009be8 <xTaskRemoveFromEventList>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00e      	beq.n	8008c1c <xQueueGenericSendFromISR+0x9c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00b      	beq.n	8008c1c <xQueueGenericSendFromISR+0x9c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	e007      	b.n	8008c1c <xQueueGenericSendFromISR+0x9c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c10:	3301      	adds	r3, #1
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	b25a      	sxtb	r2, r3
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
 8008c20:	e001      	b.n	8008c26 <xQueueGenericSendFromISR+0xa6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3730      	adds	r7, #48	; 0x30
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08a      	sub	sp, #40	; 0x28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	623b      	str	r3, [r7, #32]
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c4a:	f001 ffa7 	bl	800ab9c <vPortValidateInterruptPriority>
	__asm volatile
 8008c4e:	f3ef 8211 	mrs	r2, BASEPRI
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	b672      	cpsid	i
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	b662      	cpsie	i
 8008c66:	613a      	str	r2, [r7, #16]
 8008c68:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8008c6a:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c6c:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c72:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d229      	bcs.n	8008cd2 <xQueueGiveFromISR+0x96>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c7e:	6a3b      	ldr	r3, [r7, #32]
 8008c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c84:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c96:	d112      	bne.n	8008cbe <xQueueGiveFromISR+0x82>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d015      	beq.n	8008ccc <xQueueGiveFromISR+0x90>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	3324      	adds	r3, #36	; 0x24
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 ff9f 	bl	8009be8 <xTaskRemoveFromEventList>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00d      	beq.n	8008ccc <xQueueGiveFromISR+0x90>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <xQueueGiveFromISR+0x90>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	e006      	b.n	8008ccc <xQueueGiveFromISR+0x90>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cbe:	7dfb      	ldrb	r3, [r7, #23]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	b25a      	sxtb	r2, r3
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	627b      	str	r3, [r7, #36]	; 0x24
 8008cd0:	e001      	b.n	8008cd6 <xQueueGiveFromISR+0x9a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f383 8811 	msr	BASEPRI, r3
}
 8008ce0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3728      	adds	r7, #40	; 0x28
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08a      	sub	sp, #40	; 0x28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	623b      	str	r3, [r7, #32]
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d00:	f001 fe90 	bl	800aa24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d08:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01f      	beq.n	8008d50 <xQueueReceive+0x64>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d10:	68b9      	ldr	r1, [r7, #8]
 8008d12:	6a38      	ldr	r0, [r7, #32]
 8008d14:	f000 fa46 	bl	80091a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	1e5a      	subs	r2, r3, #1
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00f      	beq.n	8008d48 <xQueueReceive+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	3310      	adds	r3, #16
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f000 ff5b 	bl	8009be8 <xTaskRemoveFromEventList>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <xQueueReceive+0x5c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d38:	4b3c      	ldr	r3, [pc, #240]	; (8008e2c <xQueueReceive+0x140>)
 8008d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d48:	f001 fe88 	bl	800aa5c <vPortExitCritical>
				return pdPASS;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e069      	b.n	8008e24 <xQueueReceive+0x138>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d103      	bne.n	8008d5e <xQueueReceive+0x72>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d56:	f001 fe81 	bl	800aa5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	e062      	b.n	8008e24 <xQueueReceive+0x138>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d106      	bne.n	8008d72 <xQueueReceive+0x86>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d64:	f107 0314 	add.w	r3, r7, #20
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 ffab 	bl	8009cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d72:	f001 fe73 	bl	800aa5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d76:	f000 fd47 	bl	8009808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d7a:	f001 fe53 	bl	800aa24 <vPortEnterCritical>
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d84:	b25b      	sxtb	r3, r3
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d8a:	d103      	bne.n	8008d94 <xQueueReceive+0xa8>
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d9a:	b25b      	sxtb	r3, r3
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008da0:	d103      	bne.n	8008daa <xQueueReceive+0xbe>
 8008da2:	6a3b      	ldr	r3, [r7, #32]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008daa:	f001 fe57 	bl	800aa5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008dae:	1d3a      	adds	r2, r7, #4
 8008db0:	f107 0314 	add.w	r3, r7, #20
 8008db4:	4611      	mov	r1, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 ff9a 	bl	8009cf0 <xTaskCheckForTimeOut>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d123      	bne.n	8008e0a <xQueueReceive+0x11e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dc2:	6a38      	ldr	r0, [r7, #32]
 8008dc4:	f000 fa66 	bl	8009294 <prvIsQueueEmpty>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d017      	beq.n	8008dfe <xQueueReceive+0x112>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	3324      	adds	r3, #36	; 0x24
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 fed2 	bl	8009b80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ddc:	6a38      	ldr	r0, [r7, #32]
 8008dde:	f000 fa07 	bl	80091f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008de2:	f000 fd1f 	bl	8009824 <xTaskResumeAll>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d189      	bne.n	8008d00 <xQueueReceive+0x14>
				{
					portYIELD_WITHIN_API();
 8008dec:	4b0f      	ldr	r3, [pc, #60]	; (8008e2c <xQueueReceive+0x140>)
 8008dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	e780      	b.n	8008d00 <xQueueReceive+0x14>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008dfe:	6a38      	ldr	r0, [r7, #32]
 8008e00:	f000 f9f6 	bl	80091f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e04:	f000 fd0e 	bl	8009824 <xTaskResumeAll>
 8008e08:	e77a      	b.n	8008d00 <xQueueReceive+0x14>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e0a:	6a38      	ldr	r0, [r7, #32]
 8008e0c:	f000 f9f0 	bl	80091f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e10:	f000 fd08 	bl	8009824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e14:	6a38      	ldr	r0, [r7, #32]
 8008e16:	f000 fa3d 	bl	8009294 <prvIsQueueEmpty>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f43f af6f 	beq.w	8008d00 <xQueueReceive+0x14>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3728      	adds	r7, #40	; 0x28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	e000ed04 	.word	0xe000ed04

08008e30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08a      	sub	sp, #40	; 0x28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008e42:	2300      	movs	r3, #0
 8008e44:	623b      	str	r3, [r7, #32]
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e46:	f001 fded 	bl	800aa24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d024      	beq.n	8008ea0 <xQueueSemaphoreTake+0x70>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	1e5a      	subs	r2, r3, #1
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <xQueueSemaphoreTake+0x40>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e66:	f001 f9a1 	bl	800a1ac <pvTaskIncrementMutexHeldCount>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00f      	beq.n	8008e98 <xQueueSemaphoreTake+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	3310      	adds	r3, #16
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 feb3 	bl	8009be8 <xTaskRemoveFromEventList>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <xQueueSemaphoreTake+0x68>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e88:	4b4c      	ldr	r3, [pc, #304]	; (8008fbc <xQueueSemaphoreTake+0x18c>)
 8008e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e98:	f001 fde0 	bl	800aa5c <vPortExitCritical>
				return pdPASS;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e089      	b.n	8008fb4 <xQueueSemaphoreTake+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d103      	bne.n	8008eae <xQueueSemaphoreTake+0x7e>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008ea6:	f001 fdd9 	bl	800aa5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e082      	b.n	8008fb4 <xQueueSemaphoreTake+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d106      	bne.n	8008ec2 <xQueueSemaphoreTake+0x92>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eb4:	f107 030c 	add.w	r3, r7, #12
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 ff03 	bl	8009cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ec2:	f001 fdcb 	bl	800aa5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ec6:	f000 fc9f 	bl	8009808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008eca:	f001 fdab 	bl	800aa24 <vPortEnterCritical>
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ed4:	b25b      	sxtb	r3, r3
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eda:	d103      	bne.n	8008ee4 <xQueueSemaphoreTake+0xb4>
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eea:	b25b      	sxtb	r3, r3
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef0:	d103      	bne.n	8008efa <xQueueSemaphoreTake+0xca>
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008efa:	f001 fdaf 	bl	800aa5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008efe:	463a      	mov	r2, r7
 8008f00:	f107 030c 	add.w	r3, r7, #12
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 fef2 	bl	8009cf0 <xTaskCheckForTimeOut>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d132      	bne.n	8008f78 <xQueueSemaphoreTake+0x148>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f12:	69f8      	ldr	r0, [r7, #28]
 8008f14:	f000 f9be 	bl	8009294 <prvIsQueueEmpty>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d026      	beq.n	8008f6c <xQueueSemaphoreTake+0x13c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d109      	bne.n	8008f3a <xQueueSemaphoreTake+0x10a>
					{
						taskENTER_CRITICAL();
 8008f26:	f001 fd7d 	bl	800aa24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 f828 	bl	8009f84 <xTaskPriorityInherit>
 8008f34:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8008f36:	f001 fd91 	bl	800aa5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	3324      	adds	r3, #36	; 0x24
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fe1c 	bl	8009b80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f48:	69f8      	ldr	r0, [r7, #28]
 8008f4a:	f000 f951 	bl	80091f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f4e:	f000 fc69 	bl	8009824 <xTaskResumeAll>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f47f af76 	bne.w	8008e46 <xQueueSemaphoreTake+0x16>
				{
					portYIELD_WITHIN_API();
 8008f5a:	4b18      	ldr	r3, [pc, #96]	; (8008fbc <xQueueSemaphoreTake+0x18c>)
 8008f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	e76c      	b.n	8008e46 <xQueueSemaphoreTake+0x16>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008f6c:	69f8      	ldr	r0, [r7, #28]
 8008f6e:	f000 f93f 	bl	80091f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f72:	f000 fc57 	bl	8009824 <xTaskResumeAll>
 8008f76:	e766      	b.n	8008e46 <xQueueSemaphoreTake+0x16>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008f78:	69f8      	ldr	r0, [r7, #28]
 8008f7a:	f000 f939 	bl	80091f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f7e:	f000 fc51 	bl	8009824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f82:	69f8      	ldr	r0, [r7, #28]
 8008f84:	f000 f986 	bl	8009294 <prvIsQueueEmpty>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f43f af5b 	beq.w	8008e46 <xQueueSemaphoreTake+0x16>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00d      	beq.n	8008fb2 <xQueueSemaphoreTake+0x182>
					{
						taskENTER_CRITICAL();
 8008f96:	f001 fd45 	bl	800aa24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f9a:	69f8      	ldr	r0, [r7, #28]
 8008f9c:	f000 f880 	bl	80090a0 <prvGetDisinheritPriorityAfterTimeout>
 8008fa0:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	6979      	ldr	r1, [r7, #20]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 f89f 	bl	800a0ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008fae:	f001 fd55 	bl	800aa5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fb2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3728      	adds	r7, #40	; 0x28
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	e000ed04 	.word	0xe000ed04

08008fc0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08c      	sub	sp, #48	; 0x30
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	62bb      	str	r3, [r7, #40]	; 0x28
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fd0:	f001 fde4 	bl	800ab9c <vPortValidateInterruptPriority>
	__asm volatile
 8008fd4:	f3ef 8211 	mrs	r2, BASEPRI
 8008fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fdc:	b672      	cpsid	i
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	b662      	cpsie	i
 8008fec:	61ba      	str	r2, [r7, #24]
 8008fee:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008ff0:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	623b      	str	r3, [r7, #32]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d02d      	beq.n	800905c <xQueueReceiveFromISR+0x9c>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009002:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009006:	77fb      	strb	r3, [r7, #31]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009008:	68b9      	ldr	r1, [r7, #8]
 800900a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800900c:	f000 f8ca 	bl	80091a4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	1e5a      	subs	r2, r3, #1
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009018:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800901c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009020:	d112      	bne.n	8009048 <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d015      	beq.n	8009056 <xQueueReceiveFromISR+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	3310      	adds	r3, #16
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fdda 	bl	8009be8 <xTaskRemoveFromEventList>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00d      	beq.n	8009056 <xQueueReceiveFromISR+0x96>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00a      	beq.n	8009056 <xQueueReceiveFromISR+0x96>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	e006      	b.n	8009056 <xQueueReceiveFromISR+0x96>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009048:	7ffb      	ldrb	r3, [r7, #31]
 800904a:	3301      	adds	r3, #1
 800904c:	b2db      	uxtb	r3, r3
 800904e:	b25a      	sxtb	r2, r3
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009056:	2301      	movs	r3, #1
 8009058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800905a:	e001      	b.n	8009060 <xQueueReceiveFromISR+0xa0>
		}
		else
		{
			xReturn = pdFAIL;
 800905c:	2300      	movs	r3, #0
 800905e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f383 8811 	msr	BASEPRI, r3
}
 800906a:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800906e:	4618      	mov	r0, r3
 8009070:	3730      	adds	r7, #48	; 0x30
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 f95e 	bl	8009344 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800908e:	2b00      	cmp	r3, #0
 8009090:	d102      	bne.n	8009098 <vQueueDelete+0x22>
		{
			vPortFree( pxQueue );
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f001 fe2c 	bl	800acf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009098:	bf00      	nop
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d006      	beq.n	80090be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	e001      	b.n	80090c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80090c2:	68fb      	ldr	r3, [r7, #12]
	}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3714      	adds	r7, #20
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090dc:	2300      	movs	r3, #0
 80090de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10d      	bne.n	800910a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d14d      	bne.n	8009192 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 ffaa 	bl	800a054 <xTaskPriorityDisinherit>
 8009100:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	609a      	str	r2, [r3, #8]
 8009108:	e043      	b.n	8009192 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d119      	bne.n	8009144 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6858      	ldr	r0, [r3, #4]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	461a      	mov	r2, r3
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	f018 fcb0 	bl	8021a80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009128:	441a      	add	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	429a      	cmp	r2, r3
 8009138:	d32b      	bcc.n	8009192 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	605a      	str	r2, [r3, #4]
 8009142:	e026      	b.n	8009192 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	68d8      	ldr	r0, [r3, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	461a      	mov	r2, r3
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	f018 fc96 	bl	8021a80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	68da      	ldr	r2, [r3, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915c:	425b      	negs	r3, r3
 800915e:	441a      	add	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d207      	bcs.n	8009180 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009178:	425b      	negs	r3, r3
 800917a:	441a      	add	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b02      	cmp	r3, #2
 8009184:	d105      	bne.n	8009192 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	3b01      	subs	r3, #1
 8009190:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800919a:	697b      	ldr	r3, [r7, #20]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d018      	beq.n	80091e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091be:	441a      	add	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68da      	ldr	r2, [r3, #12]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d303      	bcc.n	80091d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68d9      	ldr	r1, [r3, #12]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e0:	461a      	mov	r2, r3
 80091e2:	6838      	ldr	r0, [r7, #0]
 80091e4:	f018 fc4c 	bl	8021a80 <memcpy>
	}
}
 80091e8:	bf00      	nop
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091f8:	f001 fc14 	bl	800aa24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009202:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009204:	e011      	b.n	800922a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	2b00      	cmp	r3, #0
 800920c:	d012      	beq.n	8009234 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	3324      	adds	r3, #36	; 0x24
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fce8 	bl	8009be8 <xTaskRemoveFromEventList>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800921e:	f000 fdad 	bl	8009d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	3b01      	subs	r3, #1
 8009226:	b2db      	uxtb	r3, r3
 8009228:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800922a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800922e:	2b00      	cmp	r3, #0
 8009230:	dce9      	bgt.n	8009206 <prvUnlockQueue+0x16>
 8009232:	e000      	b.n	8009236 <prvUnlockQueue+0x46>
					break;
 8009234:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	22ff      	movs	r2, #255	; 0xff
 800923a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800923e:	f001 fc0d 	bl	800aa5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009242:	f001 fbef 	bl	800aa24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800924c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800924e:	e011      	b.n	8009274 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d012      	beq.n	800927e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3310      	adds	r3, #16
 800925c:	4618      	mov	r0, r3
 800925e:	f000 fcc3 	bl	8009be8 <xTaskRemoveFromEventList>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009268:	f000 fd88 	bl	8009d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	3b01      	subs	r3, #1
 8009270:	b2db      	uxtb	r3, r3
 8009272:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009278:	2b00      	cmp	r3, #0
 800927a:	dce9      	bgt.n	8009250 <prvUnlockQueue+0x60>
 800927c:	e000      	b.n	8009280 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800927e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	22ff      	movs	r2, #255	; 0xff
 8009284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009288:	f001 fbe8 	bl	800aa5c <vPortExitCritical>
}
 800928c:	bf00      	nop
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800929c:	f001 fbc2 	bl	800aa24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092a8:	2301      	movs	r3, #1
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	e001      	b.n	80092b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092b2:	f001 fbd3 	bl	800aa5c <vPortExitCritical>

	return xReturn;
 80092b6:	68fb      	ldr	r3, [r7, #12]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092c8:	f001 fbac 	bl	800aa24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d102      	bne.n	80092de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092d8:	2301      	movs	r3, #1
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	e001      	b.n	80092e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092de:	2300      	movs	r3, #0
 80092e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092e2:	f001 fbbb 	bl	800aa5c <vPortExitCritical>

	return xReturn;
 80092e6:	68fb      	ldr	r3, [r7, #12]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092fa:	2300      	movs	r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]
 80092fe:	e014      	b.n	800932a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009300:	4a0f      	ldr	r2, [pc, #60]	; (8009340 <vQueueAddToRegistry+0x50>)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10b      	bne.n	8009324 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800930c:	490c      	ldr	r1, [pc, #48]	; (8009340 <vQueueAddToRegistry+0x50>)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009316:	4a0a      	ldr	r2, [pc, #40]	; (8009340 <vQueueAddToRegistry+0x50>)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4413      	add	r3, r2
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009322:	e006      	b.n	8009332 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3301      	adds	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b07      	cmp	r3, #7
 800932e:	d9e7      	bls.n	8009300 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009330:	bf00      	nop
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	2001c5fc 	.word	0x2001c5fc

08009344 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800934c:	2300      	movs	r3, #0
 800934e:	60fb      	str	r3, [r7, #12]
 8009350:	e016      	b.n	8009380 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009352:	4a10      	ldr	r2, [pc, #64]	; (8009394 <vQueueUnregisterQueue+0x50>)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	4413      	add	r3, r2
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	429a      	cmp	r2, r3
 8009360:	d10b      	bne.n	800937a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009362:	4a0c      	ldr	r2, [pc, #48]	; (8009394 <vQueueUnregisterQueue+0x50>)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2100      	movs	r1, #0
 8009368:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800936c:	4a09      	ldr	r2, [pc, #36]	; (8009394 <vQueueUnregisterQueue+0x50>)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	00db      	lsls	r3, r3, #3
 8009372:	4413      	add	r3, r2
 8009374:	2200      	movs	r2, #0
 8009376:	605a      	str	r2, [r3, #4]
				break;
 8009378:	e006      	b.n	8009388 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3301      	adds	r3, #1
 800937e:	60fb      	str	r3, [r7, #12]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b07      	cmp	r3, #7
 8009384:	d9e5      	bls.n	8009352 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009386:	bf00      	nop
 8009388:	bf00      	nop
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	2001c5fc 	.word	0x2001c5fc

08009398 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80093a8:	f001 fb3c 	bl	800aa24 <vPortEnterCritical>
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093b2:	b25b      	sxtb	r3, r3
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b8:	d103      	bne.n	80093c2 <vQueueWaitForMessageRestricted+0x2a>
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093c8:	b25b      	sxtb	r3, r3
 80093ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093ce:	d103      	bne.n	80093d8 <vQueueWaitForMessageRestricted+0x40>
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093d8:	f001 fb40 	bl	800aa5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d106      	bne.n	80093f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	3324      	adds	r3, #36	; 0x24
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fbdd 	bl	8009bac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093f2:	6978      	ldr	r0, [r7, #20]
 80093f4:	f7ff fefc 	bl	80091f0 <prvUnlockQueue>
	}
 80093f8:	bf00      	nop
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08c      	sub	sp, #48	; 0x30
 8009404:	af04      	add	r7, sp, #16
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800940e:	23cc      	movs	r3, #204	; 0xcc
 8009410:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009412:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	2b00      	cmp	r3, #0
 8009418:	d01e      	beq.n	8009458 <xTaskCreateStatic+0x58>
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01b      	beq.n	8009458 <xTaskCreateStatic+0x58>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009428:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	2202      	movs	r2, #2
 800942e:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009432:	2300      	movs	r3, #0
 8009434:	9303      	str	r3, [sp, #12]
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	9302      	str	r3, [sp, #8]
 800943a:	f107 0318 	add.w	r3, r7, #24
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	68b9      	ldr	r1, [r7, #8]
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 f850 	bl	80094f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009450:	69f8      	ldr	r0, [r7, #28]
 8009452:	f000 f8e3 	bl	800961c <prvAddNewTaskToReadyList>
 8009456:	e001      	b.n	800945c <xTaskCreateStatic+0x5c>
		}
		else
		{
			xReturn = NULL;
 8009458:	2300      	movs	r3, #0
 800945a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800945c:	69bb      	ldr	r3, [r7, #24]
	}
 800945e:	4618      	mov	r0, r3
 8009460:	3720      	adds	r7, #32
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009466:	b580      	push	{r7, lr}
 8009468:	b08c      	sub	sp, #48	; 0x30
 800946a:	af04      	add	r7, sp, #16
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	603b      	str	r3, [r7, #0]
 8009472:	4613      	mov	r3, r2
 8009474:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009476:	88fb      	ldrh	r3, [r7, #6]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4618      	mov	r0, r3
 800947c:	f001 fba4 	bl	800abc8 <pvPortMalloc>
 8009480:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00e      	beq.n	80094a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009488:	20cc      	movs	r0, #204	; 0xcc
 800948a:	f001 fb9d 	bl	800abc8 <pvPortMalloc>
 800948e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	631a      	str	r2, [r3, #48]	; 0x30
 800949c:	e005      	b.n	80094aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800949e:	6978      	ldr	r0, [r7, #20]
 80094a0:	f001 fc26 	bl	800acf0 <vPortFree>
 80094a4:	e001      	b.n	80094aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d017      	beq.n	80094e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094b8:	88fa      	ldrh	r2, [r7, #6]
 80094ba:	2300      	movs	r3, #0
 80094bc:	9303      	str	r3, [sp, #12]
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	9302      	str	r3, [sp, #8]
 80094c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c8:	9300      	str	r3, [sp, #0]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68b9      	ldr	r1, [r7, #8]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f000 f80e 	bl	80094f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094d4:	69f8      	ldr	r0, [r7, #28]
 80094d6:	f000 f8a1 	bl	800961c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094da:	2301      	movs	r3, #1
 80094dc:	61bb      	str	r3, [r7, #24]
 80094de:	e002      	b.n	80094e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80094e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094e6:	69bb      	ldr	r3, [r7, #24]
	}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3720      	adds	r7, #32
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	461a      	mov	r2, r3
 8009508:	21a5      	movs	r1, #165	; 0xa5
 800950a:	f018 fae1 	bl	8021ad0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009512:	6879      	ldr	r1, [r7, #4]
 8009514:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009518:	440b      	add	r3, r1
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	f023 0307 	bic.w	r3, r3, #7
 8009526:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01f      	beq.n	800956e <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800952e:	2300      	movs	r3, #0
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	e012      	b.n	800955a <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	4413      	add	r3, r2
 800953a:	7819      	ldrb	r1, [r3, #0]
 800953c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	4413      	add	r3, r2
 8009542:	3334      	adds	r3, #52	; 0x34
 8009544:	460a      	mov	r2, r1
 8009546:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	4413      	add	r3, r2
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d006      	beq.n	8009562 <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	3301      	adds	r3, #1
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b1d      	cmp	r3, #29
 800955e:	d9e9      	bls.n	8009534 <prvInitialiseNewTask+0x44>
 8009560:	e000      	b.n	8009564 <prvInitialiseNewTask+0x74>
			{
				break;
 8009562:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009566:	2200      	movs	r2, #0
 8009568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800956c:	e003      	b.n	8009576 <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800956e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	2b37      	cmp	r3, #55	; 0x37
 800957a:	d901      	bls.n	8009580 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800957c:	2337      	movs	r3, #55	; 0x37
 800957e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	6a3a      	ldr	r2, [r7, #32]
 8009584:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	6a3a      	ldr	r2, [r7, #32]
 800958a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	2200      	movs	r2, #0
 8009590:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	3304      	adds	r3, #4
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff f818 	bl	80085cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	3318      	adds	r3, #24
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7ff f813 	bl	80085cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	2200      	movs	r2, #0
 80095c0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80095cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ce:	3364      	adds	r3, #100	; 0x64
 80095d0:	2260      	movs	r2, #96	; 0x60
 80095d2:	2100      	movs	r1, #0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f018 fa7b 	bl	8021ad0 <memset>
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	4a0c      	ldr	r2, [pc, #48]	; (8009610 <prvInitialiseNewTask+0x120>)
 80095de:	669a      	str	r2, [r3, #104]	; 0x68
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	4a0c      	ldr	r2, [pc, #48]	; (8009614 <prvInitialiseNewTask+0x124>)
 80095e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80095e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e8:	4a0b      	ldr	r2, [pc, #44]	; (8009618 <prvInitialiseNewTask+0x128>)
 80095ea:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	68f9      	ldr	r1, [r7, #12]
 80095f0:	6938      	ldr	r0, [r7, #16]
 80095f2:	f001 f931 	bl	800a858 <pxPortInitialiseStack>
 80095f6:	4602      	mov	r2, r0
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d002      	beq.n	8009608 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009606:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009608:	bf00      	nop
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	08026de8 	.word	0x08026de8
 8009614:	08026e08 	.word	0x08026e08
 8009618:	08026dc8 	.word	0x08026dc8

0800961c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009624:	f001 f9fe 	bl	800aa24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009628:	4b2d      	ldr	r3, [pc, #180]	; (80096e0 <prvAddNewTaskToReadyList+0xc4>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	3301      	adds	r3, #1
 800962e:	4a2c      	ldr	r2, [pc, #176]	; (80096e0 <prvAddNewTaskToReadyList+0xc4>)
 8009630:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009632:	4b2c      	ldr	r3, [pc, #176]	; (80096e4 <prvAddNewTaskToReadyList+0xc8>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800963a:	4a2a      	ldr	r2, [pc, #168]	; (80096e4 <prvAddNewTaskToReadyList+0xc8>)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009640:	4b27      	ldr	r3, [pc, #156]	; (80096e0 <prvAddNewTaskToReadyList+0xc4>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d110      	bne.n	800966a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009648:	f000 fbbc 	bl	8009dc4 <prvInitialiseTaskLists>
 800964c:	e00d      	b.n	800966a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800964e:	4b26      	ldr	r3, [pc, #152]	; (80096e8 <prvAddNewTaskToReadyList+0xcc>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d109      	bne.n	800966a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009656:	4b23      	ldr	r3, [pc, #140]	; (80096e4 <prvAddNewTaskToReadyList+0xc8>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009660:	429a      	cmp	r2, r3
 8009662:	d802      	bhi.n	800966a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009664:	4a1f      	ldr	r2, [pc, #124]	; (80096e4 <prvAddNewTaskToReadyList+0xc8>)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800966a:	4b20      	ldr	r3, [pc, #128]	; (80096ec <prvAddNewTaskToReadyList+0xd0>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3301      	adds	r3, #1
 8009670:	4a1e      	ldr	r2, [pc, #120]	; (80096ec <prvAddNewTaskToReadyList+0xd0>)
 8009672:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009674:	4b1d      	ldr	r3, [pc, #116]	; (80096ec <prvAddNewTaskToReadyList+0xd0>)
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009680:	4b1b      	ldr	r3, [pc, #108]	; (80096f0 <prvAddNewTaskToReadyList+0xd4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d903      	bls.n	8009690 <prvAddNewTaskToReadyList+0x74>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968c:	4a18      	ldr	r2, [pc, #96]	; (80096f0 <prvAddNewTaskToReadyList+0xd4>)
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4a15      	ldr	r2, [pc, #84]	; (80096f4 <prvAddNewTaskToReadyList+0xd8>)
 800969e:	441a      	add	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	3304      	adds	r3, #4
 80096a4:	4619      	mov	r1, r3
 80096a6:	4610      	mov	r0, r2
 80096a8:	f7fe ff9d 	bl	80085e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096ac:	f001 f9d6 	bl	800aa5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096b0:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <prvAddNewTaskToReadyList+0xcc>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00e      	beq.n	80096d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096b8:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <prvAddNewTaskToReadyList+0xc8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d207      	bcs.n	80096d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096c6:	4b0c      	ldr	r3, [pc, #48]	; (80096f8 <prvAddNewTaskToReadyList+0xdc>)
 80096c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	2001cb10 	.word	0x2001cb10
 80096e4:	2001c63c 	.word	0x2001c63c
 80096e8:	2001cb1c 	.word	0x2001cb1c
 80096ec:	2001cb2c 	.word	0x2001cb2c
 80096f0:	2001cb18 	.word	0x2001cb18
 80096f4:	2001c640 	.word	0x2001c640
 80096f8:	e000ed04 	.word	0xe000ed04

080096fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009704:	2300      	movs	r3, #0
 8009706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d008      	beq.n	8009720 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 800970e:	f000 f87b 	bl	8009808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009712:	2100      	movs	r1, #0
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fd5d 	bl	800a1d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800971a:	f000 f883 	bl	8009824 <xTaskResumeAll>
 800971e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d107      	bne.n	8009736 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8009726:	4b06      	ldr	r3, [pc, #24]	; (8009740 <vTaskDelay+0x44>)
 8009728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009736:	bf00      	nop
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	e000ed04 	.word	0xe000ed04

08009744 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08a      	sub	sp, #40	; 0x28
 8009748:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800974a:	2300      	movs	r3, #0
 800974c:	60fb      	str	r3, [r7, #12]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800974e:	2300      	movs	r3, #0
 8009750:	60bb      	str	r3, [r7, #8]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009752:	1d3a      	adds	r2, r7, #4
 8009754:	f107 0108 	add.w	r1, r7, #8
 8009758:	f107 030c 	add.w	r3, r7, #12
 800975c:	4618      	mov	r0, r3
 800975e:	f7fe fee1 	bl	8008524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	9202      	str	r2, [sp, #8]
 800976a:	9301      	str	r3, [sp, #4]
 800976c:	2300      	movs	r3, #0
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	2300      	movs	r3, #0
 8009772:	460a      	mov	r2, r1
 8009774:	491c      	ldr	r1, [pc, #112]	; (80097e8 <vTaskStartScheduler+0xa4>)
 8009776:	481d      	ldr	r0, [pc, #116]	; (80097ec <vTaskStartScheduler+0xa8>)
 8009778:	f7ff fe42 	bl	8009400 <xTaskCreateStatic>
 800977c:	4603      	mov	r3, r0
 800977e:	4a1c      	ldr	r2, [pc, #112]	; (80097f0 <vTaskStartScheduler+0xac>)
 8009780:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009782:	4b1b      	ldr	r3, [pc, #108]	; (80097f0 <vTaskStartScheduler+0xac>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <vTaskStartScheduler+0x4c>
		{
			xReturn = pdPASS;
 800978a:	2301      	movs	r3, #1
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	e001      	b.n	8009794 <vTaskStartScheduler+0x50>
		}
		else
		{
			xReturn = pdFAIL;
 8009790:	2300      	movs	r3, #0
 8009792:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d102      	bne.n	80097a0 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800979a:	f000 fd6f 	bl	800a27c <xTimerCreateTimerTask>
 800979e:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d11c      	bne.n	80097e0 <vTaskStartScheduler+0x9c>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097aa:	b672      	cpsid	i
 80097ac:	f383 8811 	msr	BASEPRI, r3
 80097b0:	f3bf 8f6f 	isb	sy
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	b662      	cpsie	i
 80097ba:	613b      	str	r3, [r7, #16]
}
 80097bc:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097be:	4b0d      	ldr	r3, [pc, #52]	; (80097f4 <vTaskStartScheduler+0xb0>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3364      	adds	r3, #100	; 0x64
 80097c4:	4a0c      	ldr	r2, [pc, #48]	; (80097f8 <vTaskStartScheduler+0xb4>)
 80097c6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097c8:	4b0c      	ldr	r3, [pc, #48]	; (80097fc <vTaskStartScheduler+0xb8>)
 80097ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097d0:	4b0b      	ldr	r3, [pc, #44]	; (8009800 <vTaskStartScheduler+0xbc>)
 80097d2:	2201      	movs	r2, #1
 80097d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80097d6:	4b0b      	ldr	r3, [pc, #44]	; (8009804 <vTaskStartScheduler+0xc0>)
 80097d8:	2200      	movs	r2, #0
 80097da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097dc:	f001 f8b8 	bl	800a950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097e0:	bf00      	nop
 80097e2:	3718      	adds	r7, #24
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	08023258 	.word	0x08023258
 80097ec:	08009d95 	.word	0x08009d95
 80097f0:	2001cb34 	.word	0x2001cb34
 80097f4:	2001c63c 	.word	0x2001c63c
 80097f8:	200000c8 	.word	0x200000c8
 80097fc:	2001cb30 	.word	0x2001cb30
 8009800:	2001cb1c 	.word	0x2001cb1c
 8009804:	2001cb14 	.word	0x2001cb14

08009808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009808:	b480      	push	{r7}
 800980a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800980c:	4b04      	ldr	r3, [pc, #16]	; (8009820 <vTaskSuspendAll+0x18>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3301      	adds	r3, #1
 8009812:	4a03      	ldr	r2, [pc, #12]	; (8009820 <vTaskSuspendAll+0x18>)
 8009814:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009816:	bf00      	nop
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	2001cb38 	.word	0x2001cb38

08009824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800982a:	2300      	movs	r3, #0
 800982c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800982e:	2300      	movs	r3, #0
 8009830:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009832:	f001 f8f7 	bl	800aa24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009836:	4b39      	ldr	r3, [pc, #228]	; (800991c <xTaskResumeAll+0xf8>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3b01      	subs	r3, #1
 800983c:	4a37      	ldr	r2, [pc, #220]	; (800991c <xTaskResumeAll+0xf8>)
 800983e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009840:	4b36      	ldr	r3, [pc, #216]	; (800991c <xTaskResumeAll+0xf8>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d162      	bne.n	800990e <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009848:	4b35      	ldr	r3, [pc, #212]	; (8009920 <xTaskResumeAll+0xfc>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d05e      	beq.n	800990e <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009850:	e02f      	b.n	80098b2 <xTaskResumeAll+0x8e>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009852:	4b34      	ldr	r3, [pc, #208]	; (8009924 <xTaskResumeAll+0x100>)
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3318      	adds	r3, #24
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe ff1e 	bl	80086a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3304      	adds	r3, #4
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe ff19 	bl	80086a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009872:	4b2d      	ldr	r3, [pc, #180]	; (8009928 <xTaskResumeAll+0x104>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d903      	bls.n	8009882 <xTaskResumeAll+0x5e>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	4a2a      	ldr	r2, [pc, #168]	; (8009928 <xTaskResumeAll+0x104>)
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4a27      	ldr	r2, [pc, #156]	; (800992c <xTaskResumeAll+0x108>)
 8009890:	441a      	add	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	3304      	adds	r3, #4
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f7fe fea4 	bl	80085e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a2:	4b23      	ldr	r3, [pc, #140]	; (8009930 <xTaskResumeAll+0x10c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 80098ac:	4b21      	ldr	r3, [pc, #132]	; (8009934 <xTaskResumeAll+0x110>)
 80098ae:	2201      	movs	r2, #1
 80098b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098b2:	4b1c      	ldr	r3, [pc, #112]	; (8009924 <xTaskResumeAll+0x100>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1cb      	bne.n	8009852 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098c0:	f000 fb12 	bl	8009ee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80098c4:	4b1c      	ldr	r3, [pc, #112]	; (8009938 <xTaskResumeAll+0x114>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d010      	beq.n	80098f2 <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098d0:	f000 f858 	bl	8009984 <xTaskIncrementTick>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 80098da:	4b16      	ldr	r3, [pc, #88]	; (8009934 <xTaskResumeAll+0x110>)
 80098dc:	2201      	movs	r2, #1
 80098de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d1f1      	bne.n	80098d0 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 80098ec:	4b12      	ldr	r3, [pc, #72]	; (8009938 <xTaskResumeAll+0x114>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098f2:	4b10      	ldr	r3, [pc, #64]	; (8009934 <xTaskResumeAll+0x110>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098fa:	2301      	movs	r3, #1
 80098fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098fe:	4b0f      	ldr	r3, [pc, #60]	; (800993c <xTaskResumeAll+0x118>)
 8009900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800990e:	f001 f8a5 	bl	800aa5c <vPortExitCritical>

	return xAlreadyYielded;
 8009912:	68bb      	ldr	r3, [r7, #8]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	2001cb38 	.word	0x2001cb38
 8009920:	2001cb10 	.word	0x2001cb10
 8009924:	2001cad0 	.word	0x2001cad0
 8009928:	2001cb18 	.word	0x2001cb18
 800992c:	2001c640 	.word	0x2001c640
 8009930:	2001c63c 	.word	0x2001c63c
 8009934:	2001cb24 	.word	0x2001cb24
 8009938:	2001cb20 	.word	0x2001cb20
 800993c:	e000ed04 	.word	0xe000ed04

08009940 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009946:	4b05      	ldr	r3, [pc, #20]	; (800995c <xTaskGetTickCount+0x1c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800994c:	687b      	ldr	r3, [r7, #4]
}
 800994e:	4618      	mov	r0, r3
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	2001cb14 	.word	0x2001cb14

08009960 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009966:	f001 f919 	bl	800ab9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800996a:	2300      	movs	r3, #0
 800996c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800996e:	4b04      	ldr	r3, [pc, #16]	; (8009980 <xTaskGetTickCountFromISR+0x20>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009974:	683b      	ldr	r3, [r7, #0]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	2001cb14 	.word	0x2001cb14

08009984 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800998e:	4b46      	ldr	r3, [pc, #280]	; (8009aa8 <xTaskIncrementTick+0x124>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d178      	bne.n	8009a88 <xTaskIncrementTick+0x104>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009996:	4b45      	ldr	r3, [pc, #276]	; (8009aac <xTaskIncrementTick+0x128>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3301      	adds	r3, #1
 800999c:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800999e:	4a43      	ldr	r2, [pc, #268]	; (8009aac <xTaskIncrementTick+0x128>)
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d110      	bne.n	80099cc <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 80099aa:	4b41      	ldr	r3, [pc, #260]	; (8009ab0 <xTaskIncrementTick+0x12c>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	4b40      	ldr	r3, [pc, #256]	; (8009ab4 <xTaskIncrementTick+0x130>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a3e      	ldr	r2, [pc, #248]	; (8009ab0 <xTaskIncrementTick+0x12c>)
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	4a3e      	ldr	r2, [pc, #248]	; (8009ab4 <xTaskIncrementTick+0x130>)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6013      	str	r3, [r2, #0]
 80099be:	4b3e      	ldr	r3, [pc, #248]	; (8009ab8 <xTaskIncrementTick+0x134>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	4a3c      	ldr	r2, [pc, #240]	; (8009ab8 <xTaskIncrementTick+0x134>)
 80099c6:	6013      	str	r3, [r2, #0]
 80099c8:	f000 fa8e 	bl	8009ee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099cc:	4b3b      	ldr	r3, [pc, #236]	; (8009abc <xTaskIncrementTick+0x138>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d349      	bcc.n	8009a6a <xTaskIncrementTick+0xe6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099d6:	4b36      	ldr	r3, [pc, #216]	; (8009ab0 <xTaskIncrementTick+0x12c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d104      	bne.n	80099ea <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099e0:	4b36      	ldr	r3, [pc, #216]	; (8009abc <xTaskIncrementTick+0x138>)
 80099e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099e6:	601a      	str	r2, [r3, #0]
					break;
 80099e8:	e03f      	b.n	8009a6a <xTaskIncrementTick+0xe6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ea:	4b31      	ldr	r3, [pc, #196]	; (8009ab0 <xTaskIncrementTick+0x12c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099fa:	693a      	ldr	r2, [r7, #16]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d203      	bcs.n	8009a0a <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a02:	4a2e      	ldr	r2, [pc, #184]	; (8009abc <xTaskIncrementTick+0x138>)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a08:	e02f      	b.n	8009a6a <xTaskIncrementTick+0xe6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fe46 	bl	80086a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d004      	beq.n	8009a26 <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	3318      	adds	r3, #24
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fe3d 	bl	80086a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	4b25      	ldr	r3, [pc, #148]	; (8009ac0 <xTaskIncrementTick+0x13c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d903      	bls.n	8009a3a <xTaskIncrementTick+0xb6>
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a36:	4a22      	ldr	r2, [pc, #136]	; (8009ac0 <xTaskIncrementTick+0x13c>)
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4a1f      	ldr	r2, [pc, #124]	; (8009ac4 <xTaskIncrementTick+0x140>)
 8009a48:	441a      	add	r2, r3
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4610      	mov	r0, r2
 8009a52:	f7fe fdc8 	bl	80085e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ac8 <xTaskIncrementTick+0x144>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d3b8      	bcc.n	80099d6 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8009a64:	2301      	movs	r3, #1
 8009a66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a68:	e7b5      	b.n	80099d6 <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a6a:	4b17      	ldr	r3, [pc, #92]	; (8009ac8 <xTaskIncrementTick+0x144>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a70:	4914      	ldr	r1, [pc, #80]	; (8009ac4 <xTaskIncrementTick+0x140>)
 8009a72:	4613      	mov	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	440b      	add	r3, r1
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d907      	bls.n	8009a92 <xTaskIncrementTick+0x10e>
			{
				xSwitchRequired = pdTRUE;
 8009a82:	2301      	movs	r3, #1
 8009a84:	617b      	str	r3, [r7, #20]
 8009a86:	e004      	b.n	8009a92 <xTaskIncrementTick+0x10e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a88:	4b10      	ldr	r3, [pc, #64]	; (8009acc <xTaskIncrementTick+0x148>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	4a0f      	ldr	r2, [pc, #60]	; (8009acc <xTaskIncrementTick+0x148>)
 8009a90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a92:	4b0f      	ldr	r3, [pc, #60]	; (8009ad0 <xTaskIncrementTick+0x14c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <xTaskIncrementTick+0x11a>
		{
			xSwitchRequired = pdTRUE;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a9e:	697b      	ldr	r3, [r7, #20]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	2001cb38 	.word	0x2001cb38
 8009aac:	2001cb14 	.word	0x2001cb14
 8009ab0:	2001cac8 	.word	0x2001cac8
 8009ab4:	2001cacc 	.word	0x2001cacc
 8009ab8:	2001cb28 	.word	0x2001cb28
 8009abc:	2001cb30 	.word	0x2001cb30
 8009ac0:	2001cb18 	.word	0x2001cb18
 8009ac4:	2001c640 	.word	0x2001c640
 8009ac8:	2001c63c 	.word	0x2001c63c
 8009acc:	2001cb20 	.word	0x2001cb20
 8009ad0:	2001cb24 	.word	0x2001cb24

08009ad4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ada:	4b23      	ldr	r3, [pc, #140]	; (8009b68 <vTaskSwitchContext+0x94>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ae2:	4b22      	ldr	r3, [pc, #136]	; (8009b6c <vTaskSwitchContext+0x98>)
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ae8:	e038      	b.n	8009b5c <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8009aea:	4b20      	ldr	r3, [pc, #128]	; (8009b6c <vTaskSwitchContext+0x98>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009af0:	4b1f      	ldr	r3, [pc, #124]	; (8009b70 <vTaskSwitchContext+0x9c>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	607b      	str	r3, [r7, #4]
 8009af6:	e002      	b.n	8009afe <vTaskSwitchContext+0x2a>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	607b      	str	r3, [r7, #4]
 8009afe:	491d      	ldr	r1, [pc, #116]	; (8009b74 <vTaskSwitchContext+0xa0>)
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	4613      	mov	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	440b      	add	r3, r1
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0f2      	beq.n	8009af8 <vTaskSwitchContext+0x24>
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4a15      	ldr	r2, [pc, #84]	; (8009b74 <vTaskSwitchContext+0xa0>)
 8009b1e:	4413      	add	r3, r2
 8009b20:	603b      	str	r3, [r7, #0]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	605a      	str	r2, [r3, #4]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	3308      	adds	r3, #8
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d104      	bne.n	8009b42 <vTaskSwitchContext+0x6e>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	605a      	str	r2, [r3, #4]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	4a0b      	ldr	r2, [pc, #44]	; (8009b78 <vTaskSwitchContext+0xa4>)
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	4a08      	ldr	r2, [pc, #32]	; (8009b70 <vTaskSwitchContext+0x9c>)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b52:	4b09      	ldr	r3, [pc, #36]	; (8009b78 <vTaskSwitchContext+0xa4>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3364      	adds	r3, #100	; 0x64
 8009b58:	4a08      	ldr	r2, [pc, #32]	; (8009b7c <vTaskSwitchContext+0xa8>)
 8009b5a:	6013      	str	r3, [r2, #0]
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr
 8009b68:	2001cb38 	.word	0x2001cb38
 8009b6c:	2001cb24 	.word	0x2001cb24
 8009b70:	2001cb18 	.word	0x2001cb18
 8009b74:	2001c640 	.word	0x2001c640
 8009b78:	2001c63c 	.word	0x2001c63c
 8009b7c:	200000c8 	.word	0x200000c8

08009b80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b8a:	4b07      	ldr	r3, [pc, #28]	; (8009ba8 <vTaskPlaceOnEventList+0x28>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	3318      	adds	r3, #24
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7fe fd4b 	bl	800862e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b98:	2101      	movs	r1, #1
 8009b9a:	6838      	ldr	r0, [r7, #0]
 8009b9c:	f000 fb1a 	bl	800a1d4 <prvAddCurrentTaskToDelayedList>
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	2001c63c 	.word	0x2001c63c

08009bac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bb8:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <vTaskPlaceOnEventListRestricted+0x38>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3318      	adds	r3, #24
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f7fe fd10 	bl	80085e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <vTaskPlaceOnEventListRestricted+0x26>
		{
			xTicksToWait = portMAX_DELAY;
 8009bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	68b8      	ldr	r0, [r7, #8]
 8009bd6:	f000 fafd 	bl	800a1d4 <prvAddCurrentTaskToDelayedList>
	}
 8009bda:	bf00      	nop
 8009bdc:	3710      	adds	r7, #16
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	2001c63c 	.word	0x2001c63c

08009be8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	3318      	adds	r3, #24
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe fd4f 	bl	80086a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c02:	4b1e      	ldr	r3, [pc, #120]	; (8009c7c <xTaskRemoveFromEventList+0x94>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d11d      	bne.n	8009c46 <xTaskRemoveFromEventList+0x5e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	3304      	adds	r3, #4
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7fe fd46 	bl	80086a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c18:	4b19      	ldr	r3, [pc, #100]	; (8009c80 <xTaskRemoveFromEventList+0x98>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d903      	bls.n	8009c28 <xTaskRemoveFromEventList+0x40>
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	4a16      	ldr	r2, [pc, #88]	; (8009c80 <xTaskRemoveFromEventList+0x98>)
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4a13      	ldr	r2, [pc, #76]	; (8009c84 <xTaskRemoveFromEventList+0x9c>)
 8009c36:	441a      	add	r2, r3
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4610      	mov	r0, r2
 8009c40:	f7fe fcd1 	bl	80085e6 <vListInsertEnd>
 8009c44:	e005      	b.n	8009c52 <xTaskRemoveFromEventList+0x6a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	3318      	adds	r3, #24
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	480e      	ldr	r0, [pc, #56]	; (8009c88 <xTaskRemoveFromEventList+0xa0>)
 8009c4e:	f7fe fcca 	bl	80085e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c56:	4b0d      	ldr	r3, [pc, #52]	; (8009c8c <xTaskRemoveFromEventList+0xa4>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d905      	bls.n	8009c6c <xTaskRemoveFromEventList+0x84>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c60:	2301      	movs	r3, #1
 8009c62:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c64:	4b0a      	ldr	r3, [pc, #40]	; (8009c90 <xTaskRemoveFromEventList+0xa8>)
 8009c66:	2201      	movs	r2, #1
 8009c68:	601a      	str	r2, [r3, #0]
 8009c6a:	e001      	b.n	8009c70 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		xReturn = pdFALSE;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009c70:	68fb      	ldr	r3, [r7, #12]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	2001cb38 	.word	0x2001cb38
 8009c80:	2001cb18 	.word	0x2001cb18
 8009c84:	2001c640 	.word	0x2001c640
 8009c88:	2001cad0 	.word	0x2001cad0
 8009c8c:	2001c63c 	.word	0x2001c63c
 8009c90:	2001cb24 	.word	0x2001cb24

08009c94 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	taskENTER_CRITICAL();
 8009c9c:	f000 fec2 	bl	800aa24 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ca0:	4b06      	ldr	r3, [pc, #24]	; (8009cbc <vTaskSetTimeOutState+0x28>)
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <vTaskSetTimeOutState+0x2c>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009cb0:	f000 fed4 	bl	800aa5c <vPortExitCritical>
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	2001cb28 	.word	0x2001cb28
 8009cc0:	2001cb14 	.word	0x2001cb14

08009cc4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ccc:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <vTaskInternalSetTimeOutState+0x24>)
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cd4:	4b05      	ldr	r3, [pc, #20]	; (8009cec <vTaskInternalSetTimeOutState+0x28>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	605a      	str	r2, [r3, #4]
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	2001cb28 	.word	0x2001cb28
 8009cec:	2001cb14 	.word	0x2001cb14

08009cf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8009cfa:	f000 fe93 	bl	800aa24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009cfe:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <xTaskCheckForTimeOut+0x84>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d16:	d102      	bne.n	8009d1e <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	617b      	str	r3, [r7, #20]
 8009d1c:	e023      	b.n	8009d66 <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	4b15      	ldr	r3, [pc, #84]	; (8009d78 <xTaskCheckForTimeOut+0x88>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d007      	beq.n	8009d3a <xTaskCheckForTimeOut+0x4a>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	693a      	ldr	r2, [r7, #16]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d302      	bcc.n	8009d3a <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d34:	2301      	movs	r3, #1
 8009d36:	617b      	str	r3, [r7, #20]
 8009d38:	e015      	b.n	8009d66 <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d20b      	bcs.n	8009d5c <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	1ad2      	subs	r2, r2, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff ffb7 	bl	8009cc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	617b      	str	r3, [r7, #20]
 8009d5a:	e004      	b.n	8009d66 <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d62:	2301      	movs	r3, #1
 8009d64:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009d66:	f000 fe79 	bl	800aa5c <vPortExitCritical>

	return xReturn;
 8009d6a:	697b      	ldr	r3, [r7, #20]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	2001cb14 	.word	0x2001cb14
 8009d78:	2001cb28 	.word	0x2001cb28

08009d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d80:	4b03      	ldr	r3, [pc, #12]	; (8009d90 <vTaskMissedYield+0x14>)
 8009d82:	2201      	movs	r2, #1
 8009d84:	601a      	str	r2, [r3, #0]
}
 8009d86:	bf00      	nop
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	2001cb24 	.word	0x2001cb24

08009d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d9c:	f000 f852 	bl	8009e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009da0:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <prvIdleTask+0x28>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d9f9      	bls.n	8009d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009da8:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <prvIdleTask+0x2c>)
 8009daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009db8:	e7f0      	b.n	8009d9c <prvIdleTask+0x8>
 8009dba:	bf00      	nop
 8009dbc:	2001c640 	.word	0x2001c640
 8009dc0:	e000ed04 	.word	0xe000ed04

08009dc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dca:	2300      	movs	r3, #0
 8009dcc:	607b      	str	r3, [r7, #4]
 8009dce:	e00c      	b.n	8009dea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4a12      	ldr	r2, [pc, #72]	; (8009e24 <prvInitialiseTaskLists+0x60>)
 8009ddc:	4413      	add	r3, r2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fbd4 	bl	800858c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3301      	adds	r3, #1
 8009de8:	607b      	str	r3, [r7, #4]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b37      	cmp	r3, #55	; 0x37
 8009dee:	d9ef      	bls.n	8009dd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009df0:	480d      	ldr	r0, [pc, #52]	; (8009e28 <prvInitialiseTaskLists+0x64>)
 8009df2:	f7fe fbcb 	bl	800858c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009df6:	480d      	ldr	r0, [pc, #52]	; (8009e2c <prvInitialiseTaskLists+0x68>)
 8009df8:	f7fe fbc8 	bl	800858c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009dfc:	480c      	ldr	r0, [pc, #48]	; (8009e30 <prvInitialiseTaskLists+0x6c>)
 8009dfe:	f7fe fbc5 	bl	800858c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e02:	480c      	ldr	r0, [pc, #48]	; (8009e34 <prvInitialiseTaskLists+0x70>)
 8009e04:	f7fe fbc2 	bl	800858c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e08:	480b      	ldr	r0, [pc, #44]	; (8009e38 <prvInitialiseTaskLists+0x74>)
 8009e0a:	f7fe fbbf 	bl	800858c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e0e:	4b0b      	ldr	r3, [pc, #44]	; (8009e3c <prvInitialiseTaskLists+0x78>)
 8009e10:	4a05      	ldr	r2, [pc, #20]	; (8009e28 <prvInitialiseTaskLists+0x64>)
 8009e12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e14:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <prvInitialiseTaskLists+0x7c>)
 8009e16:	4a05      	ldr	r2, [pc, #20]	; (8009e2c <prvInitialiseTaskLists+0x68>)
 8009e18:	601a      	str	r2, [r3, #0]
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	2001c640 	.word	0x2001c640
 8009e28:	2001caa0 	.word	0x2001caa0
 8009e2c:	2001cab4 	.word	0x2001cab4
 8009e30:	2001cad0 	.word	0x2001cad0
 8009e34:	2001cae4 	.word	0x2001cae4
 8009e38:	2001cafc 	.word	0x2001cafc
 8009e3c:	2001cac8 	.word	0x2001cac8
 8009e40:	2001cacc 	.word	0x2001cacc

08009e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e4a:	e019      	b.n	8009e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e4c:	f000 fdea 	bl	800aa24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e50:	4b10      	ldr	r3, [pc, #64]	; (8009e94 <prvCheckTasksWaitingTermination+0x50>)
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7fe fc1f 	bl	80086a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e62:	4b0d      	ldr	r3, [pc, #52]	; (8009e98 <prvCheckTasksWaitingTermination+0x54>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3b01      	subs	r3, #1
 8009e68:	4a0b      	ldr	r2, [pc, #44]	; (8009e98 <prvCheckTasksWaitingTermination+0x54>)
 8009e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e6c:	4b0b      	ldr	r3, [pc, #44]	; (8009e9c <prvCheckTasksWaitingTermination+0x58>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3b01      	subs	r3, #1
 8009e72:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <prvCheckTasksWaitingTermination+0x58>)
 8009e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e76:	f000 fdf1 	bl	800aa5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f810 	bl	8009ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e80:	4b06      	ldr	r3, [pc, #24]	; (8009e9c <prvCheckTasksWaitingTermination+0x58>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1e1      	bne.n	8009e4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e88:	bf00      	nop
 8009e8a:	bf00      	nop
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	2001cae4 	.word	0x2001cae4
 8009e98:	2001cb10 	.word	0x2001cb10
 8009e9c:	2001caf8 	.word	0x2001caf8

08009ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3364      	adds	r3, #100	; 0x64
 8009eac:	4618      	mov	r0, r3
 8009eae:	f018 f81d 	bl	8021eec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d108      	bne.n	8009ece <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 ff15 	bl	800acf0 <vPortFree>
				vPortFree( pxTCB );
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 ff12 	bl	800acf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ecc:	e007      	b.n	8009ede <prvDeleteTCB+0x3e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d102      	bne.n	8009ede <prvDeleteTCB+0x3e>
				vPortFree( pxTCB );
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 ff09 	bl	800acf0 <vPortFree>
	}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eee:	4b0c      	ldr	r3, [pc, #48]	; (8009f20 <prvResetNextTaskUnblockTime+0x38>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d104      	bne.n	8009f02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ef8:	4b0a      	ldr	r3, [pc, #40]	; (8009f24 <prvResetNextTaskUnblockTime+0x3c>)
 8009efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009efe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f00:	e008      	b.n	8009f14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f02:	4b07      	ldr	r3, [pc, #28]	; (8009f20 <prvResetNextTaskUnblockTime+0x38>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4a04      	ldr	r2, [pc, #16]	; (8009f24 <prvResetNextTaskUnblockTime+0x3c>)
 8009f12:	6013      	str	r3, [r2, #0]
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	2001cac8 	.word	0x2001cac8
 8009f24:	2001cb30 	.word	0x2001cb30

08009f28 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009f2e:	4b05      	ldr	r3, [pc, #20]	; (8009f44 <xTaskGetCurrentTaskHandle+0x1c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009f34:	687b      	ldr	r3, [r7, #4]
	}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	2001c63c 	.word	0x2001c63c

08009f48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f4e:	4b0b      	ldr	r3, [pc, #44]	; (8009f7c <xTaskGetSchedulerState+0x34>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d102      	bne.n	8009f5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f56:	2301      	movs	r3, #1
 8009f58:	607b      	str	r3, [r7, #4]
 8009f5a:	e008      	b.n	8009f6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f5c:	4b08      	ldr	r3, [pc, #32]	; (8009f80 <xTaskGetSchedulerState+0x38>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d102      	bne.n	8009f6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f64:	2302      	movs	r3, #2
 8009f66:	607b      	str	r3, [r7, #4]
 8009f68:	e001      	b.n	8009f6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f6e:	687b      	ldr	r3, [r7, #4]
	}
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	2001cb1c 	.word	0x2001cb1c
 8009f80:	2001cb38 	.word	0x2001cb38

08009f84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d051      	beq.n	800a03e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9e:	4b2a      	ldr	r3, [pc, #168]	; (800a048 <xTaskPriorityInherit+0xc4>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d241      	bcs.n	800a02c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	db06      	blt.n	8009fbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fb0:	4b25      	ldr	r3, [pc, #148]	; (800a048 <xTaskPriorityInherit+0xc4>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	6959      	ldr	r1, [r3, #20]
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4a1f      	ldr	r2, [pc, #124]	; (800a04c <xTaskPriorityInherit+0xc8>)
 8009fd0:	4413      	add	r3, r2
 8009fd2:	4299      	cmp	r1, r3
 8009fd4:	d122      	bne.n	800a01c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	3304      	adds	r3, #4
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe fb60 	bl	80086a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fe0:	4b19      	ldr	r3, [pc, #100]	; (800a048 <xTaskPriorityInherit+0xc4>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fee:	4b18      	ldr	r3, [pc, #96]	; (800a050 <xTaskPriorityInherit+0xcc>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d903      	bls.n	8009ffe <xTaskPriorityInherit+0x7a>
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffa:	4a15      	ldr	r2, [pc, #84]	; (800a050 <xTaskPriorityInherit+0xcc>)
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a002:	4613      	mov	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4a10      	ldr	r2, [pc, #64]	; (800a04c <xTaskPriorityInherit+0xc8>)
 800a00c:	441a      	add	r2, r3
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	3304      	adds	r3, #4
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f7fe fae6 	bl	80085e6 <vListInsertEnd>
 800a01a:	e004      	b.n	800a026 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a01c:	4b0a      	ldr	r3, [pc, #40]	; (800a048 <xTaskPriorityInherit+0xc4>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a026:	2301      	movs	r3, #1
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	e008      	b.n	800a03e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a030:	4b05      	ldr	r3, [pc, #20]	; (800a048 <xTaskPriorityInherit+0xc4>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a036:	429a      	cmp	r2, r3
 800a038:	d201      	bcs.n	800a03e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a03a:	2301      	movs	r3, #1
 800a03c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a03e:	68fb      	ldr	r3, [r7, #12]
	}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	2001c63c 	.word	0x2001c63c
 800a04c:	2001c640 	.word	0x2001c640
 800a050:	2001cb18 	.word	0x2001cb18

0800a054 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a060:	2300      	movs	r3, #0
 800a062:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d037      	beq.n	800a0da <xTaskPriorityDisinherit+0x86>
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a06e:	1e5a      	subs	r2, r3, #1
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d02c      	beq.n	800a0da <xTaskPriorityDisinherit+0x86>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a084:	2b00      	cmp	r3, #0
 800a086:	d128      	bne.n	800a0da <xTaskPriorityDisinherit+0x86>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	3304      	adds	r3, #4
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fe fb07 	bl	80086a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0aa:	4b0e      	ldr	r3, [pc, #56]	; (800a0e4 <xTaskPriorityDisinherit+0x90>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d903      	bls.n	800a0ba <xTaskPriorityDisinherit+0x66>
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b6:	4a0b      	ldr	r2, [pc, #44]	; (800a0e4 <xTaskPriorityDisinherit+0x90>)
 800a0b8:	6013      	str	r3, [r2, #0]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0be:	4613      	mov	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4a08      	ldr	r2, [pc, #32]	; (800a0e8 <xTaskPriorityDisinherit+0x94>)
 800a0c8:	441a      	add	r2, r3
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	f7fe fa88 	bl	80085e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0da:	68fb      	ldr	r3, [r7, #12]
	}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	2001cb18 	.word	0x2001cb18
 800a0e8:	2001c640 	.word	0x2001c640

0800a0ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d04b      	beq.n	800a19c <vTaskPriorityDisinheritAfterTimeout+0xb0>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d902      	bls.n	800a114 <vTaskPriorityDisinheritAfterTimeout+0x28>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	e002      	b.n	800a11a <vTaskPriorityDisinheritAfterTimeout+0x2e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a118:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	429a      	cmp	r2, r3
 800a122:	d03b      	beq.n	800a19c <vTaskPriorityDisinheritAfterTimeout+0xb0>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d136      	bne.n	800a19c <vTaskPriorityDisinheritAfterTimeout+0xb0>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a132:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	db04      	blt.n	800a14c <vTaskPriorityDisinheritAfterTimeout+0x60>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	6959      	ldr	r1, [r3, #20]
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	4613      	mov	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4a12      	ldr	r2, [pc, #72]	; (800a1a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a15c:	4413      	add	r3, r2
 800a15e:	4299      	cmp	r1, r3
 800a160:	d11c      	bne.n	800a19c <vTaskPriorityDisinheritAfterTimeout+0xb0>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	3304      	adds	r3, #4
 800a166:	4618      	mov	r0, r3
 800a168:	f7fe fa9a 	bl	80086a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	429a      	cmp	r2, r3
 800a176:	d903      	bls.n	800a180 <vTaskPriorityDisinheritAfterTimeout+0x94>
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	4a0a      	ldr	r2, [pc, #40]	; (800a1a8 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a184:	4613      	mov	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4a05      	ldr	r2, [pc, #20]	; (800a1a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
 800a18e:	441a      	add	r2, r3
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	3304      	adds	r3, #4
 800a194:	4619      	mov	r1, r3
 800a196:	4610      	mov	r0, r2
 800a198:	f7fe fa25 	bl	80085e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a19c:	bf00      	nop
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	2001c640 	.word	0x2001c640
 800a1a8:	2001cb18 	.word	0x2001cb18

0800a1ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a1ac:	b480      	push	{r7}
 800a1ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a1b0:	4b07      	ldr	r3, [pc, #28]	; (800a1d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a1b8:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a1be:	3201      	adds	r2, #1
 800a1c0:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800a1c2:	4b03      	ldr	r3, [pc, #12]	; (800a1d0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
	}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	2001c63c 	.word	0x2001c63c

0800a1d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1de:	4b21      	ldr	r3, [pc, #132]	; (800a264 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1e4:	4b20      	ldr	r3, [pc, #128]	; (800a268 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7fe fa58 	bl	80086a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1f6:	d10a      	bne.n	800a20e <prvAddCurrentTaskToDelayedList+0x3a>
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d007      	beq.n	800a20e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1fe:	4b1a      	ldr	r3, [pc, #104]	; (800a268 <prvAddCurrentTaskToDelayedList+0x94>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3304      	adds	r3, #4
 800a204:	4619      	mov	r1, r3
 800a206:	4819      	ldr	r0, [pc, #100]	; (800a26c <prvAddCurrentTaskToDelayedList+0x98>)
 800a208:	f7fe f9ed 	bl	80085e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a20c:	e026      	b.n	800a25c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4413      	add	r3, r2
 800a214:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a216:	4b14      	ldr	r3, [pc, #80]	; (800a268 <prvAddCurrentTaskToDelayedList+0x94>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	429a      	cmp	r2, r3
 800a224:	d209      	bcs.n	800a23a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a226:	4b12      	ldr	r3, [pc, #72]	; (800a270 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	4b0f      	ldr	r3, [pc, #60]	; (800a268 <prvAddCurrentTaskToDelayedList+0x94>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3304      	adds	r3, #4
 800a230:	4619      	mov	r1, r3
 800a232:	4610      	mov	r0, r2
 800a234:	f7fe f9fb 	bl	800862e <vListInsert>
}
 800a238:	e010      	b.n	800a25c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a23a:	4b0e      	ldr	r3, [pc, #56]	; (800a274 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	4b0a      	ldr	r3, [pc, #40]	; (800a268 <prvAddCurrentTaskToDelayedList+0x94>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3304      	adds	r3, #4
 800a244:	4619      	mov	r1, r3
 800a246:	4610      	mov	r0, r2
 800a248:	f7fe f9f1 	bl	800862e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a24c:	4b0a      	ldr	r3, [pc, #40]	; (800a278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	429a      	cmp	r2, r3
 800a254:	d202      	bcs.n	800a25c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a256:	4a08      	ldr	r2, [pc, #32]	; (800a278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	6013      	str	r3, [r2, #0]
}
 800a25c:	bf00      	nop
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	2001cb14 	.word	0x2001cb14
 800a268:	2001c63c 	.word	0x2001c63c
 800a26c:	2001cafc 	.word	0x2001cafc
 800a270:	2001cacc 	.word	0x2001cacc
 800a274:	2001cac8 	.word	0x2001cac8
 800a278:	2001cb30 	.word	0x2001cb30

0800a27c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b088      	sub	sp, #32
 800a280:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a282:	2300      	movs	r3, #0
 800a284:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a286:	f000 faa7 	bl	800a7d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a28a:	4b15      	ldr	r3, [pc, #84]	; (800a2e0 <xTimerCreateTimerTask+0x64>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d020      	beq.n	800a2d4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a292:	2300      	movs	r3, #0
 800a294:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a296:	2300      	movs	r3, #0
 800a298:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a29a:	463a      	mov	r2, r7
 800a29c:	1d39      	adds	r1, r7, #4
 800a29e:	f107 0308 	add.w	r3, r7, #8
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7fe f958 	bl	8008558 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	9202      	str	r2, [sp, #8]
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	9300      	str	r3, [sp, #0]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	490a      	ldr	r1, [pc, #40]	; (800a2e4 <xTimerCreateTimerTask+0x68>)
 800a2bc:	480a      	ldr	r0, [pc, #40]	; (800a2e8 <xTimerCreateTimerTask+0x6c>)
 800a2be:	f7ff f89f 	bl	8009400 <xTaskCreateStatic>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	4a09      	ldr	r2, [pc, #36]	; (800a2ec <xTimerCreateTimerTask+0x70>)
 800a2c6:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2c8:	4b08      	ldr	r3, [pc, #32]	; (800a2ec <xTimerCreateTimerTask+0x70>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	60fb      	str	r3, [r7, #12]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
	return xReturn;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	2001cb6c 	.word	0x2001cb6c
 800a2e4:	08023270 	.word	0x08023270
 800a2e8:	0800a3f1 	.word	0x0800a3f1
 800a2ec:	2001cb70 	.word	0x2001cb70

0800a2f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08a      	sub	sp, #40	; 0x28
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
 800a2fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a302:	4b1a      	ldr	r3, [pc, #104]	; (800a36c <xTimerGenericCommand+0x7c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d02a      	beq.n	800a360 <xTimerGenericCommand+0x70>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	2b05      	cmp	r3, #5
 800a31a:	dc18      	bgt.n	800a34e <xTimerGenericCommand+0x5e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a31c:	f7ff fe14 	bl	8009f48 <xTaskGetSchedulerState>
 800a320:	4603      	mov	r3, r0
 800a322:	2b02      	cmp	r3, #2
 800a324:	d109      	bne.n	800a33a <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a326:	4b11      	ldr	r3, [pc, #68]	; (800a36c <xTimerGenericCommand+0x7c>)
 800a328:	6818      	ldr	r0, [r3, #0]
 800a32a:	f107 0114 	add.w	r1, r7, #20
 800a32e:	2300      	movs	r3, #0
 800a330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a332:	f7fe fb7b 	bl	8008a2c <xQueueGenericSend>
 800a336:	6278      	str	r0, [r7, #36]	; 0x24
 800a338:	e012      	b.n	800a360 <xTimerGenericCommand+0x70>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a33a:	4b0c      	ldr	r3, [pc, #48]	; (800a36c <xTimerGenericCommand+0x7c>)
 800a33c:	6818      	ldr	r0, [r3, #0]
 800a33e:	f107 0114 	add.w	r1, r7, #20
 800a342:	2300      	movs	r3, #0
 800a344:	2200      	movs	r2, #0
 800a346:	f7fe fb71 	bl	8008a2c <xQueueGenericSend>
 800a34a:	6278      	str	r0, [r7, #36]	; 0x24
 800a34c:	e008      	b.n	800a360 <xTimerGenericCommand+0x70>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a34e:	4b07      	ldr	r3, [pc, #28]	; (800a36c <xTimerGenericCommand+0x7c>)
 800a350:	6818      	ldr	r0, [r3, #0]
 800a352:	f107 0114 	add.w	r1, r7, #20
 800a356:	2300      	movs	r3, #0
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	f7fe fc11 	bl	8008b80 <xQueueGenericSendFromISR>
 800a35e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a362:	4618      	mov	r0, r3
 800a364:	3728      	adds	r7, #40	; 0x28
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	2001cb6c 	.word	0x2001cb6c

0800a370 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af02      	add	r7, sp, #8
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a37a:	4b1c      	ldr	r3, [pc, #112]	; (800a3ec <prvProcessExpiredTimer+0x7c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	3304      	adds	r3, #4
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe f989 	bl	80086a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a394:	f003 0304 	and.w	r3, r3, #4
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d015      	beq.n	800a3c8 <prvProcessExpiredTimer+0x58>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	699a      	ldr	r2, [r3, #24]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	18d1      	adds	r1, r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 f8c5 	bl	800a538 <prvInsertTimerInActiveList>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d012      	beq.n	800a3da <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	2100      	movs	r1, #0
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff ff96 	bl	800a2f0 <xTimerGenericCommand>
 800a3c4:	60b8      	str	r0, [r7, #8]
 800a3c6:	e008      	b.n	800a3da <prvProcessExpiredTimer+0x6a>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ce:	f023 0301 	bic.w	r3, r3, #1
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	4798      	blx	r3
}
 800a3e2:	bf00      	nop
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	2001cb64 	.word	0x2001cb64

0800a3f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3f8:	f107 0308 	add.w	r3, r7, #8
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f000 f857 	bl	800a4b0 <prvGetNextExpireTime>
 800a402:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	4619      	mov	r1, r3
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f000 f803 	bl	800a414 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a40e:	f000 f8d5 	bl	800a5bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a412:	e7f1      	b.n	800a3f8 <prvTimerTask+0x8>

0800a414 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a41e:	f7ff f9f3 	bl	8009808 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a422:	f107 0308 	add.w	r3, r7, #8
 800a426:	4618      	mov	r0, r3
 800a428:	f000 f866 	bl	800a4f8 <prvSampleTimeNow>
 800a42c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d130      	bne.n	800a496 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d10a      	bne.n	800a450 <prvProcessTimerOrBlockTask+0x3c>
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d806      	bhi.n	800a450 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a442:	f7ff f9ef 	bl	8009824 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a446:	68f9      	ldr	r1, [r7, #12]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff ff91 	bl	800a370 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a44e:	e024      	b.n	800a49a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d008      	beq.n	800a468 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a456:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <prvProcessTimerOrBlockTask+0x90>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <prvProcessTimerOrBlockTask+0x50>
 800a460:	2301      	movs	r3, #1
 800a462:	e000      	b.n	800a466 <prvProcessTimerOrBlockTask+0x52>
 800a464:	2300      	movs	r3, #0
 800a466:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a468:	4b0f      	ldr	r3, [pc, #60]	; (800a4a8 <prvProcessTimerOrBlockTask+0x94>)
 800a46a:	6818      	ldr	r0, [r3, #0]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	4619      	mov	r1, r3
 800a476:	f7fe ff8f 	bl	8009398 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a47a:	f7ff f9d3 	bl	8009824 <xTaskResumeAll>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a484:	4b09      	ldr	r3, [pc, #36]	; (800a4ac <prvProcessTimerOrBlockTask+0x98>)
 800a486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a48a:	601a      	str	r2, [r3, #0]
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	f3bf 8f6f 	isb	sy
}
 800a494:	e001      	b.n	800a49a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a496:	f7ff f9c5 	bl	8009824 <xTaskResumeAll>
}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	2001cb68 	.word	0x2001cb68
 800a4a8:	2001cb6c 	.word	0x2001cb6c
 800a4ac:	e000ed04 	.word	0xe000ed04

0800a4b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4b8:	4b0e      	ldr	r3, [pc, #56]	; (800a4f4 <prvGetNextExpireTime+0x44>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <prvGetNextExpireTime+0x16>
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	e000      	b.n	800a4c8 <prvGetNextExpireTime+0x18>
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d105      	bne.n	800a4e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4d4:	4b07      	ldr	r3, [pc, #28]	; (800a4f4 <prvGetNextExpireTime+0x44>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	60fb      	str	r3, [r7, #12]
 800a4de:	e001      	b.n	800a4e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	2001cb64 	.word	0x2001cb64

0800a4f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a500:	f7ff fa1e 	bl	8009940 <xTaskGetTickCount>
 800a504:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a506:	4b0b      	ldr	r3, [pc, #44]	; (800a534 <prvSampleTimeNow+0x3c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d205      	bcs.n	800a51c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a510:	f000 f90c 	bl	800a72c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	601a      	str	r2, [r3, #0]
 800a51a:	e002      	b.n	800a522 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a522:	4a04      	ldr	r2, [pc, #16]	; (800a534 <prvSampleTimeNow+0x3c>)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a528:	68fb      	ldr	r3, [r7, #12]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	2001cb74 	.word	0x2001cb74

0800a538 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a546:	2300      	movs	r3, #0
 800a548:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d812      	bhi.n	800a584 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	1ad2      	subs	r2, r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d302      	bcc.n	800a572 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a56c:	2301      	movs	r3, #1
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	e01b      	b.n	800a5aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a572:	4b10      	ldr	r3, [pc, #64]	; (800a5b4 <prvInsertTimerInActiveList+0x7c>)
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3304      	adds	r3, #4
 800a57a:	4619      	mov	r1, r3
 800a57c:	4610      	mov	r0, r2
 800a57e:	f7fe f856 	bl	800862e <vListInsert>
 800a582:	e012      	b.n	800a5aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d206      	bcs.n	800a59a <prvInsertTimerInActiveList+0x62>
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	429a      	cmp	r2, r3
 800a592:	d302      	bcc.n	800a59a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a594:	2301      	movs	r3, #1
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	e007      	b.n	800a5aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a59a:	4b07      	ldr	r3, [pc, #28]	; (800a5b8 <prvInsertTimerInActiveList+0x80>)
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	4610      	mov	r0, r2
 800a5a6:	f7fe f842 	bl	800862e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5aa:	697b      	ldr	r3, [r7, #20]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3718      	adds	r7, #24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	2001cb68 	.word	0x2001cb68
 800a5b8:	2001cb64 	.word	0x2001cb64

0800a5bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08c      	sub	sp, #48	; 0x30
 800a5c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5c2:	e0a0      	b.n	800a706 <prvProcessReceivedCommands+0x14a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	da0b      	bge.n	800a5e2 <prvProcessReceivedCommands+0x26>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5ca:	f107 0308 	add.w	r3, r7, #8
 800a5ce:	3304      	adds	r3, #4
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d8:	6850      	ldr	r0, [r2, #4]
 800a5da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5dc:	6892      	ldr	r2, [r2, #8]
 800a5de:	4611      	mov	r1, r2
 800a5e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f2c0 808d 	blt.w	800a704 <prvProcessReceivedCommands+0x148>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d004      	beq.n	800a600 <prvProcessReceivedCommands+0x44>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe f850 	bl	80086a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a600:	1d3b      	adds	r3, r7, #4
 800a602:	4618      	mov	r0, r3
 800a604:	f7ff ff78 	bl	800a4f8 <prvSampleTimeNow>
 800a608:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	2b09      	cmp	r3, #9
 800a60e:	d87a      	bhi.n	800a706 <prvProcessReceivedCommands+0x14a>
 800a610:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <prvProcessReceivedCommands+0x5c>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a641 	.word	0x0800a641
 800a61c:	0800a641 	.word	0x0800a641
 800a620:	0800a641 	.word	0x0800a641
 800a624:	0800a69b 	.word	0x0800a69b
 800a628:	0800a6af 	.word	0x0800a6af
 800a62c:	0800a6db 	.word	0x0800a6db
 800a630:	0800a641 	.word	0x0800a641
 800a634:	0800a641 	.word	0x0800a641
 800a638:	0800a69b 	.word	0x0800a69b
 800a63c:	0800a6af 	.word	0x0800a6af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a646:	f043 0301 	orr.w	r3, r3, #1
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	18d1      	adds	r1, r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	6a38      	ldr	r0, [r7, #32]
 800a660:	f7ff ff6a 	bl	800a538 <prvInsertTimerInActiveList>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d04d      	beq.n	800a706 <prvProcessReceivedCommands+0x14a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	6a38      	ldr	r0, [r7, #32]
 800a670:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d042      	beq.n	800a706 <prvProcessReceivedCommands+0x14a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	441a      	add	r2, r3
 800a688:	2300      	movs	r3, #0
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	2300      	movs	r3, #0
 800a68e:	2100      	movs	r1, #0
 800a690:	6a38      	ldr	r0, [r7, #32]
 800a692:	f7ff fe2d 	bl	800a2f0 <xTimerGenericCommand>
 800a696:	61b8      	str	r0, [r7, #24]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
 800a698:	e035      	b.n	800a706 <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a69a:	6a3b      	ldr	r3, [r7, #32]
 800a69c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6a0:	f023 0301 	bic.w	r3, r3, #1
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a6ac:	e02b      	b.n	800a706 <prvProcessReceivedCommands+0x14a>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6b4:	f043 0301 	orr.w	r3, r3, #1
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	619a      	str	r2, [r3, #24]
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	699a      	ldr	r2, [r3, #24]
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	18d1      	adds	r1, r2, r3
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	69fa      	ldr	r2, [r7, #28]
 800a6d2:	6a38      	ldr	r0, [r7, #32]
 800a6d4:	f7ff ff30 	bl	800a538 <prvInsertTimerInActiveList>
					break;
 800a6d8:	e015      	b.n	800a706 <prvProcessReceivedCommands+0x14a>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e0:	f003 0302 	and.w	r3, r3, #2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d103      	bne.n	800a6f0 <prvProcessReceivedCommands+0x134>
						{
							vPortFree( pxTimer );
 800a6e8:	6a38      	ldr	r0, [r7, #32]
 800a6ea:	f000 fb01 	bl	800acf0 <vPortFree>
 800a6ee:	e00a      	b.n	800a706 <prvProcessReceivedCommands+0x14a>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6f0:	6a3b      	ldr	r3, [r7, #32]
 800a6f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6f6:	f023 0301 	bic.w	r3, r3, #1
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a702:	e000      	b.n	800a706 <prvProcessReceivedCommands+0x14a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a704:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a706:	4b08      	ldr	r3, [pc, #32]	; (800a728 <prvProcessReceivedCommands+0x16c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f107 0108 	add.w	r1, r7, #8
 800a70e:	2200      	movs	r2, #0
 800a710:	4618      	mov	r0, r3
 800a712:	f7fe faeb 	bl	8008cec <xQueueReceive>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	f47f af53 	bne.w	800a5c4 <prvProcessReceivedCommands+0x8>
	}
}
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	3728      	adds	r7, #40	; 0x28
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	2001cb6c 	.word	0x2001cb6c

0800a72c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b088      	sub	sp, #32
 800a730:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a732:	e03a      	b.n	800a7aa <prvSwitchTimerLists+0x7e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a734:	4b26      	ldr	r3, [pc, #152]	; (800a7d0 <prvSwitchTimerLists+0xa4>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a73e:	4b24      	ldr	r3, [pc, #144]	; (800a7d0 <prvSwitchTimerLists+0xa4>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	3304      	adds	r3, #4
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7fd ffa7 	bl	80086a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a760:	f003 0304 	and.w	r3, r3, #4
 800a764:	2b00      	cmp	r3, #0
 800a766:	d020      	beq.n	800a7aa <prvSwitchTimerLists+0x7e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	693a      	ldr	r2, [r7, #16]
 800a76e:	4413      	add	r3, r2
 800a770:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	429a      	cmp	r2, r3
 800a778:	d90e      	bls.n	800a798 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a786:	4b12      	ldr	r3, [pc, #72]	; (800a7d0 <prvSwitchTimerLists+0xa4>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3304      	adds	r3, #4
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7fd ff4c 	bl	800862e <vListInsert>
 800a796:	e008      	b.n	800a7aa <prvSwitchTimerLists+0x7e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a798:	2300      	movs	r3, #0
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	2300      	movs	r3, #0
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f7ff fda4 	bl	800a2f0 <xTimerGenericCommand>
 800a7a8:	6078      	str	r0, [r7, #4]
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7aa:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <prvSwitchTimerLists+0xa4>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1bf      	bne.n	800a734 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7b4:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <prvSwitchTimerLists+0xa4>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7ba:	4b06      	ldr	r3, [pc, #24]	; (800a7d4 <prvSwitchTimerLists+0xa8>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a04      	ldr	r2, [pc, #16]	; (800a7d0 <prvSwitchTimerLists+0xa4>)
 800a7c0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7c2:	4a04      	ldr	r2, [pc, #16]	; (800a7d4 <prvSwitchTimerLists+0xa8>)
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	6013      	str	r3, [r2, #0]
}
 800a7c8:	bf00      	nop
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	2001cb64 	.word	0x2001cb64
 800a7d4:	2001cb68 	.word	0x2001cb68

0800a7d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7de:	f000 f921 	bl	800aa24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7e2:	4b15      	ldr	r3, [pc, #84]	; (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d120      	bne.n	800a82c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7ea:	4814      	ldr	r0, [pc, #80]	; (800a83c <prvCheckForValidListAndQueue+0x64>)
 800a7ec:	f7fd fece 	bl	800858c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7f0:	4813      	ldr	r0, [pc, #76]	; (800a840 <prvCheckForValidListAndQueue+0x68>)
 800a7f2:	f7fd fecb 	bl	800858c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a7f6:	4b13      	ldr	r3, [pc, #76]	; (800a844 <prvCheckForValidListAndQueue+0x6c>)
 800a7f8:	4a10      	ldr	r2, [pc, #64]	; (800a83c <prvCheckForValidListAndQueue+0x64>)
 800a7fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a7fc:	4b12      	ldr	r3, [pc, #72]	; (800a848 <prvCheckForValidListAndQueue+0x70>)
 800a7fe:	4a10      	ldr	r2, [pc, #64]	; (800a840 <prvCheckForValidListAndQueue+0x68>)
 800a800:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a802:	2300      	movs	r3, #0
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	4b11      	ldr	r3, [pc, #68]	; (800a84c <prvCheckForValidListAndQueue+0x74>)
 800a808:	4a11      	ldr	r2, [pc, #68]	; (800a850 <prvCheckForValidListAndQueue+0x78>)
 800a80a:	2110      	movs	r1, #16
 800a80c:	200a      	movs	r0, #10
 800a80e:	f7fd ffcb 	bl	80087a8 <xQueueGenericCreateStatic>
 800a812:	4603      	mov	r3, r0
 800a814:	4a08      	ldr	r2, [pc, #32]	; (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a816:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a818:	4b07      	ldr	r3, [pc, #28]	; (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d005      	beq.n	800a82c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a820:	4b05      	ldr	r3, [pc, #20]	; (800a838 <prvCheckForValidListAndQueue+0x60>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	490b      	ldr	r1, [pc, #44]	; (800a854 <prvCheckForValidListAndQueue+0x7c>)
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe fd62 	bl	80092f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a82c:	f000 f916 	bl	800aa5c <vPortExitCritical>
}
 800a830:	bf00      	nop
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	2001cb6c 	.word	0x2001cb6c
 800a83c:	2001cb3c 	.word	0x2001cb3c
 800a840:	2001cb50 	.word	0x2001cb50
 800a844:	2001cb64 	.word	0x2001cb64
 800a848:	2001cb68 	.word	0x2001cb68
 800a84c:	2001cc18 	.word	0x2001cc18
 800a850:	2001cb78 	.word	0x2001cb78
 800a854:	08023278 	.word	0x08023278

0800a858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	3b04      	subs	r3, #4
 800a868:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3b04      	subs	r3, #4
 800a876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	f023 0201 	bic.w	r2, r3, #1
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3b04      	subs	r3, #4
 800a886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a888:	4a0c      	ldr	r2, [pc, #48]	; (800a8bc <pxPortInitialiseStack+0x64>)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3b14      	subs	r3, #20
 800a892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3b04      	subs	r3, #4
 800a89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f06f 0202 	mvn.w	r2, #2
 800a8a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	3b20      	subs	r3, #32
 800a8ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	0800a8c1 	.word	0x0800a8c1

0800a8c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ce:	b672      	cpsid	i
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	b662      	cpsie	i
 800a8de:	607b      	str	r3, [r7, #4]
}
 800a8e0:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8e2:	bf00      	nop
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d0fc      	beq.n	800a8e4 <prvTaskExitError+0x24>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8ea:	bf00      	nop
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
	...

0800a900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <pxCurrentTCBConst2>)
 800a902:	6819      	ldr	r1, [r3, #0]
 800a904:	6808      	ldr	r0, [r1, #0]
 800a906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90a:	f380 8809 	msr	PSP, r0
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f04f 0000 	mov.w	r0, #0
 800a916:	f380 8811 	msr	BASEPRI, r0
 800a91a:	4770      	bx	lr
 800a91c:	f3af 8000 	nop.w

0800a920 <pxCurrentTCBConst2>:
 800a920:	2001c63c 	.word	0x2001c63c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop

0800a928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a928:	4808      	ldr	r0, [pc, #32]	; (800a94c <prvPortStartFirstTask+0x24>)
 800a92a:	6800      	ldr	r0, [r0, #0]
 800a92c:	6800      	ldr	r0, [r0, #0]
 800a92e:	f380 8808 	msr	MSP, r0
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f380 8814 	msr	CONTROL, r0
 800a93a:	b662      	cpsie	i
 800a93c:	b661      	cpsie	f
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	df00      	svc	0
 800a948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a94a:	bf00      	nop
 800a94c:	e000ed08 	.word	0xe000ed08

0800a950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a956:	4b2d      	ldr	r3, [pc, #180]	; (800aa0c <xPortStartScheduler+0xbc>)
 800a958:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	22ff      	movs	r2, #255	; 0xff
 800a966:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	4b25      	ldr	r3, [pc, #148]	; (800aa10 <xPortStartScheduler+0xc0>)
 800a97c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a97e:	4b25      	ldr	r3, [pc, #148]	; (800aa14 <xPortStartScheduler+0xc4>)
 800a980:	2207      	movs	r2, #7
 800a982:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a984:	e009      	b.n	800a99a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a986:	4b23      	ldr	r3, [pc, #140]	; (800aa14 <xPortStartScheduler+0xc4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	4a21      	ldr	r2, [pc, #132]	; (800aa14 <xPortStartScheduler+0xc4>)
 800a98e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a990:	79fb      	ldrb	r3, [r7, #7]
 800a992:	b2db      	uxtb	r3, r3
 800a994:	005b      	lsls	r3, r3, #1
 800a996:	b2db      	uxtb	r3, r3
 800a998:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	b2db      	uxtb	r3, r3
 800a99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a2:	2b80      	cmp	r3, #128	; 0x80
 800a9a4:	d0ef      	beq.n	800a986 <xPortStartScheduler+0x36>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a9a6:	4b1b      	ldr	r3, [pc, #108]	; (800aa14 <xPortStartScheduler+0xc4>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	021b      	lsls	r3, r3, #8
 800a9ac:	4a19      	ldr	r2, [pc, #100]	; (800aa14 <xPortStartScheduler+0xc4>)
 800a9ae:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a9b0:	4b18      	ldr	r3, [pc, #96]	; (800aa14 <xPortStartScheduler+0xc4>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a9b8:	4a16      	ldr	r2, [pc, #88]	; (800aa14 <xPortStartScheduler+0xc4>)
 800a9ba:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a9c4:	4b14      	ldr	r3, [pc, #80]	; (800aa18 <xPortStartScheduler+0xc8>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a13      	ldr	r2, [pc, #76]	; (800aa18 <xPortStartScheduler+0xc8>)
 800a9ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a9ce:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a9d0:	4b11      	ldr	r3, [pc, #68]	; (800aa18 <xPortStartScheduler+0xc8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a10      	ldr	r2, [pc, #64]	; (800aa18 <xPortStartScheduler+0xc8>)
 800a9d6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a9da:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9dc:	f000 f8b0 	bl	800ab40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9e0:	4b0e      	ldr	r3, [pc, #56]	; (800aa1c <xPortStartScheduler+0xcc>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a9e6:	f000 f8cf 	bl	800ab88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a9ea:	4b0d      	ldr	r3, [pc, #52]	; (800aa20 <xPortStartScheduler+0xd0>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a0c      	ldr	r2, [pc, #48]	; (800aa20 <xPortStartScheduler+0xd0>)
 800a9f0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a9f4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a9f6:	f7ff ff97 	bl	800a928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9fa:	f7ff f86b 	bl	8009ad4 <vTaskSwitchContext>
	prvTaskExitError();
 800a9fe:	f7ff ff5f 	bl	800a8c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	e000e400 	.word	0xe000e400
 800aa10:	2001cc68 	.word	0x2001cc68
 800aa14:	2001cc6c 	.word	0x2001cc6c
 800aa18:	e000ed20 	.word	0xe000ed20
 800aa1c:	20000010 	.word	0x20000010
 800aa20:	e000ef34 	.word	0xe000ef34

0800aa24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	b672      	cpsid	i
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	b662      	cpsie	i
 800aa3e:	607b      	str	r3, [r7, #4]
}
 800aa40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa42:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <vPortEnterCritical+0x34>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	3301      	adds	r3, #1
 800aa48:	4a03      	ldr	r2, [pc, #12]	; (800aa58 <vPortEnterCritical+0x34>)
 800aa4a:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	20000010 	.word	0x20000010

0800aa5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800aa62:	4b0a      	ldr	r3, [pc, #40]	; (800aa8c <vPortExitCritical+0x30>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	4a08      	ldr	r2, [pc, #32]	; (800aa8c <vPortExitCritical+0x30>)
 800aa6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa6c:	4b07      	ldr	r3, [pc, #28]	; (800aa8c <vPortExitCritical+0x30>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d105      	bne.n	800aa80 <vPortExitCritical+0x24>
 800aa74:	2300      	movs	r3, #0
 800aa76:	607b      	str	r3, [r7, #4]
	__asm volatile
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f383 8811 	msr	BASEPRI, r3
}
 800aa7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	20000010 	.word	0x20000010

0800aa90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa90:	f3ef 8009 	mrs	r0, PSP
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	4b15      	ldr	r3, [pc, #84]	; (800aaf0 <pxCurrentTCBConst>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	f01e 0f10 	tst.w	lr, #16
 800aaa0:	bf08      	it	eq
 800aaa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aaa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaaa:	6010      	str	r0, [r2, #0]
 800aaac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aab4:	b672      	cpsid	i
 800aab6:	f380 8811 	msr	BASEPRI, r0
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	b662      	cpsie	i
 800aac4:	f7ff f806 	bl	8009ad4 <vTaskSwitchContext>
 800aac8:	f04f 0000 	mov.w	r0, #0
 800aacc:	f380 8811 	msr	BASEPRI, r0
 800aad0:	bc09      	pop	{r0, r3}
 800aad2:	6819      	ldr	r1, [r3, #0]
 800aad4:	6808      	ldr	r0, [r1, #0]
 800aad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aada:	f01e 0f10 	tst.w	lr, #16
 800aade:	bf08      	it	eq
 800aae0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aae4:	f380 8809 	msr	PSP, r0
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop

0800aaf0 <pxCurrentTCBConst>:
 800aaf0:	2001c63c 	.word	0x2001c63c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop

0800aaf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	b672      	cpsid	i
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	b662      	cpsie	i
 800ab12:	607b      	str	r3, [r7, #4]
}
 800ab14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab16:	f7fe ff35 	bl	8009984 <xTaskIncrementTick>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab20:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <SysTick_Handler+0x44>)
 800ab22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab26:	601a      	str	r2, [r3, #0]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	f383 8811 	msr	BASEPRI, r3
}
 800ab32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	e000ed04 	.word	0xe000ed04

0800ab40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab40:	b480      	push	{r7}
 800ab42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab44:	4b0b      	ldr	r3, [pc, #44]	; (800ab74 <vPortSetupTimerInterrupt+0x34>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab4a:	4b0b      	ldr	r3, [pc, #44]	; (800ab78 <vPortSetupTimerInterrupt+0x38>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <vPortSetupTimerInterrupt+0x3c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a0a      	ldr	r2, [pc, #40]	; (800ab80 <vPortSetupTimerInterrupt+0x40>)
 800ab56:	fba2 2303 	umull	r2, r3, r2, r3
 800ab5a:	099b      	lsrs	r3, r3, #6
 800ab5c:	4a09      	ldr	r2, [pc, #36]	; (800ab84 <vPortSetupTimerInterrupt+0x44>)
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab62:	4b04      	ldr	r3, [pc, #16]	; (800ab74 <vPortSetupTimerInterrupt+0x34>)
 800ab64:	2207      	movs	r2, #7
 800ab66:	601a      	str	r2, [r3, #0]
}
 800ab68:	bf00      	nop
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	e000e010 	.word	0xe000e010
 800ab78:	e000e018 	.word	0xe000e018
 800ab7c:	20000004 	.word	0x20000004
 800ab80:	10624dd3 	.word	0x10624dd3
 800ab84:	e000e014 	.word	0xe000e014

0800ab88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab98 <vPortEnableVFP+0x10>
 800ab8c:	6801      	ldr	r1, [r0, #0]
 800ab8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ab92:	6001      	str	r1, [r0, #0]
 800ab94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab96:	bf00      	nop
 800ab98:	e000ed88 	.word	0xe000ed88

0800ab9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aba2:	f3ef 8305 	mrs	r3, IPSR
 800aba6:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b0f      	cmp	r3, #15
 800abac:	d904      	bls.n	800abb8 <vPortValidateInterruptPriority+0x1c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abae:	4a05      	ldr	r2, [pc, #20]	; (800abc4 <vPortValidateInterruptPriority+0x28>)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4413      	add	r3, r2
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	70fb      	strb	r3, [r7, #3]
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
	}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	e000e3f0 	.word	0xe000e3f0

0800abc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800abd4:	f7fe fe18 	bl	8009808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800abd8:	4b40      	ldr	r3, [pc, #256]	; (800acdc <pvPortMalloc+0x114>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d101      	bne.n	800abe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800abe0:	f000 f8c0 	bl	800ad64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800abe4:	4b3e      	ldr	r3, [pc, #248]	; (800ace0 <pvPortMalloc+0x118>)
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4013      	ands	r3, r2
 800abec:	2b00      	cmp	r3, #0
 800abee:	d16d      	bne.n	800accc <pvPortMalloc+0x104>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00d      	beq.n	800ac12 <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 800abf6:	2208      	movs	r2, #8
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4413      	add	r3, r2
 800abfc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f003 0307 	and.w	r3, r3, #7
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d004      	beq.n	800ac12 <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f023 0307 	bic.w	r3, r3, #7
 800ac0e:	3308      	adds	r3, #8
 800ac10:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d059      	beq.n	800accc <pvPortMalloc+0x104>
 800ac18:	4b32      	ldr	r3, [pc, #200]	; (800ace4 <pvPortMalloc+0x11c>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d854      	bhi.n	800accc <pvPortMalloc+0x104>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac22:	4b31      	ldr	r3, [pc, #196]	; (800ace8 <pvPortMalloc+0x120>)
 800ac24:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800ac26:	4b30      	ldr	r3, [pc, #192]	; (800ace8 <pvPortMalloc+0x120>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac2c:	e004      	b.n	800ac38 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d903      	bls.n	800ac4a <pvPortMalloc+0x82>
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1f1      	bne.n	800ac2e <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ac4a:	4b24      	ldr	r3, [pc, #144]	; (800acdc <pvPortMalloc+0x114>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d03b      	beq.n	800accc <pvPortMalloc+0x104>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2208      	movs	r2, #8
 800ac5a:	4413      	add	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	1ad2      	subs	r2, r2, r3
 800ac6e:	2308      	movs	r3, #8
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d90f      	bls.n	800ac96 <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac76:	697a      	ldr	r2, [r7, #20]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4413      	add	r3, r2
 800ac7c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	685a      	ldr	r2, [r3, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	1ad2      	subs	r2, r2, r3
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac90:	68b8      	ldr	r0, [r7, #8]
 800ac92:	f000 f8cb 	bl	800ae2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac96:	4b13      	ldr	r3, [pc, #76]	; (800ace4 <pvPortMalloc+0x11c>)
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	4a10      	ldr	r2, [pc, #64]	; (800ace4 <pvPortMalloc+0x11c>)
 800aca2:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aca4:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <pvPortMalloc+0x11c>)
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	4b10      	ldr	r3, [pc, #64]	; (800acec <pvPortMalloc+0x124>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	429a      	cmp	r2, r3
 800acae:	d203      	bcs.n	800acb8 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acb0:	4b0c      	ldr	r3, [pc, #48]	; (800ace4 <pvPortMalloc+0x11c>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a0d      	ldr	r2, [pc, #52]	; (800acec <pvPortMalloc+0x124>)
 800acb6:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	4b08      	ldr	r3, [pc, #32]	; (800ace0 <pvPortMalloc+0x118>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	431a      	orrs	r2, r3
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800accc:	f7fe fdaa 	bl	8009824 <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 800acd0:	68fb      	ldr	r3, [r7, #12]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3718      	adds	r7, #24
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20035318 	.word	0x20035318
 800ace0:	20035324 	.word	0x20035324
 800ace4:	2003531c 	.word	0x2003531c
 800ace8:	20035310 	.word	0x20035310
 800acec:	20035320 	.word	0x20035320

0800acf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d027      	beq.n	800ad52 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ad02:	2308      	movs	r3, #8
 800ad04:	425b      	negs	r3, r3
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	4413      	add	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	685a      	ldr	r2, [r3, #4]
 800ad14:	4b11      	ldr	r3, [pc, #68]	; (800ad5c <vPortFree+0x6c>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4013      	ands	r3, r2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d019      	beq.n	800ad52 <vPortFree+0x62>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d115      	bne.n	800ad52 <vPortFree+0x62>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	4b0c      	ldr	r3, [pc, #48]	; (800ad5c <vPortFree+0x6c>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	43db      	mvns	r3, r3
 800ad30:	401a      	ands	r2, r3
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad36:	f7fe fd67 	bl	8009808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	4b08      	ldr	r3, [pc, #32]	; (800ad60 <vPortFree+0x70>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4413      	add	r3, r2
 800ad44:	4a06      	ldr	r2, [pc, #24]	; (800ad60 <vPortFree+0x70>)
 800ad46:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad48:	68b8      	ldr	r0, [r7, #8]
 800ad4a:	f000 f86f 	bl	800ae2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ad4e:	f7fe fd69 	bl	8009824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad52:	bf00      	nop
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20035324 	.word	0x20035324
 800ad60:	2003531c 	.word	0x2003531c

0800ad64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad6a:	4b29      	ldr	r3, [pc, #164]	; (800ae10 <prvHeapInit+0xac>)
 800ad6c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad6e:	4b29      	ldr	r3, [pc, #164]	; (800ae14 <prvHeapInit+0xb0>)
 800ad70:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f003 0307 	and.w	r3, r3, #7
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00c      	beq.n	800ad96 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	3307      	adds	r3, #7
 800ad80:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f023 0307 	bic.w	r3, r3, #7
 800ad88:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	4a20      	ldr	r2, [pc, #128]	; (800ae14 <prvHeapInit+0xb0>)
 800ad92:	4413      	add	r3, r2
 800ad94:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad9a:	4a1f      	ldr	r2, [pc, #124]	; (800ae18 <prvHeapInit+0xb4>)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ada0:	4b1d      	ldr	r3, [pc, #116]	; (800ae18 <prvHeapInit+0xb4>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	4413      	add	r3, r2
 800adac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adae:	2208      	movs	r2, #8
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	1a9b      	subs	r3, r3, r2
 800adb4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f023 0307 	bic.w	r3, r3, #7
 800adbc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4a16      	ldr	r2, [pc, #88]	; (800ae1c <prvHeapInit+0xb8>)
 800adc2:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800adc4:	4b15      	ldr	r3, [pc, #84]	; (800ae1c <prvHeapInit+0xb8>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2200      	movs	r2, #0
 800adca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adcc:	4b13      	ldr	r3, [pc, #76]	; (800ae1c <prvHeapInit+0xb8>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2200      	movs	r2, #0
 800add2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	1ad2      	subs	r2, r2, r3
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ade2:	4b0e      	ldr	r3, [pc, #56]	; (800ae1c <prvHeapInit+0xb8>)
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	4a0c      	ldr	r2, [pc, #48]	; (800ae20 <prvHeapInit+0xbc>)
 800adf0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	4a0b      	ldr	r2, [pc, #44]	; (800ae24 <prvHeapInit+0xc0>)
 800adf8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800adfa:	4b0b      	ldr	r3, [pc, #44]	; (800ae28 <prvHeapInit+0xc4>)
 800adfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae00:	601a      	str	r2, [r3, #0]
}
 800ae02:	bf00      	nop
 800ae04:	3714      	adds	r7, #20
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	000186a0 	.word	0x000186a0
 800ae14:	2001cc70 	.word	0x2001cc70
 800ae18:	20035310 	.word	0x20035310
 800ae1c:	20035318 	.word	0x20035318
 800ae20:	20035320 	.word	0x20035320
 800ae24:	2003531c 	.word	0x2003531c
 800ae28:	20035324 	.word	0x20035324

0800ae2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae34:	4b28      	ldr	r3, [pc, #160]	; (800aed8 <prvInsertBlockIntoFreeList+0xac>)
 800ae36:	60fb      	str	r3, [r7, #12]
 800ae38:	e002      	b.n	800ae40 <prvInsertBlockIntoFreeList+0x14>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d8f7      	bhi.n	800ae3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	4413      	add	r3, r2
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d108      	bne.n	800ae6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	685a      	ldr	r2, [r3, #4]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	441a      	add	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	441a      	add	r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d118      	bne.n	800aeb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681a      	ldr	r2, [r3, #0]
 800ae86:	4b15      	ldr	r3, [pc, #84]	; (800aedc <prvInsertBlockIntoFreeList+0xb0>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d00d      	beq.n	800aeaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	685a      	ldr	r2, [r3, #4]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	441a      	add	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	601a      	str	r2, [r3, #0]
 800aea8:	e008      	b.n	800aebc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aeaa:	4b0c      	ldr	r3, [pc, #48]	; (800aedc <prvInsertBlockIntoFreeList+0xb0>)
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	e003      	b.n	800aebc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d002      	beq.n	800aeca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aeca:	bf00      	nop
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	20035310 	.word	0x20035310
 800aedc:	20035318 	.word	0x20035318

0800aee0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800aeea:	f007 ff75 	bl	8012dd8 <sys_timeouts_sleeptime>
 800aeee:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aef6:	d10b      	bne.n	800af10 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800aef8:	4813      	ldr	r0, [pc, #76]	; (800af48 <tcpip_timeouts_mbox_fetch+0x68>)
 800aefa:	f00b fd67 	bl	80169cc <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800aefe:	2200      	movs	r2, #0
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f00b fc60 	bl	80167c8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800af08:	480f      	ldr	r0, [pc, #60]	; (800af48 <tcpip_timeouts_mbox_fetch+0x68>)
 800af0a:	f00b fd50 	bl	80169ae <sys_mutex_lock>
    return;
 800af0e:	e018      	b.n	800af42 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d102      	bne.n	800af1c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800af16:	f007 ff25 	bl	8012d64 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800af1a:	e7e6      	b.n	800aeea <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800af1c:	480a      	ldr	r0, [pc, #40]	; (800af48 <tcpip_timeouts_mbox_fetch+0x68>)
 800af1e:	f00b fd55 	bl	80169cc <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	6839      	ldr	r1, [r7, #0]
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f00b fc4e 	bl	80167c8 <sys_arch_mbox_fetch>
 800af2c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800af2e:	4806      	ldr	r0, [pc, #24]	; (800af48 <tcpip_timeouts_mbox_fetch+0x68>)
 800af30:	f00b fd3d 	bl	80169ae <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af3a:	d102      	bne.n	800af42 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800af3c:	f007 ff12 	bl	8012d64 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800af40:	e7d3      	b.n	800aeea <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	20035334 	.word	0x20035334

0800af4c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800af54:	4810      	ldr	r0, [pc, #64]	; (800af98 <tcpip_thread+0x4c>)
 800af56:	f00b fd2a 	bl	80169ae <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800af5a:	4b10      	ldr	r3, [pc, #64]	; (800af9c <tcpip_thread+0x50>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d005      	beq.n	800af6e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800af62:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <tcpip_thread+0x50>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a0e      	ldr	r2, [pc, #56]	; (800afa0 <tcpip_thread+0x54>)
 800af68:	6812      	ldr	r2, [r2, #0]
 800af6a:	4610      	mov	r0, r2
 800af6c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800af6e:	f107 030c 	add.w	r3, r7, #12
 800af72:	4619      	mov	r1, r3
 800af74:	480b      	ldr	r0, [pc, #44]	; (800afa4 <tcpip_thread+0x58>)
 800af76:	f7ff ffb3 	bl	800aee0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d106      	bne.n	800af8e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800af80:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <tcpip_thread+0x5c>)
 800af82:	2291      	movs	r2, #145	; 0x91
 800af84:	4909      	ldr	r1, [pc, #36]	; (800afac <tcpip_thread+0x60>)
 800af86:	480a      	ldr	r0, [pc, #40]	; (800afb0 <tcpip_thread+0x64>)
 800af88:	f016 fea0 	bl	8021ccc <iprintf>
      continue;
 800af8c:	e003      	b.n	800af96 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	4618      	mov	r0, r3
 800af92:	f000 f80f 	bl	800afb4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800af96:	e7ea      	b.n	800af6e <tcpip_thread+0x22>
 800af98:	20035334 	.word	0x20035334
 800af9c:	20035328 	.word	0x20035328
 800afa0:	2003532c 	.word	0x2003532c
 800afa4:	20035330 	.word	0x20035330
 800afa8:	08023280 	.word	0x08023280
 800afac:	080232b0 	.word	0x080232b0
 800afb0:	080232d0 	.word	0x080232d0

0800afb4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d026      	beq.n	800b012 <tcpip_thread_handle_msg+0x5e>
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	dc2b      	bgt.n	800b020 <tcpip_thread_handle_msg+0x6c>
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <tcpip_thread_handle_msg+0x1e>
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d015      	beq.n	800affc <tcpip_thread_handle_msg+0x48>
 800afd0:	e026      	b.n	800b020 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	6850      	ldr	r0, [r2, #4]
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	6892      	ldr	r2, [r2, #8]
 800afde:	4611      	mov	r1, r2
 800afe0:	4798      	blx	r3
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d004      	beq.n	800aff2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	4618      	mov	r0, r3
 800afee:	f002 f82f 	bl	800d050 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aff2:	6879      	ldr	r1, [r7, #4]
 800aff4:	2009      	movs	r0, #9
 800aff6:	f001 f969 	bl	800c2cc <memp_free>
      break;
 800affa:	e018      	b.n	800b02e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	6892      	ldr	r2, [r2, #8]
 800b004:	4610      	mov	r0, r2
 800b006:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	2008      	movs	r0, #8
 800b00c:	f001 f95e 	bl	800c2cc <memp_free>
      break;
 800b010:	e00d      	b.n	800b02e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	6892      	ldr	r2, [r2, #8]
 800b01a:	4610      	mov	r0, r2
 800b01c:	4798      	blx	r3
      break;
 800b01e:	e006      	b.n	800b02e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b020:	4b05      	ldr	r3, [pc, #20]	; (800b038 <tcpip_thread_handle_msg+0x84>)
 800b022:	22cf      	movs	r2, #207	; 0xcf
 800b024:	4905      	ldr	r1, [pc, #20]	; (800b03c <tcpip_thread_handle_msg+0x88>)
 800b026:	4806      	ldr	r0, [pc, #24]	; (800b040 <tcpip_thread_handle_msg+0x8c>)
 800b028:	f016 fe50 	bl	8021ccc <iprintf>
      break;
 800b02c:	bf00      	nop
  }
}
 800b02e:	bf00      	nop
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	08023280 	.word	0x08023280
 800b03c:	080232b0 	.word	0x080232b0
 800b040:	080232d0 	.word	0x080232d0

0800b044 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	60b9      	str	r1, [r7, #8]
 800b04e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b050:	481a      	ldr	r0, [pc, #104]	; (800b0bc <tcpip_inpkt+0x78>)
 800b052:	f00b fbea 	bl	801682a <sys_mbox_valid>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d105      	bne.n	800b068 <tcpip_inpkt+0x24>
 800b05c:	4b18      	ldr	r3, [pc, #96]	; (800b0c0 <tcpip_inpkt+0x7c>)
 800b05e:	22fc      	movs	r2, #252	; 0xfc
 800b060:	4918      	ldr	r1, [pc, #96]	; (800b0c4 <tcpip_inpkt+0x80>)
 800b062:	4819      	ldr	r0, [pc, #100]	; (800b0c8 <tcpip_inpkt+0x84>)
 800b064:	f016 fe32 	bl	8021ccc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b068:	2009      	movs	r0, #9
 800b06a:	f001 f8dd 	bl	800c228 <memp_malloc>
 800b06e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d102      	bne.n	800b07c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b07a:	e01a      	b.n	800b0b2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	2200      	movs	r2, #0
 800b080:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b094:	6979      	ldr	r1, [r7, #20]
 800b096:	4809      	ldr	r0, [pc, #36]	; (800b0bc <tcpip_inpkt+0x78>)
 800b098:	f00b fb7c 	bl	8016794 <sys_mbox_trypost>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d006      	beq.n	800b0b0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b0a2:	6979      	ldr	r1, [r7, #20]
 800b0a4:	2009      	movs	r0, #9
 800b0a6:	f001 f911 	bl	800c2cc <memp_free>
    return ERR_MEM;
 800b0aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0ae:	e000      	b.n	800b0b2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b0b0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20035330 	.word	0x20035330
 800b0c0:	08023280 	.word	0x08023280
 800b0c4:	080232f8 	.word	0x080232f8
 800b0c8:	080232d0 	.word	0x080232d0

0800b0cc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b0dc:	f003 0318 	and.w	r3, r3, #24
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d006      	beq.n	800b0f2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b0e4:	4a08      	ldr	r2, [pc, #32]	; (800b108 <tcpip_input+0x3c>)
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7ff ffab 	bl	800b044 <tcpip_inpkt>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	e005      	b.n	800b0fe <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b0f2:	4a06      	ldr	r2, [pc, #24]	; (800b10c <tcpip_input+0x40>)
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff ffa4 	bl	800b044 <tcpip_inpkt>
 800b0fc:	4603      	mov	r3, r0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	080165b5 	.word	0x080165b5
 800b10c:	08015239 	.word	0x08015239

0800b110 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b11a:	4819      	ldr	r0, [pc, #100]	; (800b180 <tcpip_try_callback+0x70>)
 800b11c:	f00b fb85 	bl	801682a <sys_mbox_valid>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d106      	bne.n	800b134 <tcpip_try_callback+0x24>
 800b126:	4b17      	ldr	r3, [pc, #92]	; (800b184 <tcpip_try_callback+0x74>)
 800b128:	f240 125d 	movw	r2, #349	; 0x15d
 800b12c:	4916      	ldr	r1, [pc, #88]	; (800b188 <tcpip_try_callback+0x78>)
 800b12e:	4817      	ldr	r0, [pc, #92]	; (800b18c <tcpip_try_callback+0x7c>)
 800b130:	f016 fdcc 	bl	8021ccc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b134:	2008      	movs	r0, #8
 800b136:	f001 f877 	bl	800c228 <memp_malloc>
 800b13a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d102      	bne.n	800b148 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b146:	e017      	b.n	800b178 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2201      	movs	r2, #1
 800b14c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b15a:	68f9      	ldr	r1, [r7, #12]
 800b15c:	4808      	ldr	r0, [pc, #32]	; (800b180 <tcpip_try_callback+0x70>)
 800b15e:	f00b fb19 	bl	8016794 <sys_mbox_trypost>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d006      	beq.n	800b176 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b168:	68f9      	ldr	r1, [r7, #12]
 800b16a:	2008      	movs	r0, #8
 800b16c:	f001 f8ae 	bl	800c2cc <memp_free>
    return ERR_MEM;
 800b170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b174:	e000      	b.n	800b178 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3710      	adds	r7, #16
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	20035330 	.word	0x20035330
 800b184:	08023280 	.word	0x08023280
 800b188:	080232f8 	.word	0x080232f8
 800b18c:	080232d0 	.word	0x080232d0

0800b190 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af02      	add	r7, sp, #8
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b19a:	f000 fba9 	bl	800b8f0 <lwip_init>

  tcpip_init_done = initfunc;
 800b19e:	4a17      	ldr	r2, [pc, #92]	; (800b1fc <tcpip_init+0x6c>)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b1a4:	4a16      	ldr	r2, [pc, #88]	; (800b200 <tcpip_init+0x70>)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b1aa:	2106      	movs	r1, #6
 800b1ac:	4815      	ldr	r0, [pc, #84]	; (800b204 <tcpip_init+0x74>)
 800b1ae:	f00b fad7 	bl	8016760 <sys_mbox_new>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d006      	beq.n	800b1c6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b1b8:	4b13      	ldr	r3, [pc, #76]	; (800b208 <tcpip_init+0x78>)
 800b1ba:	f240 2261 	movw	r2, #609	; 0x261
 800b1be:	4913      	ldr	r1, [pc, #76]	; (800b20c <tcpip_init+0x7c>)
 800b1c0:	4813      	ldr	r0, [pc, #76]	; (800b210 <tcpip_init+0x80>)
 800b1c2:	f016 fd83 	bl	8021ccc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b1c6:	4813      	ldr	r0, [pc, #76]	; (800b214 <tcpip_init+0x84>)
 800b1c8:	f00b fbce 	bl	8016968 <sys_mutex_new>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d006      	beq.n	800b1e0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b1d2:	4b0d      	ldr	r3, [pc, #52]	; (800b208 <tcpip_init+0x78>)
 800b1d4:	f240 2265 	movw	r2, #613	; 0x265
 800b1d8:	490f      	ldr	r1, [pc, #60]	; (800b218 <tcpip_init+0x88>)
 800b1da:	480d      	ldr	r0, [pc, #52]	; (800b210 <tcpip_init+0x80>)
 800b1dc:	f016 fd76 	bl	8021ccc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b1e0:	2314      	movs	r3, #20
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	f242 7310 	movw	r3, #10000	; 0x2710
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	490c      	ldr	r1, [pc, #48]	; (800b21c <tcpip_init+0x8c>)
 800b1ec:	480c      	ldr	r0, [pc, #48]	; (800b220 <tcpip_init+0x90>)
 800b1ee:	f00b fbfa 	bl	80169e6 <sys_thread_new>
}
 800b1f2:	bf00      	nop
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20035328 	.word	0x20035328
 800b200:	2003532c 	.word	0x2003532c
 800b204:	20035330 	.word	0x20035330
 800b208:	08023280 	.word	0x08023280
 800b20c:	08023308 	.word	0x08023308
 800b210:	080232d0 	.word	0x080232d0
 800b214:	20035334 	.word	0x20035334
 800b218:	0802332c 	.word	0x0802332c
 800b21c:	0800af4d 	.word	0x0800af4d
 800b220:	08023350 	.word	0x08023350

0800b224 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4603      	mov	r3, r0
 800b22c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b22e:	88fb      	ldrh	r3, [r7, #6]
 800b230:	021b      	lsls	r3, r3, #8
 800b232:	b21a      	sxth	r2, r3
 800b234:	88fb      	ldrh	r3, [r7, #6]
 800b236:	0a1b      	lsrs	r3, r3, #8
 800b238:	b29b      	uxth	r3, r3
 800b23a:	b21b      	sxth	r3, r3
 800b23c:	4313      	orrs	r3, r2
 800b23e:	b21b      	sxth	r3, r3
 800b240:	b29b      	uxth	r3, r3
}
 800b242:	4618      	mov	r0, r3
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b24e:	b480      	push	{r7}
 800b250:	b083      	sub	sp, #12
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	061a      	lsls	r2, r3, #24
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	021b      	lsls	r3, r3, #8
 800b25e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b262:	431a      	orrs	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	0a1b      	lsrs	r3, r3, #8
 800b268:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b26c:	431a      	orrs	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	0e1b      	lsrs	r3, r3, #24
 800b272:	4313      	orrs	r3, r2
}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800b280:	b480      	push	{r7}
 800b282:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800b284:	bf00      	nop
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr

0800b28e <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800b292:	f000 faa9 	bl	800b7e8 <dns_check_entries>
}
 800b296:	bf00      	nop
 800b298:	bd80      	pop	{r7, pc}
	...

0800b29c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b090      	sub	sp, #64	; 0x40
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800b2a6:	79fa      	ldrb	r2, [r7, #7]
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	011b      	lsls	r3, r3, #4
 800b2ac:	4413      	add	r3, r2
 800b2ae:	011b      	lsls	r3, r3, #4
 800b2b0:	4a6c      	ldr	r2, [pc, #432]	; (800b464 <dns_send+0x1c8>)
 800b2b2:	4413      	add	r3, r2
 800b2b4:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b8:	7adb      	ldrb	r3, [r3, #11]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d906      	bls.n	800b2cc <dns_send+0x30>
 800b2be:	4b6a      	ldr	r3, [pc, #424]	; (800b468 <dns_send+0x1cc>)
 800b2c0:	f240 22fa 	movw	r2, #762	; 0x2fa
 800b2c4:	4969      	ldr	r1, [pc, #420]	; (800b46c <dns_send+0x1d0>)
 800b2c6:	486a      	ldr	r0, [pc, #424]	; (800b470 <dns_send+0x1d4>)
 800b2c8:	f016 fd00 	bl	8021ccc <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ce:	7adb      	ldrb	r3, [r3, #11]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	4b68      	ldr	r3, [pc, #416]	; (800b474 <dns_send+0x1d8>)
 800b2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d109      	bne.n	800b2f0 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 f8cb 	bl	800b47c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800b2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	e0b4      	b.n	800b45a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800b2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f2:	3310      	adds	r3, #16
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7f4 ffe5 	bl	80002c4 <strlen>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	3312      	adds	r3, #18
 800b300:	b29b      	uxth	r3, r3
 800b302:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b306:	4619      	mov	r1, r3
 800b308:	2036      	movs	r0, #54	; 0x36
 800b30a:	f001 fbbd 	bl	800ca88 <pbuf_alloc>
 800b30e:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800b310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b312:	2b00      	cmp	r3, #0
 800b314:	f000 8095 	beq.w	800b442 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800b318:	f107 0310 	add.w	r3, r7, #16
 800b31c:	220c      	movs	r2, #12
 800b31e:	2100      	movs	r1, #0
 800b320:	4618      	mov	r0, r3
 800b322:	f016 fbd5 	bl	8021ad0 <memset>
    hdr.id = lwip_htons(entry->txid);
 800b326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b328:	891b      	ldrh	r3, [r3, #8]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff ff7a 	bl	800b224 <lwip_htons>
 800b330:	4603      	mov	r3, r0
 800b332:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800b334:	2301      	movs	r3, #1
 800b336:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800b338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b33c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800b33e:	f107 0310 	add.w	r3, r7, #16
 800b342:	220c      	movs	r2, #12
 800b344:	4619      	mov	r1, r3
 800b346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b348:	f002 f936 	bl	800d5b8 <pbuf_take>
    hostname = entry->name;
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	3310      	adds	r3, #16
 800b350:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800b352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b354:	3b01      	subs	r3, #1
 800b356:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800b358:	230c      	movs	r3, #12
 800b35a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800b35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35e:	3301      	adds	r3, #1
 800b360:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800b362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b364:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800b366:	2300      	movs	r3, #0
 800b368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b36c:	e007      	b.n	800b37e <dns_send+0xe2>
        ++n;
 800b36e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b372:	3301      	adds	r3, #1
 800b374:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	3301      	adds	r3, #1
 800b37c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	2b2e      	cmp	r3, #46	; 0x2e
 800b384:	d003      	beq.n	800b38e <dns_send+0xf2>
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1ef      	bne.n	800b36e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800b38e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800b396:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b39c:	4413      	add	r3, r2
 800b39e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	dc53      	bgt.n	800b44e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800b3a6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b3aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3b0:	f002 fa30 	bl	800d814 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800b3b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3c0:	f002 f98c 	bl	800d6dc <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800b3c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3cc:	4413      	add	r3, r2
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1bf      	bne.n	800b35c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800b3dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3de:	2200      	movs	r2, #0
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b3e4:	f002 fa16 	bl	800d814 <pbuf_put_at>
    query_idx++;
 800b3e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800b3ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3f2:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800b3f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3f8:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800b3fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3fc:	f107 010c 	add.w	r1, r7, #12
 800b400:	2204      	movs	r2, #4
 800b402:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b404:	f002 f96a 	bl	800d6dc <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800b408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b40a:	7bdb      	ldrb	r3, [r3, #15]
 800b40c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800b410:	2335      	movs	r3, #53	; 0x35
 800b412:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	7adb      	ldrb	r3, [r3, #11]
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4a16      	ldr	r2, [pc, #88]	; (800b474 <dns_send+0x1d8>)
 800b41c:	4413      	add	r3, r2
 800b41e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800b420:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b424:	4a14      	ldr	r2, [pc, #80]	; (800b478 <dns_send+0x1dc>)
 800b426:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b42a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b42c:	69fa      	ldr	r2, [r7, #28]
 800b42e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b430:	f007 fecc 	bl	80131cc <udp_sendto>
 800b434:	4603      	mov	r3, r0
 800b436:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800b43a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b43c:	f001 fe08 	bl	800d050 <pbuf_free>
 800b440:	e002      	b.n	800b448 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800b442:	23ff      	movs	r3, #255	; 0xff
 800b444:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800b448:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b44c:	e005      	b.n	800b45a <dns_send+0x1be>
        goto overflow_return;
 800b44e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800b450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b452:	f001 fdfd 	bl	800d050 <pbuf_free>
  return ERR_VAL;
 800b456:	f06f 0305 	mvn.w	r3, #5
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3740      	adds	r7, #64	; 0x40
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20035348 	.word	0x20035348
 800b468:	08023360 	.word	0x08023360
 800b46c:	08023390 	.word	0x08023390
 800b470:	080233a8 	.word	0x080233a8
 800b474:	200357b8 	.word	0x200357b8
 800b478:	20035338 	.word	0x20035338

0800b47c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	4603      	mov	r3, r0
 800b484:	6039      	str	r1, [r7, #0]
 800b486:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b488:	2300      	movs	r3, #0
 800b48a:	73fb      	strb	r3, [r7, #15]
 800b48c:	e03d      	b.n	800b50a <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800b48e:	7bfa      	ldrb	r2, [r7, #15]
 800b490:	4957      	ldr	r1, [pc, #348]	; (800b5f0 <dns_call_found+0x174>)
 800b492:	4613      	mov	r3, r2
 800b494:	005b      	lsls	r3, r3, #1
 800b496:	4413      	add	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	440b      	add	r3, r1
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d030      	beq.n	800b504 <dns_call_found+0x88>
 800b4a2:	7bfa      	ldrb	r2, [r7, #15]
 800b4a4:	4952      	ldr	r1, [pc, #328]	; (800b5f0 <dns_call_found+0x174>)
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	005b      	lsls	r3, r3, #1
 800b4aa:	4413      	add	r3, r2
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	440b      	add	r3, r1
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	79fa      	ldrb	r2, [r7, #7]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d124      	bne.n	800b504 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800b4ba:	7bfa      	ldrb	r2, [r7, #15]
 800b4bc:	494c      	ldr	r1, [pc, #304]	; (800b5f0 <dns_call_found+0x174>)
 800b4be:	4613      	mov	r3, r2
 800b4c0:	005b      	lsls	r3, r3, #1
 800b4c2:	4413      	add	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	440b      	add	r3, r1
 800b4c8:	681c      	ldr	r4, [r3, #0]
 800b4ca:	79fa      	ldrb	r2, [r7, #7]
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	011b      	lsls	r3, r3, #4
 800b4d0:	4413      	add	r3, r2
 800b4d2:	011b      	lsls	r3, r3, #4
 800b4d4:	3310      	adds	r3, #16
 800b4d6:	4a47      	ldr	r2, [pc, #284]	; (800b5f4 <dns_call_found+0x178>)
 800b4d8:	1898      	adds	r0, r3, r2
 800b4da:	7bfa      	ldrb	r2, [r7, #15]
 800b4dc:	4944      	ldr	r1, [pc, #272]	; (800b5f0 <dns_call_found+0x174>)
 800b4de:	4613      	mov	r3, r2
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	4413      	add	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	440b      	add	r3, r1
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	6839      	ldr	r1, [r7, #0]
 800b4f0:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800b4f2:	7bfa      	ldrb	r2, [r7, #15]
 800b4f4:	493e      	ldr	r1, [pc, #248]	; (800b5f0 <dns_call_found+0x174>)
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	005b      	lsls	r3, r3, #1
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	440b      	add	r3, r1
 800b500:	2200      	movs	r2, #0
 800b502:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b504:	7bfb      	ldrb	r3, [r7, #15]
 800b506:	3301      	adds	r3, #1
 800b508:	73fb      	strb	r3, [r7, #15]
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	d9be      	bls.n	800b48e <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b510:	2300      	movs	r3, #0
 800b512:	73fb      	strb	r3, [r7, #15]
 800b514:	e031      	b.n	800b57a <dns_call_found+0xfe>
    if (i == idx) {
 800b516:	7bfa      	ldrb	r2, [r7, #15]
 800b518:	79fb      	ldrb	r3, [r7, #7]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d029      	beq.n	800b572 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800b51e:	7bfa      	ldrb	r2, [r7, #15]
 800b520:	4934      	ldr	r1, [pc, #208]	; (800b5f4 <dns_call_found+0x178>)
 800b522:	4613      	mov	r3, r2
 800b524:	011b      	lsls	r3, r3, #4
 800b526:	4413      	add	r3, r2
 800b528:	011b      	lsls	r3, r3, #4
 800b52a:	440b      	add	r3, r1
 800b52c:	330a      	adds	r3, #10
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	2b02      	cmp	r3, #2
 800b532:	d11f      	bne.n	800b574 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800b534:	7bfa      	ldrb	r2, [r7, #15]
 800b536:	492f      	ldr	r1, [pc, #188]	; (800b5f4 <dns_call_found+0x178>)
 800b538:	4613      	mov	r3, r2
 800b53a:	011b      	lsls	r3, r3, #4
 800b53c:	4413      	add	r3, r2
 800b53e:	011b      	lsls	r3, r3, #4
 800b540:	440b      	add	r3, r1
 800b542:	330f      	adds	r3, #15
 800b544:	7819      	ldrb	r1, [r3, #0]
 800b546:	79fa      	ldrb	r2, [r7, #7]
 800b548:	482a      	ldr	r0, [pc, #168]	; (800b5f4 <dns_call_found+0x178>)
 800b54a:	4613      	mov	r3, r2
 800b54c:	011b      	lsls	r3, r3, #4
 800b54e:	4413      	add	r3, r2
 800b550:	011b      	lsls	r3, r3, #4
 800b552:	4403      	add	r3, r0
 800b554:	330f      	adds	r3, #15
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	4299      	cmp	r1, r3
 800b55a:	d10b      	bne.n	800b574 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800b55c:	79fa      	ldrb	r2, [r7, #7]
 800b55e:	4925      	ldr	r1, [pc, #148]	; (800b5f4 <dns_call_found+0x178>)
 800b560:	4613      	mov	r3, r2
 800b562:	011b      	lsls	r3, r3, #4
 800b564:	4413      	add	r3, r2
 800b566:	011b      	lsls	r3, r3, #4
 800b568:	440b      	add	r3, r1
 800b56a:	330f      	adds	r3, #15
 800b56c:	2204      	movs	r2, #4
 800b56e:	701a      	strb	r2, [r3, #0]
        break;
 800b570:	e006      	b.n	800b580 <dns_call_found+0x104>
      continue; /* only check other requests */
 800b572:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b574:	7bfb      	ldrb	r3, [r7, #15]
 800b576:	3301      	adds	r3, #1
 800b578:	73fb      	strb	r3, [r7, #15]
 800b57a:	7bfb      	ldrb	r3, [r7, #15]
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d9ca      	bls.n	800b516 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800b580:	79fa      	ldrb	r2, [r7, #7]
 800b582:	491c      	ldr	r1, [pc, #112]	; (800b5f4 <dns_call_found+0x178>)
 800b584:	4613      	mov	r3, r2
 800b586:	011b      	lsls	r3, r3, #4
 800b588:	4413      	add	r3, r2
 800b58a:	011b      	lsls	r3, r3, #4
 800b58c:	440b      	add	r3, r1
 800b58e:	330f      	adds	r3, #15
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	2b03      	cmp	r3, #3
 800b594:	d827      	bhi.n	800b5e6 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800b596:	79fa      	ldrb	r2, [r7, #7]
 800b598:	4916      	ldr	r1, [pc, #88]	; (800b5f4 <dns_call_found+0x178>)
 800b59a:	4613      	mov	r3, r2
 800b59c:	011b      	lsls	r3, r3, #4
 800b59e:	4413      	add	r3, r2
 800b5a0:	011b      	lsls	r3, r3, #4
 800b5a2:	440b      	add	r3, r1
 800b5a4:	330f      	adds	r3, #15
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	4b13      	ldr	r3, [pc, #76]	; (800b5f8 <dns_call_found+0x17c>)
 800b5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f008 f8ad 	bl	8013710 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800b5b6:	79fa      	ldrb	r2, [r7, #7]
 800b5b8:	490e      	ldr	r1, [pc, #56]	; (800b5f4 <dns_call_found+0x178>)
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	011b      	lsls	r3, r3, #4
 800b5be:	4413      	add	r3, r2
 800b5c0:	011b      	lsls	r3, r3, #4
 800b5c2:	440b      	add	r3, r1
 800b5c4:	330f      	adds	r3, #15
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4b0b      	ldr	r3, [pc, #44]	; (800b5f8 <dns_call_found+0x17c>)
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800b5d2:	79fa      	ldrb	r2, [r7, #7]
 800b5d4:	4907      	ldr	r1, [pc, #28]	; (800b5f4 <dns_call_found+0x178>)
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	011b      	lsls	r3, r3, #4
 800b5da:	4413      	add	r3, r2
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	440b      	add	r3, r1
 800b5e0:	330f      	adds	r3, #15
 800b5e2:	2204      	movs	r2, #4
 800b5e4:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800b5e6:	bf00      	nop
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd90      	pop	{r4, r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20035788 	.word	0x20035788
 800b5f4:	20035348 	.word	0x20035348
 800b5f8:	20035338 	.word	0x20035338

0800b5fc <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800b602:	f016 fc1f 	bl	8021e44 <rand>
 800b606:	4603      	mov	r3, r0
 800b608:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b60a:	2300      	movs	r3, #0
 800b60c:	71fb      	strb	r3, [r7, #7]
 800b60e:	e01a      	b.n	800b646 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b610:	79fa      	ldrb	r2, [r7, #7]
 800b612:	4911      	ldr	r1, [pc, #68]	; (800b658 <dns_create_txid+0x5c>)
 800b614:	4613      	mov	r3, r2
 800b616:	011b      	lsls	r3, r3, #4
 800b618:	4413      	add	r3, r2
 800b61a:	011b      	lsls	r3, r3, #4
 800b61c:	440b      	add	r3, r1
 800b61e:	330a      	adds	r3, #10
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	2b02      	cmp	r3, #2
 800b624:	d10c      	bne.n	800b640 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800b626:	79fa      	ldrb	r2, [r7, #7]
 800b628:	490b      	ldr	r1, [pc, #44]	; (800b658 <dns_create_txid+0x5c>)
 800b62a:	4613      	mov	r3, r2
 800b62c:	011b      	lsls	r3, r3, #4
 800b62e:	4413      	add	r3, r2
 800b630:	011b      	lsls	r3, r3, #4
 800b632:	440b      	add	r3, r1
 800b634:	3308      	adds	r3, #8
 800b636:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b638:	88ba      	ldrh	r2, [r7, #4]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d100      	bne.n	800b640 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800b63e:	e7e0      	b.n	800b602 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	3301      	adds	r3, #1
 800b644:	71fb      	strb	r3, [r7, #7]
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d9e1      	bls.n	800b610 <dns_create_txid+0x14>
    }
  }

  return txid;
 800b64c:	88bb      	ldrh	r3, [r7, #4]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	20035348 	.word	0x20035348

0800b65c <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00d      	beq.n	800b68a <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	7adb      	ldrb	r3, [r3, #11]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d109      	bne.n	800b68a <dns_backupserver_available+0x2e>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	7adb      	ldrb	r3, [r3, #11]
 800b67a:	3301      	adds	r3, #1
 800b67c:	4a06      	ldr	r2, [pc, #24]	; (800b698 <dns_backupserver_available+0x3c>)
 800b67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <dns_backupserver_available+0x2e>
      ret = 1;
 800b686:	2301      	movs	r3, #1
 800b688:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr
 800b698:	200357b8 	.word	0x200357b8

0800b69c <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800b6a6:	79fa      	ldrb	r2, [r7, #7]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	011b      	lsls	r3, r3, #4
 800b6ac:	4413      	add	r3, r2
 800b6ae:	011b      	lsls	r3, r3, #4
 800b6b0:	4a48      	ldr	r2, [pc, #288]	; (800b7d4 <dns_check_entry+0x138>)
 800b6b2:	4413      	add	r3, r2
 800b6b4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800b6b6:	79fb      	ldrb	r3, [r7, #7]
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d906      	bls.n	800b6ca <dns_check_entry+0x2e>
 800b6bc:	4b46      	ldr	r3, [pc, #280]	; (800b7d8 <dns_check_entry+0x13c>)
 800b6be:	f240 421c 	movw	r2, #1052	; 0x41c
 800b6c2:	4946      	ldr	r1, [pc, #280]	; (800b7dc <dns_check_entry+0x140>)
 800b6c4:	4846      	ldr	r0, [pc, #280]	; (800b7e0 <dns_check_entry+0x144>)
 800b6c6:	f016 fb01 	bl	8021ccc <iprintf>

  switch (entry->state) {
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	7a9b      	ldrb	r3, [r3, #10]
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	d86f      	bhi.n	800b7b2 <dns_check_entry+0x116>
 800b6d2:	a201      	add	r2, pc, #4	; (adr r2, 800b6d8 <dns_check_entry+0x3c>)
 800b6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d8:	0800b7c3 	.word	0x0800b7c3
 800b6dc:	0800b6e9 	.word	0x0800b6e9
 800b6e0:	0800b71b 	.word	0x0800b71b
 800b6e4:	0800b791 	.word	0x0800b791
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800b6e8:	f7ff ff88 	bl	800b5fc <dns_create_txid>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2201      	movs	r2, #1
 800b704:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800b70c:	79fb      	ldrb	r3, [r7, #7]
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff fdc4 	bl	800b29c <dns_send>
 800b714:	4603      	mov	r3, r0
 800b716:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800b718:	e058      	b.n	800b7cc <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	7b1b      	ldrb	r3, [r3, #12]
 800b71e:	3b01      	subs	r3, #1
 800b720:	b2da      	uxtb	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	731a      	strb	r2, [r3, #12]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	7b1b      	ldrb	r3, [r3, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d14b      	bne.n	800b7c6 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	7b5b      	ldrb	r3, [r3, #13]
 800b732:	3301      	adds	r3, #1
 800b734:	b2da      	uxtb	r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	735a      	strb	r2, [r3, #13]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	7b5b      	ldrb	r3, [r3, #13]
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d11b      	bne.n	800b77a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7ff ff8a 	bl	800b65c <dns_backupserver_available>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00c      	beq.n	800b768 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	7adb      	ldrb	r3, [r3, #11]
 800b752:	3301      	adds	r3, #1
 800b754:	b2da      	uxtb	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2201      	movs	r2, #1
 800b75e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	735a      	strb	r2, [r3, #13]
 800b766:	e00c      	b.n	800b782 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800b768:	79fb      	ldrb	r3, [r7, #7]
 800b76a:	2100      	movs	r1, #0
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff fe85 	bl	800b47c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	729a      	strb	r2, [r3, #10]
            break;
 800b778:	e028      	b.n	800b7cc <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	7b5a      	ldrb	r2, [r3, #13]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fd89 	bl	800b29c <dns_send>
 800b78a:	4603      	mov	r3, r0
 800b78c:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800b78e:	e01a      	b.n	800b7c6 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d008      	beq.n	800b7aa <dns_check_entry+0x10e>
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	1e5a      	subs	r2, r3, #1
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	601a      	str	r2, [r3, #0]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10f      	bne.n	800b7ca <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	729a      	strb	r2, [r3, #10]
      }
      break;
 800b7b0:	e00b      	b.n	800b7ca <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800b7b2:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <dns_check_entry+0x13c>)
 800b7b4:	f240 425b 	movw	r2, #1115	; 0x45b
 800b7b8:	490a      	ldr	r1, [pc, #40]	; (800b7e4 <dns_check_entry+0x148>)
 800b7ba:	4809      	ldr	r0, [pc, #36]	; (800b7e0 <dns_check_entry+0x144>)
 800b7bc:	f016 fa86 	bl	8021ccc <iprintf>
      break;
 800b7c0:	e004      	b.n	800b7cc <dns_check_entry+0x130>
      break;
 800b7c2:	bf00      	nop
 800b7c4:	e002      	b.n	800b7cc <dns_check_entry+0x130>
      break;
 800b7c6:	bf00      	nop
 800b7c8:	e000      	b.n	800b7cc <dns_check_entry+0x130>
      break;
 800b7ca:	bf00      	nop
  }
}
 800b7cc:	bf00      	nop
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	20035348 	.word	0x20035348
 800b7d8:	08023360 	.word	0x08023360
 800b7dc:	080233d0 	.word	0x080233d0
 800b7e0:	080233a8 	.word	0x080233a8
 800b7e4:	080233ec 	.word	0x080233ec

0800b7e8 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	71fb      	strb	r3, [r7, #7]
 800b7f2:	e006      	b.n	800b802 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800b7f4:	79fb      	ldrb	r3, [r7, #7]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff ff50 	bl	800b69c <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800b7fc:	79fb      	ldrb	r3, [r7, #7]
 800b7fe:	3301      	adds	r3, #1
 800b800:	71fb      	strb	r3, [r7, #7]
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	2b03      	cmp	r3, #3
 800b806:	d9f5      	bls.n	800b7f4 <dns_check_entries+0xc>
  }
}
 800b808:	bf00      	nop
 800b80a:	bf00      	nop
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b812:	b480      	push	{r7}
 800b814:	b089      	sub	sp, #36	; 0x24
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b820:	2300      	movs	r3, #0
 800b822:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00d      	beq.n	800b852 <lwip_standard_chksum+0x40>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	dd0a      	ble.n	800b852 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b83c:	69fa      	ldr	r2, [r7, #28]
 800b83e:	1c53      	adds	r3, r2, #1
 800b840:	61fb      	str	r3, [r7, #28]
 800b842:	f107 030e 	add.w	r3, r7, #14
 800b846:	3301      	adds	r3, #1
 800b848:	7812      	ldrb	r2, [r2, #0]
 800b84a:	701a      	strb	r2, [r3, #0]
    len--;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	3b01      	subs	r3, #1
 800b850:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b856:	e00a      	b.n	800b86e <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	1c9a      	adds	r2, r3, #2
 800b85c:	61ba      	str	r2, [r7, #24]
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	461a      	mov	r2, r3
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	4413      	add	r3, r2
 800b866:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	3b02      	subs	r3, #2
 800b86c:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	2b01      	cmp	r3, #1
 800b872:	dcf1      	bgt.n	800b858 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	dd04      	ble.n	800b884 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b87a:	f107 030e 	add.w	r3, r7, #14
 800b87e:	69ba      	ldr	r2, [r7, #24]
 800b880:	7812      	ldrb	r2, [r2, #0]
 800b882:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b884:	89fb      	ldrh	r3, [r7, #14]
 800b886:	461a      	mov	r2, r3
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	4413      	add	r3, r2
 800b88c:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	0c1a      	lsrs	r2, r3, #16
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	b29b      	uxth	r3, r3
 800b896:	4413      	add	r3, r2
 800b898:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	0c1a      	lsrs	r2, r3, #16
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	4413      	add	r3, r2
 800b8a4:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d007      	beq.n	800b8bc <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	021b      	lsls	r3, r3, #8
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	0a1b      	lsrs	r3, r3, #8
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	b29b      	uxth	r3, r3
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3724      	adds	r7, #36	; 0x24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b8d8:	887b      	ldrh	r3, [r7, #2]
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7ff ff98 	bl	800b812 <lwip_standard_chksum>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	43db      	mvns	r3, r3
 800b8e6:	b29b      	uxth	r3, r3
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b8fa:	f00b f829 	bl	8016950 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b8fe:	f000 f8dd 	bl	800babc <mem_init>
  memp_init();
 800b902:	f000 fc45 	bl	800c190 <memp_init>
  pbuf_init();
  netif_init();
 800b906:	f000 fd0b 	bl	800c320 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b90a:	f007 fa9d 	bl	8012e48 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b90e:	f001 ffc5 	bl	800d89c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 800b912:	f009 f863 	bl	80149dc <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800b916:	f7ff fcb3 	bl	800b280 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b91a:	f007 f9db 	bl	8012cd4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b91e:	bf00      	nop
 800b920:	3708      	adds	r7, #8
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	4603      	mov	r3, r0
 800b930:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b932:	4b05      	ldr	r3, [pc, #20]	; (800b948 <ptr_to_mem+0x20>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	88fb      	ldrh	r3, [r7, #6]
 800b938:	4413      	add	r3, r2
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	2003cd1c 	.word	0x2003cd1c

0800b94c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b954:	4b05      	ldr	r3, [pc, #20]	; (800b96c <mem_to_ptr+0x20>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	b29b      	uxth	r3, r3
}
 800b95e:	4618      	mov	r0, r3
 800b960:	370c      	adds	r7, #12
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	2003cd1c 	.word	0x2003cd1c

0800b970 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b970:	b590      	push	{r4, r7, lr}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b978:	4b47      	ldr	r3, [pc, #284]	; (800ba98 <plug_holes+0x128>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d206      	bcs.n	800b990 <plug_holes+0x20>
 800b982:	4b46      	ldr	r3, [pc, #280]	; (800ba9c <plug_holes+0x12c>)
 800b984:	f240 12df 	movw	r2, #479	; 0x1df
 800b988:	4945      	ldr	r1, [pc, #276]	; (800baa0 <plug_holes+0x130>)
 800b98a:	4846      	ldr	r0, [pc, #280]	; (800baa4 <plug_holes+0x134>)
 800b98c:	f016 f99e 	bl	8021ccc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b990:	4b45      	ldr	r3, [pc, #276]	; (800baa8 <plug_holes+0x138>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	429a      	cmp	r2, r3
 800b998:	d306      	bcc.n	800b9a8 <plug_holes+0x38>
 800b99a:	4b40      	ldr	r3, [pc, #256]	; (800ba9c <plug_holes+0x12c>)
 800b99c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b9a0:	4942      	ldr	r1, [pc, #264]	; (800baac <plug_holes+0x13c>)
 800b9a2:	4840      	ldr	r0, [pc, #256]	; (800baa4 <plug_holes+0x134>)
 800b9a4:	f016 f992 	bl	8021ccc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	791b      	ldrb	r3, [r3, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d006      	beq.n	800b9be <plug_holes+0x4e>
 800b9b0:	4b3a      	ldr	r3, [pc, #232]	; (800ba9c <plug_holes+0x12c>)
 800b9b2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b9b6:	493e      	ldr	r1, [pc, #248]	; (800bab0 <plug_holes+0x140>)
 800b9b8:	483a      	ldr	r0, [pc, #232]	; (800baa4 <plug_holes+0x134>)
 800b9ba:	f016 f987 	bl	8021ccc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	f247 5230 	movw	r2, #30000	; 0x7530
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d906      	bls.n	800b9d8 <plug_holes+0x68>
 800b9ca:	4b34      	ldr	r3, [pc, #208]	; (800ba9c <plug_holes+0x12c>)
 800b9cc:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b9d0:	4938      	ldr	r1, [pc, #224]	; (800bab4 <plug_holes+0x144>)
 800b9d2:	4834      	ldr	r0, [pc, #208]	; (800baa4 <plug_holes+0x134>)
 800b9d4:	f016 f97a 	bl	8021ccc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	881b      	ldrh	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff ffa3 	bl	800b928 <ptr_to_mem>
 800b9e2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d025      	beq.n	800ba38 <plug_holes+0xc8>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	791b      	ldrb	r3, [r3, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d121      	bne.n	800ba38 <plug_holes+0xc8>
 800b9f4:	4b2c      	ldr	r3, [pc, #176]	; (800baa8 <plug_holes+0x138>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d01c      	beq.n	800ba38 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b9fe:	4b2e      	ldr	r3, [pc, #184]	; (800bab8 <plug_holes+0x148>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d102      	bne.n	800ba0e <plug_holes+0x9e>
      lfree = mem;
 800ba08:	4a2b      	ldr	r2, [pc, #172]	; (800bab8 <plug_holes+0x148>)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	881a      	ldrh	r2, [r3, #0]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	f247 5230 	movw	r2, #30000	; 0x7530
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d00a      	beq.n	800ba38 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7ff ff7e 	bl	800b928 <ptr_to_mem>
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f7ff ff8c 	bl	800b94c <mem_to_ptr>
 800ba34:	4603      	mov	r3, r0
 800ba36:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	885b      	ldrh	r3, [r3, #2]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff ff73 	bl	800b928 <ptr_to_mem>
 800ba42:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d020      	beq.n	800ba8e <plug_holes+0x11e>
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	791b      	ldrb	r3, [r3, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d11c      	bne.n	800ba8e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ba54:	4b18      	ldr	r3, [pc, #96]	; (800bab8 <plug_holes+0x148>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d102      	bne.n	800ba64 <plug_holes+0xf4>
      lfree = pmem;
 800ba5e:	4a16      	ldr	r2, [pc, #88]	; (800bab8 <plug_holes+0x148>)
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	881a      	ldrh	r2, [r3, #0]
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	881b      	ldrh	r3, [r3, #0]
 800ba70:	f247 5230 	movw	r2, #30000	; 0x7530
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d00a      	beq.n	800ba8e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7ff ff53 	bl	800b928 <ptr_to_mem>
 800ba82:	4604      	mov	r4, r0
 800ba84:	68b8      	ldr	r0, [r7, #8]
 800ba86:	f7ff ff61 	bl	800b94c <mem_to_ptr>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ba8e:	bf00      	nop
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd90      	pop	{r4, r7, pc}
 800ba96:	bf00      	nop
 800ba98:	2003cd1c 	.word	0x2003cd1c
 800ba9c:	0802340c 	.word	0x0802340c
 800baa0:	0802343c 	.word	0x0802343c
 800baa4:	08023454 	.word	0x08023454
 800baa8:	2003cd20 	.word	0x2003cd20
 800baac:	0802347c 	.word	0x0802347c
 800bab0:	08023498 	.word	0x08023498
 800bab4:	080234b4 	.word	0x080234b4
 800bab8:	2003cd28 	.word	0x2003cd28

0800babc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bac2:	4b1f      	ldr	r3, [pc, #124]	; (800bb40 <mem_init+0x84>)
 800bac4:	3303      	adds	r3, #3
 800bac6:	f023 0303 	bic.w	r3, r3, #3
 800baca:	461a      	mov	r2, r3
 800bacc:	4b1d      	ldr	r3, [pc, #116]	; (800bb44 <mem_init+0x88>)
 800bace:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bad0:	4b1c      	ldr	r3, [pc, #112]	; (800bb44 <mem_init+0x88>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f247 5230 	movw	r2, #30000	; 0x7530
 800badc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800baea:	f247 5030 	movw	r0, #30000	; 0x7530
 800baee:	f7ff ff1b 	bl	800b928 <ptr_to_mem>
 800baf2:	4603      	mov	r3, r0
 800baf4:	4a14      	ldr	r2, [pc, #80]	; (800bb48 <mem_init+0x8c>)
 800baf6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800baf8:	4b13      	ldr	r3, [pc, #76]	; (800bb48 <mem_init+0x8c>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2201      	movs	r2, #1
 800bafe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bb00:	4b11      	ldr	r3, [pc, #68]	; (800bb48 <mem_init+0x8c>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f247 5230 	movw	r2, #30000	; 0x7530
 800bb08:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bb0a:	4b0f      	ldr	r3, [pc, #60]	; (800bb48 <mem_init+0x8c>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f247 5230 	movw	r2, #30000	; 0x7530
 800bb12:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bb14:	4b0b      	ldr	r3, [pc, #44]	; (800bb44 <mem_init+0x88>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a0c      	ldr	r2, [pc, #48]	; (800bb4c <mem_init+0x90>)
 800bb1a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bb1c:	480c      	ldr	r0, [pc, #48]	; (800bb50 <mem_init+0x94>)
 800bb1e:	f00a ff23 	bl	8016968 <sys_mutex_new>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d006      	beq.n	800bb36 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bb28:	4b0a      	ldr	r3, [pc, #40]	; (800bb54 <mem_init+0x98>)
 800bb2a:	f240 221f 	movw	r2, #543	; 0x21f
 800bb2e:	490a      	ldr	r1, [pc, #40]	; (800bb58 <mem_init+0x9c>)
 800bb30:	480a      	ldr	r0, [pc, #40]	; (800bb5c <mem_init+0xa0>)
 800bb32:	f016 f8cb 	bl	8021ccc <iprintf>
  }
}
 800bb36:	bf00      	nop
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	200357d8 	.word	0x200357d8
 800bb44:	2003cd1c 	.word	0x2003cd1c
 800bb48:	2003cd20 	.word	0x2003cd20
 800bb4c:	2003cd28 	.word	0x2003cd28
 800bb50:	2003cd24 	.word	0x2003cd24
 800bb54:	0802340c 	.word	0x0802340c
 800bb58:	080234e0 	.word	0x080234e0
 800bb5c:	08023454 	.word	0x08023454

0800bb60 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff feef 	bl	800b94c <mem_to_ptr>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	881b      	ldrh	r3, [r3, #0]
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff fed6 	bl	800b928 <ptr_to_mem>
 800bb7c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	885b      	ldrh	r3, [r3, #2]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7ff fed0 	bl	800b928 <ptr_to_mem>
 800bb88:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	f247 5230 	movw	r2, #30000	; 0x7530
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d819      	bhi.n	800bbca <mem_link_valid+0x6a>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	885b      	ldrh	r3, [r3, #2]
 800bb9a:	f247 5230 	movw	r2, #30000	; 0x7530
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d813      	bhi.n	800bbca <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bba6:	8afa      	ldrh	r2, [r7, #22]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d004      	beq.n	800bbb6 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	881b      	ldrh	r3, [r3, #0]
 800bbb0:	8afa      	ldrh	r2, [r7, #22]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d109      	bne.n	800bbca <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bbb6:	4b08      	ldr	r3, [pc, #32]	; (800bbd8 <mem_link_valid+0x78>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d006      	beq.n	800bbce <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	885b      	ldrh	r3, [r3, #2]
 800bbc4:	8afa      	ldrh	r2, [r7, #22]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d001      	beq.n	800bbce <mem_link_valid+0x6e>
    return 0;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e000      	b.n	800bbd0 <mem_link_valid+0x70>
  }
  return 1;
 800bbce:	2301      	movs	r3, #1
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	2003cd20 	.word	0x2003cd20

0800bbdc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d070      	beq.n	800bccc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f003 0303 	and.w	r3, r3, #3
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00d      	beq.n	800bc10 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bbf4:	4b37      	ldr	r3, [pc, #220]	; (800bcd4 <mem_free+0xf8>)
 800bbf6:	f240 2273 	movw	r2, #627	; 0x273
 800bbfa:	4937      	ldr	r1, [pc, #220]	; (800bcd8 <mem_free+0xfc>)
 800bbfc:	4837      	ldr	r0, [pc, #220]	; (800bcdc <mem_free+0x100>)
 800bbfe:	f016 f865 	bl	8021ccc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc02:	f00a ff11 	bl	8016a28 <sys_arch_protect>
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f00a ff1b 	bl	8016a44 <sys_arch_unprotect>
    return;
 800bc0e:	e05e      	b.n	800bcce <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3b08      	subs	r3, #8
 800bc14:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bc16:	4b32      	ldr	r3, [pc, #200]	; (800bce0 <mem_free+0x104>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	69fa      	ldr	r2, [r7, #28]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d306      	bcc.n	800bc2e <mem_free+0x52>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f103 020c 	add.w	r2, r3, #12
 800bc26:	4b2f      	ldr	r3, [pc, #188]	; (800bce4 <mem_free+0x108>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d90d      	bls.n	800bc4a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bc2e:	4b29      	ldr	r3, [pc, #164]	; (800bcd4 <mem_free+0xf8>)
 800bc30:	f240 227f 	movw	r2, #639	; 0x27f
 800bc34:	492c      	ldr	r1, [pc, #176]	; (800bce8 <mem_free+0x10c>)
 800bc36:	4829      	ldr	r0, [pc, #164]	; (800bcdc <mem_free+0x100>)
 800bc38:	f016 f848 	bl	8021ccc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc3c:	f00a fef4 	bl	8016a28 <sys_arch_protect>
 800bc40:	6138      	str	r0, [r7, #16]
 800bc42:	6938      	ldr	r0, [r7, #16]
 800bc44:	f00a fefe 	bl	8016a44 <sys_arch_unprotect>
    return;
 800bc48:	e041      	b.n	800bcce <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bc4a:	4828      	ldr	r0, [pc, #160]	; (800bcec <mem_free+0x110>)
 800bc4c:	f00a feaf 	bl	80169ae <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	791b      	ldrb	r3, [r3, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d110      	bne.n	800bc7a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bc58:	4b1e      	ldr	r3, [pc, #120]	; (800bcd4 <mem_free+0xf8>)
 800bc5a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bc5e:	4924      	ldr	r1, [pc, #144]	; (800bcf0 <mem_free+0x114>)
 800bc60:	481e      	ldr	r0, [pc, #120]	; (800bcdc <mem_free+0x100>)
 800bc62:	f016 f833 	bl	8021ccc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc66:	4821      	ldr	r0, [pc, #132]	; (800bcec <mem_free+0x110>)
 800bc68:	f00a feb0 	bl	80169cc <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc6c:	f00a fedc 	bl	8016a28 <sys_arch_protect>
 800bc70:	6178      	str	r0, [r7, #20]
 800bc72:	6978      	ldr	r0, [r7, #20]
 800bc74:	f00a fee6 	bl	8016a44 <sys_arch_unprotect>
    return;
 800bc78:	e029      	b.n	800bcce <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bc7a:	69f8      	ldr	r0, [r7, #28]
 800bc7c:	f7ff ff70 	bl	800bb60 <mem_link_valid>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d110      	bne.n	800bca8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bc86:	4b13      	ldr	r3, [pc, #76]	; (800bcd4 <mem_free+0xf8>)
 800bc88:	f240 2295 	movw	r2, #661	; 0x295
 800bc8c:	4919      	ldr	r1, [pc, #100]	; (800bcf4 <mem_free+0x118>)
 800bc8e:	4813      	ldr	r0, [pc, #76]	; (800bcdc <mem_free+0x100>)
 800bc90:	f016 f81c 	bl	8021ccc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc94:	4815      	ldr	r0, [pc, #84]	; (800bcec <mem_free+0x110>)
 800bc96:	f00a fe99 	bl	80169cc <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc9a:	f00a fec5 	bl	8016a28 <sys_arch_protect>
 800bc9e:	61b8      	str	r0, [r7, #24]
 800bca0:	69b8      	ldr	r0, [r7, #24]
 800bca2:	f00a fecf 	bl	8016a44 <sys_arch_unprotect>
    return;
 800bca6:	e012      	b.n	800bcce <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bcae:	4b12      	ldr	r3, [pc, #72]	; (800bcf8 <mem_free+0x11c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	69fa      	ldr	r2, [r7, #28]
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d202      	bcs.n	800bcbe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bcb8:	4a0f      	ldr	r2, [pc, #60]	; (800bcf8 <mem_free+0x11c>)
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bcbe:	69f8      	ldr	r0, [r7, #28]
 800bcc0:	f7ff fe56 	bl	800b970 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bcc4:	4809      	ldr	r0, [pc, #36]	; (800bcec <mem_free+0x110>)
 800bcc6:	f00a fe81 	bl	80169cc <sys_mutex_unlock>
 800bcca:	e000      	b.n	800bcce <mem_free+0xf2>
    return;
 800bccc:	bf00      	nop
}
 800bcce:	3720      	adds	r7, #32
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	0802340c 	.word	0x0802340c
 800bcd8:	080234fc 	.word	0x080234fc
 800bcdc:	08023454 	.word	0x08023454
 800bce0:	2003cd1c 	.word	0x2003cd1c
 800bce4:	2003cd20 	.word	0x2003cd20
 800bce8:	08023520 	.word	0x08023520
 800bcec:	2003cd24 	.word	0x2003cd24
 800bcf0:	0802353c 	.word	0x0802353c
 800bcf4:	08023564 	.word	0x08023564
 800bcf8:	2003cd28 	.word	0x2003cd28

0800bcfc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b088      	sub	sp, #32
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	460b      	mov	r3, r1
 800bd06:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bd08:	887b      	ldrh	r3, [r7, #2]
 800bd0a:	3303      	adds	r3, #3
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	f023 0303 	bic.w	r3, r3, #3
 800bd12:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bd14:	8bfb      	ldrh	r3, [r7, #30]
 800bd16:	2b0b      	cmp	r3, #11
 800bd18:	d801      	bhi.n	800bd1e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bd1a:	230c      	movs	r3, #12
 800bd1c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bd1e:	8bfb      	ldrh	r3, [r7, #30]
 800bd20:	f247 5230 	movw	r2, #30000	; 0x7530
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d803      	bhi.n	800bd30 <mem_trim+0x34>
 800bd28:	8bfa      	ldrh	r2, [r7, #30]
 800bd2a:	887b      	ldrh	r3, [r7, #2]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d201      	bcs.n	800bd34 <mem_trim+0x38>
    return NULL;
 800bd30:	2300      	movs	r3, #0
 800bd32:	e0dc      	b.n	800beee <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bd34:	4b70      	ldr	r3, [pc, #448]	; (800bef8 <mem_trim+0x1fc>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d304      	bcc.n	800bd48 <mem_trim+0x4c>
 800bd3e:	4b6f      	ldr	r3, [pc, #444]	; (800befc <mem_trim+0x200>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d306      	bcc.n	800bd56 <mem_trim+0x5a>
 800bd48:	4b6d      	ldr	r3, [pc, #436]	; (800bf00 <mem_trim+0x204>)
 800bd4a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bd4e:	496d      	ldr	r1, [pc, #436]	; (800bf04 <mem_trim+0x208>)
 800bd50:	486d      	ldr	r0, [pc, #436]	; (800bf08 <mem_trim+0x20c>)
 800bd52:	f015 ffbb 	bl	8021ccc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bd56:	4b68      	ldr	r3, [pc, #416]	; (800bef8 <mem_trim+0x1fc>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d304      	bcc.n	800bd6a <mem_trim+0x6e>
 800bd60:	4b66      	ldr	r3, [pc, #408]	; (800befc <mem_trim+0x200>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d307      	bcc.n	800bd7a <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd6a:	f00a fe5d 	bl	8016a28 <sys_arch_protect>
 800bd6e:	60b8      	str	r0, [r7, #8]
 800bd70:	68b8      	ldr	r0, [r7, #8]
 800bd72:	f00a fe67 	bl	8016a44 <sys_arch_unprotect>
    return rmem;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	e0b9      	b.n	800beee <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	3b08      	subs	r3, #8
 800bd7e:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bd80:	69b8      	ldr	r0, [r7, #24]
 800bd82:	f7ff fde3 	bl	800b94c <mem_to_ptr>
 800bd86:	4603      	mov	r3, r0
 800bd88:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bd8a:	69bb      	ldr	r3, [r7, #24]
 800bd8c:	881a      	ldrh	r2, [r3, #0]
 800bd8e:	8afb      	ldrh	r3, [r7, #22]
 800bd90:	1ad3      	subs	r3, r2, r3
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	3b08      	subs	r3, #8
 800bd96:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bd98:	8bfa      	ldrh	r2, [r7, #30]
 800bd9a:	8abb      	ldrh	r3, [r7, #20]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d906      	bls.n	800bdae <mem_trim+0xb2>
 800bda0:	4b57      	ldr	r3, [pc, #348]	; (800bf00 <mem_trim+0x204>)
 800bda2:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bda6:	4959      	ldr	r1, [pc, #356]	; (800bf0c <mem_trim+0x210>)
 800bda8:	4857      	ldr	r0, [pc, #348]	; (800bf08 <mem_trim+0x20c>)
 800bdaa:	f015 ff8f 	bl	8021ccc <iprintf>
  if (newsize > size) {
 800bdae:	8bfa      	ldrh	r2, [r7, #30]
 800bdb0:	8abb      	ldrh	r3, [r7, #20]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d901      	bls.n	800bdba <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	e099      	b.n	800beee <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800bdba:	8bfa      	ldrh	r2, [r7, #30]
 800bdbc:	8abb      	ldrh	r3, [r7, #20]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d101      	bne.n	800bdc6 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	e093      	b.n	800beee <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bdc6:	4852      	ldr	r0, [pc, #328]	; (800bf10 <mem_trim+0x214>)
 800bdc8:	f00a fdf1 	bl	80169ae <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	881b      	ldrh	r3, [r3, #0]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fda9 	bl	800b928 <ptr_to_mem>
 800bdd6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	791b      	ldrb	r3, [r3, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d141      	bne.n	800be64 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	f247 5230 	movw	r2, #30000	; 0x7530
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d106      	bne.n	800bdfa <mem_trim+0xfe>
 800bdec:	4b44      	ldr	r3, [pc, #272]	; (800bf00 <mem_trim+0x204>)
 800bdee:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bdf2:	4948      	ldr	r1, [pc, #288]	; (800bf14 <mem_trim+0x218>)
 800bdf4:	4844      	ldr	r0, [pc, #272]	; (800bf08 <mem_trim+0x20c>)
 800bdf6:	f015 ff69 	bl	8021ccc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	881b      	ldrh	r3, [r3, #0]
 800bdfe:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800be00:	8afa      	ldrh	r2, [r7, #22]
 800be02:	8bfb      	ldrh	r3, [r7, #30]
 800be04:	4413      	add	r3, r2
 800be06:	b29b      	uxth	r3, r3
 800be08:	3308      	adds	r3, #8
 800be0a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800be0c:	4b42      	ldr	r3, [pc, #264]	; (800bf18 <mem_trim+0x21c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	429a      	cmp	r2, r3
 800be14:	d106      	bne.n	800be24 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800be16:	89fb      	ldrh	r3, [r7, #14]
 800be18:	4618      	mov	r0, r3
 800be1a:	f7ff fd85 	bl	800b928 <ptr_to_mem>
 800be1e:	4603      	mov	r3, r0
 800be20:	4a3d      	ldr	r2, [pc, #244]	; (800bf18 <mem_trim+0x21c>)
 800be22:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800be24:	89fb      	ldrh	r3, [r7, #14]
 800be26:	4618      	mov	r0, r3
 800be28:	f7ff fd7e 	bl	800b928 <ptr_to_mem>
 800be2c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	2200      	movs	r2, #0
 800be32:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	89ba      	ldrh	r2, [r7, #12]
 800be38:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	8afa      	ldrh	r2, [r7, #22]
 800be3e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	89fa      	ldrh	r2, [r7, #14]
 800be44:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	881b      	ldrh	r3, [r3, #0]
 800be4a:	f247 5230 	movw	r2, #30000	; 0x7530
 800be4e:	4293      	cmp	r3, r2
 800be50:	d049      	beq.n	800bee6 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	881b      	ldrh	r3, [r3, #0]
 800be56:	4618      	mov	r0, r3
 800be58:	f7ff fd66 	bl	800b928 <ptr_to_mem>
 800be5c:	4602      	mov	r2, r0
 800be5e:	89fb      	ldrh	r3, [r7, #14]
 800be60:	8053      	strh	r3, [r2, #2]
 800be62:	e040      	b.n	800bee6 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800be64:	8bfb      	ldrh	r3, [r7, #30]
 800be66:	f103 0214 	add.w	r2, r3, #20
 800be6a:	8abb      	ldrh	r3, [r7, #20]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d83a      	bhi.n	800bee6 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800be70:	8afa      	ldrh	r2, [r7, #22]
 800be72:	8bfb      	ldrh	r3, [r7, #30]
 800be74:	4413      	add	r3, r2
 800be76:	b29b      	uxth	r3, r3
 800be78:	3308      	adds	r3, #8
 800be7a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	f247 5230 	movw	r2, #30000	; 0x7530
 800be84:	4293      	cmp	r3, r2
 800be86:	d106      	bne.n	800be96 <mem_trim+0x19a>
 800be88:	4b1d      	ldr	r3, [pc, #116]	; (800bf00 <mem_trim+0x204>)
 800be8a:	f240 3216 	movw	r2, #790	; 0x316
 800be8e:	4921      	ldr	r1, [pc, #132]	; (800bf14 <mem_trim+0x218>)
 800be90:	481d      	ldr	r0, [pc, #116]	; (800bf08 <mem_trim+0x20c>)
 800be92:	f015 ff1b 	bl	8021ccc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800be96:	89fb      	ldrh	r3, [r7, #14]
 800be98:	4618      	mov	r0, r3
 800be9a:	f7ff fd45 	bl	800b928 <ptr_to_mem>
 800be9e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bea0:	4b1d      	ldr	r3, [pc, #116]	; (800bf18 <mem_trim+0x21c>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	693a      	ldr	r2, [r7, #16]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d202      	bcs.n	800beb0 <mem_trim+0x1b4>
      lfree = mem2;
 800beaa:	4a1b      	ldr	r2, [pc, #108]	; (800bf18 <mem_trim+0x21c>)
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	2200      	movs	r2, #0
 800beb4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	881a      	ldrh	r2, [r3, #0]
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	8afa      	ldrh	r2, [r7, #22]
 800bec2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	89fa      	ldrh	r2, [r7, #14]
 800bec8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	f247 5230 	movw	r2, #30000	; 0x7530
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d007      	beq.n	800bee6 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff fd24 	bl	800b928 <ptr_to_mem>
 800bee0:	4602      	mov	r2, r0
 800bee2:	89fb      	ldrh	r3, [r7, #14]
 800bee4:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bee6:	480a      	ldr	r0, [pc, #40]	; (800bf10 <mem_trim+0x214>)
 800bee8:	f00a fd70 	bl	80169cc <sys_mutex_unlock>
  return rmem;
 800beec:	687b      	ldr	r3, [r7, #4]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3720      	adds	r7, #32
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	2003cd1c 	.word	0x2003cd1c
 800befc:	2003cd20 	.word	0x2003cd20
 800bf00:	0802340c 	.word	0x0802340c
 800bf04:	08023598 	.word	0x08023598
 800bf08:	08023454 	.word	0x08023454
 800bf0c:	080235b0 	.word	0x080235b0
 800bf10:	2003cd24 	.word	0x2003cd24
 800bf14:	080235d0 	.word	0x080235d0
 800bf18:	2003cd28 	.word	0x2003cd28

0800bf1c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b088      	sub	sp, #32
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bf26:	88fb      	ldrh	r3, [r7, #6]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <mem_malloc+0x14>
    return NULL;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	e0e6      	b.n	800c0fe <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bf30:	88fb      	ldrh	r3, [r7, #6]
 800bf32:	3303      	adds	r3, #3
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	f023 0303 	bic.w	r3, r3, #3
 800bf3a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bf3c:	8bbb      	ldrh	r3, [r7, #28]
 800bf3e:	2b0b      	cmp	r3, #11
 800bf40:	d801      	bhi.n	800bf46 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bf42:	230c      	movs	r3, #12
 800bf44:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bf46:	8bbb      	ldrh	r3, [r7, #28]
 800bf48:	f247 5230 	movw	r2, #30000	; 0x7530
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d803      	bhi.n	800bf58 <mem_malloc+0x3c>
 800bf50:	8bba      	ldrh	r2, [r7, #28]
 800bf52:	88fb      	ldrh	r3, [r7, #6]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d201      	bcs.n	800bf5c <mem_malloc+0x40>
    return NULL;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	e0d0      	b.n	800c0fe <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bf5c:	486a      	ldr	r0, [pc, #424]	; (800c108 <mem_malloc+0x1ec>)
 800bf5e:	f00a fd26 	bl	80169ae <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf62:	4b6a      	ldr	r3, [pc, #424]	; (800c10c <mem_malloc+0x1f0>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff fcf0 	bl	800b94c <mem_to_ptr>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	83fb      	strh	r3, [r7, #30]
 800bf70:	e0b9      	b.n	800c0e6 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bf72:	8bfb      	ldrh	r3, [r7, #30]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7ff fcd7 	bl	800b928 <ptr_to_mem>
 800bf7a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	791b      	ldrb	r3, [r3, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f040 80a9 	bne.w	800c0d8 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	8bfb      	ldrh	r3, [r7, #30]
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	f1a3 0208 	sub.w	r2, r3, #8
 800bf94:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bf96:	429a      	cmp	r2, r3
 800bf98:	f0c0 809e 	bcc.w	800c0d8 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	881b      	ldrh	r3, [r3, #0]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	8bfb      	ldrh	r3, [r7, #30]
 800bfa4:	1ad3      	subs	r3, r2, r3
 800bfa6:	f1a3 0208 	sub.w	r2, r3, #8
 800bfaa:	8bbb      	ldrh	r3, [r7, #28]
 800bfac:	3314      	adds	r3, #20
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d335      	bcc.n	800c01e <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bfb2:	8bfa      	ldrh	r2, [r7, #30]
 800bfb4:	8bbb      	ldrh	r3, [r7, #28]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	3308      	adds	r3, #8
 800bfbc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bfbe:	8a7b      	ldrh	r3, [r7, #18]
 800bfc0:	f247 5230 	movw	r2, #30000	; 0x7530
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d106      	bne.n	800bfd6 <mem_malloc+0xba>
 800bfc8:	4b51      	ldr	r3, [pc, #324]	; (800c110 <mem_malloc+0x1f4>)
 800bfca:	f240 3287 	movw	r2, #903	; 0x387
 800bfce:	4951      	ldr	r1, [pc, #324]	; (800c114 <mem_malloc+0x1f8>)
 800bfd0:	4851      	ldr	r0, [pc, #324]	; (800c118 <mem_malloc+0x1fc>)
 800bfd2:	f015 fe7b 	bl	8021ccc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bfd6:	8a7b      	ldrh	r3, [r7, #18]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7ff fca5 	bl	800b928 <ptr_to_mem>
 800bfde:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	881a      	ldrh	r2, [r3, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	8bfa      	ldrh	r2, [r7, #30]
 800bff2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	8a7a      	ldrh	r2, [r7, #18]
 800bff8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2201      	movs	r2, #1
 800bffe:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	f247 5230 	movw	r2, #30000	; 0x7530
 800c008:	4293      	cmp	r3, r2
 800c00a:	d00b      	beq.n	800c024 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	881b      	ldrh	r3, [r3, #0]
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff fc89 	bl	800b928 <ptr_to_mem>
 800c016:	4602      	mov	r2, r0
 800c018:	8a7b      	ldrh	r3, [r7, #18]
 800c01a:	8053      	strh	r3, [r2, #2]
 800c01c:	e002      	b.n	800c024 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2201      	movs	r2, #1
 800c022:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c024:	4b39      	ldr	r3, [pc, #228]	; (800c10c <mem_malloc+0x1f0>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	697a      	ldr	r2, [r7, #20]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d127      	bne.n	800c07e <mem_malloc+0x162>
          struct mem *cur = lfree;
 800c02e:	4b37      	ldr	r3, [pc, #220]	; (800c10c <mem_malloc+0x1f0>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c034:	e005      	b.n	800c042 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	881b      	ldrh	r3, [r3, #0]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff fc74 	bl	800b928 <ptr_to_mem>
 800c040:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	791b      	ldrb	r3, [r3, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d004      	beq.n	800c054 <mem_malloc+0x138>
 800c04a:	4b34      	ldr	r3, [pc, #208]	; (800c11c <mem_malloc+0x200>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	69ba      	ldr	r2, [r7, #24]
 800c050:	429a      	cmp	r2, r3
 800c052:	d1f0      	bne.n	800c036 <mem_malloc+0x11a>
          }
          lfree = cur;
 800c054:	4a2d      	ldr	r2, [pc, #180]	; (800c10c <mem_malloc+0x1f0>)
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c05a:	4b2c      	ldr	r3, [pc, #176]	; (800c10c <mem_malloc+0x1f0>)
 800c05c:	681a      	ldr	r2, [r3, #0]
 800c05e:	4b2f      	ldr	r3, [pc, #188]	; (800c11c <mem_malloc+0x200>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	429a      	cmp	r2, r3
 800c064:	d00b      	beq.n	800c07e <mem_malloc+0x162>
 800c066:	4b29      	ldr	r3, [pc, #164]	; (800c10c <mem_malloc+0x1f0>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	791b      	ldrb	r3, [r3, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d006      	beq.n	800c07e <mem_malloc+0x162>
 800c070:	4b27      	ldr	r3, [pc, #156]	; (800c110 <mem_malloc+0x1f4>)
 800c072:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c076:	492a      	ldr	r1, [pc, #168]	; (800c120 <mem_malloc+0x204>)
 800c078:	4827      	ldr	r0, [pc, #156]	; (800c118 <mem_malloc+0x1fc>)
 800c07a:	f015 fe27 	bl	8021ccc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c07e:	4822      	ldr	r0, [pc, #136]	; (800c108 <mem_malloc+0x1ec>)
 800c080:	f00a fca4 	bl	80169cc <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c084:	8bba      	ldrh	r2, [r7, #28]
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	4413      	add	r3, r2
 800c08a:	3308      	adds	r3, #8
 800c08c:	4a23      	ldr	r2, [pc, #140]	; (800c11c <mem_malloc+0x200>)
 800c08e:	6812      	ldr	r2, [r2, #0]
 800c090:	4293      	cmp	r3, r2
 800c092:	d906      	bls.n	800c0a2 <mem_malloc+0x186>
 800c094:	4b1e      	ldr	r3, [pc, #120]	; (800c110 <mem_malloc+0x1f4>)
 800c096:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c09a:	4922      	ldr	r1, [pc, #136]	; (800c124 <mem_malloc+0x208>)
 800c09c:	481e      	ldr	r0, [pc, #120]	; (800c118 <mem_malloc+0x1fc>)
 800c09e:	f015 fe15 	bl	8021ccc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f003 0303 	and.w	r3, r3, #3
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d006      	beq.n	800c0ba <mem_malloc+0x19e>
 800c0ac:	4b18      	ldr	r3, [pc, #96]	; (800c110 <mem_malloc+0x1f4>)
 800c0ae:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c0b2:	491d      	ldr	r1, [pc, #116]	; (800c128 <mem_malloc+0x20c>)
 800c0b4:	4818      	ldr	r0, [pc, #96]	; (800c118 <mem_malloc+0x1fc>)
 800c0b6:	f015 fe09 	bl	8021ccc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f003 0303 	and.w	r3, r3, #3
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d006      	beq.n	800c0d2 <mem_malloc+0x1b6>
 800c0c4:	4b12      	ldr	r3, [pc, #72]	; (800c110 <mem_malloc+0x1f4>)
 800c0c6:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c0ca:	4918      	ldr	r1, [pc, #96]	; (800c12c <mem_malloc+0x210>)
 800c0cc:	4812      	ldr	r0, [pc, #72]	; (800c118 <mem_malloc+0x1fc>)
 800c0ce:	f015 fdfd 	bl	8021ccc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	e012      	b.n	800c0fe <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800c0d8:	8bfb      	ldrh	r3, [r7, #30]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7ff fc24 	bl	800b928 <ptr_to_mem>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	881b      	ldrh	r3, [r3, #0]
 800c0e4:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c0e6:	8bfa      	ldrh	r2, [r7, #30]
 800c0e8:	8bb9      	ldrh	r1, [r7, #28]
 800c0ea:	f247 5330 	movw	r3, #30000	; 0x7530
 800c0ee:	1a5b      	subs	r3, r3, r1
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	f4ff af3e 	bcc.w	800bf72 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c0f6:	4804      	ldr	r0, [pc, #16]	; (800c108 <mem_malloc+0x1ec>)
 800c0f8:	f00a fc68 	bl	80169cc <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3720      	adds	r7, #32
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	2003cd24 	.word	0x2003cd24
 800c10c:	2003cd28 	.word	0x2003cd28
 800c110:	0802340c 	.word	0x0802340c
 800c114:	080235d0 	.word	0x080235d0
 800c118:	08023454 	.word	0x08023454
 800c11c:	2003cd20 	.word	0x2003cd20
 800c120:	080235e4 	.word	0x080235e4
 800c124:	08023600 	.word	0x08023600
 800c128:	08023630 	.word	0x08023630
 800c12c:	08023660 	.word	0x08023660

0800c130 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	2200      	movs	r2, #0
 800c13e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	3303      	adds	r3, #3
 800c146:	f023 0303 	bic.w	r3, r3, #3
 800c14a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c14c:	2300      	movs	r3, #0
 800c14e:	60fb      	str	r3, [r7, #12]
 800c150:	e011      	b.n	800c176 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	881b      	ldrh	r3, [r3, #0]
 800c168:	461a      	mov	r2, r3
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	4413      	add	r3, r2
 800c16e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	3301      	adds	r3, #1
 800c174:	60fb      	str	r3, [r7, #12]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	885b      	ldrh	r3, [r3, #2]
 800c17a:	461a      	mov	r2, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	4293      	cmp	r3, r2
 800c180:	dbe7      	blt.n	800c152 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c182:	bf00      	nop
 800c184:	bf00      	nop
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c196:	2300      	movs	r3, #0
 800c198:	80fb      	strh	r3, [r7, #6]
 800c19a:	e009      	b.n	800c1b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c19c:	88fb      	ldrh	r3, [r7, #6]
 800c19e:	4a08      	ldr	r2, [pc, #32]	; (800c1c0 <memp_init+0x30>)
 800c1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7ff ffc3 	bl	800c130 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c1aa:	88fb      	ldrh	r3, [r7, #6]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	80fb      	strh	r3, [r7, #6]
 800c1b0:	88fb      	ldrh	r3, [r7, #6]
 800c1b2:	2b0e      	cmp	r3, #14
 800c1b4:	d9f2      	bls.n	800c19c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c1b6:	bf00      	nop
 800c1b8:	bf00      	nop
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	08026214 	.word	0x08026214

0800c1c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c1cc:	f00a fc2c 	bl	8016a28 <sys_arch_protect>
 800c1d0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d015      	beq.n	800c20c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689b      	ldr	r3, [r3, #8]
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	6812      	ldr	r2, [r2, #0]
 800c1e8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	f003 0303 	and.w	r3, r3, #3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d006      	beq.n	800c202 <do_memp_malloc_pool+0x3e>
 800c1f4:	4b09      	ldr	r3, [pc, #36]	; (800c21c <do_memp_malloc_pool+0x58>)
 800c1f6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c1fa:	4909      	ldr	r1, [pc, #36]	; (800c220 <do_memp_malloc_pool+0x5c>)
 800c1fc:	4809      	ldr	r0, [pc, #36]	; (800c224 <do_memp_malloc_pool+0x60>)
 800c1fe:	f015 fd65 	bl	8021ccc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f00a fc1e 	bl	8016a44 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	e003      	b.n	800c214 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f00a fc19 	bl	8016a44 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	08023684 	.word	0x08023684
 800c220:	080236b4 	.word	0x080236b4
 800c224:	080236d8 	.word	0x080236d8

0800c228 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c232:	79fb      	ldrb	r3, [r7, #7]
 800c234:	2b0e      	cmp	r3, #14
 800c236:	d908      	bls.n	800c24a <memp_malloc+0x22>
 800c238:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <memp_malloc+0x3c>)
 800c23a:	f240 1257 	movw	r2, #343	; 0x157
 800c23e:	490a      	ldr	r1, [pc, #40]	; (800c268 <memp_malloc+0x40>)
 800c240:	480a      	ldr	r0, [pc, #40]	; (800c26c <memp_malloc+0x44>)
 800c242:	f015 fd43 	bl	8021ccc <iprintf>
 800c246:	2300      	movs	r3, #0
 800c248:	e008      	b.n	800c25c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c24a:	79fb      	ldrb	r3, [r7, #7]
 800c24c:	4a08      	ldr	r2, [pc, #32]	; (800c270 <memp_malloc+0x48>)
 800c24e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c252:	4618      	mov	r0, r3
 800c254:	f7ff ffb6 	bl	800c1c4 <do_memp_malloc_pool>
 800c258:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c25a:	68fb      	ldr	r3, [r7, #12]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	08023684 	.word	0x08023684
 800c268:	08023714 	.word	0x08023714
 800c26c:	080236d8 	.word	0x080236d8
 800c270:	08026214 	.word	0x08026214

0800c274 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	f003 0303 	and.w	r3, r3, #3
 800c284:	2b00      	cmp	r3, #0
 800c286:	d006      	beq.n	800c296 <do_memp_free_pool+0x22>
 800c288:	4b0d      	ldr	r3, [pc, #52]	; (800c2c0 <do_memp_free_pool+0x4c>)
 800c28a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c28e:	490d      	ldr	r1, [pc, #52]	; (800c2c4 <do_memp_free_pool+0x50>)
 800c290:	480d      	ldr	r0, [pc, #52]	; (800c2c8 <do_memp_free_pool+0x54>)
 800c292:	f015 fd1b 	bl	8021ccc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c29a:	f00a fbc5 	bl	8016a28 <sys_arch_protect>
 800c29e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	689b      	ldr	r3, [r3, #8]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c2b2:	68b8      	ldr	r0, [r7, #8]
 800c2b4:	f00a fbc6 	bl	8016a44 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c2b8:	bf00      	nop
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	08023684 	.word	0x08023684
 800c2c4:	08023734 	.word	0x08023734
 800c2c8:	080236d8 	.word	0x080236d8

0800c2cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	6039      	str	r1, [r7, #0]
 800c2d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c2d8:	79fb      	ldrb	r3, [r7, #7]
 800c2da:	2b0e      	cmp	r3, #14
 800c2dc:	d907      	bls.n	800c2ee <memp_free+0x22>
 800c2de:	4b0c      	ldr	r3, [pc, #48]	; (800c310 <memp_free+0x44>)
 800c2e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c2e4:	490b      	ldr	r1, [pc, #44]	; (800c314 <memp_free+0x48>)
 800c2e6:	480c      	ldr	r0, [pc, #48]	; (800c318 <memp_free+0x4c>)
 800c2e8:	f015 fcf0 	bl	8021ccc <iprintf>
 800c2ec:	e00c      	b.n	800c308 <memp_free+0x3c>

  if (mem == NULL) {
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d008      	beq.n	800c306 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
 800c2f6:	4a09      	ldr	r2, [pc, #36]	; (800c31c <memp_free+0x50>)
 800c2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7ff ffb8 	bl	800c274 <do_memp_free_pool>
 800c304:	e000      	b.n	800c308 <memp_free+0x3c>
    return;
 800c306:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	08023684 	.word	0x08023684
 800c314:	08023754 	.word	0x08023754
 800c318:	080236d8 	.word	0x080236d8
 800c31c:	08026214 	.word	0x08026214

0800c320 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c320:	b480      	push	{r7}
 800c322:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c324:	bf00      	nop
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
	...

0800c330 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d108      	bne.n	800c356 <netif_add+0x26>
 800c344:	4b61      	ldr	r3, [pc, #388]	; (800c4cc <netif_add+0x19c>)
 800c346:	f240 1227 	movw	r2, #295	; 0x127
 800c34a:	4961      	ldr	r1, [pc, #388]	; (800c4d0 <netif_add+0x1a0>)
 800c34c:	4861      	ldr	r0, [pc, #388]	; (800c4d4 <netif_add+0x1a4>)
 800c34e:	f015 fcbd 	bl	8021ccc <iprintf>
 800c352:	2300      	movs	r3, #0
 800c354:	e0b6      	b.n	800c4c4 <netif_add+0x194>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d108      	bne.n	800c36e <netif_add+0x3e>
 800c35c:	4b5b      	ldr	r3, [pc, #364]	; (800c4cc <netif_add+0x19c>)
 800c35e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c362:	495d      	ldr	r1, [pc, #372]	; (800c4d8 <netif_add+0x1a8>)
 800c364:	485b      	ldr	r0, [pc, #364]	; (800c4d4 <netif_add+0x1a4>)
 800c366:	f015 fcb1 	bl	8021ccc <iprintf>
 800c36a:	2300      	movs	r3, #0
 800c36c:	e0aa      	b.n	800c4c4 <netif_add+0x194>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d101      	bne.n	800c378 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c374:	4b59      	ldr	r3, [pc, #356]	; (800c4dc <netif_add+0x1ac>)
 800c376:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c37e:	4b57      	ldr	r3, [pc, #348]	; (800c4dc <netif_add+0x1ac>)
 800c380:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c388:	4b54      	ldr	r3, [pc, #336]	; (800c4dc <netif_add+0x1ac>)
 800c38a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2200      	movs	r2, #0
 800c396:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	4a4f      	ldr	r2, [pc, #316]	; (800c4e0 <netif_add+0x1b0>)
 800c3a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3324      	adds	r3, #36	; 0x24
 800c3b6:	2204      	movs	r2, #4
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f015 fb88 	bl	8021ad0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6a3a      	ldr	r2, [r7, #32]
 800c3d0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c3d2:	4b44      	ldr	r3, [pc, #272]	; (800c4e4 <netif_add+0x1b4>)
 800c3d4:	781a      	ldrb	r2, [r3, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3e0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f000 f91d 	bl	800c628 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	4798      	blx	r3
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d001      	beq.n	800c3fe <netif_add+0xce>
    return NULL;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	e062      	b.n	800c4c4 <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c404:	2bff      	cmp	r3, #255	; 0xff
 800c406:	d103      	bne.n	800c410 <netif_add+0xe0>
        netif->num = 0;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c410:	2300      	movs	r3, #0
 800c412:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c414:	4b34      	ldr	r3, [pc, #208]	; (800c4e8 <netif_add+0x1b8>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	617b      	str	r3, [r7, #20]
 800c41a:	e02b      	b.n	800c474 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c41c:	697a      	ldr	r2, [r7, #20]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	429a      	cmp	r2, r3
 800c422:	d106      	bne.n	800c432 <netif_add+0x102>
 800c424:	4b29      	ldr	r3, [pc, #164]	; (800c4cc <netif_add+0x19c>)
 800c426:	f240 128b 	movw	r2, #395	; 0x18b
 800c42a:	4930      	ldr	r1, [pc, #192]	; (800c4ec <netif_add+0x1bc>)
 800c42c:	4829      	ldr	r0, [pc, #164]	; (800c4d4 <netif_add+0x1a4>)
 800c42e:	f015 fc4d 	bl	8021ccc <iprintf>
        num_netifs++;
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	3301      	adds	r3, #1
 800c436:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	2bff      	cmp	r3, #255	; 0xff
 800c43c:	dd06      	ble.n	800c44c <netif_add+0x11c>
 800c43e:	4b23      	ldr	r3, [pc, #140]	; (800c4cc <netif_add+0x19c>)
 800c440:	f240 128d 	movw	r2, #397	; 0x18d
 800c444:	492a      	ldr	r1, [pc, #168]	; (800c4f0 <netif_add+0x1c0>)
 800c446:	4823      	ldr	r0, [pc, #140]	; (800c4d4 <netif_add+0x1a4>)
 800c448:	f015 fc40 	bl	8021ccc <iprintf>
        if (netif2->num == netif->num) {
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c458:	429a      	cmp	r2, r3
 800c45a:	d108      	bne.n	800c46e <netif_add+0x13e>
          netif->num++;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c462:	3301      	adds	r3, #1
 800c464:	b2da      	uxtb	r2, r3
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c46c:	e005      	b.n	800c47a <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1d0      	bne.n	800c41c <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d1be      	bne.n	800c3fe <netif_add+0xce>
  }
  if (netif->num == 254) {
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c486:	2bfe      	cmp	r3, #254	; 0xfe
 800c488:	d103      	bne.n	800c492 <netif_add+0x162>
    netif_num = 0;
 800c48a:	4b16      	ldr	r3, [pc, #88]	; (800c4e4 <netif_add+0x1b4>)
 800c48c:	2200      	movs	r2, #0
 800c48e:	701a      	strb	r2, [r3, #0]
 800c490:	e006      	b.n	800c4a0 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c498:	3301      	adds	r3, #1
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	4b11      	ldr	r3, [pc, #68]	; (800c4e4 <netif_add+0x1b4>)
 800c49e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c4a0:	4b11      	ldr	r3, [pc, #68]	; (800c4e8 <netif_add+0x1b8>)
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c4a8:	4a0f      	ldr	r2, [pc, #60]	; (800c4e8 <netif_add+0x1b8>)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c4b4:	f003 0320 	and.w	r3, r3, #32
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <netif_add+0x192>
    igmp_start(netif);
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f008 faa3 	bl	8014a08 <igmp_start>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3718      	adds	r7, #24
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	08023770 	.word	0x08023770
 800c4d0:	08023804 	.word	0x08023804
 800c4d4:	080237c0 	.word	0x080237c0
 800c4d8:	08023820 	.word	0x08023820
 800c4dc:	080262a0 	.word	0x080262a0
 800c4e0:	0800c917 	.word	0x0800c917
 800c4e4:	20040b3c 	.word	0x20040b3c
 800c4e8:	20040b34 	.word	0x20040b34
 800c4ec:	08023844 	.word	0x08023844
 800c4f0:	08023858 	.word	0x08023858

0800c4f4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c4fe:	6839      	ldr	r1, [r7, #0]
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f002 fd13 	bl	800ef2c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f007 f95d 	bl	80137c8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
	...

0800c518 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d106      	bne.n	800c538 <netif_do_set_ipaddr+0x20>
 800c52a:	4b1d      	ldr	r3, [pc, #116]	; (800c5a0 <netif_do_set_ipaddr+0x88>)
 800c52c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c530:	491c      	ldr	r1, [pc, #112]	; (800c5a4 <netif_do_set_ipaddr+0x8c>)
 800c532:	481d      	ldr	r0, [pc, #116]	; (800c5a8 <netif_do_set_ipaddr+0x90>)
 800c534:	f015 fbca 	bl	8021ccc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d106      	bne.n	800c54c <netif_do_set_ipaddr+0x34>
 800c53e:	4b18      	ldr	r3, [pc, #96]	; (800c5a0 <netif_do_set_ipaddr+0x88>)
 800c540:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c544:	4917      	ldr	r1, [pc, #92]	; (800c5a4 <netif_do_set_ipaddr+0x8c>)
 800c546:	4818      	ldr	r0, [pc, #96]	; (800c5a8 <netif_do_set_ipaddr+0x90>)
 800c548:	f015 fbc0 	bl	8021ccc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3304      	adds	r3, #4
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	429a      	cmp	r2, r3
 800c558:	d01c      	beq.n	800c594 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3304      	adds	r3, #4
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c56a:	f107 0314 	add.w	r3, r7, #20
 800c56e:	4619      	mov	r1, r3
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f7ff ffbf 	bl	800c4f4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <netif_do_set_ipaddr+0x6a>
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	e000      	b.n	800c584 <netif_do_set_ipaddr+0x6c>
 800c582:	2300      	movs	r3, #0
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c588:	2101      	movs	r1, #1
 800c58a:	68f8      	ldr	r0, [r7, #12]
 800c58c:	f000 f8d2 	bl	800c734 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c590:	2301      	movs	r3, #1
 800c592:	e000      	b.n	800c596 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3718      	adds	r7, #24
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	08023770 	.word	0x08023770
 800c5a4:	08023888 	.word	0x08023888
 800c5a8:	080237c0 	.word	0x080237c0

0800c5ac <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b085      	sub	sp, #20
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	3308      	adds	r3, #8
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d00a      	beq.n	800c5dc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d002      	beq.n	800c5d2 <netif_do_set_netmask+0x26>
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	e000      	b.n	800c5d4 <netif_do_set_netmask+0x28>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c5d8:	2301      	movs	r3, #1
 800c5da:	e000      	b.n	800c5de <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c5dc:	2300      	movs	r3, #0
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3714      	adds	r7, #20
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr

0800c5ea <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c5ea:	b480      	push	{r7}
 800c5ec:	b085      	sub	sp, #20
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	60b9      	str	r1, [r7, #8]
 800c5f4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	330c      	adds	r3, #12
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	429a      	cmp	r2, r3
 800c602:	d00a      	beq.n	800c61a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d002      	beq.n	800c610 <netif_do_set_gw+0x26>
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	e000      	b.n	800c612 <netif_do_set_gw+0x28>
 800c610:	2300      	movs	r3, #0
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c616:	2301      	movs	r3, #1
 800c618:	e000      	b.n	800c61c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3714      	adds	r7, #20
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b088      	sub	sp, #32
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
 800c634:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c636:	2300      	movs	r3, #0
 800c638:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c63a:	2300      	movs	r3, #0
 800c63c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c644:	4b1c      	ldr	r3, [pc, #112]	; (800c6b8 <netif_set_addr+0x90>)
 800c646:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d101      	bne.n	800c652 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c64e:	4b1a      	ldr	r3, [pc, #104]	; (800c6b8 <netif_set_addr+0x90>)
 800c650:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c658:	4b17      	ldr	r3, [pc, #92]	; (800c6b8 <netif_set_addr+0x90>)
 800c65a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d003      	beq.n	800c66a <netif_set_addr+0x42>
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d101      	bne.n	800c66e <netif_set_addr+0x46>
 800c66a:	2301      	movs	r3, #1
 800c66c:	e000      	b.n	800c670 <netif_set_addr+0x48>
 800c66e:	2300      	movs	r3, #0
 800c670:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d006      	beq.n	800c686 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c678:	f107 0310 	add.w	r3, r7, #16
 800c67c:	461a      	mov	r2, r3
 800c67e:	68b9      	ldr	r1, [r7, #8]
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f7ff ff49 	bl	800c518 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c686:	69fa      	ldr	r2, [r7, #28]
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7ff ff8e 	bl	800c5ac <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	6839      	ldr	r1, [r7, #0]
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f7ff ffa8 	bl	800c5ea <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d106      	bne.n	800c6ae <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c6a0:	f107 0310 	add.w	r3, r7, #16
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	68b9      	ldr	r1, [r7, #8]
 800c6a8:	68f8      	ldr	r0, [r7, #12]
 800c6aa:	f7ff ff35 	bl	800c518 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c6ae:	bf00      	nop
 800c6b0:	3720      	adds	r7, #32
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	080262a0 	.word	0x080262a0

0800c6bc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c6c4:	4a04      	ldr	r2, [pc, #16]	; (800c6d8 <netif_set_default+0x1c>)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c6ca:	bf00      	nop
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	20040b38 	.word	0x20040b38

0800c6dc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d107      	bne.n	800c6fa <netif_set_up+0x1e>
 800c6ea:	4b0f      	ldr	r3, [pc, #60]	; (800c728 <netif_set_up+0x4c>)
 800c6ec:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c6f0:	490e      	ldr	r1, [pc, #56]	; (800c72c <netif_set_up+0x50>)
 800c6f2:	480f      	ldr	r0, [pc, #60]	; (800c730 <netif_set_up+0x54>)
 800c6f4:	f015 faea 	bl	8021ccc <iprintf>
 800c6f8:	e013      	b.n	800c722 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c700:	f003 0301 	and.w	r3, r3, #1
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10c      	bne.n	800c722 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c70e:	f043 0301 	orr.w	r3, r3, #1
 800c712:	b2da      	uxtb	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c71a:	2103      	movs	r1, #3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f809 	bl	800c734 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	08023770 	.word	0x08023770
 800c72c:	080238f8 	.word	0x080238f8
 800c730:	080237c0 	.word	0x080237c0

0800c734 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	460b      	mov	r3, r1
 800c73e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d106      	bne.n	800c754 <netif_issue_reports+0x20>
 800c746:	4b1d      	ldr	r3, [pc, #116]	; (800c7bc <netif_issue_reports+0x88>)
 800c748:	f240 326d 	movw	r2, #877	; 0x36d
 800c74c:	491c      	ldr	r1, [pc, #112]	; (800c7c0 <netif_issue_reports+0x8c>)
 800c74e:	481d      	ldr	r0, [pc, #116]	; (800c7c4 <netif_issue_reports+0x90>)
 800c750:	f015 fabc 	bl	8021ccc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c75a:	f003 0304 	and.w	r3, r3, #4
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d028      	beq.n	800c7b4 <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c768:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d021      	beq.n	800c7b4 <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d01d      	beq.n	800c7b6 <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	3304      	adds	r3, #4
 800c77e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c780:	2b00      	cmp	r3, #0
 800c782:	d018      	beq.n	800c7b6 <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c78a:	f003 0308 	and.w	r3, r3, #8
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d005      	beq.n	800c79e <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3304      	adds	r3, #4
 800c796:	4619      	mov	r1, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f007 ff7f 	bl	801469c <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7a4:	f003 0320 	and.w	r3, r3, #32
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d004      	beq.n	800c7b6 <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f008 f955 	bl	8014a5c <igmp_report_groups>
 800c7b2:	e000      	b.n	800c7b6 <netif_issue_reports+0x82>
    return;
 800c7b4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	08023770 	.word	0x08023770
 800c7c0:	08023914 	.word	0x08023914
 800c7c4:	080237c0 	.word	0x080237c0

0800c7c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d107      	bne.n	800c7e6 <netif_set_down+0x1e>
 800c7d6:	4b12      	ldr	r3, [pc, #72]	; (800c820 <netif_set_down+0x58>)
 800c7d8:	f240 329b 	movw	r2, #923	; 0x39b
 800c7dc:	4911      	ldr	r1, [pc, #68]	; (800c824 <netif_set_down+0x5c>)
 800c7de:	4812      	ldr	r0, [pc, #72]	; (800c828 <netif_set_down+0x60>)
 800c7e0:	f015 fa74 	bl	8021ccc <iprintf>
 800c7e4:	e019      	b.n	800c81a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7ec:	f003 0301 	and.w	r3, r3, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d012      	beq.n	800c81a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7fa:	f023 0301 	bic.w	r3, r3, #1
 800c7fe:	b2da      	uxtb	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c80c:	f003 0308 	and.w	r3, r3, #8
 800c810:	2b00      	cmp	r3, #0
 800c812:	d002      	beq.n	800c81a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f007 faff 	bl	8013e18 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	08023770 	.word	0x08023770
 800c824:	08023938 	.word	0x08023938
 800c828:	080237c0 	.word	0x080237c0

0800c82c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d107      	bne.n	800c84a <netif_set_link_up+0x1e>
 800c83a:	4b13      	ldr	r3, [pc, #76]	; (800c888 <netif_set_link_up+0x5c>)
 800c83c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c840:	4912      	ldr	r1, [pc, #72]	; (800c88c <netif_set_link_up+0x60>)
 800c842:	4813      	ldr	r0, [pc, #76]	; (800c890 <netif_set_link_up+0x64>)
 800c844:	f015 fa42 	bl	8021ccc <iprintf>
 800c848:	e01b      	b.n	800c882 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c850:	f003 0304 	and.w	r3, r3, #4
 800c854:	2b00      	cmp	r3, #0
 800c856:	d114      	bne.n	800c882 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c85e:	f043 0304 	orr.w	r3, r3, #4
 800c862:	b2da      	uxtb	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c86a:	2103      	movs	r1, #3
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff ff61 	bl	800c734 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	69db      	ldr	r3, [r3, #28]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <netif_set_link_up+0x56>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	69db      	ldr	r3, [r3, #28]
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	08023770 	.word	0x08023770
 800c88c:	08023958 	.word	0x08023958
 800c890:	080237c0 	.word	0x080237c0

0800c894 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d107      	bne.n	800c8b2 <netif_set_link_down+0x1e>
 800c8a2:	4b11      	ldr	r3, [pc, #68]	; (800c8e8 <netif_set_link_down+0x54>)
 800c8a4:	f240 4206 	movw	r2, #1030	; 0x406
 800c8a8:	4910      	ldr	r1, [pc, #64]	; (800c8ec <netif_set_link_down+0x58>)
 800c8aa:	4811      	ldr	r0, [pc, #68]	; (800c8f0 <netif_set_link_down+0x5c>)
 800c8ac:	f015 fa0e 	bl	8021ccc <iprintf>
 800c8b0:	e017      	b.n	800c8e2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d010      	beq.n	800c8e2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c8c6:	f023 0304 	bic.w	r3, r3, #4
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d003      	beq.n	800c8e2 <netif_set_link_down+0x4e>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	69db      	ldr	r3, [r3, #28]
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	08023770 	.word	0x08023770
 800c8ec:	0802397c 	.word	0x0802397c
 800c8f0:	080237c0 	.word	0x080237c0

0800c8f4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d002      	beq.n	800c90a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	61da      	str	r2, [r3, #28]
  }
}
 800c90a:	bf00      	nop
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c916:	b480      	push	{r7}
 800c918:	b085      	sub	sp, #20
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	60f8      	str	r0, [r7, #12]
 800c91e:	60b9      	str	r1, [r7, #8]
 800c920:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c922:	f06f 030b 	mvn.w	r3, #11
}
 800c926:	4618      	mov	r0, r3
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
	...

0800c934 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	4603      	mov	r3, r0
 800c93c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c93e:	79fb      	ldrb	r3, [r7, #7]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d013      	beq.n	800c96c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c944:	4b0d      	ldr	r3, [pc, #52]	; (800c97c <netif_get_by_index+0x48>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	60fb      	str	r3, [r7, #12]
 800c94a:	e00c      	b.n	800c966 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c952:	3301      	adds	r3, #1
 800c954:	b2db      	uxtb	r3, r3
 800c956:	79fa      	ldrb	r2, [r7, #7]
 800c958:	429a      	cmp	r2, r3
 800c95a:	d101      	bne.n	800c960 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	e006      	b.n	800c96e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	60fb      	str	r3, [r7, #12]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d1ef      	bne.n	800c94c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	20040b34 	.word	0x20040b34

0800c980 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c986:	f00a f84f 	bl	8016a28 <sys_arch_protect>
 800c98a:	6038      	str	r0, [r7, #0]
 800c98c:	4b0d      	ldr	r3, [pc, #52]	; (800c9c4 <pbuf_free_ooseq+0x44>)
 800c98e:	2200      	movs	r2, #0
 800c990:	701a      	strb	r2, [r3, #0]
 800c992:	6838      	ldr	r0, [r7, #0]
 800c994:	f00a f856 	bl	8016a44 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c998:	4b0b      	ldr	r3, [pc, #44]	; (800c9c8 <pbuf_free_ooseq+0x48>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	607b      	str	r3, [r7, #4]
 800c99e:	e00a      	b.n	800c9b6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d003      	beq.n	800c9b0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f002 fafd 	bl	800efa8 <tcp_free_ooseq>
      return;
 800c9ae:	e005      	b.n	800c9bc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	607b      	str	r3, [r7, #4]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1f1      	bne.n	800c9a0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20040b3d 	.word	0x20040b3d
 800c9c8:	20040b4c 	.word	0x20040b4c

0800c9cc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c9d4:	f7ff ffd4 	bl	800c980 <pbuf_free_ooseq>
}
 800c9d8:	bf00      	nop
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c9e6:	f00a f81f 	bl	8016a28 <sys_arch_protect>
 800c9ea:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c9ec:	4b0f      	ldr	r3, [pc, #60]	; (800ca2c <pbuf_pool_is_empty+0x4c>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c9f2:	4b0e      	ldr	r3, [pc, #56]	; (800ca2c <pbuf_pool_is_empty+0x4c>)
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f00a f823 	bl	8016a44 <sys_arch_unprotect>

  if (!queued) {
 800c9fe:	78fb      	ldrb	r3, [r7, #3]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d10f      	bne.n	800ca24 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ca04:	2100      	movs	r1, #0
 800ca06:	480a      	ldr	r0, [pc, #40]	; (800ca30 <pbuf_pool_is_empty+0x50>)
 800ca08:	f7fe fb82 	bl	800b110 <tcpip_try_callback>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d008      	beq.n	800ca24 <pbuf_pool_is_empty+0x44>
 800ca12:	f00a f809 	bl	8016a28 <sys_arch_protect>
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	4b04      	ldr	r3, [pc, #16]	; (800ca2c <pbuf_pool_is_empty+0x4c>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	701a      	strb	r2, [r3, #0]
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f00a f810 	bl	8016a44 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ca24:	bf00      	nop
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	20040b3d 	.word	0x20040b3d
 800ca30:	0800c9cd 	.word	0x0800c9cd

0800ca34 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	4611      	mov	r1, r2
 800ca40:	461a      	mov	r2, r3
 800ca42:	460b      	mov	r3, r1
 800ca44:	80fb      	strh	r3, [r7, #6]
 800ca46:	4613      	mov	r3, r2
 800ca48:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	88fa      	ldrh	r2, [r7, #6]
 800ca5a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	88ba      	ldrh	r2, [r7, #4]
 800ca60:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ca62:	8b3b      	ldrh	r3, [r7, #24]
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	7f3a      	ldrb	r2, [r7, #28]
 800ca6e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2201      	movs	r2, #1
 800ca74:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	73da      	strb	r2, [r3, #15]
}
 800ca7c:	bf00      	nop
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08c      	sub	sp, #48	; 0x30
 800ca8c:	af02      	add	r7, sp, #8
 800ca8e:	4603      	mov	r3, r0
 800ca90:	71fb      	strb	r3, [r7, #7]
 800ca92:	460b      	mov	r3, r1
 800ca94:	80bb      	strh	r3, [r7, #4]
 800ca96:	4613      	mov	r3, r2
 800ca98:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ca9e:	887b      	ldrh	r3, [r7, #2]
 800caa0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800caa4:	d07f      	beq.n	800cba6 <pbuf_alloc+0x11e>
 800caa6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800caaa:	f300 80c8 	bgt.w	800cc3e <pbuf_alloc+0x1b6>
 800caae:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cab2:	d010      	beq.n	800cad6 <pbuf_alloc+0x4e>
 800cab4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cab8:	f300 80c1 	bgt.w	800cc3e <pbuf_alloc+0x1b6>
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d002      	beq.n	800cac6 <pbuf_alloc+0x3e>
 800cac0:	2b41      	cmp	r3, #65	; 0x41
 800cac2:	f040 80bc 	bne.w	800cc3e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cac6:	887a      	ldrh	r2, [r7, #2]
 800cac8:	88bb      	ldrh	r3, [r7, #4]
 800caca:	4619      	mov	r1, r3
 800cacc:	2000      	movs	r0, #0
 800cace:	f000 f8d1 	bl	800cc74 <pbuf_alloc_reference>
 800cad2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cad4:	e0bd      	b.n	800cc52 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cad6:	2300      	movs	r3, #0
 800cad8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cada:	2300      	movs	r3, #0
 800cadc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cade:	88bb      	ldrh	r3, [r7, #4]
 800cae0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cae2:	200e      	movs	r0, #14
 800cae4:	f7ff fba0 	bl	800c228 <memp_malloc>
 800cae8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d109      	bne.n	800cb04 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800caf0:	f7ff ff76 	bl	800c9e0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d002      	beq.n	800cb00 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cafa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cafc:	f000 faa8 	bl	800d050 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cb00:	2300      	movs	r3, #0
 800cb02:	e0a7      	b.n	800cc54 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cb04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb06:	3303      	adds	r3, #3
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	f023 0303 	bic.w	r3, r3, #3
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	8b7a      	ldrh	r2, [r7, #26]
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	bf28      	it	cs
 800cb1c:	4613      	movcs	r3, r2
 800cb1e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cb20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb22:	3310      	adds	r3, #16
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	4413      	add	r3, r2
 800cb28:	3303      	adds	r3, #3
 800cb2a:	f023 0303 	bic.w	r3, r3, #3
 800cb2e:	4618      	mov	r0, r3
 800cb30:	89f9      	ldrh	r1, [r7, #14]
 800cb32:	8b7a      	ldrh	r2, [r7, #26]
 800cb34:	2300      	movs	r3, #0
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	887b      	ldrh	r3, [r7, #2]
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4601      	mov	r1, r0
 800cb40:	6938      	ldr	r0, [r7, #16]
 800cb42:	f7ff ff77 	bl	800ca34 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	f003 0303 	and.w	r3, r3, #3
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d006      	beq.n	800cb60 <pbuf_alloc+0xd8>
 800cb52:	4b42      	ldr	r3, [pc, #264]	; (800cc5c <pbuf_alloc+0x1d4>)
 800cb54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb58:	4941      	ldr	r1, [pc, #260]	; (800cc60 <pbuf_alloc+0x1d8>)
 800cb5a:	4842      	ldr	r0, [pc, #264]	; (800cc64 <pbuf_alloc+0x1dc>)
 800cb5c:	f015 f8b6 	bl	8021ccc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cb60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb62:	3303      	adds	r3, #3
 800cb64:	f023 0303 	bic.w	r3, r3, #3
 800cb68:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cb6c:	d106      	bne.n	800cb7c <pbuf_alloc+0xf4>
 800cb6e:	4b3b      	ldr	r3, [pc, #236]	; (800cc5c <pbuf_alloc+0x1d4>)
 800cb70:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cb74:	493c      	ldr	r1, [pc, #240]	; (800cc68 <pbuf_alloc+0x1e0>)
 800cb76:	483b      	ldr	r0, [pc, #236]	; (800cc64 <pbuf_alloc+0x1dc>)
 800cb78:	f015 f8a8 	bl	8021ccc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d102      	bne.n	800cb88 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	627b      	str	r3, [r7, #36]	; 0x24
 800cb86:	e002      	b.n	800cb8e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	693a      	ldr	r2, [r7, #16]
 800cb8c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cb92:	8b7a      	ldrh	r2, [r7, #26]
 800cb94:	89fb      	ldrh	r3, [r7, #14]
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cb9e:	8b7b      	ldrh	r3, [r7, #26]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d19e      	bne.n	800cae2 <pbuf_alloc+0x5a>
      break;
 800cba4:	e055      	b.n	800cc52 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cba6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cba8:	3303      	adds	r3, #3
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	f023 0303 	bic.w	r3, r3, #3
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	88bb      	ldrh	r3, [r7, #4]
 800cbb4:	3303      	adds	r3, #3
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	f023 0303 	bic.w	r3, r3, #3
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	4413      	add	r3, r2
 800cbc0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cbc2:	8b3b      	ldrh	r3, [r7, #24]
 800cbc4:	3310      	adds	r3, #16
 800cbc6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cbc8:	8b3a      	ldrh	r2, [r7, #24]
 800cbca:	88bb      	ldrh	r3, [r7, #4]
 800cbcc:	3303      	adds	r3, #3
 800cbce:	f023 0303 	bic.w	r3, r3, #3
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d306      	bcc.n	800cbe4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cbd6:	8afa      	ldrh	r2, [r7, #22]
 800cbd8:	88bb      	ldrh	r3, [r7, #4]
 800cbda:	3303      	adds	r3, #3
 800cbdc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d201      	bcs.n	800cbe8 <pbuf_alloc+0x160>
        return NULL;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e035      	b.n	800cc54 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cbe8:	8afb      	ldrh	r3, [r7, #22]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff f996 	bl	800bf1c <mem_malloc>
 800cbf0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <pbuf_alloc+0x174>
        return NULL;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	e02b      	b.n	800cc54 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cbfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbfe:	3310      	adds	r3, #16
 800cc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc02:	4413      	add	r3, r2
 800cc04:	3303      	adds	r3, #3
 800cc06:	f023 0303 	bic.w	r3, r3, #3
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	88b9      	ldrh	r1, [r7, #4]
 800cc0e:	88ba      	ldrh	r2, [r7, #4]
 800cc10:	2300      	movs	r3, #0
 800cc12:	9301      	str	r3, [sp, #4]
 800cc14:	887b      	ldrh	r3, [r7, #2]
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	4601      	mov	r1, r0
 800cc1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc1e:	f7ff ff09 	bl	800ca34 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	f003 0303 	and.w	r3, r3, #3
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d010      	beq.n	800cc50 <pbuf_alloc+0x1c8>
 800cc2e:	4b0b      	ldr	r3, [pc, #44]	; (800cc5c <pbuf_alloc+0x1d4>)
 800cc30:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cc34:	490d      	ldr	r1, [pc, #52]	; (800cc6c <pbuf_alloc+0x1e4>)
 800cc36:	480b      	ldr	r0, [pc, #44]	; (800cc64 <pbuf_alloc+0x1dc>)
 800cc38:	f015 f848 	bl	8021ccc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cc3c:	e008      	b.n	800cc50 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cc3e:	4b07      	ldr	r3, [pc, #28]	; (800cc5c <pbuf_alloc+0x1d4>)
 800cc40:	f240 1227 	movw	r2, #295	; 0x127
 800cc44:	490a      	ldr	r1, [pc, #40]	; (800cc70 <pbuf_alloc+0x1e8>)
 800cc46:	4807      	ldr	r0, [pc, #28]	; (800cc64 <pbuf_alloc+0x1dc>)
 800cc48:	f015 f840 	bl	8021ccc <iprintf>
      return NULL;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e001      	b.n	800cc54 <pbuf_alloc+0x1cc>
      break;
 800cc50:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3728      	adds	r7, #40	; 0x28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	080239a0 	.word	0x080239a0
 800cc60:	080239d0 	.word	0x080239d0
 800cc64:	08023a00 	.word	0x08023a00
 800cc68:	08023a28 	.word	0x08023a28
 800cc6c:	08023a5c 	.word	0x08023a5c
 800cc70:	08023a88 	.word	0x08023a88

0800cc74 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af02      	add	r7, sp, #8
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	807b      	strh	r3, [r7, #2]
 800cc80:	4613      	mov	r3, r2
 800cc82:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cc84:	883b      	ldrh	r3, [r7, #0]
 800cc86:	2b41      	cmp	r3, #65	; 0x41
 800cc88:	d009      	beq.n	800cc9e <pbuf_alloc_reference+0x2a>
 800cc8a:	883b      	ldrh	r3, [r7, #0]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d006      	beq.n	800cc9e <pbuf_alloc_reference+0x2a>
 800cc90:	4b0f      	ldr	r3, [pc, #60]	; (800ccd0 <pbuf_alloc_reference+0x5c>)
 800cc92:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cc96:	490f      	ldr	r1, [pc, #60]	; (800ccd4 <pbuf_alloc_reference+0x60>)
 800cc98:	480f      	ldr	r0, [pc, #60]	; (800ccd8 <pbuf_alloc_reference+0x64>)
 800cc9a:	f015 f817 	bl	8021ccc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cc9e:	200d      	movs	r0, #13
 800cca0:	f7ff fac2 	bl	800c228 <memp_malloc>
 800cca4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d101      	bne.n	800ccb0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ccac:	2300      	movs	r3, #0
 800ccae:	e00b      	b.n	800ccc8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ccb0:	8879      	ldrh	r1, [r7, #2]
 800ccb2:	887a      	ldrh	r2, [r7, #2]
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	9301      	str	r3, [sp, #4]
 800ccb8:	883b      	ldrh	r3, [r7, #0]
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	6879      	ldr	r1, [r7, #4]
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f7ff feb7 	bl	800ca34 <pbuf_init_alloced_pbuf>
  return p;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	080239a0 	.word	0x080239a0
 800ccd4:	08023aa4 	.word	0x08023aa4
 800ccd8:	08023a00 	.word	0x08023a00

0800ccdc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b088      	sub	sp, #32
 800cce0:	af02      	add	r7, sp, #8
 800cce2:	607b      	str	r3, [r7, #4]
 800cce4:	4603      	mov	r3, r0
 800cce6:	73fb      	strb	r3, [r7, #15]
 800cce8:	460b      	mov	r3, r1
 800ccea:	81bb      	strh	r3, [r7, #12]
 800ccec:	4613      	mov	r3, r2
 800ccee:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ccf0:	7bfb      	ldrb	r3, [r7, #15]
 800ccf2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ccf4:	8a7b      	ldrh	r3, [r7, #18]
 800ccf6:	3303      	adds	r3, #3
 800ccf8:	f023 0203 	bic.w	r2, r3, #3
 800ccfc:	89bb      	ldrh	r3, [r7, #12]
 800ccfe:	441a      	add	r2, r3
 800cd00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d901      	bls.n	800cd0a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cd06:	2300      	movs	r3, #0
 800cd08:	e018      	b.n	800cd3c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d007      	beq.n	800cd20 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cd10:	8a7b      	ldrh	r3, [r7, #18]
 800cd12:	3303      	adds	r3, #3
 800cd14:	f023 0303 	bic.w	r3, r3, #3
 800cd18:	6a3a      	ldr	r2, [r7, #32]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	617b      	str	r3, [r7, #20]
 800cd1e:	e001      	b.n	800cd24 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	89b9      	ldrh	r1, [r7, #12]
 800cd28:	89ba      	ldrh	r2, [r7, #12]
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	9301      	str	r3, [sp, #4]
 800cd2e:	897b      	ldrh	r3, [r7, #10]
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	460b      	mov	r3, r1
 800cd34:	6979      	ldr	r1, [r7, #20]
 800cd36:	f7ff fe7d 	bl	800ca34 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cd3a:	687b      	ldr	r3, [r7, #4]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3718      	adds	r7, #24
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d106      	bne.n	800cd64 <pbuf_realloc+0x20>
 800cd56:	4b3a      	ldr	r3, [pc, #232]	; (800ce40 <pbuf_realloc+0xfc>)
 800cd58:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cd5c:	4939      	ldr	r1, [pc, #228]	; (800ce44 <pbuf_realloc+0x100>)
 800cd5e:	483a      	ldr	r0, [pc, #232]	; (800ce48 <pbuf_realloc+0x104>)
 800cd60:	f014 ffb4 	bl	8021ccc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	891b      	ldrh	r3, [r3, #8]
 800cd68:	887a      	ldrh	r2, [r7, #2]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d263      	bcs.n	800ce36 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	891a      	ldrh	r2, [r3, #8]
 800cd72:	887b      	ldrh	r3, [r7, #2]
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cd78:	887b      	ldrh	r3, [r7, #2]
 800cd7a:	817b      	strh	r3, [r7, #10]
  q = p;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cd80:	e018      	b.n	800cdb4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	895b      	ldrh	r3, [r3, #10]
 800cd86:	897a      	ldrh	r2, [r7, #10]
 800cd88:	1ad3      	subs	r3, r2, r3
 800cd8a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	891a      	ldrh	r2, [r3, #8]
 800cd90:	893b      	ldrh	r3, [r7, #8]
 800cd92:	1ad3      	subs	r3, r2, r3
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d106      	bne.n	800cdb4 <pbuf_realloc+0x70>
 800cda6:	4b26      	ldr	r3, [pc, #152]	; (800ce40 <pbuf_realloc+0xfc>)
 800cda8:	f240 12af 	movw	r2, #431	; 0x1af
 800cdac:	4927      	ldr	r1, [pc, #156]	; (800ce4c <pbuf_realloc+0x108>)
 800cdae:	4826      	ldr	r0, [pc, #152]	; (800ce48 <pbuf_realloc+0x104>)
 800cdb0:	f014 ff8c 	bl	8021ccc <iprintf>
  while (rem_len > q->len) {
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	895b      	ldrh	r3, [r3, #10]
 800cdb8:	897a      	ldrh	r2, [r7, #10]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d8e1      	bhi.n	800cd82 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	7b1b      	ldrb	r3, [r3, #12]
 800cdc2:	f003 030f 	and.w	r3, r3, #15
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d121      	bne.n	800ce0e <pbuf_realloc+0xca>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	895b      	ldrh	r3, [r3, #10]
 800cdce:	897a      	ldrh	r2, [r7, #10]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d01c      	beq.n	800ce0e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	7b5b      	ldrb	r3, [r3, #13]
 800cdd8:	f003 0302 	and.w	r3, r3, #2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d116      	bne.n	800ce0e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	685a      	ldr	r2, [r3, #4]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	897b      	ldrh	r3, [r7, #10]
 800cdec:	4413      	add	r3, r2
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	68f8      	ldr	r0, [r7, #12]
 800cdf4:	f7fe ff82 	bl	800bcfc <mem_trim>
 800cdf8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d106      	bne.n	800ce0e <pbuf_realloc+0xca>
 800ce00:	4b0f      	ldr	r3, [pc, #60]	; (800ce40 <pbuf_realloc+0xfc>)
 800ce02:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ce06:	4912      	ldr	r1, [pc, #72]	; (800ce50 <pbuf_realloc+0x10c>)
 800ce08:	480f      	ldr	r0, [pc, #60]	; (800ce48 <pbuf_realloc+0x104>)
 800ce0a:	f014 ff5f 	bl	8021ccc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	897a      	ldrh	r2, [r7, #10]
 800ce12:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	895a      	ldrh	r2, [r3, #10]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d004      	beq.n	800ce2e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 f911 	bl	800d050 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	e000      	b.n	800ce38 <pbuf_realloc+0xf4>
    return;
 800ce36:	bf00      	nop

}
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	080239a0 	.word	0x080239a0
 800ce44:	08023ab8 	.word	0x08023ab8
 800ce48:	08023a00 	.word	0x08023a00
 800ce4c:	08023ad0 	.word	0x08023ad0
 800ce50:	08023ae8 	.word	0x08023ae8

0800ce54 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	60f8      	str	r0, [r7, #12]
 800ce5c:	60b9      	str	r1, [r7, #8]
 800ce5e:	4613      	mov	r3, r2
 800ce60:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d106      	bne.n	800ce76 <pbuf_add_header_impl+0x22>
 800ce68:	4b2b      	ldr	r3, [pc, #172]	; (800cf18 <pbuf_add_header_impl+0xc4>)
 800ce6a:	f240 12df 	movw	r2, #479	; 0x1df
 800ce6e:	492b      	ldr	r1, [pc, #172]	; (800cf1c <pbuf_add_header_impl+0xc8>)
 800ce70:	482b      	ldr	r0, [pc, #172]	; (800cf20 <pbuf_add_header_impl+0xcc>)
 800ce72:	f014 ff2b 	bl	8021ccc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d003      	beq.n	800ce84 <pbuf_add_header_impl+0x30>
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce82:	d301      	bcc.n	800ce88 <pbuf_add_header_impl+0x34>
    return 1;
 800ce84:	2301      	movs	r3, #1
 800ce86:	e043      	b.n	800cf10 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d101      	bne.n	800ce92 <pbuf_add_header_impl+0x3e>
    return 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	e03e      	b.n	800cf10 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	891a      	ldrh	r2, [r3, #8]
 800ce9a:	8a7b      	ldrh	r3, [r7, #18]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	8a7a      	ldrh	r2, [r7, #18]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d901      	bls.n	800ceaa <pbuf_add_header_impl+0x56>
    return 1;
 800cea6:	2301      	movs	r3, #1
 800cea8:	e032      	b.n	800cf10 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	7b1b      	ldrb	r3, [r3, #12]
 800ceae:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ceb0:	8a3b      	ldrh	r3, [r7, #16]
 800ceb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00c      	beq.n	800ced4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	685a      	ldr	r2, [r3, #4]
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	425b      	negs	r3, r3
 800cec2:	4413      	add	r3, r2
 800cec4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	3310      	adds	r3, #16
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d20d      	bcs.n	800ceec <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ced0:	2301      	movs	r3, #1
 800ced2:	e01d      	b.n	800cf10 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ced4:	79fb      	ldrb	r3, [r7, #7]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d006      	beq.n	800cee8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	685a      	ldr	r2, [r3, #4]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	425b      	negs	r3, r3
 800cee2:	4413      	add	r3, r2
 800cee4:	617b      	str	r3, [r7, #20]
 800cee6:	e001      	b.n	800ceec <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cee8:	2301      	movs	r3, #1
 800ceea:	e011      	b.n	800cf10 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	697a      	ldr	r2, [r7, #20]
 800cef0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	895a      	ldrh	r2, [r3, #10]
 800cef6:	8a7b      	ldrh	r3, [r7, #18]
 800cef8:	4413      	add	r3, r2
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	891a      	ldrh	r2, [r3, #8]
 800cf04:	8a7b      	ldrh	r3, [r7, #18]
 800cf06:	4413      	add	r3, r2
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	811a      	strh	r2, [r3, #8]


  return 0;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	080239a0 	.word	0x080239a0
 800cf1c:	08023b04 	.word	0x08023b04
 800cf20:	08023a00 	.word	0x08023a00

0800cf24 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cf2e:	2200      	movs	r2, #0
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff ff8e 	bl	800ce54 <pbuf_add_header_impl>
 800cf38:	4603      	mov	r3, r0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
	...

0800cf44 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b084      	sub	sp, #16
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d106      	bne.n	800cf62 <pbuf_remove_header+0x1e>
 800cf54:	4b20      	ldr	r3, [pc, #128]	; (800cfd8 <pbuf_remove_header+0x94>)
 800cf56:	f240 224b 	movw	r2, #587	; 0x24b
 800cf5a:	4920      	ldr	r1, [pc, #128]	; (800cfdc <pbuf_remove_header+0x98>)
 800cf5c:	4820      	ldr	r0, [pc, #128]	; (800cfe0 <pbuf_remove_header+0x9c>)
 800cf5e:	f014 feb5 	bl	8021ccc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d003      	beq.n	800cf70 <pbuf_remove_header+0x2c>
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf6e:	d301      	bcc.n	800cf74 <pbuf_remove_header+0x30>
    return 1;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e02c      	b.n	800cfce <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <pbuf_remove_header+0x3a>
    return 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	e027      	b.n	800cfce <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	895b      	ldrh	r3, [r3, #10]
 800cf86:	89fa      	ldrh	r2, [r7, #14]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d908      	bls.n	800cf9e <pbuf_remove_header+0x5a>
 800cf8c:	4b12      	ldr	r3, [pc, #72]	; (800cfd8 <pbuf_remove_header+0x94>)
 800cf8e:	f240 2255 	movw	r2, #597	; 0x255
 800cf92:	4914      	ldr	r1, [pc, #80]	; (800cfe4 <pbuf_remove_header+0xa0>)
 800cf94:	4812      	ldr	r0, [pc, #72]	; (800cfe0 <pbuf_remove_header+0x9c>)
 800cf96:	f014 fe99 	bl	8021ccc <iprintf>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e017      	b.n	800cfce <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	441a      	add	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	895a      	ldrh	r2, [r3, #10]
 800cfb4:	89fb      	ldrh	r3, [r7, #14]
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	891a      	ldrh	r2, [r3, #8]
 800cfc2:	89fb      	ldrh	r3, [r7, #14]
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	080239a0 	.word	0x080239a0
 800cfdc:	08023b04 	.word	0x08023b04
 800cfe0:	08023a00 	.word	0x08023a00
 800cfe4:	08023b10 	.word	0x08023b10

0800cfe8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	460b      	mov	r3, r1
 800cff2:	807b      	strh	r3, [r7, #2]
 800cff4:	4613      	mov	r3, r2
 800cff6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cff8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	da08      	bge.n	800d012 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d000:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d004:	425b      	negs	r3, r3
 800d006:	4619      	mov	r1, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7ff ff9b 	bl	800cf44 <pbuf_remove_header>
 800d00e:	4603      	mov	r3, r0
 800d010:	e007      	b.n	800d022 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d012:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d016:	787a      	ldrb	r2, [r7, #1]
 800d018:	4619      	mov	r1, r3
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7ff ff1a 	bl	800ce54 <pbuf_add_header_impl>
 800d020:	4603      	mov	r3, r0
  }
}
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	460b      	mov	r3, r1
 800d034:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d036:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d03a:	2201      	movs	r2, #1
 800d03c:	4619      	mov	r1, r3
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7ff ffd2 	bl	800cfe8 <pbuf_header_impl>
 800d044:	4603      	mov	r3, r0
}
 800d046:	4618      	mov	r0, r3
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
	...

0800d050 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b088      	sub	sp, #32
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d10b      	bne.n	800d076 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d106      	bne.n	800d072 <pbuf_free+0x22>
 800d064:	4b3b      	ldr	r3, [pc, #236]	; (800d154 <pbuf_free+0x104>)
 800d066:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d06a:	493b      	ldr	r1, [pc, #236]	; (800d158 <pbuf_free+0x108>)
 800d06c:	483b      	ldr	r0, [pc, #236]	; (800d15c <pbuf_free+0x10c>)
 800d06e:	f014 fe2d 	bl	8021ccc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d072:	2300      	movs	r3, #0
 800d074:	e069      	b.n	800d14a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d07a:	e062      	b.n	800d142 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d07c:	f009 fcd4 	bl	8016a28 <sys_arch_protect>
 800d080:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7b9b      	ldrb	r3, [r3, #14]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d106      	bne.n	800d098 <pbuf_free+0x48>
 800d08a:	4b32      	ldr	r3, [pc, #200]	; (800d154 <pbuf_free+0x104>)
 800d08c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d090:	4933      	ldr	r1, [pc, #204]	; (800d160 <pbuf_free+0x110>)
 800d092:	4832      	ldr	r0, [pc, #200]	; (800d15c <pbuf_free+0x10c>)
 800d094:	f014 fe1a 	bl	8021ccc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	7b9b      	ldrb	r3, [r3, #14]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	b2da      	uxtb	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	739a      	strb	r2, [r3, #14]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	7b9b      	ldrb	r3, [r3, #14]
 800d0a8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d0aa:	69b8      	ldr	r0, [r7, #24]
 800d0ac:	f009 fcca 	bl	8016a44 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d143      	bne.n	800d13e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	7b1b      	ldrb	r3, [r3, #12]
 800d0c0:	f003 030f 	and.w	r3, r3, #15
 800d0c4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	7b5b      	ldrb	r3, [r3, #13]
 800d0ca:	f003 0302 	and.w	r3, r3, #2
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d011      	beq.n	800d0f6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	691b      	ldr	r3, [r3, #16]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d106      	bne.n	800d0ec <pbuf_free+0x9c>
 800d0de:	4b1d      	ldr	r3, [pc, #116]	; (800d154 <pbuf_free+0x104>)
 800d0e0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d0e4:	491f      	ldr	r1, [pc, #124]	; (800d164 <pbuf_free+0x114>)
 800d0e6:	481d      	ldr	r0, [pc, #116]	; (800d15c <pbuf_free+0x10c>)
 800d0e8:	f014 fdf0 	bl	8021ccc <iprintf>
        pc->custom_free_function(p);
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	4798      	blx	r3
 800d0f4:	e01d      	b.n	800d132 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d104      	bne.n	800d106 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d0fc:	6879      	ldr	r1, [r7, #4]
 800d0fe:	200e      	movs	r0, #14
 800d100:	f7ff f8e4 	bl	800c2cc <memp_free>
 800d104:	e015      	b.n	800d132 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d104      	bne.n	800d116 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d10c:	6879      	ldr	r1, [r7, #4]
 800d10e:	200d      	movs	r0, #13
 800d110:	f7ff f8dc 	bl	800c2cc <memp_free>
 800d114:	e00d      	b.n	800d132 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d116:	7bfb      	ldrb	r3, [r7, #15]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d103      	bne.n	800d124 <pbuf_free+0xd4>
          mem_free(p);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7fe fd5d 	bl	800bbdc <mem_free>
 800d122:	e006      	b.n	800d132 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d124:	4b0b      	ldr	r3, [pc, #44]	; (800d154 <pbuf_free+0x104>)
 800d126:	f240 320f 	movw	r2, #783	; 0x30f
 800d12a:	490f      	ldr	r1, [pc, #60]	; (800d168 <pbuf_free+0x118>)
 800d12c:	480b      	ldr	r0, [pc, #44]	; (800d15c <pbuf_free+0x10c>)
 800d12e:	f014 fdcd 	bl	8021ccc <iprintf>
        }
      }
      count++;
 800d132:	7ffb      	ldrb	r3, [r7, #31]
 800d134:	3301      	adds	r3, #1
 800d136:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	607b      	str	r3, [r7, #4]
 800d13c:	e001      	b.n	800d142 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d199      	bne.n	800d07c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d148:	7ffb      	ldrb	r3, [r7, #31]
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3720      	adds	r7, #32
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	080239a0 	.word	0x080239a0
 800d158:	08023b04 	.word	0x08023b04
 800d15c:	08023a00 	.word	0x08023a00
 800d160:	08023b30 	.word	0x08023b30
 800d164:	08023b48 	.word	0x08023b48
 800d168:	08023b6c 	.word	0x08023b6c

0800d16c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b085      	sub	sp, #20
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d174:	2300      	movs	r3, #0
 800d176:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d178:	e005      	b.n	800d186 <pbuf_clen+0x1a>
    ++len;
 800d17a:	89fb      	ldrh	r3, [r7, #14]
 800d17c:	3301      	adds	r3, #1
 800d17e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1f6      	bne.n	800d17a <pbuf_clen+0xe>
  }
  return len;
 800d18c:	89fb      	ldrh	r3, [r7, #14]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
	...

0800d19c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d016      	beq.n	800d1d8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d1aa:	f009 fc3d 	bl	8016a28 <sys_arch_protect>
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	7b9b      	ldrb	r3, [r3, #14]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	739a      	strb	r2, [r3, #14]
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f009 fc41 	bl	8016a44 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	7b9b      	ldrb	r3, [r3, #14]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d106      	bne.n	800d1d8 <pbuf_ref+0x3c>
 800d1ca:	4b05      	ldr	r3, [pc, #20]	; (800d1e0 <pbuf_ref+0x44>)
 800d1cc:	f240 3242 	movw	r2, #834	; 0x342
 800d1d0:	4904      	ldr	r1, [pc, #16]	; (800d1e4 <pbuf_ref+0x48>)
 800d1d2:	4805      	ldr	r0, [pc, #20]	; (800d1e8 <pbuf_ref+0x4c>)
 800d1d4:	f014 fd7a 	bl	8021ccc <iprintf>
  }
}
 800d1d8:	bf00      	nop
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	080239a0 	.word	0x080239a0
 800d1e4:	08023b80 	.word	0x08023b80
 800d1e8:	08023a00 	.word	0x08023a00

0800d1ec <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b084      	sub	sp, #16
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d002      	beq.n	800d202 <pbuf_cat+0x16>
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d107      	bne.n	800d212 <pbuf_cat+0x26>
 800d202:	4b20      	ldr	r3, [pc, #128]	; (800d284 <pbuf_cat+0x98>)
 800d204:	f240 3259 	movw	r2, #857	; 0x359
 800d208:	491f      	ldr	r1, [pc, #124]	; (800d288 <pbuf_cat+0x9c>)
 800d20a:	4820      	ldr	r0, [pc, #128]	; (800d28c <pbuf_cat+0xa0>)
 800d20c:	f014 fd5e 	bl	8021ccc <iprintf>
 800d210:	e034      	b.n	800d27c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	60fb      	str	r3, [r7, #12]
 800d216:	e00a      	b.n	800d22e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	891a      	ldrh	r2, [r3, #8]
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	891b      	ldrh	r3, [r3, #8]
 800d220:	4413      	add	r3, r2
 800d222:	b29a      	uxth	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	60fb      	str	r3, [r7, #12]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d1f0      	bne.n	800d218 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	891a      	ldrh	r2, [r3, #8]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	895b      	ldrh	r3, [r3, #10]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d006      	beq.n	800d250 <pbuf_cat+0x64>
 800d242:	4b10      	ldr	r3, [pc, #64]	; (800d284 <pbuf_cat+0x98>)
 800d244:	f240 3262 	movw	r2, #866	; 0x362
 800d248:	4911      	ldr	r1, [pc, #68]	; (800d290 <pbuf_cat+0xa4>)
 800d24a:	4810      	ldr	r0, [pc, #64]	; (800d28c <pbuf_cat+0xa0>)
 800d24c:	f014 fd3e 	bl	8021ccc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d006      	beq.n	800d266 <pbuf_cat+0x7a>
 800d258:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <pbuf_cat+0x98>)
 800d25a:	f240 3263 	movw	r2, #867	; 0x363
 800d25e:	490d      	ldr	r1, [pc, #52]	; (800d294 <pbuf_cat+0xa8>)
 800d260:	480a      	ldr	r0, [pc, #40]	; (800d28c <pbuf_cat+0xa0>)
 800d262:	f014 fd33 	bl	8021ccc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	891a      	ldrh	r2, [r3, #8]
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	891b      	ldrh	r3, [r3, #8]
 800d26e:	4413      	add	r3, r2
 800d270:	b29a      	uxth	r2, r3
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	683a      	ldr	r2, [r7, #0]
 800d27a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	080239a0 	.word	0x080239a0
 800d288:	08023b94 	.word	0x08023b94
 800d28c:	08023a00 	.word	0x08023a00
 800d290:	08023bcc 	.word	0x08023bcc
 800d294:	08023bfc 	.word	0x08023bfc

0800d298 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d2a2:	6839      	ldr	r1, [r7, #0]
 800d2a4:	6878      	ldr	r0, [r7, #4]
 800d2a6:	f7ff ffa1 	bl	800d1ec <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d2aa:	6838      	ldr	r0, [r7, #0]
 800d2ac:	f7ff ff76 	bl	800d19c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d2b0:	bf00      	nop
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	617b      	str	r3, [r7, #20]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d008      	beq.n	800d2e2 <pbuf_copy+0x2a>
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d005      	beq.n	800d2e2 <pbuf_copy+0x2a>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	891a      	ldrh	r2, [r3, #8]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	891b      	ldrh	r3, [r3, #8]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d209      	bcs.n	800d2f6 <pbuf_copy+0x3e>
 800d2e2:	4b57      	ldr	r3, [pc, #348]	; (800d440 <pbuf_copy+0x188>)
 800d2e4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d2e8:	4956      	ldr	r1, [pc, #344]	; (800d444 <pbuf_copy+0x18c>)
 800d2ea:	4857      	ldr	r0, [pc, #348]	; (800d448 <pbuf_copy+0x190>)
 800d2ec:	f014 fcee 	bl	8021ccc <iprintf>
 800d2f0:	f06f 030f 	mvn.w	r3, #15
 800d2f4:	e09f      	b.n	800d436 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	895b      	ldrh	r3, [r3, #10]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	1ad2      	subs	r2, r2, r3
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	895b      	ldrh	r3, [r3, #10]
 800d304:	4619      	mov	r1, r3
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	1acb      	subs	r3, r1, r3
 800d30a:	429a      	cmp	r2, r3
 800d30c:	d306      	bcc.n	800d31c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	895b      	ldrh	r3, [r3, #10]
 800d312:	461a      	mov	r2, r3
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	60fb      	str	r3, [r7, #12]
 800d31a:	e005      	b.n	800d328 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	895b      	ldrh	r3, [r3, #10]
 800d320:	461a      	mov	r2, r3
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685a      	ldr	r2, [r3, #4]
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	18d0      	adds	r0, r2, r3
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	4413      	add	r3, r2
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	4619      	mov	r1, r3
 800d33c:	f014 fba0 	bl	8021a80 <memcpy>
    offset_to += len;
 800d340:	697a      	ldr	r2, [r7, #20]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	4413      	add	r3, r2
 800d346:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d348:	693a      	ldr	r2, [r7, #16]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	4413      	add	r3, r2
 800d34e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	895b      	ldrh	r3, [r3, #10]
 800d354:	461a      	mov	r2, r3
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	4293      	cmp	r3, r2
 800d35a:	d906      	bls.n	800d36a <pbuf_copy+0xb2>
 800d35c:	4b38      	ldr	r3, [pc, #224]	; (800d440 <pbuf_copy+0x188>)
 800d35e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d362:	493a      	ldr	r1, [pc, #232]	; (800d44c <pbuf_copy+0x194>)
 800d364:	4838      	ldr	r0, [pc, #224]	; (800d448 <pbuf_copy+0x190>)
 800d366:	f014 fcb1 	bl	8021ccc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	895b      	ldrh	r3, [r3, #10]
 800d36e:	461a      	mov	r2, r3
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	4293      	cmp	r3, r2
 800d374:	d906      	bls.n	800d384 <pbuf_copy+0xcc>
 800d376:	4b32      	ldr	r3, [pc, #200]	; (800d440 <pbuf_copy+0x188>)
 800d378:	f240 32da 	movw	r2, #986	; 0x3da
 800d37c:	4934      	ldr	r1, [pc, #208]	; (800d450 <pbuf_copy+0x198>)
 800d37e:	4832      	ldr	r0, [pc, #200]	; (800d448 <pbuf_copy+0x190>)
 800d380:	f014 fca4 	bl	8021ccc <iprintf>
    if (offset_from >= p_from->len) {
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	895b      	ldrh	r3, [r3, #10]
 800d388:	461a      	mov	r2, r3
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d304      	bcc.n	800d39a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d390:	2300      	movs	r3, #0
 800d392:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	895b      	ldrh	r3, [r3, #10]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	4293      	cmp	r3, r2
 800d3a4:	d114      	bne.n	800d3d0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10c      	bne.n	800d3d0 <pbuf_copy+0x118>
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d009      	beq.n	800d3d0 <pbuf_copy+0x118>
 800d3bc:	4b20      	ldr	r3, [pc, #128]	; (800d440 <pbuf_copy+0x188>)
 800d3be:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d3c2:	4924      	ldr	r1, [pc, #144]	; (800d454 <pbuf_copy+0x19c>)
 800d3c4:	4820      	ldr	r0, [pc, #128]	; (800d448 <pbuf_copy+0x190>)
 800d3c6:	f014 fc81 	bl	8021ccc <iprintf>
 800d3ca:	f06f 030f 	mvn.w	r3, #15
 800d3ce:	e032      	b.n	800d436 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d013      	beq.n	800d3fe <pbuf_copy+0x146>
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	895a      	ldrh	r2, [r3, #10]
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	891b      	ldrh	r3, [r3, #8]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d10d      	bne.n	800d3fe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d009      	beq.n	800d3fe <pbuf_copy+0x146>
 800d3ea:	4b15      	ldr	r3, [pc, #84]	; (800d440 <pbuf_copy+0x188>)
 800d3ec:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d3f0:	4919      	ldr	r1, [pc, #100]	; (800d458 <pbuf_copy+0x1a0>)
 800d3f2:	4815      	ldr	r0, [pc, #84]	; (800d448 <pbuf_copy+0x190>)
 800d3f4:	f014 fc6a 	bl	8021ccc <iprintf>
 800d3f8:	f06f 0305 	mvn.w	r3, #5
 800d3fc:	e01b      	b.n	800d436 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d013      	beq.n	800d42c <pbuf_copy+0x174>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	895a      	ldrh	r2, [r3, #10]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	891b      	ldrh	r3, [r3, #8]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d10d      	bne.n	800d42c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d009      	beq.n	800d42c <pbuf_copy+0x174>
 800d418:	4b09      	ldr	r3, [pc, #36]	; (800d440 <pbuf_copy+0x188>)
 800d41a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d41e:	490e      	ldr	r1, [pc, #56]	; (800d458 <pbuf_copy+0x1a0>)
 800d420:	4809      	ldr	r0, [pc, #36]	; (800d448 <pbuf_copy+0x190>)
 800d422:	f014 fc53 	bl	8021ccc <iprintf>
 800d426:	f06f 0305 	mvn.w	r3, #5
 800d42a:	e004      	b.n	800d436 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f47f af61 	bne.w	800d2f6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	080239a0 	.word	0x080239a0
 800d444:	08023c48 	.word	0x08023c48
 800d448:	08023a00 	.word	0x08023a00
 800d44c:	08023c78 	.word	0x08023c78
 800d450:	08023c90 	.word	0x08023c90
 800d454:	08023cac 	.word	0x08023cac
 800d458:	08023cbc 	.word	0x08023cbc

0800d45c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b088      	sub	sp, #32
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	4611      	mov	r1, r2
 800d468:	461a      	mov	r2, r3
 800d46a:	460b      	mov	r3, r1
 800d46c:	80fb      	strh	r3, [r7, #6]
 800d46e:	4613      	mov	r3, r2
 800d470:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d476:	2300      	movs	r3, #0
 800d478:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d108      	bne.n	800d492 <pbuf_copy_partial+0x36>
 800d480:	4b2b      	ldr	r3, [pc, #172]	; (800d530 <pbuf_copy_partial+0xd4>)
 800d482:	f240 420a 	movw	r2, #1034	; 0x40a
 800d486:	492b      	ldr	r1, [pc, #172]	; (800d534 <pbuf_copy_partial+0xd8>)
 800d488:	482b      	ldr	r0, [pc, #172]	; (800d538 <pbuf_copy_partial+0xdc>)
 800d48a:	f014 fc1f 	bl	8021ccc <iprintf>
 800d48e:	2300      	movs	r3, #0
 800d490:	e04a      	b.n	800d528 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d108      	bne.n	800d4aa <pbuf_copy_partial+0x4e>
 800d498:	4b25      	ldr	r3, [pc, #148]	; (800d530 <pbuf_copy_partial+0xd4>)
 800d49a:	f240 420b 	movw	r2, #1035	; 0x40b
 800d49e:	4927      	ldr	r1, [pc, #156]	; (800d53c <pbuf_copy_partial+0xe0>)
 800d4a0:	4825      	ldr	r0, [pc, #148]	; (800d538 <pbuf_copy_partial+0xdc>)
 800d4a2:	f014 fc13 	bl	8021ccc <iprintf>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e03e      	b.n	800d528 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	61fb      	str	r3, [r7, #28]
 800d4ae:	e034      	b.n	800d51a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d4b0:	88bb      	ldrh	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00a      	beq.n	800d4cc <pbuf_copy_partial+0x70>
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	895b      	ldrh	r3, [r3, #10]
 800d4ba:	88ba      	ldrh	r2, [r7, #4]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d305      	bcc.n	800d4cc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	895b      	ldrh	r3, [r3, #10]
 800d4c4:	88ba      	ldrh	r2, [r7, #4]
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	80bb      	strh	r3, [r7, #4]
 800d4ca:	e023      	b.n	800d514 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	895a      	ldrh	r2, [r3, #10]
 800d4d0:	88bb      	ldrh	r3, [r7, #4]
 800d4d2:	1ad3      	subs	r3, r2, r3
 800d4d4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d4d6:	8b3a      	ldrh	r2, [r7, #24]
 800d4d8:	88fb      	ldrh	r3, [r7, #6]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d901      	bls.n	800d4e2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d4de:	88fb      	ldrh	r3, [r7, #6]
 800d4e0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d4e2:	8b7b      	ldrh	r3, [r7, #26]
 800d4e4:	68ba      	ldr	r2, [r7, #8]
 800d4e6:	18d0      	adds	r0, r2, r3
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	88bb      	ldrh	r3, [r7, #4]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	8b3a      	ldrh	r2, [r7, #24]
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	f014 fac4 	bl	8021a80 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d4f8:	8afa      	ldrh	r2, [r7, #22]
 800d4fa:	8b3b      	ldrh	r3, [r7, #24]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d500:	8b7a      	ldrh	r2, [r7, #26]
 800d502:	8b3b      	ldrh	r3, [r7, #24]
 800d504:	4413      	add	r3, r2
 800d506:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d508:	88fa      	ldrh	r2, [r7, #6]
 800d50a:	8b3b      	ldrh	r3, [r7, #24]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d510:	2300      	movs	r3, #0
 800d512:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	61fb      	str	r3, [r7, #28]
 800d51a:	88fb      	ldrh	r3, [r7, #6]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <pbuf_copy_partial+0xca>
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d1c4      	bne.n	800d4b0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d526:	8afb      	ldrh	r3, [r7, #22]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3720      	adds	r7, #32
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	080239a0 	.word	0x080239a0
 800d534:	08023ce8 	.word	0x08023ce8
 800d538:	08023a00 	.word	0x08023a00
 800d53c:	08023d08 	.word	0x08023d08

0800d540 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d540:	b480      	push	{r7}
 800d542:	b087      	sub	sp, #28
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	460b      	mov	r3, r1
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800d54e:	897b      	ldrh	r3, [r7, #10]
 800d550:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800d556:	e007      	b.n	800d568 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	895b      	ldrh	r3, [r3, #10]
 800d55c:	8afa      	ldrh	r2, [r7, #22]
 800d55e:	1ad3      	subs	r3, r2, r3
 800d560:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d004      	beq.n	800d578 <pbuf_skip_const+0x38>
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	895b      	ldrh	r3, [r3, #10]
 800d572:	8afa      	ldrh	r2, [r7, #22]
 800d574:	429a      	cmp	r2, r3
 800d576:	d2ef      	bcs.n	800d558 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	8afa      	ldrh	r2, [r7, #22]
 800d582:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800d584:	693b      	ldr	r3, [r7, #16]
}
 800d586:	4618      	mov	r0, r3
 800d588:	371c      	adds	r7, #28
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr

0800d592 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b086      	sub	sp, #24
 800d596:	af00      	add	r7, sp, #0
 800d598:	60f8      	str	r0, [r7, #12]
 800d59a:	460b      	mov	r3, r1
 800d59c:	607a      	str	r2, [r7, #4]
 800d59e:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800d5a0:	897b      	ldrh	r3, [r7, #10]
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f7ff ffca 	bl	800d540 <pbuf_skip_const>
 800d5ac:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800d5ae:	697b      	ldr	r3, [r7, #20]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3718      	adds	r7, #24
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b088      	sub	sp, #32
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800d5c6:	88fb      	ldrh	r3, [r7, #6]
 800d5c8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d109      	bne.n	800d5e8 <pbuf_take+0x30>
 800d5d4:	4b3a      	ldr	r3, [pc, #232]	; (800d6c0 <pbuf_take+0x108>)
 800d5d6:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800d5da:	493a      	ldr	r1, [pc, #232]	; (800d6c4 <pbuf_take+0x10c>)
 800d5dc:	483a      	ldr	r0, [pc, #232]	; (800d6c8 <pbuf_take+0x110>)
 800d5de:	f014 fb75 	bl	8021ccc <iprintf>
 800d5e2:	f06f 030f 	mvn.w	r3, #15
 800d5e6:	e067      	b.n	800d6b8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d109      	bne.n	800d602 <pbuf_take+0x4a>
 800d5ee:	4b34      	ldr	r3, [pc, #208]	; (800d6c0 <pbuf_take+0x108>)
 800d5f0:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800d5f4:	4935      	ldr	r1, [pc, #212]	; (800d6cc <pbuf_take+0x114>)
 800d5f6:	4834      	ldr	r0, [pc, #208]	; (800d6c8 <pbuf_take+0x110>)
 800d5f8:	f014 fb68 	bl	8021ccc <iprintf>
 800d5fc:	f06f 030f 	mvn.w	r3, #15
 800d600:	e05a      	b.n	800d6b8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	891b      	ldrh	r3, [r3, #8]
 800d606:	88fa      	ldrh	r2, [r7, #6]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d909      	bls.n	800d620 <pbuf_take+0x68>
 800d60c:	4b2c      	ldr	r3, [pc, #176]	; (800d6c0 <pbuf_take+0x108>)
 800d60e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800d612:	492f      	ldr	r1, [pc, #188]	; (800d6d0 <pbuf_take+0x118>)
 800d614:	482c      	ldr	r0, [pc, #176]	; (800d6c8 <pbuf_take+0x110>)
 800d616:	f014 fb59 	bl	8021ccc <iprintf>
 800d61a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d61e:	e04b      	b.n	800d6b8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d007      	beq.n	800d636 <pbuf_take+0x7e>
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d004      	beq.n	800d636 <pbuf_take+0x7e>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	891b      	ldrh	r3, [r3, #8]
 800d630:	88fa      	ldrh	r2, [r7, #6]
 800d632:	429a      	cmp	r2, r3
 800d634:	d902      	bls.n	800d63c <pbuf_take+0x84>
    return ERR_ARG;
 800d636:	f06f 030f 	mvn.w	r3, #15
 800d63a:	e03d      	b.n	800d6b8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	61fb      	str	r3, [r7, #28]
 800d640:	e028      	b.n	800d694 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d106      	bne.n	800d656 <pbuf_take+0x9e>
 800d648:	4b1d      	ldr	r3, [pc, #116]	; (800d6c0 <pbuf_take+0x108>)
 800d64a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d64e:	4921      	ldr	r1, [pc, #132]	; (800d6d4 <pbuf_take+0x11c>)
 800d650:	481d      	ldr	r0, [pc, #116]	; (800d6c8 <pbuf_take+0x110>)
 800d652:	f014 fb3b 	bl	8021ccc <iprintf>
    buf_copy_len = total_copy_len;
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	895b      	ldrh	r3, [r3, #10]
 800d65e:	461a      	mov	r2, r3
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	4293      	cmp	r3, r2
 800d664:	d902      	bls.n	800d66c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	895b      	ldrh	r3, [r3, #10]
 800d66a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	6858      	ldr	r0, [r3, #4]
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	4413      	add	r3, r2
 800d676:	69ba      	ldr	r2, [r7, #24]
 800d678:	4619      	mov	r1, r3
 800d67a:	f014 fa01 	bl	8021a80 <memcpy>
    total_copy_len -= buf_copy_len;
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	1ad3      	subs	r3, r2, r3
 800d684:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800d686:	693a      	ldr	r2, [r7, #16]
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	4413      	add	r3, r2
 800d68c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	61fb      	str	r3, [r7, #28]
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1d3      	bne.n	800d642 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d103      	bne.n	800d6a8 <pbuf_take+0xf0>
 800d6a0:	88fb      	ldrh	r3, [r7, #6]
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d006      	beq.n	800d6b6 <pbuf_take+0xfe>
 800d6a8:	4b05      	ldr	r3, [pc, #20]	; (800d6c0 <pbuf_take+0x108>)
 800d6aa:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800d6ae:	490a      	ldr	r1, [pc, #40]	; (800d6d8 <pbuf_take+0x120>)
 800d6b0:	4805      	ldr	r0, [pc, #20]	; (800d6c8 <pbuf_take+0x110>)
 800d6b2:	f014 fb0b 	bl	8021ccc <iprintf>
  return ERR_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3720      	adds	r7, #32
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	080239a0 	.word	0x080239a0
 800d6c4:	08023d78 	.word	0x08023d78
 800d6c8:	08023a00 	.word	0x08023a00
 800d6cc:	08023d90 	.word	0x08023d90
 800d6d0:	08023dac 	.word	0x08023dac
 800d6d4:	08023dcc 	.word	0x08023dcc
 800d6d8:	08023de4 	.word	0x08023de4

0800d6dc <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b088      	sub	sp, #32
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	4611      	mov	r1, r2
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	80fb      	strh	r3, [r7, #6]
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800d6f2:	f107 0210 	add.w	r2, r7, #16
 800d6f6:	88bb      	ldrh	r3, [r7, #4]
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	68f8      	ldr	r0, [r7, #12]
 800d6fc:	f7ff ff49 	bl	800d592 <pbuf_skip>
 800d700:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d047      	beq.n	800d798 <pbuf_take_at+0xbc>
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	891b      	ldrh	r3, [r3, #8]
 800d70c:	461a      	mov	r2, r3
 800d70e:	8a3b      	ldrh	r3, [r7, #16]
 800d710:	4619      	mov	r1, r3
 800d712:	88fb      	ldrh	r3, [r7, #6]
 800d714:	440b      	add	r3, r1
 800d716:	429a      	cmp	r2, r3
 800d718:	db3e      	blt.n	800d798 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800d71a:	88fb      	ldrh	r3, [r7, #6]
 800d71c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	895a      	ldrh	r2, [r3, #10]
 800d726:	8a3b      	ldrh	r3, [r7, #16]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d806      	bhi.n	800d73a <pbuf_take_at+0x5e>
 800d72c:	4b1d      	ldr	r3, [pc, #116]	; (800d7a4 <pbuf_take_at+0xc8>)
 800d72e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d732:	491d      	ldr	r1, [pc, #116]	; (800d7a8 <pbuf_take_at+0xcc>)
 800d734:	481d      	ldr	r0, [pc, #116]	; (800d7ac <pbuf_take_at+0xd0>)
 800d736:	f014 fac9 	bl	8021ccc <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	895b      	ldrh	r3, [r3, #10]
 800d73e:	461a      	mov	r2, r3
 800d740:	8a3b      	ldrh	r3, [r7, #16]
 800d742:	1ad2      	subs	r2, r2, r3
 800d744:	88fb      	ldrh	r3, [r7, #6]
 800d746:	429a      	cmp	r2, r3
 800d748:	da05      	bge.n	800d756 <pbuf_take_at+0x7a>
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	895a      	ldrh	r2, [r3, #10]
 800d74e:	8a3b      	ldrh	r3, [r7, #16]
 800d750:	1ad3      	subs	r3, r2, r3
 800d752:	b29b      	uxth	r3, r3
 800d754:	e000      	b.n	800d758 <pbuf_take_at+0x7c>
 800d756:	88fb      	ldrh	r3, [r7, #6]
 800d758:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	8a3a      	ldrh	r2, [r7, #16]
 800d760:	4413      	add	r3, r2
 800d762:	8a7a      	ldrh	r2, [r7, #18]
 800d764:	68b9      	ldr	r1, [r7, #8]
 800d766:	4618      	mov	r0, r3
 800d768:	f014 f98a 	bl	8021a80 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800d76c:	8b7a      	ldrh	r2, [r7, #26]
 800d76e:	8a7b      	ldrh	r3, [r7, #18]
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800d774:	8a7b      	ldrh	r3, [r7, #18]
 800d776:	697a      	ldr	r2, [r7, #20]
 800d778:	4413      	add	r3, r2
 800d77a:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800d77c:	8b7b      	ldrh	r3, [r7, #26]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d008      	beq.n	800d794 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	8b7a      	ldrh	r2, [r7, #26]
 800d788:	6979      	ldr	r1, [r7, #20]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7ff ff14 	bl	800d5b8 <pbuf_take>
 800d790:	4603      	mov	r3, r0
 800d792:	e003      	b.n	800d79c <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	e001      	b.n	800d79c <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800d798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3720      	adds	r7, #32
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	080239a0 	.word	0x080239a0
 800d7a8:	08023dfc 	.word	0x08023dfc
 800d7ac:	08023a00 	.word	0x08023a00

0800d7b0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	603a      	str	r2, [r7, #0]
 800d7ba:	71fb      	strb	r3, [r7, #7]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	8919      	ldrh	r1, [r3, #8]
 800d7c4:	88ba      	ldrh	r2, [r7, #4]
 800d7c6:	79fb      	ldrb	r3, [r7, #7]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7ff f95d 	bl	800ca88 <pbuf_alloc>
 800d7ce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d101      	bne.n	800d7da <pbuf_clone+0x2a>
    return NULL;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	e011      	b.n	800d7fe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d7da:	6839      	ldr	r1, [r7, #0]
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f7ff fd6b 	bl	800d2b8 <pbuf_copy>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d7e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d006      	beq.n	800d7fc <pbuf_clone+0x4c>
 800d7ee:	4b06      	ldr	r3, [pc, #24]	; (800d808 <pbuf_clone+0x58>)
 800d7f0:	f240 5224 	movw	r2, #1316	; 0x524
 800d7f4:	4905      	ldr	r1, [pc, #20]	; (800d80c <pbuf_clone+0x5c>)
 800d7f6:	4806      	ldr	r0, [pc, #24]	; (800d810 <pbuf_clone+0x60>)
 800d7f8:	f014 fa68 	bl	8021ccc <iprintf>
  return q;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}
 800d806:	bf00      	nop
 800d808:	080239a0 	.word	0x080239a0
 800d80c:	08023e14 	.word	0x08023e14
 800d810:	08023a00 	.word	0x08023a00

0800d814 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	460b      	mov	r3, r1
 800d81e:	807b      	strh	r3, [r7, #2]
 800d820:	4613      	mov	r3, r2
 800d822:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800d824:	f107 020a 	add.w	r2, r7, #10
 800d828:	887b      	ldrh	r3, [r7, #2]
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff feb0 	bl	800d592 <pbuf_skip>
 800d832:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d00a      	beq.n	800d850 <pbuf_put_at+0x3c>
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	895a      	ldrh	r2, [r3, #10]
 800d83e:	897b      	ldrh	r3, [r7, #10]
 800d840:	429a      	cmp	r2, r3
 800d842:	d905      	bls.n	800d850 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	897a      	ldrh	r2, [r7, #10]
 800d84a:	4413      	add	r3, r2
 800d84c:	787a      	ldrb	r2, [r7, #1]
 800d84e:	701a      	strb	r2, [r3, #0]
  }
}
 800d850:	bf00      	nop
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  if (ms > 0) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d016      	beq.n	800d894 <sys_msleep+0x3c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
 800d866:	f107 0308 	add.w	r3, r7, #8
 800d86a:	2100      	movs	r1, #0
 800d86c:	4618      	mov	r0, r3
 800d86e:	f008 ffed 	bl	801684c <sys_sem_new>
 800d872:	4603      	mov	r3, r0
 800d874:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d10a      	bne.n	800d894 <sys_msleep+0x3c>
      sys_arch_sem_wait(&delaysem, ms);
 800d87e:	f107 0308 	add.w	r3, r7, #8
 800d882:	6879      	ldr	r1, [r7, #4]
 800d884:	4618      	mov	r0, r3
 800d886:	f009 f806 	bl	8016896 <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
 800d88a:	f107 0308 	add.w	r3, r7, #8
 800d88e:	4618      	mov	r0, r3
 800d890:	f009 f83f 	bl	8016912 <sys_sem_free>
    }
  }
}
 800d894:	bf00      	nop
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d8a0:	f014 fad0 	bl	8021e44 <rand>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d8b2:	b29a      	uxth	r2, r3
 800d8b4:	4b01      	ldr	r3, [pc, #4]	; (800d8bc <tcp_init+0x20>)
 800d8b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d8b8:	bf00      	nop
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	20000014 	.word	0x20000014

0800d8c0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	7d1b      	ldrb	r3, [r3, #20]
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d105      	bne.n	800d8dc <tcp_free+0x1c>
 800d8d0:	4b06      	ldr	r3, [pc, #24]	; (800d8ec <tcp_free+0x2c>)
 800d8d2:	22d4      	movs	r2, #212	; 0xd4
 800d8d4:	4906      	ldr	r1, [pc, #24]	; (800d8f0 <tcp_free+0x30>)
 800d8d6:	4807      	ldr	r0, [pc, #28]	; (800d8f4 <tcp_free+0x34>)
 800d8d8:	f014 f9f8 	bl	8021ccc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d8dc:	6879      	ldr	r1, [r7, #4]
 800d8de:	2001      	movs	r0, #1
 800d8e0:	f7fe fcf4 	bl	800c2cc <memp_free>
}
 800d8e4:	bf00      	nop
 800d8e6:	3708      	adds	r7, #8
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}
 800d8ec:	08023ea0 	.word	0x08023ea0
 800d8f0:	08023ed0 	.word	0x08023ed0
 800d8f4:	08023ee4 	.word	0x08023ee4

0800d8f8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	7d1b      	ldrb	r3, [r3, #20]
 800d904:	2b01      	cmp	r3, #1
 800d906:	d105      	bne.n	800d914 <tcp_free_listen+0x1c>
 800d908:	4b06      	ldr	r3, [pc, #24]	; (800d924 <tcp_free_listen+0x2c>)
 800d90a:	22df      	movs	r2, #223	; 0xdf
 800d90c:	4906      	ldr	r1, [pc, #24]	; (800d928 <tcp_free_listen+0x30>)
 800d90e:	4807      	ldr	r0, [pc, #28]	; (800d92c <tcp_free_listen+0x34>)
 800d910:	f014 f9dc 	bl	8021ccc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d914:	6879      	ldr	r1, [r7, #4]
 800d916:	2002      	movs	r0, #2
 800d918:	f7fe fcd8 	bl	800c2cc <memp_free>
}
 800d91c:	bf00      	nop
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	08023ea0 	.word	0x08023ea0
 800d928:	08023f0c 	.word	0x08023f0c
 800d92c:	08023ee4 	.word	0x08023ee4

0800d930 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d934:	f000 fea2 	bl	800e67c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d938:	4b07      	ldr	r3, [pc, #28]	; (800d958 <tcp_tmr+0x28>)
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	3301      	adds	r3, #1
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	4b05      	ldr	r3, [pc, #20]	; (800d958 <tcp_tmr+0x28>)
 800d942:	701a      	strb	r2, [r3, #0]
 800d944:	4b04      	ldr	r3, [pc, #16]	; (800d958 <tcp_tmr+0x28>)
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	f003 0301 	and.w	r3, r3, #1
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d001      	beq.n	800d954 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d950:	f000 fb54 	bl	800dffc <tcp_slowtmr>
  }
}
 800d954:	bf00      	nop
 800d956:	bd80      	pop	{r7, pc}
 800d958:	20040b55 	.word	0x20040b55

0800d95c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d105      	bne.n	800d978 <tcp_remove_listener+0x1c>
 800d96c:	4b0d      	ldr	r3, [pc, #52]	; (800d9a4 <tcp_remove_listener+0x48>)
 800d96e:	22ff      	movs	r2, #255	; 0xff
 800d970:	490d      	ldr	r1, [pc, #52]	; (800d9a8 <tcp_remove_listener+0x4c>)
 800d972:	480e      	ldr	r0, [pc, #56]	; (800d9ac <tcp_remove_listener+0x50>)
 800d974:	f014 f9aa 	bl	8021ccc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	60fb      	str	r3, [r7, #12]
 800d97c:	e00a      	b.n	800d994 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d982:	683a      	ldr	r2, [r7, #0]
 800d984:	429a      	cmp	r2, r3
 800d986:	d102      	bne.n	800d98e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2200      	movs	r2, #0
 800d98c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	68db      	ldr	r3, [r3, #12]
 800d992:	60fb      	str	r3, [r7, #12]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d1f1      	bne.n	800d97e <tcp_remove_listener+0x22>
    }
  }
}
 800d99a:	bf00      	nop
 800d99c:	bf00      	nop
 800d99e:	3710      	adds	r7, #16
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}
 800d9a4:	08023ea0 	.word	0x08023ea0
 800d9a8:	08023f28 	.word	0x08023f28
 800d9ac:	08023ee4 	.word	0x08023ee4

0800d9b0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <tcp_listen_closed+0x1c>
 800d9be:	4b14      	ldr	r3, [pc, #80]	; (800da10 <tcp_listen_closed+0x60>)
 800d9c0:	f240 1211 	movw	r2, #273	; 0x111
 800d9c4:	4913      	ldr	r1, [pc, #76]	; (800da14 <tcp_listen_closed+0x64>)
 800d9c6:	4814      	ldr	r0, [pc, #80]	; (800da18 <tcp_listen_closed+0x68>)
 800d9c8:	f014 f980 	bl	8021ccc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	7d1b      	ldrb	r3, [r3, #20]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d006      	beq.n	800d9e2 <tcp_listen_closed+0x32>
 800d9d4:	4b0e      	ldr	r3, [pc, #56]	; (800da10 <tcp_listen_closed+0x60>)
 800d9d6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d9da:	4910      	ldr	r1, [pc, #64]	; (800da1c <tcp_listen_closed+0x6c>)
 800d9dc:	480e      	ldr	r0, [pc, #56]	; (800da18 <tcp_listen_closed+0x68>)
 800d9de:	f014 f975 	bl	8021ccc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	60fb      	str	r3, [r7, #12]
 800d9e6:	e00b      	b.n	800da00 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d9e8:	4a0d      	ldr	r2, [pc, #52]	; (800da20 <tcp_listen_closed+0x70>)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7ff ffb1 	bl	800d95c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	3301      	adds	r3, #1
 800d9fe:	60fb      	str	r3, [r7, #12]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2b03      	cmp	r3, #3
 800da04:	d9f0      	bls.n	800d9e8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800da06:	bf00      	nop
 800da08:	bf00      	nop
 800da0a:	3710      	adds	r7, #16
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	08023ea0 	.word	0x08023ea0
 800da14:	08023f50 	.word	0x08023f50
 800da18:	08023ee4 	.word	0x08023ee4
 800da1c:	08023f5c 	.word	0x08023f5c
 800da20:	08026268 	.word	0x08026268

0800da24 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800da24:	b5b0      	push	{r4, r5, r7, lr}
 800da26:	b088      	sub	sp, #32
 800da28:	af04      	add	r7, sp, #16
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	460b      	mov	r3, r1
 800da2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d106      	bne.n	800da44 <tcp_close_shutdown+0x20>
 800da36:	4b63      	ldr	r3, [pc, #396]	; (800dbc4 <tcp_close_shutdown+0x1a0>)
 800da38:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800da3c:	4962      	ldr	r1, [pc, #392]	; (800dbc8 <tcp_close_shutdown+0x1a4>)
 800da3e:	4863      	ldr	r0, [pc, #396]	; (800dbcc <tcp_close_shutdown+0x1a8>)
 800da40:	f014 f944 	bl	8021ccc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800da44:	78fb      	ldrb	r3, [r7, #3]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d066      	beq.n	800db18 <tcp_close_shutdown+0xf4>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	7d1b      	ldrb	r3, [r3, #20]
 800da4e:	2b04      	cmp	r3, #4
 800da50:	d003      	beq.n	800da5a <tcp_close_shutdown+0x36>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	7d1b      	ldrb	r3, [r3, #20]
 800da56:	2b07      	cmp	r3, #7
 800da58:	d15e      	bne.n	800db18 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d104      	bne.n	800da6c <tcp_close_shutdown+0x48>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800da6a:	d055      	beq.n	800db18 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	8b5b      	ldrh	r3, [r3, #26]
 800da70:	f003 0310 	and.w	r3, r3, #16
 800da74:	2b00      	cmp	r3, #0
 800da76:	d106      	bne.n	800da86 <tcp_close_shutdown+0x62>
 800da78:	4b52      	ldr	r3, [pc, #328]	; (800dbc4 <tcp_close_shutdown+0x1a0>)
 800da7a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800da7e:	4954      	ldr	r1, [pc, #336]	; (800dbd0 <tcp_close_shutdown+0x1ac>)
 800da80:	4852      	ldr	r0, [pc, #328]	; (800dbcc <tcp_close_shutdown+0x1a8>)
 800da82:	f014 f923 	bl	8021ccc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800da8e:	687d      	ldr	r5, [r7, #4]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	3304      	adds	r3, #4
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	8ad2      	ldrh	r2, [r2, #22]
 800da98:	6879      	ldr	r1, [r7, #4]
 800da9a:	8b09      	ldrh	r1, [r1, #24]
 800da9c:	9102      	str	r1, [sp, #8]
 800da9e:	9201      	str	r2, [sp, #4]
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	462b      	mov	r3, r5
 800daa4:	4622      	mov	r2, r4
 800daa6:	4601      	mov	r1, r0
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f004 fe91 	bl	80127d0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f001 f8c6 	bl	800ec40 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dab4:	4b47      	ldr	r3, [pc, #284]	; (800dbd4 <tcp_close_shutdown+0x1b0>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d105      	bne.n	800daca <tcp_close_shutdown+0xa6>
 800dabe:	4b45      	ldr	r3, [pc, #276]	; (800dbd4 <tcp_close_shutdown+0x1b0>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	4a43      	ldr	r2, [pc, #268]	; (800dbd4 <tcp_close_shutdown+0x1b0>)
 800dac6:	6013      	str	r3, [r2, #0]
 800dac8:	e013      	b.n	800daf2 <tcp_close_shutdown+0xce>
 800daca:	4b42      	ldr	r3, [pc, #264]	; (800dbd4 <tcp_close_shutdown+0x1b0>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	60fb      	str	r3, [r7, #12]
 800dad0:	e00c      	b.n	800daec <tcp_close_shutdown+0xc8>
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d104      	bne.n	800dae6 <tcp_close_shutdown+0xc2>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	68da      	ldr	r2, [r3, #12]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	60da      	str	r2, [r3, #12]
 800dae4:	e005      	b.n	800daf2 <tcp_close_shutdown+0xce>
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	60fb      	str	r3, [r7, #12]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1ef      	bne.n	800dad2 <tcp_close_shutdown+0xae>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	60da      	str	r2, [r3, #12]
 800daf8:	4b37      	ldr	r3, [pc, #220]	; (800dbd8 <tcp_close_shutdown+0x1b4>)
 800dafa:	2201      	movs	r2, #1
 800dafc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dafe:	4b37      	ldr	r3, [pc, #220]	; (800dbdc <tcp_close_shutdown+0x1b8>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	429a      	cmp	r2, r3
 800db06:	d102      	bne.n	800db0e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800db08:	f003 fd5e 	bl	80115c8 <tcp_trigger_input_pcb_close>
 800db0c:	e002      	b.n	800db14 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff fed6 	bl	800d8c0 <tcp_free>
      }
      return ERR_OK;
 800db14:	2300      	movs	r3, #0
 800db16:	e050      	b.n	800dbba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	2b02      	cmp	r3, #2
 800db1e:	d03b      	beq.n	800db98 <tcp_close_shutdown+0x174>
 800db20:	2b02      	cmp	r3, #2
 800db22:	dc44      	bgt.n	800dbae <tcp_close_shutdown+0x18a>
 800db24:	2b00      	cmp	r3, #0
 800db26:	d002      	beq.n	800db2e <tcp_close_shutdown+0x10a>
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d02a      	beq.n	800db82 <tcp_close_shutdown+0x15e>
 800db2c:	e03f      	b.n	800dbae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	8adb      	ldrh	r3, [r3, #22]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d021      	beq.n	800db7a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800db36:	4b2a      	ldr	r3, [pc, #168]	; (800dbe0 <tcp_close_shutdown+0x1bc>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d105      	bne.n	800db4c <tcp_close_shutdown+0x128>
 800db40:	4b27      	ldr	r3, [pc, #156]	; (800dbe0 <tcp_close_shutdown+0x1bc>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	4a26      	ldr	r2, [pc, #152]	; (800dbe0 <tcp_close_shutdown+0x1bc>)
 800db48:	6013      	str	r3, [r2, #0]
 800db4a:	e013      	b.n	800db74 <tcp_close_shutdown+0x150>
 800db4c:	4b24      	ldr	r3, [pc, #144]	; (800dbe0 <tcp_close_shutdown+0x1bc>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	60bb      	str	r3, [r7, #8]
 800db52:	e00c      	b.n	800db6e <tcp_close_shutdown+0x14a>
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d104      	bne.n	800db68 <tcp_close_shutdown+0x144>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	68da      	ldr	r2, [r3, #12]
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	60da      	str	r2, [r3, #12]
 800db66:	e005      	b.n	800db74 <tcp_close_shutdown+0x150>
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	60bb      	str	r3, [r7, #8]
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1ef      	bne.n	800db54 <tcp_close_shutdown+0x130>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7ff fea0 	bl	800d8c0 <tcp_free>
      break;
 800db80:	e01a      	b.n	800dbb8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f7ff ff14 	bl	800d9b0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800db88:	6879      	ldr	r1, [r7, #4]
 800db8a:	4816      	ldr	r0, [pc, #88]	; (800dbe4 <tcp_close_shutdown+0x1c0>)
 800db8c:	f001 f8a8 	bl	800ece0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f7ff feb1 	bl	800d8f8 <tcp_free_listen>
      break;
 800db96:	e00f      	b.n	800dbb8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800db98:	6879      	ldr	r1, [r7, #4]
 800db9a:	480e      	ldr	r0, [pc, #56]	; (800dbd4 <tcp_close_shutdown+0x1b0>)
 800db9c:	f001 f8a0 	bl	800ece0 <tcp_pcb_remove>
 800dba0:	4b0d      	ldr	r3, [pc, #52]	; (800dbd8 <tcp_close_shutdown+0x1b4>)
 800dba2:	2201      	movs	r2, #1
 800dba4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7ff fe8a 	bl	800d8c0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dbac:	e004      	b.n	800dbb8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 f81a 	bl	800dbe8 <tcp_close_shutdown_fin>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	e000      	b.n	800dbba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bdb0      	pop	{r4, r5, r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	08023ea0 	.word	0x08023ea0
 800dbc8:	08023f74 	.word	0x08023f74
 800dbcc:	08023ee4 	.word	0x08023ee4
 800dbd0:	08023f94 	.word	0x08023f94
 800dbd4:	20040b4c 	.word	0x20040b4c
 800dbd8:	20040b54 	.word	0x20040b54
 800dbdc:	20040b8c 	.word	0x20040b8c
 800dbe0:	20040b44 	.word	0x20040b44
 800dbe4:	20040b48 	.word	0x20040b48

0800dbe8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d106      	bne.n	800dc04 <tcp_close_shutdown_fin+0x1c>
 800dbf6:	4b2e      	ldr	r3, [pc, #184]	; (800dcb0 <tcp_close_shutdown_fin+0xc8>)
 800dbf8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dbfc:	492d      	ldr	r1, [pc, #180]	; (800dcb4 <tcp_close_shutdown_fin+0xcc>)
 800dbfe:	482e      	ldr	r0, [pc, #184]	; (800dcb8 <tcp_close_shutdown_fin+0xd0>)
 800dc00:	f014 f864 	bl	8021ccc <iprintf>

  switch (pcb->state) {
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	7d1b      	ldrb	r3, [r3, #20]
 800dc08:	2b07      	cmp	r3, #7
 800dc0a:	d020      	beq.n	800dc4e <tcp_close_shutdown_fin+0x66>
 800dc0c:	2b07      	cmp	r3, #7
 800dc0e:	dc2b      	bgt.n	800dc68 <tcp_close_shutdown_fin+0x80>
 800dc10:	2b03      	cmp	r3, #3
 800dc12:	d002      	beq.n	800dc1a <tcp_close_shutdown_fin+0x32>
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	d00d      	beq.n	800dc34 <tcp_close_shutdown_fin+0x4c>
 800dc18:	e026      	b.n	800dc68 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f003 fee6 	bl	80119ec <tcp_send_fin>
 800dc20:	4603      	mov	r3, r0
 800dc22:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d11f      	bne.n	800dc6c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2205      	movs	r2, #5
 800dc30:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc32:	e01b      	b.n	800dc6c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f003 fed9 	bl	80119ec <tcp_send_fin>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d114      	bne.n	800dc70 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2205      	movs	r2, #5
 800dc4a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc4c:	e010      	b.n	800dc70 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f003 fecc 	bl	80119ec <tcp_send_fin>
 800dc54:	4603      	mov	r3, r0
 800dc56:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dc58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d109      	bne.n	800dc74 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2209      	movs	r2, #9
 800dc64:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dc66:	e005      	b.n	800dc74 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	e01c      	b.n	800dca6 <tcp_close_shutdown_fin+0xbe>
      break;
 800dc6c:	bf00      	nop
 800dc6e:	e002      	b.n	800dc76 <tcp_close_shutdown_fin+0x8e>
      break;
 800dc70:	bf00      	nop
 800dc72:	e000      	b.n	800dc76 <tcp_close_shutdown_fin+0x8e>
      break;
 800dc74:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dc76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d103      	bne.n	800dc86 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f003 fff2 	bl	8011c68 <tcp_output>
 800dc84:	e00d      	b.n	800dca2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dc86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc8e:	d108      	bne.n	800dca2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	8b5b      	ldrh	r3, [r3, #26]
 800dc94:	f043 0308 	orr.w	r3, r3, #8
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	e001      	b.n	800dca6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	08023ea0 	.word	0x08023ea0
 800dcb4:	08023f50 	.word	0x08023f50
 800dcb8:	08023ee4 	.word	0x08023ee4

0800dcbc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d109      	bne.n	800dcde <tcp_close+0x22>
 800dcca:	4b0f      	ldr	r3, [pc, #60]	; (800dd08 <tcp_close+0x4c>)
 800dccc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dcd0:	490e      	ldr	r1, [pc, #56]	; (800dd0c <tcp_close+0x50>)
 800dcd2:	480f      	ldr	r0, [pc, #60]	; (800dd10 <tcp_close+0x54>)
 800dcd4:	f013 fffa 	bl	8021ccc <iprintf>
 800dcd8:	f06f 030f 	mvn.w	r3, #15
 800dcdc:	e00f      	b.n	800dcfe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	7d1b      	ldrb	r3, [r3, #20]
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d006      	beq.n	800dcf4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	8b5b      	ldrh	r3, [r3, #26]
 800dcea:	f043 0310 	orr.w	r3, r3, #16
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dcf4:	2101      	movs	r1, #1
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7ff fe94 	bl	800da24 <tcp_close_shutdown>
 800dcfc:	4603      	mov	r3, r0
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	08023ea0 	.word	0x08023ea0
 800dd0c:	08023fb0 	.word	0x08023fb0
 800dd10:	08023ee4 	.word	0x08023ee4

0800dd14 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b08e      	sub	sp, #56	; 0x38
 800dd18:	af04      	add	r7, sp, #16
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d107      	bne.n	800dd34 <tcp_abandon+0x20>
 800dd24:	4b52      	ldr	r3, [pc, #328]	; (800de70 <tcp_abandon+0x15c>)
 800dd26:	f240 223d 	movw	r2, #573	; 0x23d
 800dd2a:	4952      	ldr	r1, [pc, #328]	; (800de74 <tcp_abandon+0x160>)
 800dd2c:	4852      	ldr	r0, [pc, #328]	; (800de78 <tcp_abandon+0x164>)
 800dd2e:	f013 ffcd 	bl	8021ccc <iprintf>
 800dd32:	e099      	b.n	800de68 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	7d1b      	ldrb	r3, [r3, #20]
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d106      	bne.n	800dd4a <tcp_abandon+0x36>
 800dd3c:	4b4c      	ldr	r3, [pc, #304]	; (800de70 <tcp_abandon+0x15c>)
 800dd3e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dd42:	494e      	ldr	r1, [pc, #312]	; (800de7c <tcp_abandon+0x168>)
 800dd44:	484c      	ldr	r0, [pc, #304]	; (800de78 <tcp_abandon+0x164>)
 800dd46:	f013 ffc1 	bl	8021ccc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	7d1b      	ldrb	r3, [r3, #20]
 800dd4e:	2b0a      	cmp	r3, #10
 800dd50:	d107      	bne.n	800dd62 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dd52:	6879      	ldr	r1, [r7, #4]
 800dd54:	484a      	ldr	r0, [pc, #296]	; (800de80 <tcp_abandon+0x16c>)
 800dd56:	f000 ffc3 	bl	800ece0 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f7ff fdb0 	bl	800d8c0 <tcp_free>
 800dd60:	e082      	b.n	800de68 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dd66:	2300      	movs	r3, #0
 800dd68:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd6e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd74:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd7c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	691b      	ldr	r3, [r3, #16]
 800dd82:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	7d1b      	ldrb	r3, [r3, #20]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d126      	bne.n	800ddda <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	8adb      	ldrh	r3, [r3, #22]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d02e      	beq.n	800ddf2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd94:	4b3b      	ldr	r3, [pc, #236]	; (800de84 <tcp_abandon+0x170>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d105      	bne.n	800ddaa <tcp_abandon+0x96>
 800dd9e:	4b39      	ldr	r3, [pc, #228]	; (800de84 <tcp_abandon+0x170>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	4a37      	ldr	r2, [pc, #220]	; (800de84 <tcp_abandon+0x170>)
 800dda6:	6013      	str	r3, [r2, #0]
 800dda8:	e013      	b.n	800ddd2 <tcp_abandon+0xbe>
 800ddaa:	4b36      	ldr	r3, [pc, #216]	; (800de84 <tcp_abandon+0x170>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	61fb      	str	r3, [r7, #28]
 800ddb0:	e00c      	b.n	800ddcc <tcp_abandon+0xb8>
 800ddb2:	69fb      	ldr	r3, [r7, #28]
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d104      	bne.n	800ddc6 <tcp_abandon+0xb2>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	68da      	ldr	r2, [r3, #12]
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	60da      	str	r2, [r3, #12]
 800ddc4:	e005      	b.n	800ddd2 <tcp_abandon+0xbe>
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	61fb      	str	r3, [r7, #28]
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1ef      	bne.n	800ddb2 <tcp_abandon+0x9e>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	60da      	str	r2, [r3, #12]
 800ddd8:	e00b      	b.n	800ddf2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	8adb      	ldrh	r3, [r3, #22]
 800dde2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dde4:	6879      	ldr	r1, [r7, #4]
 800dde6:	4828      	ldr	r0, [pc, #160]	; (800de88 <tcp_abandon+0x174>)
 800dde8:	f000 ff7a 	bl	800ece0 <tcp_pcb_remove>
 800ddec:	4b27      	ldr	r3, [pc, #156]	; (800de8c <tcp_abandon+0x178>)
 800ddee:	2201      	movs	r2, #1
 800ddf0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d004      	beq.n	800de04 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddfe:	4618      	mov	r0, r3
 800de00:	f000 fd1c 	bl	800e83c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d004      	beq.n	800de16 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de10:	4618      	mov	r0, r3
 800de12:	f000 fd13 	bl	800e83c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d004      	beq.n	800de28 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de22:	4618      	mov	r0, r3
 800de24:	f000 fd0a 	bl	800e83c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00e      	beq.n	800de4c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800de2e:	6879      	ldr	r1, [r7, #4]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	3304      	adds	r3, #4
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	8b12      	ldrh	r2, [r2, #24]
 800de38:	9202      	str	r2, [sp, #8]
 800de3a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de3c:	9201      	str	r2, [sp, #4]
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	460b      	mov	r3, r1
 800de42:	697a      	ldr	r2, [r7, #20]
 800de44:	69b9      	ldr	r1, [r7, #24]
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f004 fcc2 	bl	80127d0 <tcp_rst>
    }
    last_state = pcb->state;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	7d1b      	ldrb	r3, [r3, #20]
 800de50:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f7ff fd34 	bl	800d8c0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d004      	beq.n	800de68 <tcp_abandon+0x154>
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	f06f 010c 	mvn.w	r1, #12
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	4798      	blx	r3
  }
}
 800de68:	3728      	adds	r7, #40	; 0x28
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	08023ea0 	.word	0x08023ea0
 800de74:	08023fe4 	.word	0x08023fe4
 800de78:	08023ee4 	.word	0x08023ee4
 800de7c:	08024000 	.word	0x08024000
 800de80:	20040b50 	.word	0x20040b50
 800de84:	20040b44 	.word	0x20040b44
 800de88:	20040b4c 	.word	0x20040b4c
 800de8c:	20040b54 	.word	0x20040b54

0800de90 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800de98:	2101      	movs	r1, #1
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7ff ff3a 	bl	800dd14 <tcp_abandon>
}
 800dea0:	bf00      	nop
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d106      	bne.n	800dec4 <tcp_update_rcv_ann_wnd+0x1c>
 800deb6:	4b25      	ldr	r3, [pc, #148]	; (800df4c <tcp_update_rcv_ann_wnd+0xa4>)
 800deb8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800debc:	4924      	ldr	r1, [pc, #144]	; (800df50 <tcp_update_rcv_ann_wnd+0xa8>)
 800debe:	4825      	ldr	r0, [pc, #148]	; (800df54 <tcp_update_rcv_ann_wnd+0xac>)
 800dec0:	f013 ff04 	bl	8021ccc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800decc:	4413      	add	r3, r2
 800dece:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ded8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dedc:	bf28      	it	cs
 800dede:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dee2:	b292      	uxth	r2, r2
 800dee4:	4413      	add	r3, r2
 800dee6:	68fa      	ldr	r2, [r7, #12]
 800dee8:	1ad3      	subs	r3, r2, r3
 800deea:	2b00      	cmp	r3, #0
 800deec:	db08      	blt.n	800df00 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	e020      	b.n	800df42 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df08:	1ad3      	subs	r3, r2, r3
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	dd03      	ble.n	800df16 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df14:	e014      	b.n	800df40 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df28:	d306      	bcc.n	800df38 <tcp_update_rcv_ann_wnd+0x90>
 800df2a:	4b08      	ldr	r3, [pc, #32]	; (800df4c <tcp_update_rcv_ann_wnd+0xa4>)
 800df2c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800df30:	4909      	ldr	r1, [pc, #36]	; (800df58 <tcp_update_rcv_ann_wnd+0xb0>)
 800df32:	4808      	ldr	r0, [pc, #32]	; (800df54 <tcp_update_rcv_ann_wnd+0xac>)
 800df34:	f013 feca 	bl	8021ccc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800df40:	2300      	movs	r3, #0
  }
}
 800df42:	4618      	mov	r0, r3
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	08023ea0 	.word	0x08023ea0
 800df50:	080240fc 	.word	0x080240fc
 800df54:	08023ee4 	.word	0x08023ee4
 800df58:	08024120 	.word	0x08024120

0800df5c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	460b      	mov	r3, r1
 800df66:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d107      	bne.n	800df7e <tcp_recved+0x22>
 800df6e:	4b1f      	ldr	r3, [pc, #124]	; (800dfec <tcp_recved+0x90>)
 800df70:	f240 32cf 	movw	r2, #975	; 0x3cf
 800df74:	491e      	ldr	r1, [pc, #120]	; (800dff0 <tcp_recved+0x94>)
 800df76:	481f      	ldr	r0, [pc, #124]	; (800dff4 <tcp_recved+0x98>)
 800df78:	f013 fea8 	bl	8021ccc <iprintf>
 800df7c:	e032      	b.n	800dfe4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7d1b      	ldrb	r3, [r3, #20]
 800df82:	2b01      	cmp	r3, #1
 800df84:	d106      	bne.n	800df94 <tcp_recved+0x38>
 800df86:	4b19      	ldr	r3, [pc, #100]	; (800dfec <tcp_recved+0x90>)
 800df88:	f240 32d2 	movw	r2, #978	; 0x3d2
 800df8c:	491a      	ldr	r1, [pc, #104]	; (800dff8 <tcp_recved+0x9c>)
 800df8e:	4819      	ldr	r0, [pc, #100]	; (800dff4 <tcp_recved+0x98>)
 800df90:	f013 fe9c 	bl	8021ccc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800df98:	887b      	ldrh	r3, [r7, #2]
 800df9a:	4413      	add	r3, r2
 800df9c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800df9e:	89fb      	ldrh	r3, [r7, #14]
 800dfa0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dfa4:	d804      	bhi.n	800dfb0 <tcp_recved+0x54>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfaa:	89fa      	ldrh	r2, [r7, #14]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d204      	bcs.n	800dfba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dfb6:	851a      	strh	r2, [r3, #40]	; 0x28
 800dfb8:	e002      	b.n	800dfc0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	89fa      	ldrh	r2, [r7, #14]
 800dfbe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7ff ff71 	bl	800dea8 <tcp_update_rcv_ann_wnd>
 800dfc6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dfce:	d309      	bcc.n	800dfe4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	8b5b      	ldrh	r3, [r3, #26]
 800dfd4:	f043 0302 	orr.w	r3, r3, #2
 800dfd8:	b29a      	uxth	r2, r3
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f003 fe42 	bl	8011c68 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	08023ea0 	.word	0x08023ea0
 800dff0:	0802413c 	.word	0x0802413c
 800dff4:	08023ee4 	.word	0x08023ee4
 800dff8:	08024154 	.word	0x08024154

0800dffc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dffc:	b5b0      	push	{r4, r5, r7, lr}
 800dffe:	b090      	sub	sp, #64	; 0x40
 800e000:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e002:	2300      	movs	r3, #0
 800e004:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e008:	4b94      	ldr	r3, [pc, #592]	; (800e25c <tcp_slowtmr+0x260>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	3301      	adds	r3, #1
 800e00e:	4a93      	ldr	r2, [pc, #588]	; (800e25c <tcp_slowtmr+0x260>)
 800e010:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e012:	4b93      	ldr	r3, [pc, #588]	; (800e260 <tcp_slowtmr+0x264>)
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	3301      	adds	r3, #1
 800e018:	b2da      	uxtb	r2, r3
 800e01a:	4b91      	ldr	r3, [pc, #580]	; (800e260 <tcp_slowtmr+0x264>)
 800e01c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e01e:	2300      	movs	r3, #0
 800e020:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e022:	4b90      	ldr	r3, [pc, #576]	; (800e264 <tcp_slowtmr+0x268>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e028:	e29d      	b.n	800e566 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02c:	7d1b      	ldrb	r3, [r3, #20]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d106      	bne.n	800e040 <tcp_slowtmr+0x44>
 800e032:	4b8d      	ldr	r3, [pc, #564]	; (800e268 <tcp_slowtmr+0x26c>)
 800e034:	f240 42be 	movw	r2, #1214	; 0x4be
 800e038:	498c      	ldr	r1, [pc, #560]	; (800e26c <tcp_slowtmr+0x270>)
 800e03a:	488d      	ldr	r0, [pc, #564]	; (800e270 <tcp_slowtmr+0x274>)
 800e03c:	f013 fe46 	bl	8021ccc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e042:	7d1b      	ldrb	r3, [r3, #20]
 800e044:	2b01      	cmp	r3, #1
 800e046:	d106      	bne.n	800e056 <tcp_slowtmr+0x5a>
 800e048:	4b87      	ldr	r3, [pc, #540]	; (800e268 <tcp_slowtmr+0x26c>)
 800e04a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e04e:	4989      	ldr	r1, [pc, #548]	; (800e274 <tcp_slowtmr+0x278>)
 800e050:	4887      	ldr	r0, [pc, #540]	; (800e270 <tcp_slowtmr+0x274>)
 800e052:	f013 fe3b 	bl	8021ccc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	7d1b      	ldrb	r3, [r3, #20]
 800e05a:	2b0a      	cmp	r3, #10
 800e05c:	d106      	bne.n	800e06c <tcp_slowtmr+0x70>
 800e05e:	4b82      	ldr	r3, [pc, #520]	; (800e268 <tcp_slowtmr+0x26c>)
 800e060:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e064:	4984      	ldr	r1, [pc, #528]	; (800e278 <tcp_slowtmr+0x27c>)
 800e066:	4882      	ldr	r0, [pc, #520]	; (800e270 <tcp_slowtmr+0x274>)
 800e068:	f013 fe30 	bl	8021ccc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06e:	7f9a      	ldrb	r2, [r3, #30]
 800e070:	4b7b      	ldr	r3, [pc, #492]	; (800e260 <tcp_slowtmr+0x264>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	429a      	cmp	r2, r3
 800e076:	d105      	bne.n	800e084 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e082:	e270      	b.n	800e566 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e084:	4b76      	ldr	r3, [pc, #472]	; (800e260 <tcp_slowtmr+0x264>)
 800e086:	781a      	ldrb	r2, [r3, #0]
 800e088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e08a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e08c:	2300      	movs	r3, #0
 800e08e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e092:	2300      	movs	r3, #0
 800e094:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09a:	7d1b      	ldrb	r3, [r3, #20]
 800e09c:	2b02      	cmp	r3, #2
 800e09e:	d10a      	bne.n	800e0b6 <tcp_slowtmr+0xba>
 800e0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0a6:	2b05      	cmp	r3, #5
 800e0a8:	d905      	bls.n	800e0b6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e0aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0b4:	e11e      	b.n	800e2f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0bc:	2b0b      	cmp	r3, #11
 800e0be:	d905      	bls.n	800e0cc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0ca:	e113      	b.n	800e2f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d075      	beq.n	800e1c2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d006      	beq.n	800e0ec <tcp_slowtmr+0xf0>
 800e0de:	4b62      	ldr	r3, [pc, #392]	; (800e268 <tcp_slowtmr+0x26c>)
 800e0e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e0e4:	4965      	ldr	r1, [pc, #404]	; (800e27c <tcp_slowtmr+0x280>)
 800e0e6:	4862      	ldr	r0, [pc, #392]	; (800e270 <tcp_slowtmr+0x274>)
 800e0e8:	f013 fdf0 	bl	8021ccc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d106      	bne.n	800e102 <tcp_slowtmr+0x106>
 800e0f4:	4b5c      	ldr	r3, [pc, #368]	; (800e268 <tcp_slowtmr+0x26c>)
 800e0f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e0fa:	4961      	ldr	r1, [pc, #388]	; (800e280 <tcp_slowtmr+0x284>)
 800e0fc:	485c      	ldr	r0, [pc, #368]	; (800e270 <tcp_slowtmr+0x274>)
 800e0fe:	f013 fde5 	bl	8021ccc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e104:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e108:	2b0b      	cmp	r3, #11
 800e10a:	d905      	bls.n	800e118 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e10c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e110:	3301      	adds	r3, #1
 800e112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e116:	e0ed      	b.n	800e2f4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e11e:	3b01      	subs	r3, #1
 800e120:	4a58      	ldr	r2, [pc, #352]	; (800e284 <tcp_slowtmr+0x288>)
 800e122:	5cd3      	ldrb	r3, [r2, r3]
 800e124:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e128:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e12c:	7c7a      	ldrb	r2, [r7, #17]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d907      	bls.n	800e142 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e134:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e138:	3301      	adds	r3, #1
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e144:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e148:	7c7a      	ldrb	r2, [r7, #17]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	f200 80d2 	bhi.w	800e2f4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e150:	2301      	movs	r3, #1
 800e152:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e156:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d108      	bne.n	800e170 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e15e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e160:	f004 fc2a 	bl	80129b8 <tcp_zero_window_probe>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d014      	beq.n	800e194 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e16a:	2300      	movs	r3, #0
 800e16c:	623b      	str	r3, [r7, #32]
 800e16e:	e011      	b.n	800e194 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e176:	4619      	mov	r1, r3
 800e178:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e17a:	f003 faef 	bl	801175c <tcp_split_unsent_seg>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d107      	bne.n	800e194 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e186:	f003 fd6f 	bl	8011c68 <tcp_output>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e190:	2300      	movs	r3, #0
 800e192:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e194:	6a3b      	ldr	r3, [r7, #32]
 800e196:	2b00      	cmp	r3, #0
 800e198:	f000 80ac 	beq.w	800e2f4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e1aa:	2b06      	cmp	r3, #6
 800e1ac:	f200 80a2 	bhi.w	800e2f4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e1c0:	e098      	b.n	800e2f4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	db0f      	blt.n	800e1ec <tcp_slowtmr+0x1f0>
 800e1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e1d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d008      	beq.n	800e1ec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	b21a      	sxth	r2, r3
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	db7b      	blt.n	800e2f4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e1fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1fe:	f004 f825 	bl	801224c <tcp_rexmit_rto_prepare>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d007      	beq.n	800e218 <tcp_slowtmr+0x21c>
 800e208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d171      	bne.n	800e2f4 <tcp_slowtmr+0x2f8>
 800e210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d06d      	beq.n	800e2f4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21a:	7d1b      	ldrb	r3, [r3, #20]
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d03a      	beq.n	800e296 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e226:	2b0c      	cmp	r3, #12
 800e228:	bf28      	it	cs
 800e22a:	230c      	movcs	r3, #12
 800e22c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e230:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e234:	10db      	asrs	r3, r3, #3
 800e236:	b21b      	sxth	r3, r3
 800e238:	461a      	mov	r2, r3
 800e23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e240:	4413      	add	r3, r2
 800e242:	7efa      	ldrb	r2, [r7, #27]
 800e244:	4910      	ldr	r1, [pc, #64]	; (800e288 <tcp_slowtmr+0x28c>)
 800e246:	5c8a      	ldrb	r2, [r1, r2]
 800e248:	4093      	lsls	r3, r2
 800e24a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e252:	4293      	cmp	r3, r2
 800e254:	dc1a      	bgt.n	800e28c <tcp_slowtmr+0x290>
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	b21a      	sxth	r2, r3
 800e25a:	e019      	b.n	800e290 <tcp_slowtmr+0x294>
 800e25c:	20040b40 	.word	0x20040b40
 800e260:	20040b56 	.word	0x20040b56
 800e264:	20040b4c 	.word	0x20040b4c
 800e268:	08023ea0 	.word	0x08023ea0
 800e26c:	080241e4 	.word	0x080241e4
 800e270:	08023ee4 	.word	0x08023ee4
 800e274:	08024210 	.word	0x08024210
 800e278:	0802423c 	.word	0x0802423c
 800e27c:	0802426c 	.word	0x0802426c
 800e280:	080242a0 	.word	0x080242a0
 800e284:	08026260 	.word	0x08026260
 800e288:	08026250 	.word	0x08026250
 800e28c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e292:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e298:	2200      	movs	r2, #0
 800e29a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	bf28      	it	cs
 800e2ac:	4613      	movcs	r3, r2
 800e2ae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e2b0:	8a7b      	ldrh	r3, [r7, #18]
 800e2b2:	085b      	lsrs	r3, r3, #1
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2c6:	005b      	lsls	r3, r3, #1
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d206      	bcs.n	800e2dc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2de:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e2ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2f0:	f004 f81c 	bl	801232c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f6:	7d1b      	ldrb	r3, [r3, #20]
 800e2f8:	2b06      	cmp	r3, #6
 800e2fa:	d111      	bne.n	800e320 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	8b5b      	ldrh	r3, [r3, #26]
 800e300:	f003 0310 	and.w	r3, r3, #16
 800e304:	2b00      	cmp	r3, #0
 800e306:	d00b      	beq.n	800e320 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e308:	4b9c      	ldr	r3, [pc, #624]	; (800e57c <tcp_slowtmr+0x580>)
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30e:	6a1b      	ldr	r3, [r3, #32]
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	2b28      	cmp	r3, #40	; 0x28
 800e314:	d904      	bls.n	800e320 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e31a:	3301      	adds	r3, #1
 800e31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e322:	7a5b      	ldrb	r3, [r3, #9]
 800e324:	f003 0308 	and.w	r3, r3, #8
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d04a      	beq.n	800e3c2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e330:	2b04      	cmp	r3, #4
 800e332:	d003      	beq.n	800e33c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e336:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e338:	2b07      	cmp	r3, #7
 800e33a:	d142      	bne.n	800e3c2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e33c:	4b8f      	ldr	r3, [pc, #572]	; (800e57c <tcp_slowtmr+0x580>)
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e342:	6a1b      	ldr	r3, [r3, #32]
 800e344:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e348:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e34c:	4b8c      	ldr	r3, [pc, #560]	; (800e580 <tcp_slowtmr+0x584>)
 800e34e:	440b      	add	r3, r1
 800e350:	498c      	ldr	r1, [pc, #560]	; (800e584 <tcp_slowtmr+0x588>)
 800e352:	fba1 1303 	umull	r1, r3, r1, r3
 800e356:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e358:	429a      	cmp	r2, r3
 800e35a:	d90a      	bls.n	800e372 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e360:	3301      	adds	r3, #1
 800e362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e36a:	3301      	adds	r3, #1
 800e36c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e370:	e027      	b.n	800e3c2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e372:	4b82      	ldr	r3, [pc, #520]	; (800e57c <tcp_slowtmr+0x580>)
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e378:	6a1b      	ldr	r3, [r3, #32]
 800e37a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e384:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e388:	4618      	mov	r0, r3
 800e38a:	4b7f      	ldr	r3, [pc, #508]	; (800e588 <tcp_slowtmr+0x58c>)
 800e38c:	fb00 f303 	mul.w	r3, r0, r3
 800e390:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e392:	497c      	ldr	r1, [pc, #496]	; (800e584 <tcp_slowtmr+0x588>)
 800e394:	fba1 1303 	umull	r1, r3, r1, r3
 800e398:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d911      	bls.n	800e3c2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e39e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3a0:	f004 faca 	bl	8012938 <tcp_keepalive>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e3aa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d107      	bne.n	800e3c2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3be:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d011      	beq.n	800e3ee <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e3ca:	4b6c      	ldr	r3, [pc, #432]	; (800e57c <tcp_slowtmr+0x580>)
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	1ad2      	subs	r2, r2, r3
 800e3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e3da:	4619      	mov	r1, r3
 800e3dc:	460b      	mov	r3, r1
 800e3de:	005b      	lsls	r3, r3, #1
 800e3e0:	440b      	add	r3, r1
 800e3e2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d302      	bcc.n	800e3ee <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e3e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e3ea:	f000 fddd 	bl	800efa8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	7d1b      	ldrb	r3, [r3, #20]
 800e3f2:	2b03      	cmp	r3, #3
 800e3f4:	d10b      	bne.n	800e40e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3f6:	4b61      	ldr	r3, [pc, #388]	; (800e57c <tcp_slowtmr+0x580>)
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fc:	6a1b      	ldr	r3, [r3, #32]
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	2b28      	cmp	r3, #40	; 0x28
 800e402:	d904      	bls.n	800e40e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e408:	3301      	adds	r3, #1
 800e40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e410:	7d1b      	ldrb	r3, [r3, #20]
 800e412:	2b09      	cmp	r3, #9
 800e414:	d10b      	bne.n	800e42e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e416:	4b59      	ldr	r3, [pc, #356]	; (800e57c <tcp_slowtmr+0x580>)
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41c:	6a1b      	ldr	r3, [r3, #32]
 800e41e:	1ad3      	subs	r3, r2, r3
 800e420:	2bf0      	cmp	r3, #240	; 0xf0
 800e422:	d904      	bls.n	800e42e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e428:	3301      	adds	r3, #1
 800e42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e42e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e432:	2b00      	cmp	r3, #0
 800e434:	d060      	beq.n	800e4f8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e43c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e43e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e440:	f000 fbfe 	bl	800ec40 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e446:	2b00      	cmp	r3, #0
 800e448:	d010      	beq.n	800e46c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e44a:	4b50      	ldr	r3, [pc, #320]	; (800e58c <tcp_slowtmr+0x590>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e450:	429a      	cmp	r2, r3
 800e452:	d106      	bne.n	800e462 <tcp_slowtmr+0x466>
 800e454:	4b4e      	ldr	r3, [pc, #312]	; (800e590 <tcp_slowtmr+0x594>)
 800e456:	f240 526d 	movw	r2, #1389	; 0x56d
 800e45a:	494e      	ldr	r1, [pc, #312]	; (800e594 <tcp_slowtmr+0x598>)
 800e45c:	484e      	ldr	r0, [pc, #312]	; (800e598 <tcp_slowtmr+0x59c>)
 800e45e:	f013 fc35 	bl	8021ccc <iprintf>
        prev->next = pcb->next;
 800e462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e464:	68da      	ldr	r2, [r3, #12]
 800e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e468:	60da      	str	r2, [r3, #12]
 800e46a:	e00f      	b.n	800e48c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e46c:	4b47      	ldr	r3, [pc, #284]	; (800e58c <tcp_slowtmr+0x590>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e472:	429a      	cmp	r2, r3
 800e474:	d006      	beq.n	800e484 <tcp_slowtmr+0x488>
 800e476:	4b46      	ldr	r3, [pc, #280]	; (800e590 <tcp_slowtmr+0x594>)
 800e478:	f240 5271 	movw	r2, #1393	; 0x571
 800e47c:	4947      	ldr	r1, [pc, #284]	; (800e59c <tcp_slowtmr+0x5a0>)
 800e47e:	4846      	ldr	r0, [pc, #280]	; (800e598 <tcp_slowtmr+0x59c>)
 800e480:	f013 fc24 	bl	8021ccc <iprintf>
        tcp_active_pcbs = pcb->next;
 800e484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	4a40      	ldr	r2, [pc, #256]	; (800e58c <tcp_slowtmr+0x590>)
 800e48a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e48c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e490:	2b00      	cmp	r3, #0
 800e492:	d013      	beq.n	800e4bc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e496:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e49c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a0:	3304      	adds	r3, #4
 800e4a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4a4:	8ad2      	ldrh	r2, [r2, #22]
 800e4a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4a8:	8b09      	ldrh	r1, [r1, #24]
 800e4aa:	9102      	str	r1, [sp, #8]
 800e4ac:	9201      	str	r2, [sp, #4]
 800e4ae:	9300      	str	r3, [sp, #0]
 800e4b0:	462b      	mov	r3, r5
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	4601      	mov	r1, r0
 800e4b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e4b8:	f004 f98a 	bl	80127d0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4be:	691b      	ldr	r3, [r3, #16]
 800e4c0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c4:	7d1b      	ldrb	r3, [r3, #20]
 800e4c6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e4d2:	6838      	ldr	r0, [r7, #0]
 800e4d4:	f7ff f9f4 	bl	800d8c0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e4d8:	4b31      	ldr	r3, [pc, #196]	; (800e5a0 <tcp_slowtmr+0x5a4>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d004      	beq.n	800e4ee <tcp_slowtmr+0x4f2>
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f06f 010c 	mvn.w	r1, #12
 800e4ea:	68b8      	ldr	r0, [r7, #8]
 800e4ec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e4ee:	4b2c      	ldr	r3, [pc, #176]	; (800e5a0 <tcp_slowtmr+0x5a4>)
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d037      	beq.n	800e566 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e4f6:	e592      	b.n	800e01e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e504:	7f1b      	ldrb	r3, [r3, #28]
 800e506:	3301      	adds	r3, #1
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e50c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e510:	7f1a      	ldrb	r2, [r3, #28]
 800e512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e514:	7f5b      	ldrb	r3, [r3, #29]
 800e516:	429a      	cmp	r2, r3
 800e518:	d325      	bcc.n	800e566 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51c:	2200      	movs	r2, #0
 800e51e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e520:	4b1f      	ldr	r3, [pc, #124]	; (800e5a0 <tcp_slowtmr+0x5a4>)
 800e522:	2200      	movs	r2, #0
 800e524:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d00b      	beq.n	800e548 <tcp_slowtmr+0x54c>
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e538:	6912      	ldr	r2, [r2, #16]
 800e53a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e53c:	4610      	mov	r0, r2
 800e53e:	4798      	blx	r3
 800e540:	4603      	mov	r3, r0
 800e542:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e546:	e002      	b.n	800e54e <tcp_slowtmr+0x552>
 800e548:	2300      	movs	r3, #0
 800e54a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e54e:	4b14      	ldr	r3, [pc, #80]	; (800e5a0 <tcp_slowtmr+0x5a4>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d000      	beq.n	800e558 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e556:	e562      	b.n	800e01e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e558:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d102      	bne.n	800e566 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e562:	f003 fb81 	bl	8011c68 <tcp_output>
  while (pcb != NULL) {
 800e566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e568:	2b00      	cmp	r3, #0
 800e56a:	f47f ad5e 	bne.w	800e02a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e56e:	2300      	movs	r3, #0
 800e570:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e572:	4b0c      	ldr	r3, [pc, #48]	; (800e5a4 <tcp_slowtmr+0x5a8>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e578:	e069      	b.n	800e64e <tcp_slowtmr+0x652>
 800e57a:	bf00      	nop
 800e57c:	20040b40 	.word	0x20040b40
 800e580:	000a4cb8 	.word	0x000a4cb8
 800e584:	10624dd3 	.word	0x10624dd3
 800e588:	000124f8 	.word	0x000124f8
 800e58c:	20040b4c 	.word	0x20040b4c
 800e590:	08023ea0 	.word	0x08023ea0
 800e594:	080242d8 	.word	0x080242d8
 800e598:	08023ee4 	.word	0x08023ee4
 800e59c:	08024304 	.word	0x08024304
 800e5a0:	20040b54 	.word	0x20040b54
 800e5a4:	20040b50 	.word	0x20040b50
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	7d1b      	ldrb	r3, [r3, #20]
 800e5ac:	2b0a      	cmp	r3, #10
 800e5ae:	d006      	beq.n	800e5be <tcp_slowtmr+0x5c2>
 800e5b0:	4b2b      	ldr	r3, [pc, #172]	; (800e660 <tcp_slowtmr+0x664>)
 800e5b2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e5b6:	492b      	ldr	r1, [pc, #172]	; (800e664 <tcp_slowtmr+0x668>)
 800e5b8:	482b      	ldr	r0, [pc, #172]	; (800e668 <tcp_slowtmr+0x66c>)
 800e5ba:	f013 fb87 	bl	8021ccc <iprintf>
    pcb_remove = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e5c4:	4b29      	ldr	r3, [pc, #164]	; (800e66c <tcp_slowtmr+0x670>)
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ca:	6a1b      	ldr	r3, [r3, #32]
 800e5cc:	1ad3      	subs	r3, r2, r3
 800e5ce:	2bf0      	cmp	r3, #240	; 0xf0
 800e5d0:	d904      	bls.n	800e5dc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e5d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d02f      	beq.n	800e644 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e5e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5e6:	f000 fb2b 	bl	800ec40 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d010      	beq.n	800e612 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e5f0:	4b1f      	ldr	r3, [pc, #124]	; (800e670 <tcp_slowtmr+0x674>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d106      	bne.n	800e608 <tcp_slowtmr+0x60c>
 800e5fa:	4b19      	ldr	r3, [pc, #100]	; (800e660 <tcp_slowtmr+0x664>)
 800e5fc:	f240 52af 	movw	r2, #1455	; 0x5af
 800e600:	491c      	ldr	r1, [pc, #112]	; (800e674 <tcp_slowtmr+0x678>)
 800e602:	4819      	ldr	r0, [pc, #100]	; (800e668 <tcp_slowtmr+0x66c>)
 800e604:	f013 fb62 	bl	8021ccc <iprintf>
        prev->next = pcb->next;
 800e608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60a:	68da      	ldr	r2, [r3, #12]
 800e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60e:	60da      	str	r2, [r3, #12]
 800e610:	e00f      	b.n	800e632 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e612:	4b17      	ldr	r3, [pc, #92]	; (800e670 <tcp_slowtmr+0x674>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e618:	429a      	cmp	r2, r3
 800e61a:	d006      	beq.n	800e62a <tcp_slowtmr+0x62e>
 800e61c:	4b10      	ldr	r3, [pc, #64]	; (800e660 <tcp_slowtmr+0x664>)
 800e61e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e622:	4915      	ldr	r1, [pc, #84]	; (800e678 <tcp_slowtmr+0x67c>)
 800e624:	4810      	ldr	r0, [pc, #64]	; (800e668 <tcp_slowtmr+0x66c>)
 800e626:	f013 fb51 	bl	8021ccc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	4a10      	ldr	r2, [pc, #64]	; (800e670 <tcp_slowtmr+0x674>)
 800e630:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e634:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e63c:	69f8      	ldr	r0, [r7, #28]
 800e63e:	f7ff f93f 	bl	800d8c0 <tcp_free>
 800e642:	e004      	b.n	800e64e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e646:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e650:	2b00      	cmp	r3, #0
 800e652:	d1a9      	bne.n	800e5a8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e654:	bf00      	nop
 800e656:	bf00      	nop
 800e658:	3730      	adds	r7, #48	; 0x30
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bdb0      	pop	{r4, r5, r7, pc}
 800e65e:	bf00      	nop
 800e660:	08023ea0 	.word	0x08023ea0
 800e664:	08024330 	.word	0x08024330
 800e668:	08023ee4 	.word	0x08023ee4
 800e66c:	20040b40 	.word	0x20040b40
 800e670:	20040b50 	.word	0x20040b50
 800e674:	08024360 	.word	0x08024360
 800e678:	08024388 	.word	0x08024388

0800e67c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e682:	4b2d      	ldr	r3, [pc, #180]	; (800e738 <tcp_fasttmr+0xbc>)
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	3301      	adds	r3, #1
 800e688:	b2da      	uxtb	r2, r3
 800e68a:	4b2b      	ldr	r3, [pc, #172]	; (800e738 <tcp_fasttmr+0xbc>)
 800e68c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e68e:	4b2b      	ldr	r3, [pc, #172]	; (800e73c <tcp_fasttmr+0xc0>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e694:	e048      	b.n	800e728 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	7f9a      	ldrb	r2, [r3, #30]
 800e69a:	4b27      	ldr	r3, [pc, #156]	; (800e738 <tcp_fasttmr+0xbc>)
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d03f      	beq.n	800e722 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e6a2:	4b25      	ldr	r3, [pc, #148]	; (800e738 <tcp_fasttmr+0xbc>)
 800e6a4:	781a      	ldrb	r2, [r3, #0]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	8b5b      	ldrh	r3, [r3, #26]
 800e6ae:	f003 0301 	and.w	r3, r3, #1
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d010      	beq.n	800e6d8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ba:	f043 0302 	orr.w	r3, r3, #2
 800e6be:	b29a      	uxth	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f003 facf 	bl	8011c68 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	8b5b      	ldrh	r3, [r3, #26]
 800e6ce:	f023 0303 	bic.w	r3, r3, #3
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	8b5b      	ldrh	r3, [r3, #26]
 800e6dc:	f003 0308 	and.w	r3, r3, #8
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d009      	beq.n	800e6f8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	8b5b      	ldrh	r3, [r3, #26]
 800e6e8:	f023 0308 	bic.w	r3, r3, #8
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7ff fa78 	bl	800dbe8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00a      	beq.n	800e71c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e706:	4b0e      	ldr	r3, [pc, #56]	; (800e740 <tcp_fasttmr+0xc4>)
 800e708:	2200      	movs	r2, #0
 800e70a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f000 f819 	bl	800e744 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e712:	4b0b      	ldr	r3, [pc, #44]	; (800e740 <tcp_fasttmr+0xc4>)
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d000      	beq.n	800e71c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e71a:	e7b8      	b.n	800e68e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	607b      	str	r3, [r7, #4]
 800e720:	e002      	b.n	800e728 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1b3      	bne.n	800e696 <tcp_fasttmr+0x1a>
    }
  }
}
 800e72e:	bf00      	nop
 800e730:	bf00      	nop
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	20040b56 	.word	0x20040b56
 800e73c:	20040b4c 	.word	0x20040b4c
 800e740:	20040b54 	.word	0x20040b54

0800e744 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e744:	b590      	push	{r4, r7, lr}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d109      	bne.n	800e766 <tcp_process_refused_data+0x22>
 800e752:	4b37      	ldr	r3, [pc, #220]	; (800e830 <tcp_process_refused_data+0xec>)
 800e754:	f240 6209 	movw	r2, #1545	; 0x609
 800e758:	4936      	ldr	r1, [pc, #216]	; (800e834 <tcp_process_refused_data+0xf0>)
 800e75a:	4837      	ldr	r0, [pc, #220]	; (800e838 <tcp_process_refused_data+0xf4>)
 800e75c:	f013 fab6 	bl	8021ccc <iprintf>
 800e760:	f06f 030f 	mvn.w	r3, #15
 800e764:	e060      	b.n	800e828 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e76a:	7b5b      	ldrb	r3, [r3, #13]
 800e76c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e772:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2200      	movs	r2, #0
 800e778:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e780:	2b00      	cmp	r3, #0
 800e782:	d00b      	beq.n	800e79c <tcp_process_refused_data+0x58>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6918      	ldr	r0, [r3, #16]
 800e78e:	2300      	movs	r3, #0
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	6879      	ldr	r1, [r7, #4]
 800e794:	47a0      	blx	r4
 800e796:	4603      	mov	r3, r0
 800e798:	73fb      	strb	r3, [r7, #15]
 800e79a:	e007      	b.n	800e7ac <tcp_process_refused_data+0x68>
 800e79c:	2300      	movs	r3, #0
 800e79e:	68ba      	ldr	r2, [r7, #8]
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	2000      	movs	r0, #0
 800e7a4:	f000 f8a4 	bl	800e8f0 <tcp_recv_null>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e7ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d12a      	bne.n	800e80a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e7b4:	7bbb      	ldrb	r3, [r7, #14]
 800e7b6:	f003 0320 	and.w	r3, r3, #32
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d033      	beq.n	800e826 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e7c6:	d005      	beq.n	800e7d4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00b      	beq.n	800e7f6 <tcp_process_refused_data+0xb2>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	6918      	ldr	r0, [r3, #16]
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	6879      	ldr	r1, [r7, #4]
 800e7ee:	47a0      	blx	r4
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	73fb      	strb	r3, [r7, #15]
 800e7f4:	e001      	b.n	800e7fa <tcp_process_refused_data+0xb6>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7fe:	f113 0f0d 	cmn.w	r3, #13
 800e802:	d110      	bne.n	800e826 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e804:	f06f 030c 	mvn.w	r3, #12
 800e808:	e00e      	b.n	800e828 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e80e:	f113 0f0d 	cmn.w	r3, #13
 800e812:	d102      	bne.n	800e81a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e814:	f06f 030c 	mvn.w	r3, #12
 800e818:	e006      	b.n	800e828 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	68ba      	ldr	r2, [r7, #8]
 800e81e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e820:	f06f 0304 	mvn.w	r3, #4
 800e824:	e000      	b.n	800e828 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e826:	2300      	movs	r3, #0
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3714      	adds	r7, #20
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd90      	pop	{r4, r7, pc}
 800e830:	08023ea0 	.word	0x08023ea0
 800e834:	080243b0 	.word	0x080243b0
 800e838:	08023ee4 	.word	0x08023ee4

0800e83c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e844:	e007      	b.n	800e856 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 f80a 	bl	800e866 <tcp_seg_free>
    seg = next;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d1f4      	bne.n	800e846 <tcp_segs_free+0xa>
  }
}
 800e85c:	bf00      	nop
 800e85e:	bf00      	nop
 800e860:	3710      	adds	r7, #16
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e866:	b580      	push	{r7, lr}
 800e868:	b082      	sub	sp, #8
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00c      	beq.n	800e88e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d004      	beq.n	800e886 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	4618      	mov	r0, r3
 800e882:	f7fe fbe5 	bl	800d050 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e886:	6879      	ldr	r1, [r7, #4]
 800e888:	2003      	movs	r0, #3
 800e88a:	f7fd fd1f 	bl	800c2cc <memp_free>
  }
}
 800e88e:	bf00      	nop
 800e890:	3708      	adds	r7, #8
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
	...

0800e898 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d106      	bne.n	800e8b4 <tcp_seg_copy+0x1c>
 800e8a6:	4b0f      	ldr	r3, [pc, #60]	; (800e8e4 <tcp_seg_copy+0x4c>)
 800e8a8:	f240 6282 	movw	r2, #1666	; 0x682
 800e8ac:	490e      	ldr	r1, [pc, #56]	; (800e8e8 <tcp_seg_copy+0x50>)
 800e8ae:	480f      	ldr	r0, [pc, #60]	; (800e8ec <tcp_seg_copy+0x54>)
 800e8b0:	f013 fa0c 	bl	8021ccc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e8b4:	2003      	movs	r0, #3
 800e8b6:	f7fd fcb7 	bl	800c228 <memp_malloc>
 800e8ba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d101      	bne.n	800e8c6 <tcp_seg_copy+0x2e>
    return NULL;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	e00a      	b.n	800e8dc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e8c6:	2210      	movs	r2, #16
 800e8c8:	6879      	ldr	r1, [r7, #4]
 800e8ca:	68f8      	ldr	r0, [r7, #12]
 800e8cc:	f013 f8d8 	bl	8021a80 <memcpy>
  pbuf_ref(cseg->p);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7fe fc61 	bl	800d19c <pbuf_ref>
  return cseg;
 800e8da:	68fb      	ldr	r3, [r7, #12]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	08023ea0 	.word	0x08023ea0
 800e8e8:	080243f4 	.word	0x080243f4
 800e8ec:	08023ee4 	.word	0x08023ee4

0800e8f0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	60f8      	str	r0, [r7, #12]
 800e8f8:	60b9      	str	r1, [r7, #8]
 800e8fa:	607a      	str	r2, [r7, #4]
 800e8fc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d109      	bne.n	800e918 <tcp_recv_null+0x28>
 800e904:	4b12      	ldr	r3, [pc, #72]	; (800e950 <tcp_recv_null+0x60>)
 800e906:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e90a:	4912      	ldr	r1, [pc, #72]	; (800e954 <tcp_recv_null+0x64>)
 800e90c:	4812      	ldr	r0, [pc, #72]	; (800e958 <tcp_recv_null+0x68>)
 800e90e:	f013 f9dd 	bl	8021ccc <iprintf>
 800e912:	f06f 030f 	mvn.w	r3, #15
 800e916:	e016      	b.n	800e946 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d009      	beq.n	800e932 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	891b      	ldrh	r3, [r3, #8]
 800e922:	4619      	mov	r1, r3
 800e924:	68b8      	ldr	r0, [r7, #8]
 800e926:	f7ff fb19 	bl	800df5c <tcp_recved>
    pbuf_free(p);
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7fe fb90 	bl	800d050 <pbuf_free>
 800e930:	e008      	b.n	800e944 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d104      	bne.n	800e944 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e93a:	68b8      	ldr	r0, [r7, #8]
 800e93c:	f7ff f9be 	bl	800dcbc <tcp_close>
 800e940:	4603      	mov	r3, r0
 800e942:	e000      	b.n	800e946 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	08023ea0 	.word	0x08023ea0
 800e954:	08024410 	.word	0x08024410
 800e958:	08023ee4 	.word	0x08023ee4

0800e95c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	4603      	mov	r3, r0
 800e964:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	db01      	blt.n	800e972 <tcp_kill_prio+0x16>
 800e96e:	79fb      	ldrb	r3, [r7, #7]
 800e970:	e000      	b.n	800e974 <tcp_kill_prio+0x18>
 800e972:	237f      	movs	r3, #127	; 0x7f
 800e974:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e976:	7afb      	ldrb	r3, [r7, #11]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d034      	beq.n	800e9e6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e97c:	7afb      	ldrb	r3, [r7, #11]
 800e97e:	3b01      	subs	r3, #1
 800e980:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e982:	2300      	movs	r3, #0
 800e984:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e986:	2300      	movs	r3, #0
 800e988:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e98a:	4b19      	ldr	r3, [pc, #100]	; (800e9f0 <tcp_kill_prio+0x94>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	617b      	str	r3, [r7, #20]
 800e990:	e01f      	b.n	800e9d2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	7d5b      	ldrb	r3, [r3, #21]
 800e996:	7afa      	ldrb	r2, [r7, #11]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d80c      	bhi.n	800e9b6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e9a0:	7afa      	ldrb	r2, [r7, #11]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d112      	bne.n	800e9cc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e9a6:	4b13      	ldr	r3, [pc, #76]	; (800e9f4 <tcp_kill_prio+0x98>)
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	6a1b      	ldr	r3, [r3, #32]
 800e9ae:	1ad3      	subs	r3, r2, r3
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d80a      	bhi.n	800e9cc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e9b6:	4b0f      	ldr	r3, [pc, #60]	; (800e9f4 <tcp_kill_prio+0x98>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	6a1b      	ldr	r3, [r3, #32]
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	7d5b      	ldrb	r3, [r3, #21]
 800e9ca:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	617b      	str	r3, [r7, #20]
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1dc      	bne.n	800e992 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d004      	beq.n	800e9e8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e9de:	6938      	ldr	r0, [r7, #16]
 800e9e0:	f7ff fa56 	bl	800de90 <tcp_abort>
 800e9e4:	e000      	b.n	800e9e8 <tcp_kill_prio+0x8c>
    return;
 800e9e6:	bf00      	nop
  }
}
 800e9e8:	3718      	adds	r7, #24
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20040b4c 	.word	0x20040b4c
 800e9f4:	20040b40 	.word	0x20040b40

0800e9f8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	4603      	mov	r3, r0
 800ea00:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ea02:	79fb      	ldrb	r3, [r7, #7]
 800ea04:	2b08      	cmp	r3, #8
 800ea06:	d009      	beq.n	800ea1c <tcp_kill_state+0x24>
 800ea08:	79fb      	ldrb	r3, [r7, #7]
 800ea0a:	2b09      	cmp	r3, #9
 800ea0c:	d006      	beq.n	800ea1c <tcp_kill_state+0x24>
 800ea0e:	4b1a      	ldr	r3, [pc, #104]	; (800ea78 <tcp_kill_state+0x80>)
 800ea10:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ea14:	4919      	ldr	r1, [pc, #100]	; (800ea7c <tcp_kill_state+0x84>)
 800ea16:	481a      	ldr	r0, [pc, #104]	; (800ea80 <tcp_kill_state+0x88>)
 800ea18:	f013 f958 	bl	8021ccc <iprintf>

  inactivity = 0;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ea20:	2300      	movs	r3, #0
 800ea22:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea24:	4b17      	ldr	r3, [pc, #92]	; (800ea84 <tcp_kill_state+0x8c>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	617b      	str	r3, [r7, #20]
 800ea2a:	e017      	b.n	800ea5c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	7d1b      	ldrb	r3, [r3, #20]
 800ea30:	79fa      	ldrb	r2, [r7, #7]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d10f      	bne.n	800ea56 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ea36:	4b14      	ldr	r3, [pc, #80]	; (800ea88 <tcp_kill_state+0x90>)
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	6a1b      	ldr	r3, [r3, #32]
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d807      	bhi.n	800ea56 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ea46:	4b10      	ldr	r3, [pc, #64]	; (800ea88 <tcp_kill_state+0x90>)
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	6a1b      	ldr	r3, [r3, #32]
 800ea4e:	1ad3      	subs	r3, r2, r3
 800ea50:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	68db      	ldr	r3, [r3, #12]
 800ea5a:	617b      	str	r3, [r7, #20]
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1e4      	bne.n	800ea2c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d003      	beq.n	800ea70 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ea68:	2100      	movs	r1, #0
 800ea6a:	6938      	ldr	r0, [r7, #16]
 800ea6c:	f7ff f952 	bl	800dd14 <tcp_abandon>
  }
}
 800ea70:	bf00      	nop
 800ea72:	3718      	adds	r7, #24
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}
 800ea78:	08023ea0 	.word	0x08023ea0
 800ea7c:	0802442c 	.word	0x0802442c
 800ea80:	08023ee4 	.word	0x08023ee4
 800ea84:	20040b4c 	.word	0x20040b4c
 800ea88:	20040b40 	.word	0x20040b40

0800ea8c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b084      	sub	sp, #16
 800ea90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ea96:	2300      	movs	r3, #0
 800ea98:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea9a:	4b12      	ldr	r3, [pc, #72]	; (800eae4 <tcp_kill_timewait+0x58>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	60fb      	str	r3, [r7, #12]
 800eaa0:	e012      	b.n	800eac8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eaa2:	4b11      	ldr	r3, [pc, #68]	; (800eae8 <tcp_kill_timewait+0x5c>)
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	6a1b      	ldr	r3, [r3, #32]
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d807      	bhi.n	800eac2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800eab2:	4b0d      	ldr	r3, [pc, #52]	; (800eae8 <tcp_kill_timewait+0x5c>)
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	6a1b      	ldr	r3, [r3, #32]
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	60fb      	str	r3, [r7, #12]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1e9      	bne.n	800eaa2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d002      	beq.n	800eada <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ead4:	68b8      	ldr	r0, [r7, #8]
 800ead6:	f7ff f9db 	bl	800de90 <tcp_abort>
  }
}
 800eada:	bf00      	nop
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	20040b50 	.word	0x20040b50
 800eae8:	20040b40 	.word	0x20040b40

0800eaec <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eaf2:	4b10      	ldr	r3, [pc, #64]	; (800eb34 <tcp_handle_closepend+0x48>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eaf8:	e014      	b.n	800eb24 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	8b5b      	ldrh	r3, [r3, #26]
 800eb04:	f003 0308 	and.w	r3, r3, #8
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d009      	beq.n	800eb20 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	8b5b      	ldrh	r3, [r3, #26]
 800eb10:	f023 0308 	bic.w	r3, r3, #8
 800eb14:	b29a      	uxth	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f7ff f864 	bl	800dbe8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1e7      	bne.n	800eafa <tcp_handle_closepend+0xe>
  }
}
 800eb2a:	bf00      	nop
 800eb2c:	bf00      	nop
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	20040b4c 	.word	0x20040b4c

0800eb38 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	4603      	mov	r3, r0
 800eb40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb42:	2001      	movs	r0, #1
 800eb44:	f7fd fb70 	bl	800c228 <memp_malloc>
 800eb48:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d126      	bne.n	800eb9e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800eb50:	f7ff ffcc 	bl	800eaec <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800eb54:	f7ff ff9a 	bl	800ea8c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb58:	2001      	movs	r0, #1
 800eb5a:	f7fd fb65 	bl	800c228 <memp_malloc>
 800eb5e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d11b      	bne.n	800eb9e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eb66:	2009      	movs	r0, #9
 800eb68:	f7ff ff46 	bl	800e9f8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb6c:	2001      	movs	r0, #1
 800eb6e:	f7fd fb5b 	bl	800c228 <memp_malloc>
 800eb72:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d111      	bne.n	800eb9e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800eb7a:	2008      	movs	r0, #8
 800eb7c:	f7ff ff3c 	bl	800e9f8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb80:	2001      	movs	r0, #1
 800eb82:	f7fd fb51 	bl	800c228 <memp_malloc>
 800eb86:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d107      	bne.n	800eb9e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7ff fee3 	bl	800e95c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb96:	2001      	movs	r0, #1
 800eb98:	f7fd fb46 	bl	800c228 <memp_malloc>
 800eb9c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d03f      	beq.n	800ec24 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800eba4:	229c      	movs	r2, #156	; 0x9c
 800eba6:	2100      	movs	r1, #0
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	f012 ff91 	bl	8021ad0 <memset>
    pcb->prio = prio;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	79fa      	ldrb	r2, [r7, #7]
 800ebb2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ebba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ebc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	22ff      	movs	r2, #255	; 0xff
 800ebd2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ebda:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2206      	movs	r2, #6
 800ebe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2206      	movs	r2, #6
 800ebe8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebf0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ebfa:	4b0d      	ldr	r3, [pc, #52]	; (800ec30 <tcp_alloc+0xf8>)
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ec02:	4b0c      	ldr	r3, [pc, #48]	; (800ec34 <tcp_alloc+0xfc>)
 800ec04:	781a      	ldrb	r2, [r3, #0]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ec10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	4a08      	ldr	r2, [pc, #32]	; (800ec38 <tcp_alloc+0x100>)
 800ec18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	4a07      	ldr	r2, [pc, #28]	; (800ec3c <tcp_alloc+0x104>)
 800ec20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ec24:	68fb      	ldr	r3, [r7, #12]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	20040b40 	.word	0x20040b40
 800ec34:	20040b56 	.word	0x20040b56
 800ec38:	0800e8f1 	.word	0x0800e8f1
 800ec3c:	006ddd00 	.word	0x006ddd00

0800ec40 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d107      	bne.n	800ec5e <tcp_pcb_purge+0x1e>
 800ec4e:	4b21      	ldr	r3, [pc, #132]	; (800ecd4 <tcp_pcb_purge+0x94>)
 800ec50:	f640 0251 	movw	r2, #2129	; 0x851
 800ec54:	4920      	ldr	r1, [pc, #128]	; (800ecd8 <tcp_pcb_purge+0x98>)
 800ec56:	4821      	ldr	r0, [pc, #132]	; (800ecdc <tcp_pcb_purge+0x9c>)
 800ec58:	f013 f838 	bl	8021ccc <iprintf>
 800ec5c:	e037      	b.n	800ecce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	7d1b      	ldrb	r3, [r3, #20]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d033      	beq.n	800ecce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ec6a:	2b0a      	cmp	r3, #10
 800ec6c:	d02f      	beq.n	800ecce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d02b      	beq.n	800ecce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d007      	beq.n	800ec8e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fe f9e4 	bl	800d050 <pbuf_free>
      pcb->refused_data = NULL;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d002      	beq.n	800ec9c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 f986 	bl	800efa8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eca2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7ff fdc7 	bl	800e83c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7ff fdc2 	bl	800e83c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	66da      	str	r2, [r3, #108]	; 0x6c
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}
 800ecd4:	08023ea0 	.word	0x08023ea0
 800ecd8:	080244ec 	.word	0x080244ec
 800ecdc:	08023ee4 	.word	0x08023ee4

0800ece0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b084      	sub	sp, #16
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d106      	bne.n	800ecfe <tcp_pcb_remove+0x1e>
 800ecf0:	4b3e      	ldr	r3, [pc, #248]	; (800edec <tcp_pcb_remove+0x10c>)
 800ecf2:	f640 0283 	movw	r2, #2179	; 0x883
 800ecf6:	493e      	ldr	r1, [pc, #248]	; (800edf0 <tcp_pcb_remove+0x110>)
 800ecf8:	483e      	ldr	r0, [pc, #248]	; (800edf4 <tcp_pcb_remove+0x114>)
 800ecfa:	f012 ffe7 	bl	8021ccc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d106      	bne.n	800ed12 <tcp_pcb_remove+0x32>
 800ed04:	4b39      	ldr	r3, [pc, #228]	; (800edec <tcp_pcb_remove+0x10c>)
 800ed06:	f640 0284 	movw	r2, #2180	; 0x884
 800ed0a:	493b      	ldr	r1, [pc, #236]	; (800edf8 <tcp_pcb_remove+0x118>)
 800ed0c:	4839      	ldr	r0, [pc, #228]	; (800edf4 <tcp_pcb_remove+0x114>)
 800ed0e:	f012 ffdd 	bl	8021ccc <iprintf>

  TCP_RMV(pcblist, pcb);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	683a      	ldr	r2, [r7, #0]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d105      	bne.n	800ed28 <tcp_pcb_remove+0x48>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	68da      	ldr	r2, [r3, #12]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	601a      	str	r2, [r3, #0]
 800ed26:	e013      	b.n	800ed50 <tcp_pcb_remove+0x70>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	60fb      	str	r3, [r7, #12]
 800ed2e:	e00c      	b.n	800ed4a <tcp_pcb_remove+0x6a>
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	683a      	ldr	r2, [r7, #0]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d104      	bne.n	800ed44 <tcp_pcb_remove+0x64>
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	68da      	ldr	r2, [r3, #12]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	60da      	str	r2, [r3, #12]
 800ed42:	e005      	b.n	800ed50 <tcp_pcb_remove+0x70>
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	60fb      	str	r3, [r7, #12]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d1ef      	bne.n	800ed30 <tcp_pcb_remove+0x50>
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	2200      	movs	r2, #0
 800ed54:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ed56:	6838      	ldr	r0, [r7, #0]
 800ed58:	f7ff ff72 	bl	800ec40 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	7d1b      	ldrb	r3, [r3, #20]
 800ed60:	2b0a      	cmp	r3, #10
 800ed62:	d013      	beq.n	800ed8c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d00f      	beq.n	800ed8c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	8b5b      	ldrh	r3, [r3, #26]
 800ed70:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d009      	beq.n	800ed8c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	8b5b      	ldrh	r3, [r3, #26]
 800ed7c:	f043 0302 	orr.w	r3, r3, #2
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed86:	6838      	ldr	r0, [r7, #0]
 800ed88:	f002 ff6e 	bl	8011c68 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	7d1b      	ldrb	r3, [r3, #20]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d020      	beq.n	800edd6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d006      	beq.n	800edaa <tcp_pcb_remove+0xca>
 800ed9c:	4b13      	ldr	r3, [pc, #76]	; (800edec <tcp_pcb_remove+0x10c>)
 800ed9e:	f640 0293 	movw	r2, #2195	; 0x893
 800eda2:	4916      	ldr	r1, [pc, #88]	; (800edfc <tcp_pcb_remove+0x11c>)
 800eda4:	4813      	ldr	r0, [pc, #76]	; (800edf4 <tcp_pcb_remove+0x114>)
 800eda6:	f012 ff91 	bl	8021ccc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d006      	beq.n	800edc0 <tcp_pcb_remove+0xe0>
 800edb2:	4b0e      	ldr	r3, [pc, #56]	; (800edec <tcp_pcb_remove+0x10c>)
 800edb4:	f640 0294 	movw	r2, #2196	; 0x894
 800edb8:	4911      	ldr	r1, [pc, #68]	; (800ee00 <tcp_pcb_remove+0x120>)
 800edba:	480e      	ldr	r0, [pc, #56]	; (800edf4 <tcp_pcb_remove+0x114>)
 800edbc:	f012 ff86 	bl	8021ccc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d006      	beq.n	800edd6 <tcp_pcb_remove+0xf6>
 800edc8:	4b08      	ldr	r3, [pc, #32]	; (800edec <tcp_pcb_remove+0x10c>)
 800edca:	f640 0296 	movw	r2, #2198	; 0x896
 800edce:	490d      	ldr	r1, [pc, #52]	; (800ee04 <tcp_pcb_remove+0x124>)
 800edd0:	4808      	ldr	r0, [pc, #32]	; (800edf4 <tcp_pcb_remove+0x114>)
 800edd2:	f012 ff7b 	bl	8021ccc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	2200      	movs	r2, #0
 800edda:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	2200      	movs	r2, #0
 800ede0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ede2:	bf00      	nop
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	08023ea0 	.word	0x08023ea0
 800edf0:	08024508 	.word	0x08024508
 800edf4:	08023ee4 	.word	0x08023ee4
 800edf8:	08024524 	.word	0x08024524
 800edfc:	08024544 	.word	0x08024544
 800ee00:	0802455c 	.word	0x0802455c
 800ee04:	08024578 	.word	0x08024578

0800ee08 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d106      	bne.n	800ee24 <tcp_next_iss+0x1c>
 800ee16:	4b0a      	ldr	r3, [pc, #40]	; (800ee40 <tcp_next_iss+0x38>)
 800ee18:	f640 02af 	movw	r2, #2223	; 0x8af
 800ee1c:	4909      	ldr	r1, [pc, #36]	; (800ee44 <tcp_next_iss+0x3c>)
 800ee1e:	480a      	ldr	r0, [pc, #40]	; (800ee48 <tcp_next_iss+0x40>)
 800ee20:	f012 ff54 	bl	8021ccc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ee24:	4b09      	ldr	r3, [pc, #36]	; (800ee4c <tcp_next_iss+0x44>)
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	4b09      	ldr	r3, [pc, #36]	; (800ee50 <tcp_next_iss+0x48>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	4a07      	ldr	r2, [pc, #28]	; (800ee4c <tcp_next_iss+0x44>)
 800ee30:	6013      	str	r3, [r2, #0]
  return iss;
 800ee32:	4b06      	ldr	r3, [pc, #24]	; (800ee4c <tcp_next_iss+0x44>)
 800ee34:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3708      	adds	r7, #8
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	08023ea0 	.word	0x08023ea0
 800ee44:	08024590 	.word	0x08024590
 800ee48:	08023ee4 	.word	0x08023ee4
 800ee4c:	20000018 	.word	0x20000018
 800ee50:	20040b40 	.word	0x20040b40

0800ee54 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	607a      	str	r2, [r7, #4]
 800ee60:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d106      	bne.n	800ee76 <tcp_eff_send_mss_netif+0x22>
 800ee68:	4b14      	ldr	r3, [pc, #80]	; (800eebc <tcp_eff_send_mss_netif+0x68>)
 800ee6a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ee6e:	4914      	ldr	r1, [pc, #80]	; (800eec0 <tcp_eff_send_mss_netif+0x6c>)
 800ee70:	4814      	ldr	r0, [pc, #80]	; (800eec4 <tcp_eff_send_mss_netif+0x70>)
 800ee72:	f012 ff2b 	bl	8021ccc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d101      	bne.n	800ee80 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ee7c:	89fb      	ldrh	r3, [r7, #14]
 800ee7e:	e019      	b.n	800eeb4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee84:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ee86:	8afb      	ldrh	r3, [r7, #22]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d012      	beq.n	800eeb2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ee8c:	2328      	movs	r3, #40	; 0x28
 800ee8e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ee90:	8afa      	ldrh	r2, [r7, #22]
 800ee92:	8abb      	ldrh	r3, [r7, #20]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d904      	bls.n	800eea2 <tcp_eff_send_mss_netif+0x4e>
 800ee98:	8afa      	ldrh	r2, [r7, #22]
 800ee9a:	8abb      	ldrh	r3, [r7, #20]
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	e000      	b.n	800eea4 <tcp_eff_send_mss_netif+0x50>
 800eea2:	2300      	movs	r3, #0
 800eea4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eea6:	8a7a      	ldrh	r2, [r7, #18]
 800eea8:	89fb      	ldrh	r3, [r7, #14]
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	bf28      	it	cs
 800eeae:	4613      	movcs	r3, r2
 800eeb0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eeb2:	89fb      	ldrh	r3, [r7, #14]
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3718      	adds	r7, #24
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	08023ea0 	.word	0x08023ea0
 800eec0:	080245ac 	.word	0x080245ac
 800eec4:	08023ee4 	.word	0x08023ee4

0800eec8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d119      	bne.n	800ef10 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eedc:	4b10      	ldr	r3, [pc, #64]	; (800ef20 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eede:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800eee2:	4910      	ldr	r1, [pc, #64]	; (800ef24 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800eee4:	4810      	ldr	r0, [pc, #64]	; (800ef28 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800eee6:	f012 fef1 	bl	8021ccc <iprintf>

  while (pcb != NULL) {
 800eeea:	e011      	b.n	800ef10 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d108      	bne.n	800ef0a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800eefe:	68f8      	ldr	r0, [r7, #12]
 800ef00:	f7fe ffc6 	bl	800de90 <tcp_abort>
      pcb = next;
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	60fb      	str	r3, [r7, #12]
 800ef08:	e002      	b.n	800ef10 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	68db      	ldr	r3, [r3, #12]
 800ef0e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1ea      	bne.n	800eeec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ef16:	bf00      	nop
 800ef18:	bf00      	nop
 800ef1a:	3710      	adds	r7, #16
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	08023ea0 	.word	0x08023ea0
 800ef24:	080245d4 	.word	0x080245d4
 800ef28:	08023ee4 	.word	0x08023ee4

0800ef2c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d02a      	beq.n	800ef92 <tcp_netif_ip_addr_changed+0x66>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d026      	beq.n	800ef92 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ef44:	4b15      	ldr	r3, [pc, #84]	; (800ef9c <tcp_netif_ip_addr_changed+0x70>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4619      	mov	r1, r3
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7ff ffbc 	bl	800eec8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ef50:	4b13      	ldr	r3, [pc, #76]	; (800efa0 <tcp_netif_ip_addr_changed+0x74>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4619      	mov	r1, r3
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f7ff ffb6 	bl	800eec8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d017      	beq.n	800ef92 <tcp_netif_ip_addr_changed+0x66>
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d013      	beq.n	800ef92 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef6a:	4b0e      	ldr	r3, [pc, #56]	; (800efa4 <tcp_netif_ip_addr_changed+0x78>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	60fb      	str	r3, [r7, #12]
 800ef70:	e00c      	b.n	800ef8c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d103      	bne.n	800ef86 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	60fb      	str	r3, [r7, #12]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1ef      	bne.n	800ef72 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ef92:	bf00      	nop
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	20040b4c 	.word	0x20040b4c
 800efa0:	20040b44 	.word	0x20040b44
 800efa4:	20040b48 	.word	0x20040b48

0800efa8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d007      	beq.n	800efc8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7ff fc3d 	bl	800e83c <tcp_segs_free>
    pcb->ooseq = NULL;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800efc8:	bf00      	nop
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800efd0:	b590      	push	{r4, r7, lr}
 800efd2:	b08d      	sub	sp, #52	; 0x34
 800efd4:	af04      	add	r7, sp, #16
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d105      	bne.n	800efec <tcp_input+0x1c>
 800efe0:	4b9b      	ldr	r3, [pc, #620]	; (800f250 <tcp_input+0x280>)
 800efe2:	2283      	movs	r2, #131	; 0x83
 800efe4:	499b      	ldr	r1, [pc, #620]	; (800f254 <tcp_input+0x284>)
 800efe6:	489c      	ldr	r0, [pc, #624]	; (800f258 <tcp_input+0x288>)
 800efe8:	f012 fe70 	bl	8021ccc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	4a9a      	ldr	r2, [pc, #616]	; (800f25c <tcp_input+0x28c>)
 800eff2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	895b      	ldrh	r3, [r3, #10]
 800eff8:	2b13      	cmp	r3, #19
 800effa:	f240 83d1 	bls.w	800f7a0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800effe:	4b98      	ldr	r3, [pc, #608]	; (800f260 <tcp_input+0x290>)
 800f000:	695b      	ldr	r3, [r3, #20]
 800f002:	4a97      	ldr	r2, [pc, #604]	; (800f260 <tcp_input+0x290>)
 800f004:	6812      	ldr	r2, [r2, #0]
 800f006:	4611      	mov	r1, r2
 800f008:	4618      	mov	r0, r3
 800f00a:	f006 fbc3 	bl	8015794 <ip4_addr_isbroadcast_u32>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	f040 83c7 	bne.w	800f7a4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f016:	4b92      	ldr	r3, [pc, #584]	; (800f260 <tcp_input+0x290>)
 800f018:	695b      	ldr	r3, [r3, #20]
 800f01a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f01e:	2be0      	cmp	r3, #224	; 0xe0
 800f020:	f000 83c0 	beq.w	800f7a4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f024:	4b8d      	ldr	r3, [pc, #564]	; (800f25c <tcp_input+0x28c>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	899b      	ldrh	r3, [r3, #12]
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fc f8f9 	bl	800b224 <lwip_htons>
 800f032:	4603      	mov	r3, r0
 800f034:	0b1b      	lsrs	r3, r3, #12
 800f036:	b29b      	uxth	r3, r3
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f03e:	7cbb      	ldrb	r3, [r7, #18]
 800f040:	2b13      	cmp	r3, #19
 800f042:	f240 83b1 	bls.w	800f7a8 <tcp_input+0x7d8>
 800f046:	7cbb      	ldrb	r3, [r7, #18]
 800f048:	b29a      	uxth	r2, r3
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	891b      	ldrh	r3, [r3, #8]
 800f04e:	429a      	cmp	r2, r3
 800f050:	f200 83aa 	bhi.w	800f7a8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f054:	7cbb      	ldrb	r3, [r7, #18]
 800f056:	b29b      	uxth	r3, r3
 800f058:	3b14      	subs	r3, #20
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	4b81      	ldr	r3, [pc, #516]	; (800f264 <tcp_input+0x294>)
 800f05e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f060:	4b81      	ldr	r3, [pc, #516]	; (800f268 <tcp_input+0x298>)
 800f062:	2200      	movs	r2, #0
 800f064:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	895a      	ldrh	r2, [r3, #10]
 800f06a:	7cbb      	ldrb	r3, [r7, #18]
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	429a      	cmp	r2, r3
 800f070:	d309      	bcc.n	800f086 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f072:	4b7c      	ldr	r3, [pc, #496]	; (800f264 <tcp_input+0x294>)
 800f074:	881a      	ldrh	r2, [r3, #0]
 800f076:	4b7d      	ldr	r3, [pc, #500]	; (800f26c <tcp_input+0x29c>)
 800f078:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f07a:	7cbb      	ldrb	r3, [r7, #18]
 800f07c:	4619      	mov	r1, r3
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f7fd ff60 	bl	800cf44 <pbuf_remove_header>
 800f084:	e04e      	b.n	800f124 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d105      	bne.n	800f09a <tcp_input+0xca>
 800f08e:	4b70      	ldr	r3, [pc, #448]	; (800f250 <tcp_input+0x280>)
 800f090:	22c2      	movs	r2, #194	; 0xc2
 800f092:	4977      	ldr	r1, [pc, #476]	; (800f270 <tcp_input+0x2a0>)
 800f094:	4870      	ldr	r0, [pc, #448]	; (800f258 <tcp_input+0x288>)
 800f096:	f012 fe19 	bl	8021ccc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f09a:	2114      	movs	r1, #20
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f7fd ff51 	bl	800cf44 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	895a      	ldrh	r2, [r3, #10]
 800f0a6:	4b71      	ldr	r3, [pc, #452]	; (800f26c <tcp_input+0x29c>)
 800f0a8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f0aa:	4b6e      	ldr	r3, [pc, #440]	; (800f264 <tcp_input+0x294>)
 800f0ac:	881a      	ldrh	r2, [r3, #0]
 800f0ae:	4b6f      	ldr	r3, [pc, #444]	; (800f26c <tcp_input+0x29c>)
 800f0b0:	881b      	ldrh	r3, [r3, #0]
 800f0b2:	1ad3      	subs	r3, r2, r3
 800f0b4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f0b6:	4b6d      	ldr	r3, [pc, #436]	; (800f26c <tcp_input+0x29c>)
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7fd ff41 	bl	800cf44 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	895b      	ldrh	r3, [r3, #10]
 800f0c8:	8a3a      	ldrh	r2, [r7, #16]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	f200 836e 	bhi.w	800f7ac <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	4a64      	ldr	r2, [pc, #400]	; (800f268 <tcp_input+0x298>)
 800f0d8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	8a3a      	ldrh	r2, [r7, #16]
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7fd ff2e 	bl	800cf44 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	891a      	ldrh	r2, [r3, #8]
 800f0ec:	8a3b      	ldrh	r3, [r7, #16]
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	895b      	ldrh	r3, [r3, #10]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d005      	beq.n	800f10a <tcp_input+0x13a>
 800f0fe:	4b54      	ldr	r3, [pc, #336]	; (800f250 <tcp_input+0x280>)
 800f100:	22df      	movs	r2, #223	; 0xdf
 800f102:	495c      	ldr	r1, [pc, #368]	; (800f274 <tcp_input+0x2a4>)
 800f104:	4854      	ldr	r0, [pc, #336]	; (800f258 <tcp_input+0x288>)
 800f106:	f012 fde1 	bl	8021ccc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	891a      	ldrh	r2, [r3, #8]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	891b      	ldrh	r3, [r3, #8]
 800f114:	429a      	cmp	r2, r3
 800f116:	d005      	beq.n	800f124 <tcp_input+0x154>
 800f118:	4b4d      	ldr	r3, [pc, #308]	; (800f250 <tcp_input+0x280>)
 800f11a:	22e0      	movs	r2, #224	; 0xe0
 800f11c:	4956      	ldr	r1, [pc, #344]	; (800f278 <tcp_input+0x2a8>)
 800f11e:	484e      	ldr	r0, [pc, #312]	; (800f258 <tcp_input+0x288>)
 800f120:	f012 fdd4 	bl	8021ccc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f124:	4b4d      	ldr	r3, [pc, #308]	; (800f25c <tcp_input+0x28c>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	881b      	ldrh	r3, [r3, #0]
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	4a4b      	ldr	r2, [pc, #300]	; (800f25c <tcp_input+0x28c>)
 800f12e:	6814      	ldr	r4, [r2, #0]
 800f130:	4618      	mov	r0, r3
 800f132:	f7fc f877 	bl	800b224 <lwip_htons>
 800f136:	4603      	mov	r3, r0
 800f138:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f13a:	4b48      	ldr	r3, [pc, #288]	; (800f25c <tcp_input+0x28c>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	885b      	ldrh	r3, [r3, #2]
 800f140:	b29b      	uxth	r3, r3
 800f142:	4a46      	ldr	r2, [pc, #280]	; (800f25c <tcp_input+0x28c>)
 800f144:	6814      	ldr	r4, [r2, #0]
 800f146:	4618      	mov	r0, r3
 800f148:	f7fc f86c 	bl	800b224 <lwip_htons>
 800f14c:	4603      	mov	r3, r0
 800f14e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f150:	4b42      	ldr	r3, [pc, #264]	; (800f25c <tcp_input+0x28c>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	4a41      	ldr	r2, [pc, #260]	; (800f25c <tcp_input+0x28c>)
 800f158:	6814      	ldr	r4, [r2, #0]
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fc f877 	bl	800b24e <lwip_htonl>
 800f160:	4603      	mov	r3, r0
 800f162:	6063      	str	r3, [r4, #4]
 800f164:	6863      	ldr	r3, [r4, #4]
 800f166:	4a45      	ldr	r2, [pc, #276]	; (800f27c <tcp_input+0x2ac>)
 800f168:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f16a:	4b3c      	ldr	r3, [pc, #240]	; (800f25c <tcp_input+0x28c>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	4a3a      	ldr	r2, [pc, #232]	; (800f25c <tcp_input+0x28c>)
 800f172:	6814      	ldr	r4, [r2, #0]
 800f174:	4618      	mov	r0, r3
 800f176:	f7fc f86a 	bl	800b24e <lwip_htonl>
 800f17a:	4603      	mov	r3, r0
 800f17c:	60a3      	str	r3, [r4, #8]
 800f17e:	68a3      	ldr	r3, [r4, #8]
 800f180:	4a3f      	ldr	r2, [pc, #252]	; (800f280 <tcp_input+0x2b0>)
 800f182:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f184:	4b35      	ldr	r3, [pc, #212]	; (800f25c <tcp_input+0x28c>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	89db      	ldrh	r3, [r3, #14]
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	4a33      	ldr	r2, [pc, #204]	; (800f25c <tcp_input+0x28c>)
 800f18e:	6814      	ldr	r4, [r2, #0]
 800f190:	4618      	mov	r0, r3
 800f192:	f7fc f847 	bl	800b224 <lwip_htons>
 800f196:	4603      	mov	r3, r0
 800f198:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f19a:	4b30      	ldr	r3, [pc, #192]	; (800f25c <tcp_input+0x28c>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	899b      	ldrh	r3, [r3, #12]
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fc f83e 	bl	800b224 <lwip_htons>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1b0:	b2da      	uxtb	r2, r3
 800f1b2:	4b34      	ldr	r3, [pc, #208]	; (800f284 <tcp_input+0x2b4>)
 800f1b4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	891a      	ldrh	r2, [r3, #8]
 800f1ba:	4b33      	ldr	r3, [pc, #204]	; (800f288 <tcp_input+0x2b8>)
 800f1bc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f1be:	4b31      	ldr	r3, [pc, #196]	; (800f284 <tcp_input+0x2b4>)
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	f003 0303 	and.w	r3, r3, #3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00c      	beq.n	800f1e4 <tcp_input+0x214>
    tcplen++;
 800f1ca:	4b2f      	ldr	r3, [pc, #188]	; (800f288 <tcp_input+0x2b8>)
 800f1cc:	881b      	ldrh	r3, [r3, #0]
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	b29a      	uxth	r2, r3
 800f1d2:	4b2d      	ldr	r3, [pc, #180]	; (800f288 <tcp_input+0x2b8>)
 800f1d4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	891a      	ldrh	r2, [r3, #8]
 800f1da:	4b2b      	ldr	r3, [pc, #172]	; (800f288 <tcp_input+0x2b8>)
 800f1dc:	881b      	ldrh	r3, [r3, #0]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	f200 82e6 	bhi.w	800f7b0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1e8:	4b28      	ldr	r3, [pc, #160]	; (800f28c <tcp_input+0x2bc>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	61fb      	str	r3, [r7, #28]
 800f1ee:	e09d      	b.n	800f32c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	7d1b      	ldrb	r3, [r3, #20]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d105      	bne.n	800f204 <tcp_input+0x234>
 800f1f8:	4b15      	ldr	r3, [pc, #84]	; (800f250 <tcp_input+0x280>)
 800f1fa:	22fb      	movs	r2, #251	; 0xfb
 800f1fc:	4924      	ldr	r1, [pc, #144]	; (800f290 <tcp_input+0x2c0>)
 800f1fe:	4816      	ldr	r0, [pc, #88]	; (800f258 <tcp_input+0x288>)
 800f200:	f012 fd64 	bl	8021ccc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	7d1b      	ldrb	r3, [r3, #20]
 800f208:	2b0a      	cmp	r3, #10
 800f20a:	d105      	bne.n	800f218 <tcp_input+0x248>
 800f20c:	4b10      	ldr	r3, [pc, #64]	; (800f250 <tcp_input+0x280>)
 800f20e:	22fc      	movs	r2, #252	; 0xfc
 800f210:	4920      	ldr	r1, [pc, #128]	; (800f294 <tcp_input+0x2c4>)
 800f212:	4811      	ldr	r0, [pc, #68]	; (800f258 <tcp_input+0x288>)
 800f214:	f012 fd5a 	bl	8021ccc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f218:	69fb      	ldr	r3, [r7, #28]
 800f21a:	7d1b      	ldrb	r3, [r3, #20]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d105      	bne.n	800f22c <tcp_input+0x25c>
 800f220:	4b0b      	ldr	r3, [pc, #44]	; (800f250 <tcp_input+0x280>)
 800f222:	22fd      	movs	r2, #253	; 0xfd
 800f224:	491c      	ldr	r1, [pc, #112]	; (800f298 <tcp_input+0x2c8>)
 800f226:	480c      	ldr	r0, [pc, #48]	; (800f258 <tcp_input+0x288>)
 800f228:	f012 fd50 	bl	8021ccc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f22c:	69fb      	ldr	r3, [r7, #28]
 800f22e:	7a1b      	ldrb	r3, [r3, #8]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d033      	beq.n	800f29c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	7a1a      	ldrb	r2, [r3, #8]
 800f238:	4b09      	ldr	r3, [pc, #36]	; (800f260 <tcp_input+0x290>)
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f240:	3301      	adds	r3, #1
 800f242:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f244:	429a      	cmp	r2, r3
 800f246:	d029      	beq.n	800f29c <tcp_input+0x2cc>
      prev = pcb;
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	61bb      	str	r3, [r7, #24]
      continue;
 800f24c:	e06b      	b.n	800f326 <tcp_input+0x356>
 800f24e:	bf00      	nop
 800f250:	08024608 	.word	0x08024608
 800f254:	0802463c 	.word	0x0802463c
 800f258:	08024654 	.word	0x08024654
 800f25c:	20040b68 	.word	0x20040b68
 800f260:	200357c0 	.word	0x200357c0
 800f264:	20040b6c 	.word	0x20040b6c
 800f268:	20040b70 	.word	0x20040b70
 800f26c:	20040b6e 	.word	0x20040b6e
 800f270:	0802467c 	.word	0x0802467c
 800f274:	0802468c 	.word	0x0802468c
 800f278:	08024698 	.word	0x08024698
 800f27c:	20040b78 	.word	0x20040b78
 800f280:	20040b7c 	.word	0x20040b7c
 800f284:	20040b84 	.word	0x20040b84
 800f288:	20040b82 	.word	0x20040b82
 800f28c:	20040b4c 	.word	0x20040b4c
 800f290:	080246b8 	.word	0x080246b8
 800f294:	080246e0 	.word	0x080246e0
 800f298:	0802470c 	.word	0x0802470c
    }

    if (pcb->remote_port == tcphdr->src &&
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	8b1a      	ldrh	r2, [r3, #24]
 800f2a0:	4b72      	ldr	r3, [pc, #456]	; (800f46c <tcp_input+0x49c>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	881b      	ldrh	r3, [r3, #0]
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d13a      	bne.n	800f322 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f2ac:	69fb      	ldr	r3, [r7, #28]
 800f2ae:	8ada      	ldrh	r2, [r3, #22]
 800f2b0:	4b6e      	ldr	r3, [pc, #440]	; (800f46c <tcp_input+0x49c>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	885b      	ldrh	r3, [r3, #2]
 800f2b6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d132      	bne.n	800f322 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2bc:	69fb      	ldr	r3, [r7, #28]
 800f2be:	685a      	ldr	r2, [r3, #4]
 800f2c0:	4b6b      	ldr	r3, [pc, #428]	; (800f470 <tcp_input+0x4a0>)
 800f2c2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d12c      	bne.n	800f322 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	4b68      	ldr	r3, [pc, #416]	; (800f470 <tcp_input+0x4a0>)
 800f2ce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d126      	bne.n	800f322 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	69fa      	ldr	r2, [r7, #28]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d106      	bne.n	800f2ec <tcp_input+0x31c>
 800f2de:	4b65      	ldr	r3, [pc, #404]	; (800f474 <tcp_input+0x4a4>)
 800f2e0:	f240 120d 	movw	r2, #269	; 0x10d
 800f2e4:	4964      	ldr	r1, [pc, #400]	; (800f478 <tcp_input+0x4a8>)
 800f2e6:	4865      	ldr	r0, [pc, #404]	; (800f47c <tcp_input+0x4ac>)
 800f2e8:	f012 fcf0 	bl	8021ccc <iprintf>
      if (prev != NULL) {
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00a      	beq.n	800f308 <tcp_input+0x338>
        prev->next = pcb->next;
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	68da      	ldr	r2, [r3, #12]
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f2fa:	4b61      	ldr	r3, [pc, #388]	; (800f480 <tcp_input+0x4b0>)
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f302:	4a5f      	ldr	r2, [pc, #380]	; (800f480 <tcp_input+0x4b0>)
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	69fa      	ldr	r2, [r7, #28]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d111      	bne.n	800f336 <tcp_input+0x366>
 800f312:	4b58      	ldr	r3, [pc, #352]	; (800f474 <tcp_input+0x4a4>)
 800f314:	f240 1215 	movw	r2, #277	; 0x115
 800f318:	495a      	ldr	r1, [pc, #360]	; (800f484 <tcp_input+0x4b4>)
 800f31a:	4858      	ldr	r0, [pc, #352]	; (800f47c <tcp_input+0x4ac>)
 800f31c:	f012 fcd6 	bl	8021ccc <iprintf>
      break;
 800f320:	e009      	b.n	800f336 <tcp_input+0x366>
    }
    prev = pcb;
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f326:	69fb      	ldr	r3, [r7, #28]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	61fb      	str	r3, [r7, #28]
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	f47f af5e 	bne.w	800f1f0 <tcp_input+0x220>
 800f334:	e000      	b.n	800f338 <tcp_input+0x368>
      break;
 800f336:	bf00      	nop
  }

  if (pcb == NULL) {
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	f040 80aa 	bne.w	800f494 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f340:	4b51      	ldr	r3, [pc, #324]	; (800f488 <tcp_input+0x4b8>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	61fb      	str	r3, [r7, #28]
 800f346:	e03f      	b.n	800f3c8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	7d1b      	ldrb	r3, [r3, #20]
 800f34c:	2b0a      	cmp	r3, #10
 800f34e:	d006      	beq.n	800f35e <tcp_input+0x38e>
 800f350:	4b48      	ldr	r3, [pc, #288]	; (800f474 <tcp_input+0x4a4>)
 800f352:	f240 121f 	movw	r2, #287	; 0x11f
 800f356:	494d      	ldr	r1, [pc, #308]	; (800f48c <tcp_input+0x4bc>)
 800f358:	4848      	ldr	r0, [pc, #288]	; (800f47c <tcp_input+0x4ac>)
 800f35a:	f012 fcb7 	bl	8021ccc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	7a1b      	ldrb	r3, [r3, #8]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d009      	beq.n	800f37a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	7a1a      	ldrb	r2, [r3, #8]
 800f36a:	4b41      	ldr	r3, [pc, #260]	; (800f470 <tcp_input+0x4a0>)
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f372:	3301      	adds	r3, #1
 800f374:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f376:	429a      	cmp	r2, r3
 800f378:	d122      	bne.n	800f3c0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	8b1a      	ldrh	r2, [r3, #24]
 800f37e:	4b3b      	ldr	r3, [pc, #236]	; (800f46c <tcp_input+0x49c>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	881b      	ldrh	r3, [r3, #0]
 800f384:	b29b      	uxth	r3, r3
 800f386:	429a      	cmp	r2, r3
 800f388:	d11b      	bne.n	800f3c2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	8ada      	ldrh	r2, [r3, #22]
 800f38e:	4b37      	ldr	r3, [pc, #220]	; (800f46c <tcp_input+0x49c>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	885b      	ldrh	r3, [r3, #2]
 800f394:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f396:	429a      	cmp	r2, r3
 800f398:	d113      	bne.n	800f3c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	685a      	ldr	r2, [r3, #4]
 800f39e:	4b34      	ldr	r3, [pc, #208]	; (800f470 <tcp_input+0x4a0>)
 800f3a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d10d      	bne.n	800f3c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	4b31      	ldr	r3, [pc, #196]	; (800f470 <tcp_input+0x4a0>)
 800f3ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d107      	bne.n	800f3c2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f3b2:	69f8      	ldr	r0, [r7, #28]
 800f3b4:	f000 fb56 	bl	800fa64 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f7fd fe49 	bl	800d050 <pbuf_free>
        return;
 800f3be:	e1fd      	b.n	800f7bc <tcp_input+0x7ec>
        continue;
 800f3c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	61fb      	str	r3, [r7, #28]
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d1bc      	bne.n	800f348 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3d2:	4b2f      	ldr	r3, [pc, #188]	; (800f490 <tcp_input+0x4c0>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	617b      	str	r3, [r7, #20]
 800f3d8:	e02a      	b.n	800f430 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	7a1b      	ldrb	r3, [r3, #8]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d00c      	beq.n	800f3fc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	7a1a      	ldrb	r2, [r3, #8]
 800f3e6:	4b22      	ldr	r3, [pc, #136]	; (800f470 <tcp_input+0x4a0>)
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d002      	beq.n	800f3fc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	61bb      	str	r3, [r7, #24]
        continue;
 800f3fa:	e016      	b.n	800f42a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	8ada      	ldrh	r2, [r3, #22]
 800f400:	4b1a      	ldr	r3, [pc, #104]	; (800f46c <tcp_input+0x49c>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	885b      	ldrh	r3, [r3, #2]
 800f406:	b29b      	uxth	r3, r3
 800f408:	429a      	cmp	r2, r3
 800f40a:	d10c      	bne.n	800f426 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	681a      	ldr	r2, [r3, #0]
 800f410:	4b17      	ldr	r3, [pc, #92]	; (800f470 <tcp_input+0x4a0>)
 800f412:	695b      	ldr	r3, [r3, #20]
 800f414:	429a      	cmp	r2, r3
 800f416:	d00f      	beq.n	800f438 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00d      	beq.n	800f43a <tcp_input+0x46a>
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d009      	beq.n	800f43a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	617b      	str	r3, [r7, #20]
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d1d1      	bne.n	800f3da <tcp_input+0x40a>
 800f436:	e000      	b.n	800f43a <tcp_input+0x46a>
            break;
 800f438:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d029      	beq.n	800f494 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d00a      	beq.n	800f45c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	68da      	ldr	r2, [r3, #12]
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f44e:	4b10      	ldr	r3, [pc, #64]	; (800f490 <tcp_input+0x4c0>)
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f456:	4a0e      	ldr	r2, [pc, #56]	; (800f490 <tcp_input+0x4c0>)
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f45c:	6978      	ldr	r0, [r7, #20]
 800f45e:	f000 fa03 	bl	800f868 <tcp_listen_input>
      }
      pbuf_free(p);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f7fd fdf4 	bl	800d050 <pbuf_free>
      return;
 800f468:	e1a8      	b.n	800f7bc <tcp_input+0x7ec>
 800f46a:	bf00      	nop
 800f46c:	20040b68 	.word	0x20040b68
 800f470:	200357c0 	.word	0x200357c0
 800f474:	08024608 	.word	0x08024608
 800f478:	08024734 	.word	0x08024734
 800f47c:	08024654 	.word	0x08024654
 800f480:	20040b4c 	.word	0x20040b4c
 800f484:	08024760 	.word	0x08024760
 800f488:	20040b50 	.word	0x20040b50
 800f48c:	0802478c 	.word	0x0802478c
 800f490:	20040b48 	.word	0x20040b48
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	2b00      	cmp	r3, #0
 800f498:	f000 8158 	beq.w	800f74c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f49c:	4b95      	ldr	r3, [pc, #596]	; (800f6f4 <tcp_input+0x724>)
 800f49e:	2200      	movs	r2, #0
 800f4a0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	891a      	ldrh	r2, [r3, #8]
 800f4a6:	4b93      	ldr	r3, [pc, #588]	; (800f6f4 <tcp_input+0x724>)
 800f4a8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f4aa:	4a92      	ldr	r2, [pc, #584]	; (800f6f4 <tcp_input+0x724>)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f4b0:	4b91      	ldr	r3, [pc, #580]	; (800f6f8 <tcp_input+0x728>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a8f      	ldr	r2, [pc, #572]	; (800f6f4 <tcp_input+0x724>)
 800f4b6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f4b8:	4b90      	ldr	r3, [pc, #576]	; (800f6fc <tcp_input+0x72c>)
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f4be:	4b90      	ldr	r3, [pc, #576]	; (800f700 <tcp_input+0x730>)
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f4c4:	4b8f      	ldr	r3, [pc, #572]	; (800f704 <tcp_input+0x734>)
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f4ca:	4b8f      	ldr	r3, [pc, #572]	; (800f708 <tcp_input+0x738>)
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	f003 0308 	and.w	r3, r3, #8
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d006      	beq.n	800f4e4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	7b5b      	ldrb	r3, [r3, #13]
 800f4da:	f043 0301 	orr.w	r3, r3, #1
 800f4de:	b2da      	uxtb	r2, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f4e4:	69fb      	ldr	r3, [r7, #28]
 800f4e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d017      	beq.n	800f51c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f4ec:	69f8      	ldr	r0, [r7, #28]
 800f4ee:	f7ff f929 	bl	800e744 <tcp_process_refused_data>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	f113 0f0d 	cmn.w	r3, #13
 800f4f8:	d007      	beq.n	800f50a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f4fa:	69fb      	ldr	r3, [r7, #28]
 800f4fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d00c      	beq.n	800f51c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f502:	4b82      	ldr	r3, [pc, #520]	; (800f70c <tcp_input+0x73c>)
 800f504:	881b      	ldrh	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d008      	beq.n	800f51c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f040 80e3 	bne.w	800f6da <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f514:	69f8      	ldr	r0, [r7, #28]
 800f516:	f003 f9ad 	bl	8012874 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f51a:	e0de      	b.n	800f6da <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f51c:	4a7c      	ldr	r2, [pc, #496]	; (800f710 <tcp_input+0x740>)
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f522:	69f8      	ldr	r0, [r7, #28]
 800f524:	f000 fb18 	bl	800fb58 <tcp_process>
 800f528:	4603      	mov	r3, r0
 800f52a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f52c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f530:	f113 0f0d 	cmn.w	r3, #13
 800f534:	f000 80d3 	beq.w	800f6de <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f538:	4b71      	ldr	r3, [pc, #452]	; (800f700 <tcp_input+0x730>)
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	f003 0308 	and.w	r3, r3, #8
 800f540:	2b00      	cmp	r3, #0
 800f542:	d015      	beq.n	800f570 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d008      	beq.n	800f560 <tcp_input+0x590>
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f554:	69fa      	ldr	r2, [r7, #28]
 800f556:	6912      	ldr	r2, [r2, #16]
 800f558:	f06f 010d 	mvn.w	r1, #13
 800f55c:	4610      	mov	r0, r2
 800f55e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f560:	69f9      	ldr	r1, [r7, #28]
 800f562:	486c      	ldr	r0, [pc, #432]	; (800f714 <tcp_input+0x744>)
 800f564:	f7ff fbbc 	bl	800ece0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f568:	69f8      	ldr	r0, [r7, #28]
 800f56a:	f7fe f9a9 	bl	800d8c0 <tcp_free>
 800f56e:	e0da      	b.n	800f726 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f570:	2300      	movs	r3, #0
 800f572:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f574:	4b63      	ldr	r3, [pc, #396]	; (800f704 <tcp_input+0x734>)
 800f576:	881b      	ldrh	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d01d      	beq.n	800f5b8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f57c:	4b61      	ldr	r3, [pc, #388]	; (800f704 <tcp_input+0x734>)
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f582:	69fb      	ldr	r3, [r7, #28]
 800f584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d00a      	beq.n	800f5a2 <tcp_input+0x5d2>
 800f58c:	69fb      	ldr	r3, [r7, #28]
 800f58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f592:	69fa      	ldr	r2, [r7, #28]
 800f594:	6910      	ldr	r0, [r2, #16]
 800f596:	89fa      	ldrh	r2, [r7, #14]
 800f598:	69f9      	ldr	r1, [r7, #28]
 800f59a:	4798      	blx	r3
 800f59c:	4603      	mov	r3, r0
 800f59e:	74fb      	strb	r3, [r7, #19]
 800f5a0:	e001      	b.n	800f5a6 <tcp_input+0x5d6>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f5a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5aa:	f113 0f0d 	cmn.w	r3, #13
 800f5ae:	f000 8098 	beq.w	800f6e2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f5b2:	4b54      	ldr	r3, [pc, #336]	; (800f704 <tcp_input+0x734>)
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f5b8:	69f8      	ldr	r0, [r7, #28]
 800f5ba:	f000 f915 	bl	800f7e8 <tcp_input_delayed_close>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f040 8090 	bne.w	800f6e6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f5c6:	4b4d      	ldr	r3, [pc, #308]	; (800f6fc <tcp_input+0x72c>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d041      	beq.n	800f652 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f5ce:	69fb      	ldr	r3, [r7, #28]
 800f5d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d006      	beq.n	800f5e4 <tcp_input+0x614>
 800f5d6:	4b50      	ldr	r3, [pc, #320]	; (800f718 <tcp_input+0x748>)
 800f5d8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f5dc:	494f      	ldr	r1, [pc, #316]	; (800f71c <tcp_input+0x74c>)
 800f5de:	4850      	ldr	r0, [pc, #320]	; (800f720 <tcp_input+0x750>)
 800f5e0:	f012 fb74 	bl	8021ccc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	8b5b      	ldrh	r3, [r3, #26]
 800f5e8:	f003 0310 	and.w	r3, r3, #16
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d008      	beq.n	800f602 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f5f0:	4b42      	ldr	r3, [pc, #264]	; (800f6fc <tcp_input+0x72c>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fd fd2b 	bl	800d050 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f5fa:	69f8      	ldr	r0, [r7, #28]
 800f5fc:	f7fe fc48 	bl	800de90 <tcp_abort>
            goto aborted;
 800f600:	e091      	b.n	800f726 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d00c      	beq.n	800f626 <tcp_input+0x656>
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	6918      	ldr	r0, [r3, #16]
 800f616:	4b39      	ldr	r3, [pc, #228]	; (800f6fc <tcp_input+0x72c>)
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	2300      	movs	r3, #0
 800f61c:	69f9      	ldr	r1, [r7, #28]
 800f61e:	47a0      	blx	r4
 800f620:	4603      	mov	r3, r0
 800f622:	74fb      	strb	r3, [r7, #19]
 800f624:	e008      	b.n	800f638 <tcp_input+0x668>
 800f626:	4b35      	ldr	r3, [pc, #212]	; (800f6fc <tcp_input+0x72c>)
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	2300      	movs	r3, #0
 800f62c:	69f9      	ldr	r1, [r7, #28]
 800f62e:	2000      	movs	r0, #0
 800f630:	f7ff f95e 	bl	800e8f0 <tcp_recv_null>
 800f634:	4603      	mov	r3, r0
 800f636:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f63c:	f113 0f0d 	cmn.w	r3, #13
 800f640:	d053      	beq.n	800f6ea <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f642:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d003      	beq.n	800f652 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f64a:	4b2c      	ldr	r3, [pc, #176]	; (800f6fc <tcp_input+0x72c>)
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f652:	4b2b      	ldr	r3, [pc, #172]	; (800f700 <tcp_input+0x730>)
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	f003 0320 	and.w	r3, r3, #32
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d030      	beq.n	800f6c0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f662:	2b00      	cmp	r3, #0
 800f664:	d009      	beq.n	800f67a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f66a:	7b5a      	ldrb	r2, [r3, #13]
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f670:	f042 0220 	orr.w	r2, r2, #32
 800f674:	b2d2      	uxtb	r2, r2
 800f676:	735a      	strb	r2, [r3, #13]
 800f678:	e022      	b.n	800f6c0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f67a:	69fb      	ldr	r3, [r7, #28]
 800f67c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f67e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f682:	d005      	beq.n	800f690 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f688:	3301      	adds	r3, #1
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f696:	2b00      	cmp	r3, #0
 800f698:	d00b      	beq.n	800f6b2 <tcp_input+0x6e2>
 800f69a:	69fb      	ldr	r3, [r7, #28]
 800f69c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f6a0:	69fb      	ldr	r3, [r7, #28]
 800f6a2:	6918      	ldr	r0, [r3, #16]
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	69f9      	ldr	r1, [r7, #28]
 800f6aa:	47a0      	blx	r4
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	74fb      	strb	r3, [r7, #19]
 800f6b0:	e001      	b.n	800f6b6 <tcp_input+0x6e6>
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f6b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6ba:	f113 0f0d 	cmn.w	r3, #13
 800f6be:	d016      	beq.n	800f6ee <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f6c0:	4b13      	ldr	r3, [pc, #76]	; (800f710 <tcp_input+0x740>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f6c6:	69f8      	ldr	r0, [r7, #28]
 800f6c8:	f000 f88e 	bl	800f7e8 <tcp_input_delayed_close>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d128      	bne.n	800f724 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f6d2:	69f8      	ldr	r0, [r7, #28]
 800f6d4:	f002 fac8 	bl	8011c68 <tcp_output>
 800f6d8:	e025      	b.n	800f726 <tcp_input+0x756>
        goto aborted;
 800f6da:	bf00      	nop
 800f6dc:	e023      	b.n	800f726 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f6de:	bf00      	nop
 800f6e0:	e021      	b.n	800f726 <tcp_input+0x756>
              goto aborted;
 800f6e2:	bf00      	nop
 800f6e4:	e01f      	b.n	800f726 <tcp_input+0x756>
          goto aborted;
 800f6e6:	bf00      	nop
 800f6e8:	e01d      	b.n	800f726 <tcp_input+0x756>
            goto aborted;
 800f6ea:	bf00      	nop
 800f6ec:	e01b      	b.n	800f726 <tcp_input+0x756>
              goto aborted;
 800f6ee:	bf00      	nop
 800f6f0:	e019      	b.n	800f726 <tcp_input+0x756>
 800f6f2:	bf00      	nop
 800f6f4:	20040b58 	.word	0x20040b58
 800f6f8:	20040b68 	.word	0x20040b68
 800f6fc:	20040b88 	.word	0x20040b88
 800f700:	20040b85 	.word	0x20040b85
 800f704:	20040b80 	.word	0x20040b80
 800f708:	20040b84 	.word	0x20040b84
 800f70c:	20040b82 	.word	0x20040b82
 800f710:	20040b8c 	.word	0x20040b8c
 800f714:	20040b4c 	.word	0x20040b4c
 800f718:	08024608 	.word	0x08024608
 800f71c:	080247bc 	.word	0x080247bc
 800f720:	08024654 	.word	0x08024654
          goto aborted;
 800f724:	bf00      	nop
    tcp_input_pcb = NULL;
 800f726:	4b27      	ldr	r3, [pc, #156]	; (800f7c4 <tcp_input+0x7f4>)
 800f728:	2200      	movs	r2, #0
 800f72a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f72c:	4b26      	ldr	r3, [pc, #152]	; (800f7c8 <tcp_input+0x7f8>)
 800f72e:	2200      	movs	r2, #0
 800f730:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f732:	4b26      	ldr	r3, [pc, #152]	; (800f7cc <tcp_input+0x7fc>)
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d03f      	beq.n	800f7ba <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f73a:	4b24      	ldr	r3, [pc, #144]	; (800f7cc <tcp_input+0x7fc>)
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fd fc86 	bl	800d050 <pbuf_free>
      inseg.p = NULL;
 800f744:	4b21      	ldr	r3, [pc, #132]	; (800f7cc <tcp_input+0x7fc>)
 800f746:	2200      	movs	r2, #0
 800f748:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f74a:	e036      	b.n	800f7ba <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f74c:	4b20      	ldr	r3, [pc, #128]	; (800f7d0 <tcp_input+0x800>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	899b      	ldrh	r3, [r3, #12]
 800f752:	b29b      	uxth	r3, r3
 800f754:	4618      	mov	r0, r3
 800f756:	f7fb fd65 	bl	800b224 <lwip_htons>
 800f75a:	4603      	mov	r3, r0
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	f003 0304 	and.w	r3, r3, #4
 800f762:	2b00      	cmp	r3, #0
 800f764:	d118      	bne.n	800f798 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f766:	4b1b      	ldr	r3, [pc, #108]	; (800f7d4 <tcp_input+0x804>)
 800f768:	6819      	ldr	r1, [r3, #0]
 800f76a:	4b1b      	ldr	r3, [pc, #108]	; (800f7d8 <tcp_input+0x808>)
 800f76c:	881b      	ldrh	r3, [r3, #0]
 800f76e:	461a      	mov	r2, r3
 800f770:	4b1a      	ldr	r3, [pc, #104]	; (800f7dc <tcp_input+0x80c>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f776:	4b16      	ldr	r3, [pc, #88]	; (800f7d0 <tcp_input+0x800>)
 800f778:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f77a:	885b      	ldrh	r3, [r3, #2]
 800f77c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f77e:	4a14      	ldr	r2, [pc, #80]	; (800f7d0 <tcp_input+0x800>)
 800f780:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f782:	8812      	ldrh	r2, [r2, #0]
 800f784:	b292      	uxth	r2, r2
 800f786:	9202      	str	r2, [sp, #8]
 800f788:	9301      	str	r3, [sp, #4]
 800f78a:	4b15      	ldr	r3, [pc, #84]	; (800f7e0 <tcp_input+0x810>)
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	4b15      	ldr	r3, [pc, #84]	; (800f7e4 <tcp_input+0x814>)
 800f790:	4602      	mov	r2, r0
 800f792:	2000      	movs	r0, #0
 800f794:	f003 f81c 	bl	80127d0 <tcp_rst>
    pbuf_free(p);
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7fd fc59 	bl	800d050 <pbuf_free>
  return;
 800f79e:	e00c      	b.n	800f7ba <tcp_input+0x7ea>
    goto dropped;
 800f7a0:	bf00      	nop
 800f7a2:	e006      	b.n	800f7b2 <tcp_input+0x7e2>
    goto dropped;
 800f7a4:	bf00      	nop
 800f7a6:	e004      	b.n	800f7b2 <tcp_input+0x7e2>
    goto dropped;
 800f7a8:	bf00      	nop
 800f7aa:	e002      	b.n	800f7b2 <tcp_input+0x7e2>
      goto dropped;
 800f7ac:	bf00      	nop
 800f7ae:	e000      	b.n	800f7b2 <tcp_input+0x7e2>
      goto dropped;
 800f7b0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f7fd fc4c 	bl	800d050 <pbuf_free>
 800f7b8:	e000      	b.n	800f7bc <tcp_input+0x7ec>
  return;
 800f7ba:	bf00      	nop
}
 800f7bc:	3724      	adds	r7, #36	; 0x24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd90      	pop	{r4, r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	20040b8c 	.word	0x20040b8c
 800f7c8:	20040b88 	.word	0x20040b88
 800f7cc:	20040b58 	.word	0x20040b58
 800f7d0:	20040b68 	.word	0x20040b68
 800f7d4:	20040b7c 	.word	0x20040b7c
 800f7d8:	20040b82 	.word	0x20040b82
 800f7dc:	20040b78 	.word	0x20040b78
 800f7e0:	200357d0 	.word	0x200357d0
 800f7e4:	200357d4 	.word	0x200357d4

0800f7e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d106      	bne.n	800f804 <tcp_input_delayed_close+0x1c>
 800f7f6:	4b17      	ldr	r3, [pc, #92]	; (800f854 <tcp_input_delayed_close+0x6c>)
 800f7f8:	f240 225a 	movw	r2, #602	; 0x25a
 800f7fc:	4916      	ldr	r1, [pc, #88]	; (800f858 <tcp_input_delayed_close+0x70>)
 800f7fe:	4817      	ldr	r0, [pc, #92]	; (800f85c <tcp_input_delayed_close+0x74>)
 800f800:	f012 fa64 	bl	8021ccc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f804:	4b16      	ldr	r3, [pc, #88]	; (800f860 <tcp_input_delayed_close+0x78>)
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	f003 0310 	and.w	r3, r3, #16
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d01c      	beq.n	800f84a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	8b5b      	ldrh	r3, [r3, #26]
 800f814:	f003 0310 	and.w	r3, r3, #16
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d10d      	bne.n	800f838 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f822:	2b00      	cmp	r3, #0
 800f824:	d008      	beq.n	800f838 <tcp_input_delayed_close+0x50>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	6912      	ldr	r2, [r2, #16]
 800f830:	f06f 010e 	mvn.w	r1, #14
 800f834:	4610      	mov	r0, r2
 800f836:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f838:	6879      	ldr	r1, [r7, #4]
 800f83a:	480a      	ldr	r0, [pc, #40]	; (800f864 <tcp_input_delayed_close+0x7c>)
 800f83c:	f7ff fa50 	bl	800ece0 <tcp_pcb_remove>
    tcp_free(pcb);
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7fe f83d 	bl	800d8c0 <tcp_free>
    return 1;
 800f846:	2301      	movs	r3, #1
 800f848:	e000      	b.n	800f84c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f84a:	2300      	movs	r3, #0
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3708      	adds	r7, #8
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}
 800f854:	08024608 	.word	0x08024608
 800f858:	080247d8 	.word	0x080247d8
 800f85c:	08024654 	.word	0x08024654
 800f860:	20040b85 	.word	0x20040b85
 800f864:	20040b4c 	.word	0x20040b4c

0800f868 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f868:	b590      	push	{r4, r7, lr}
 800f86a:	b08b      	sub	sp, #44	; 0x2c
 800f86c:	af04      	add	r7, sp, #16
 800f86e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f870:	4b6f      	ldr	r3, [pc, #444]	; (800fa30 <tcp_listen_input+0x1c8>)
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	f003 0304 	and.w	r3, r3, #4
 800f878:	2b00      	cmp	r3, #0
 800f87a:	f040 80d2 	bne.w	800fa22 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d106      	bne.n	800f892 <tcp_listen_input+0x2a>
 800f884:	4b6b      	ldr	r3, [pc, #428]	; (800fa34 <tcp_listen_input+0x1cc>)
 800f886:	f240 2281 	movw	r2, #641	; 0x281
 800f88a:	496b      	ldr	r1, [pc, #428]	; (800fa38 <tcp_listen_input+0x1d0>)
 800f88c:	486b      	ldr	r0, [pc, #428]	; (800fa3c <tcp_listen_input+0x1d4>)
 800f88e:	f012 fa1d 	bl	8021ccc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f892:	4b67      	ldr	r3, [pc, #412]	; (800fa30 <tcp_listen_input+0x1c8>)
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	f003 0310 	and.w	r3, r3, #16
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d019      	beq.n	800f8d2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f89e:	4b68      	ldr	r3, [pc, #416]	; (800fa40 <tcp_listen_input+0x1d8>)
 800f8a0:	6819      	ldr	r1, [r3, #0]
 800f8a2:	4b68      	ldr	r3, [pc, #416]	; (800fa44 <tcp_listen_input+0x1dc>)
 800f8a4:	881b      	ldrh	r3, [r3, #0]
 800f8a6:	461a      	mov	r2, r3
 800f8a8:	4b67      	ldr	r3, [pc, #412]	; (800fa48 <tcp_listen_input+0x1e0>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8ae:	4b67      	ldr	r3, [pc, #412]	; (800fa4c <tcp_listen_input+0x1e4>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8b2:	885b      	ldrh	r3, [r3, #2]
 800f8b4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8b6:	4a65      	ldr	r2, [pc, #404]	; (800fa4c <tcp_listen_input+0x1e4>)
 800f8b8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8ba:	8812      	ldrh	r2, [r2, #0]
 800f8bc:	b292      	uxth	r2, r2
 800f8be:	9202      	str	r2, [sp, #8]
 800f8c0:	9301      	str	r3, [sp, #4]
 800f8c2:	4b63      	ldr	r3, [pc, #396]	; (800fa50 <tcp_listen_input+0x1e8>)
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	4b63      	ldr	r3, [pc, #396]	; (800fa54 <tcp_listen_input+0x1ec>)
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f002 ff80 	bl	80127d0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f8d0:	e0a9      	b.n	800fa26 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f8d2:	4b57      	ldr	r3, [pc, #348]	; (800fa30 <tcp_listen_input+0x1c8>)
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	f003 0302 	and.w	r3, r3, #2
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f000 80a3 	beq.w	800fa26 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	7d5b      	ldrb	r3, [r3, #21]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7ff f927 	bl	800eb38 <tcp_alloc>
 800f8ea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d111      	bne.n	800f916 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	699b      	ldr	r3, [r3, #24]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00a      	beq.n	800f910 <tcp_listen_input+0xa8>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	699b      	ldr	r3, [r3, #24]
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	6910      	ldr	r0, [r2, #16]
 800f902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f906:	2100      	movs	r1, #0
 800f908:	4798      	blx	r3
 800f90a:	4603      	mov	r3, r0
 800f90c:	73bb      	strb	r3, [r7, #14]
      return;
 800f90e:	e08b      	b.n	800fa28 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f910:	23f0      	movs	r3, #240	; 0xf0
 800f912:	73bb      	strb	r3, [r7, #14]
      return;
 800f914:	e088      	b.n	800fa28 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f916:	4b50      	ldr	r3, [pc, #320]	; (800fa58 <tcp_listen_input+0x1f0>)
 800f918:	695a      	ldr	r2, [r3, #20]
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f91e:	4b4e      	ldr	r3, [pc, #312]	; (800fa58 <tcp_listen_input+0x1f0>)
 800f920:	691a      	ldr	r2, [r3, #16]
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	8ada      	ldrh	r2, [r3, #22]
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f92e:	4b47      	ldr	r3, [pc, #284]	; (800fa4c <tcp_listen_input+0x1e4>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	b29a      	uxth	r2, r3
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2203      	movs	r2, #3
 800f93e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f940:	4b41      	ldr	r3, [pc, #260]	; (800fa48 <tcp_listen_input+0x1e0>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	1c5a      	adds	r2, r3, #1
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f952:	6978      	ldr	r0, [r7, #20]
 800f954:	f7ff fa58 	bl	800ee08 <tcp_next_iss>
 800f958:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	693a      	ldr	r2, [r7, #16]
 800f95e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	693a      	ldr	r2, [r7, #16]
 800f964:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	693a      	ldr	r2, [r7, #16]
 800f96a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	693a      	ldr	r2, [r7, #16]
 800f970:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f972:	4b35      	ldr	r3, [pc, #212]	; (800fa48 <tcp_listen_input+0x1e0>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	1e5a      	subs	r2, r3, #1
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	691a      	ldr	r2, [r3, #16]
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	7a5b      	ldrb	r3, [r3, #9]
 800f98e:	f003 030c 	and.w	r3, r3, #12
 800f992:	b2da      	uxtb	r2, r3
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	7a1a      	ldrb	r2, [r3, #8]
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f9a0:	4b2e      	ldr	r3, [pc, #184]	; (800fa5c <tcp_listen_input+0x1f4>)
 800f9a2:	681a      	ldr	r2, [r3, #0]
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	60da      	str	r2, [r3, #12]
 800f9a8:	4a2c      	ldr	r2, [pc, #176]	; (800fa5c <tcp_listen_input+0x1f4>)
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	6013      	str	r3, [r2, #0]
 800f9ae:	f003 f8d1 	bl	8012b54 <tcp_timer_needed>
 800f9b2:	4b2b      	ldr	r3, [pc, #172]	; (800fa60 <tcp_listen_input+0x1f8>)
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f9b8:	6978      	ldr	r0, [r7, #20]
 800f9ba:	f001 fd8f 	bl	80114dc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f9be:	4b23      	ldr	r3, [pc, #140]	; (800fa4c <tcp_listen_input+0x1e4>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	89db      	ldrh	r3, [r3, #14]
 800f9c4:	b29a      	uxth	r2, r3
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f9cc:	697b      	ldr	r3, [r7, #20]
 800f9ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	3304      	adds	r3, #4
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f005 fb81 	bl	80150e8 <ip4_route>
 800f9e6:	4601      	mov	r1, r0
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	3304      	adds	r3, #4
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f7ff fa30 	bl	800ee54 <tcp_eff_send_mss_netif>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f9fc:	2112      	movs	r1, #18
 800f9fe:	6978      	ldr	r0, [r7, #20]
 800fa00:	f002 f844 	bl	8011a8c <tcp_enqueue_flags>
 800fa04:	4603      	mov	r3, r0
 800fa06:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fa08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d004      	beq.n	800fa1a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fa10:	2100      	movs	r1, #0
 800fa12:	6978      	ldr	r0, [r7, #20]
 800fa14:	f7fe f97e 	bl	800dd14 <tcp_abandon>
      return;
 800fa18:	e006      	b.n	800fa28 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fa1a:	6978      	ldr	r0, [r7, #20]
 800fa1c:	f002 f924 	bl	8011c68 <tcp_output>
  return;
 800fa20:	e001      	b.n	800fa26 <tcp_listen_input+0x1be>
    return;
 800fa22:	bf00      	nop
 800fa24:	e000      	b.n	800fa28 <tcp_listen_input+0x1c0>
  return;
 800fa26:	bf00      	nop
}
 800fa28:	371c      	adds	r7, #28
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd90      	pop	{r4, r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	20040b84 	.word	0x20040b84
 800fa34:	08024608 	.word	0x08024608
 800fa38:	08024800 	.word	0x08024800
 800fa3c:	08024654 	.word	0x08024654
 800fa40:	20040b7c 	.word	0x20040b7c
 800fa44:	20040b82 	.word	0x20040b82
 800fa48:	20040b78 	.word	0x20040b78
 800fa4c:	20040b68 	.word	0x20040b68
 800fa50:	200357d0 	.word	0x200357d0
 800fa54:	200357d4 	.word	0x200357d4
 800fa58:	200357c0 	.word	0x200357c0
 800fa5c:	20040b4c 	.word	0x20040b4c
 800fa60:	20040b54 	.word	0x20040b54

0800fa64 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b086      	sub	sp, #24
 800fa68:	af04      	add	r7, sp, #16
 800fa6a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fa6c:	4b2f      	ldr	r3, [pc, #188]	; (800fb2c <tcp_timewait_input+0xc8>)
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	f003 0304 	and.w	r3, r3, #4
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d153      	bne.n	800fb20 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d106      	bne.n	800fa8c <tcp_timewait_input+0x28>
 800fa7e:	4b2c      	ldr	r3, [pc, #176]	; (800fb30 <tcp_timewait_input+0xcc>)
 800fa80:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fa84:	492b      	ldr	r1, [pc, #172]	; (800fb34 <tcp_timewait_input+0xd0>)
 800fa86:	482c      	ldr	r0, [pc, #176]	; (800fb38 <tcp_timewait_input+0xd4>)
 800fa88:	f012 f920 	bl	8021ccc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fa8c:	4b27      	ldr	r3, [pc, #156]	; (800fb2c <tcp_timewait_input+0xc8>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	f003 0302 	and.w	r3, r3, #2
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d02a      	beq.n	800faee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fa98:	4b28      	ldr	r3, [pc, #160]	; (800fb3c <tcp_timewait_input+0xd8>)
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa0:	1ad3      	subs	r3, r2, r3
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	db2d      	blt.n	800fb02 <tcp_timewait_input+0x9e>
 800faa6:	4b25      	ldr	r3, [pc, #148]	; (800fb3c <tcp_timewait_input+0xd8>)
 800faa8:	681a      	ldr	r2, [r3, #0]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faae:	6879      	ldr	r1, [r7, #4]
 800fab0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fab2:	440b      	add	r3, r1
 800fab4:	1ad3      	subs	r3, r2, r3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	dc23      	bgt.n	800fb02 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faba:	4b21      	ldr	r3, [pc, #132]	; (800fb40 <tcp_timewait_input+0xdc>)
 800fabc:	6819      	ldr	r1, [r3, #0]
 800fabe:	4b21      	ldr	r3, [pc, #132]	; (800fb44 <tcp_timewait_input+0xe0>)
 800fac0:	881b      	ldrh	r3, [r3, #0]
 800fac2:	461a      	mov	r2, r3
 800fac4:	4b1d      	ldr	r3, [pc, #116]	; (800fb3c <tcp_timewait_input+0xd8>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faca:	4b1f      	ldr	r3, [pc, #124]	; (800fb48 <tcp_timewait_input+0xe4>)
 800facc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800face:	885b      	ldrh	r3, [r3, #2]
 800fad0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fad2:	4a1d      	ldr	r2, [pc, #116]	; (800fb48 <tcp_timewait_input+0xe4>)
 800fad4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fad6:	8812      	ldrh	r2, [r2, #0]
 800fad8:	b292      	uxth	r2, r2
 800fada:	9202      	str	r2, [sp, #8]
 800fadc:	9301      	str	r3, [sp, #4]
 800fade:	4b1b      	ldr	r3, [pc, #108]	; (800fb4c <tcp_timewait_input+0xe8>)
 800fae0:	9300      	str	r3, [sp, #0]
 800fae2:	4b1b      	ldr	r3, [pc, #108]	; (800fb50 <tcp_timewait_input+0xec>)
 800fae4:	4602      	mov	r2, r0
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f002 fe72 	bl	80127d0 <tcp_rst>
      return;
 800faec:	e01b      	b.n	800fb26 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800faee:	4b0f      	ldr	r3, [pc, #60]	; (800fb2c <tcp_timewait_input+0xc8>)
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	f003 0301 	and.w	r3, r3, #1
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d003      	beq.n	800fb02 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fafa:	4b16      	ldr	r3, [pc, #88]	; (800fb54 <tcp_timewait_input+0xf0>)
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fb02:	4b10      	ldr	r3, [pc, #64]	; (800fb44 <tcp_timewait_input+0xe0>)
 800fb04:	881b      	ldrh	r3, [r3, #0]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00c      	beq.n	800fb24 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	8b5b      	ldrh	r3, [r3, #26]
 800fb0e:	f043 0302 	orr.w	r3, r3, #2
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f002 f8a5 	bl	8011c68 <tcp_output>
  }
  return;
 800fb1e:	e001      	b.n	800fb24 <tcp_timewait_input+0xc0>
    return;
 800fb20:	bf00      	nop
 800fb22:	e000      	b.n	800fb26 <tcp_timewait_input+0xc2>
  return;
 800fb24:	bf00      	nop
}
 800fb26:	3708      	adds	r7, #8
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	20040b84 	.word	0x20040b84
 800fb30:	08024608 	.word	0x08024608
 800fb34:	08024820 	.word	0x08024820
 800fb38:	08024654 	.word	0x08024654
 800fb3c:	20040b78 	.word	0x20040b78
 800fb40:	20040b7c 	.word	0x20040b7c
 800fb44:	20040b82 	.word	0x20040b82
 800fb48:	20040b68 	.word	0x20040b68
 800fb4c:	200357d0 	.word	0x200357d0
 800fb50:	200357d4 	.word	0x200357d4
 800fb54:	20040b40 	.word	0x20040b40

0800fb58 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fb58:	b590      	push	{r4, r7, lr}
 800fb5a:	b08d      	sub	sp, #52	; 0x34
 800fb5c:	af04      	add	r7, sp, #16
 800fb5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fb60:	2300      	movs	r3, #0
 800fb62:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fb64:	2300      	movs	r3, #0
 800fb66:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d106      	bne.n	800fb7c <tcp_process+0x24>
 800fb6e:	4b9d      	ldr	r3, [pc, #628]	; (800fde4 <tcp_process+0x28c>)
 800fb70:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fb74:	499c      	ldr	r1, [pc, #624]	; (800fde8 <tcp_process+0x290>)
 800fb76:	489d      	ldr	r0, [pc, #628]	; (800fdec <tcp_process+0x294>)
 800fb78:	f012 f8a8 	bl	8021ccc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fb7c:	4b9c      	ldr	r3, [pc, #624]	; (800fdf0 <tcp_process+0x298>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	f003 0304 	and.w	r3, r3, #4
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d04e      	beq.n	800fc26 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	7d1b      	ldrb	r3, [r3, #20]
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d108      	bne.n	800fba2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb94:	4b97      	ldr	r3, [pc, #604]	; (800fdf4 <tcp_process+0x29c>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d123      	bne.n	800fbe4 <tcp_process+0x8c>
        acceptable = 1;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	76fb      	strb	r3, [r7, #27]
 800fba0:	e020      	b.n	800fbe4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fba6:	4b94      	ldr	r3, [pc, #592]	; (800fdf8 <tcp_process+0x2a0>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d102      	bne.n	800fbb4 <tcp_process+0x5c>
        acceptable = 1;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	76fb      	strb	r3, [r7, #27]
 800fbb2:	e017      	b.n	800fbe4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fbb4:	4b90      	ldr	r3, [pc, #576]	; (800fdf8 <tcp_process+0x2a0>)
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbbc:	1ad3      	subs	r3, r2, r3
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	db10      	blt.n	800fbe4 <tcp_process+0x8c>
 800fbc2:	4b8d      	ldr	r3, [pc, #564]	; (800fdf8 <tcp_process+0x2a0>)
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbca:	6879      	ldr	r1, [r7, #4]
 800fbcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fbce:	440b      	add	r3, r1
 800fbd0:	1ad3      	subs	r3, r2, r3
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	dc06      	bgt.n	800fbe4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	8b5b      	ldrh	r3, [r3, #26]
 800fbda:	f043 0302 	orr.w	r3, r3, #2
 800fbde:	b29a      	uxth	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fbe4:	7efb      	ldrb	r3, [r7, #27]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d01b      	beq.n	800fc22 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	7d1b      	ldrb	r3, [r3, #20]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d106      	bne.n	800fc00 <tcp_process+0xa8>
 800fbf2:	4b7c      	ldr	r3, [pc, #496]	; (800fde4 <tcp_process+0x28c>)
 800fbf4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fbf8:	4980      	ldr	r1, [pc, #512]	; (800fdfc <tcp_process+0x2a4>)
 800fbfa:	487c      	ldr	r0, [pc, #496]	; (800fdec <tcp_process+0x294>)
 800fbfc:	f012 f866 	bl	8021ccc <iprintf>
      recv_flags |= TF_RESET;
 800fc00:	4b7f      	ldr	r3, [pc, #508]	; (800fe00 <tcp_process+0x2a8>)
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	f043 0308 	orr.w	r3, r3, #8
 800fc08:	b2da      	uxtb	r2, r3
 800fc0a:	4b7d      	ldr	r3, [pc, #500]	; (800fe00 <tcp_process+0x2a8>)
 800fc0c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	8b5b      	ldrh	r3, [r3, #26]
 800fc12:	f023 0301 	bic.w	r3, r3, #1
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fc1c:	f06f 030d 	mvn.w	r3, #13
 800fc20:	e37a      	b.n	8010318 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fc22:	2300      	movs	r3, #0
 800fc24:	e378      	b.n	8010318 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fc26:	4b72      	ldr	r3, [pc, #456]	; (800fdf0 <tcp_process+0x298>)
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	f003 0302 	and.w	r3, r3, #2
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d010      	beq.n	800fc54 <tcp_process+0xfc>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	7d1b      	ldrb	r3, [r3, #20]
 800fc36:	2b02      	cmp	r3, #2
 800fc38:	d00c      	beq.n	800fc54 <tcp_process+0xfc>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	7d1b      	ldrb	r3, [r3, #20]
 800fc3e:	2b03      	cmp	r3, #3
 800fc40:	d008      	beq.n	800fc54 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	8b5b      	ldrh	r3, [r3, #26]
 800fc46:	f043 0302 	orr.w	r3, r3, #2
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fc50:	2300      	movs	r3, #0
 800fc52:	e361      	b.n	8010318 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	8b5b      	ldrh	r3, [r3, #26]
 800fc58:	f003 0310 	and.w	r3, r3, #16
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d103      	bne.n	800fc68 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fc60:	4b68      	ldr	r3, [pc, #416]	; (800fe04 <tcp_process+0x2ac>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f001 fc2f 	bl	80114dc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	7d1b      	ldrb	r3, [r3, #20]
 800fc82:	3b02      	subs	r3, #2
 800fc84:	2b07      	cmp	r3, #7
 800fc86:	f200 8337 	bhi.w	80102f8 <tcp_process+0x7a0>
 800fc8a:	a201      	add	r2, pc, #4	; (adr r2, 800fc90 <tcp_process+0x138>)
 800fc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc90:	0800fcb1 	.word	0x0800fcb1
 800fc94:	0800fee1 	.word	0x0800fee1
 800fc98:	08010059 	.word	0x08010059
 800fc9c:	08010083 	.word	0x08010083
 800fca0:	080101a7 	.word	0x080101a7
 800fca4:	08010059 	.word	0x08010059
 800fca8:	08010233 	.word	0x08010233
 800fcac:	080102c3 	.word	0x080102c3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fcb0:	4b4f      	ldr	r3, [pc, #316]	; (800fdf0 <tcp_process+0x298>)
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	f003 0310 	and.w	r3, r3, #16
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 80e4 	beq.w	800fe86 <tcp_process+0x32e>
 800fcbe:	4b4c      	ldr	r3, [pc, #304]	; (800fdf0 <tcp_process+0x298>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	f003 0302 	and.w	r3, r3, #2
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	f000 80dd 	beq.w	800fe86 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcd0:	1c5a      	adds	r2, r3, #1
 800fcd2:	4b48      	ldr	r3, [pc, #288]	; (800fdf4 <tcp_process+0x29c>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	f040 80d5 	bne.w	800fe86 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fcdc:	4b46      	ldr	r3, [pc, #280]	; (800fdf8 <tcp_process+0x2a0>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	1c5a      	adds	r2, r3, #1
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800fcee:	4b41      	ldr	r3, [pc, #260]	; (800fdf4 <tcp_process+0x29c>)
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fcf6:	4b44      	ldr	r3, [pc, #272]	; (800fe08 <tcp_process+0x2b0>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	89db      	ldrh	r3, [r3, #14]
 800fcfc:	b29a      	uxth	r2, r3
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fd10:	4b39      	ldr	r3, [pc, #228]	; (800fdf8 <tcp_process+0x2a0>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	1e5a      	subs	r2, r3, #1
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2204      	movs	r2, #4
 800fd1e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	3304      	adds	r3, #4
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f005 f9dd 	bl	80150e8 <ip4_route>
 800fd2e:	4601      	mov	r1, r0
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3304      	adds	r3, #4
 800fd34:	461a      	mov	r2, r3
 800fd36:	4620      	mov	r0, r4
 800fd38:	f7ff f88c 	bl	800ee54 <tcp_eff_send_mss_netif>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	461a      	mov	r2, r3
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd48:	009a      	lsls	r2, r3, #2
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd4e:	005b      	lsls	r3, r3, #1
 800fd50:	f241 111c 	movw	r1, #4380	; 0x111c
 800fd54:	428b      	cmp	r3, r1
 800fd56:	bf38      	it	cc
 800fd58:	460b      	movcc	r3, r1
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d204      	bcs.n	800fd68 <tcp_process+0x210>
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd62:	009b      	lsls	r3, r3, #2
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	e00d      	b.n	800fd84 <tcp_process+0x22c>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd6c:	005b      	lsls	r3, r3, #1
 800fd6e:	f241 121c 	movw	r2, #4380	; 0x111c
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d904      	bls.n	800fd80 <tcp_process+0x228>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd7a:	005b      	lsls	r3, r3, #1
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	e001      	b.n	800fd84 <tcp_process+0x22c>
 800fd80:	f241 131c 	movw	r3, #4380	; 0x111c
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d106      	bne.n	800fda2 <tcp_process+0x24a>
 800fd94:	4b13      	ldr	r3, [pc, #76]	; (800fde4 <tcp_process+0x28c>)
 800fd96:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fd9a:	491c      	ldr	r1, [pc, #112]	; (800fe0c <tcp_process+0x2b4>)
 800fd9c:	4813      	ldr	r0, [pc, #76]	; (800fdec <tcp_process+0x294>)
 800fd9e:	f011 ff95 	bl	8021ccc <iprintf>
        --pcb->snd_queuelen;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	b29a      	uxth	r2, r3
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdb6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fdb8:	69fb      	ldr	r3, [r7, #28]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d12a      	bne.n	800fe14 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdc2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d106      	bne.n	800fdd8 <tcp_process+0x280>
 800fdca:	4b06      	ldr	r3, [pc, #24]	; (800fde4 <tcp_process+0x28c>)
 800fdcc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fdd0:	490f      	ldr	r1, [pc, #60]	; (800fe10 <tcp_process+0x2b8>)
 800fdd2:	4806      	ldr	r0, [pc, #24]	; (800fdec <tcp_process+0x294>)
 800fdd4:	f011 ff7a 	bl	8021ccc <iprintf>
          pcb->unsent = rseg->next;
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	66da      	str	r2, [r3, #108]	; 0x6c
 800fde0:	e01c      	b.n	800fe1c <tcp_process+0x2c4>
 800fde2:	bf00      	nop
 800fde4:	08024608 	.word	0x08024608
 800fde8:	08024840 	.word	0x08024840
 800fdec:	08024654 	.word	0x08024654
 800fdf0:	20040b84 	.word	0x20040b84
 800fdf4:	20040b7c 	.word	0x20040b7c
 800fdf8:	20040b78 	.word	0x20040b78
 800fdfc:	0802485c 	.word	0x0802485c
 800fe00:	20040b85 	.word	0x20040b85
 800fe04:	20040b40 	.word	0x20040b40
 800fe08:	20040b68 	.word	0x20040b68
 800fe0c:	0802487c 	.word	0x0802487c
 800fe10:	08024894 	.word	0x08024894
        } else {
          pcb->unacked = rseg->next;
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	681a      	ldr	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fe1c:	69f8      	ldr	r0, [r7, #28]
 800fe1e:	f7fe fd22 	bl	800e866 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d104      	bne.n	800fe34 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe30:	861a      	strh	r2, [r3, #48]	; 0x30
 800fe32:	e006      	b.n	800fe42 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00a      	beq.n	800fe62 <tcp_process+0x30a>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe52:	687a      	ldr	r2, [r7, #4]
 800fe54:	6910      	ldr	r0, [r2, #16]
 800fe56:	2200      	movs	r2, #0
 800fe58:	6879      	ldr	r1, [r7, #4]
 800fe5a:	4798      	blx	r3
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	76bb      	strb	r3, [r7, #26]
 800fe60:	e001      	b.n	800fe66 <tcp_process+0x30e>
 800fe62:	2300      	movs	r3, #0
 800fe64:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fe66:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe6a:	f113 0f0d 	cmn.w	r3, #13
 800fe6e:	d102      	bne.n	800fe76 <tcp_process+0x31e>
          return ERR_ABRT;
 800fe70:	f06f 030c 	mvn.w	r3, #12
 800fe74:	e250      	b.n	8010318 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	8b5b      	ldrh	r3, [r3, #26]
 800fe7a:	f043 0302 	orr.w	r3, r3, #2
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fe84:	e23a      	b.n	80102fc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fe86:	4b98      	ldr	r3, [pc, #608]	; (80100e8 <tcp_process+0x590>)
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	f003 0310 	and.w	r3, r3, #16
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f000 8234 	beq.w	80102fc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe94:	4b95      	ldr	r3, [pc, #596]	; (80100ec <tcp_process+0x594>)
 800fe96:	6819      	ldr	r1, [r3, #0]
 800fe98:	4b95      	ldr	r3, [pc, #596]	; (80100f0 <tcp_process+0x598>)
 800fe9a:	881b      	ldrh	r3, [r3, #0]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	4b95      	ldr	r3, [pc, #596]	; (80100f4 <tcp_process+0x59c>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fea4:	4b94      	ldr	r3, [pc, #592]	; (80100f8 <tcp_process+0x5a0>)
 800fea6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fea8:	885b      	ldrh	r3, [r3, #2]
 800feaa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800feac:	4a92      	ldr	r2, [pc, #584]	; (80100f8 <tcp_process+0x5a0>)
 800feae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feb0:	8812      	ldrh	r2, [r2, #0]
 800feb2:	b292      	uxth	r2, r2
 800feb4:	9202      	str	r2, [sp, #8]
 800feb6:	9301      	str	r3, [sp, #4]
 800feb8:	4b90      	ldr	r3, [pc, #576]	; (80100fc <tcp_process+0x5a4>)
 800feba:	9300      	str	r3, [sp, #0]
 800febc:	4b90      	ldr	r3, [pc, #576]	; (8010100 <tcp_process+0x5a8>)
 800febe:	4602      	mov	r2, r0
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f002 fc85 	bl	80127d0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fecc:	2b05      	cmp	r3, #5
 800fece:	f200 8215 	bhi.w	80102fc <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2200      	movs	r2, #0
 800fed6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f002 fa4f 	bl	801237c <tcp_rexmit_rto>
      break;
 800fede:	e20d      	b.n	80102fc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fee0:	4b81      	ldr	r3, [pc, #516]	; (80100e8 <tcp_process+0x590>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	f003 0310 	and.w	r3, r3, #16
 800fee8:	2b00      	cmp	r3, #0
 800feea:	f000 80a1 	beq.w	8010030 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800feee:	4b7f      	ldr	r3, [pc, #508]	; (80100ec <tcp_process+0x594>)
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	3b01      	subs	r3, #1
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	db7e      	blt.n	800fffc <tcp_process+0x4a4>
 800fefe:	4b7b      	ldr	r3, [pc, #492]	; (80100ec <tcp_process+0x594>)
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff06:	1ad3      	subs	r3, r2, r3
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	dc77      	bgt.n	800fffc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2204      	movs	r2, #4
 800ff10:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d102      	bne.n	800ff20 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ff1a:	23fa      	movs	r3, #250	; 0xfa
 800ff1c:	76bb      	strb	r3, [r7, #26]
 800ff1e:	e01d      	b.n	800ff5c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d106      	bne.n	800ff38 <tcp_process+0x3e0>
 800ff2a:	4b76      	ldr	r3, [pc, #472]	; (8010104 <tcp_process+0x5ac>)
 800ff2c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ff30:	4975      	ldr	r1, [pc, #468]	; (8010108 <tcp_process+0x5b0>)
 800ff32:	4876      	ldr	r0, [pc, #472]	; (801010c <tcp_process+0x5b4>)
 800ff34:	f011 feca 	bl	8021ccc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff3c:	699b      	ldr	r3, [r3, #24]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d00a      	beq.n	800ff58 <tcp_process+0x400>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff46:	699b      	ldr	r3, [r3, #24]
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	6910      	ldr	r0, [r2, #16]
 800ff4c:	2200      	movs	r2, #0
 800ff4e:	6879      	ldr	r1, [r7, #4]
 800ff50:	4798      	blx	r3
 800ff52:	4603      	mov	r3, r0
 800ff54:	76bb      	strb	r3, [r7, #26]
 800ff56:	e001      	b.n	800ff5c <tcp_process+0x404>
 800ff58:	23f0      	movs	r3, #240	; 0xf0
 800ff5a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ff5c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d00a      	beq.n	800ff7a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ff64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ff68:	f113 0f0d 	cmn.w	r3, #13
 800ff6c:	d002      	beq.n	800ff74 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f7fd ff8e 	bl	800de90 <tcp_abort>
            }
            return ERR_ABRT;
 800ff74:	f06f 030c 	mvn.w	r3, #12
 800ff78:	e1ce      	b.n	8010318 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 fae0 	bl	8010540 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ff80:	4b63      	ldr	r3, [pc, #396]	; (8010110 <tcp_process+0x5b8>)
 800ff82:	881b      	ldrh	r3, [r3, #0]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d005      	beq.n	800ff94 <tcp_process+0x43c>
            recv_acked--;
 800ff88:	4b61      	ldr	r3, [pc, #388]	; (8010110 <tcp_process+0x5b8>)
 800ff8a:	881b      	ldrh	r3, [r3, #0]
 800ff8c:	3b01      	subs	r3, #1
 800ff8e:	b29a      	uxth	r2, r3
 800ff90:	4b5f      	ldr	r3, [pc, #380]	; (8010110 <tcp_process+0x5b8>)
 800ff92:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff98:	009a      	lsls	r2, r3, #2
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff9e:	005b      	lsls	r3, r3, #1
 800ffa0:	f241 111c 	movw	r1, #4380	; 0x111c
 800ffa4:	428b      	cmp	r3, r1
 800ffa6:	bf38      	it	cc
 800ffa8:	460b      	movcc	r3, r1
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d204      	bcs.n	800ffb8 <tcp_process+0x460>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	e00d      	b.n	800ffd4 <tcp_process+0x47c>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffbc:	005b      	lsls	r3, r3, #1
 800ffbe:	f241 121c 	movw	r2, #4380	; 0x111c
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	d904      	bls.n	800ffd0 <tcp_process+0x478>
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffca:	005b      	lsls	r3, r3, #1
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	e001      	b.n	800ffd4 <tcp_process+0x47c>
 800ffd0:	f241 131c 	movw	r3, #4380	; 0x111c
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ffda:	4b4e      	ldr	r3, [pc, #312]	; (8010114 <tcp_process+0x5bc>)
 800ffdc:	781b      	ldrb	r3, [r3, #0]
 800ffde:	f003 0320 	and.w	r3, r3, #32
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d037      	beq.n	8010056 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	8b5b      	ldrh	r3, [r3, #26]
 800ffea:	f043 0302 	orr.w	r3, r3, #2
 800ffee:	b29a      	uxth	r2, r3
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2207      	movs	r2, #7
 800fff8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fffa:	e02c      	b.n	8010056 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fffc:	4b3b      	ldr	r3, [pc, #236]	; (80100ec <tcp_process+0x594>)
 800fffe:	6819      	ldr	r1, [r3, #0]
 8010000:	4b3b      	ldr	r3, [pc, #236]	; (80100f0 <tcp_process+0x598>)
 8010002:	881b      	ldrh	r3, [r3, #0]
 8010004:	461a      	mov	r2, r3
 8010006:	4b3b      	ldr	r3, [pc, #236]	; (80100f4 <tcp_process+0x59c>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801000c:	4b3a      	ldr	r3, [pc, #232]	; (80100f8 <tcp_process+0x5a0>)
 801000e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010010:	885b      	ldrh	r3, [r3, #2]
 8010012:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010014:	4a38      	ldr	r2, [pc, #224]	; (80100f8 <tcp_process+0x5a0>)
 8010016:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010018:	8812      	ldrh	r2, [r2, #0]
 801001a:	b292      	uxth	r2, r2
 801001c:	9202      	str	r2, [sp, #8]
 801001e:	9301      	str	r3, [sp, #4]
 8010020:	4b36      	ldr	r3, [pc, #216]	; (80100fc <tcp_process+0x5a4>)
 8010022:	9300      	str	r3, [sp, #0]
 8010024:	4b36      	ldr	r3, [pc, #216]	; (8010100 <tcp_process+0x5a8>)
 8010026:	4602      	mov	r2, r0
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f002 fbd1 	bl	80127d0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801002e:	e167      	b.n	8010300 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010030:	4b2d      	ldr	r3, [pc, #180]	; (80100e8 <tcp_process+0x590>)
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	f003 0302 	and.w	r3, r3, #2
 8010038:	2b00      	cmp	r3, #0
 801003a:	f000 8161 	beq.w	8010300 <tcp_process+0x7a8>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010042:	1e5a      	subs	r2, r3, #1
 8010044:	4b2b      	ldr	r3, [pc, #172]	; (80100f4 <tcp_process+0x59c>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	429a      	cmp	r2, r3
 801004a:	f040 8159 	bne.w	8010300 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	f002 f9b6 	bl	80123c0 <tcp_rexmit>
      break;
 8010054:	e154      	b.n	8010300 <tcp_process+0x7a8>
 8010056:	e153      	b.n	8010300 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 fa71 	bl	8010540 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801005e:	4b2d      	ldr	r3, [pc, #180]	; (8010114 <tcp_process+0x5bc>)
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	f003 0320 	and.w	r3, r3, #32
 8010066:	2b00      	cmp	r3, #0
 8010068:	f000 814c 	beq.w	8010304 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	8b5b      	ldrh	r3, [r3, #26]
 8010070:	f043 0302 	orr.w	r3, r3, #2
 8010074:	b29a      	uxth	r2, r3
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2207      	movs	r2, #7
 801007e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010080:	e140      	b.n	8010304 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 fa5c 	bl	8010540 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010088:	4b22      	ldr	r3, [pc, #136]	; (8010114 <tcp_process+0x5bc>)
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	f003 0320 	and.w	r3, r3, #32
 8010090:	2b00      	cmp	r3, #0
 8010092:	d071      	beq.n	8010178 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010094:	4b14      	ldr	r3, [pc, #80]	; (80100e8 <tcp_process+0x590>)
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	f003 0310 	and.w	r3, r3, #16
 801009c:	2b00      	cmp	r3, #0
 801009e:	d060      	beq.n	8010162 <tcp_process+0x60a>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100a4:	4b11      	ldr	r3, [pc, #68]	; (80100ec <tcp_process+0x594>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d15a      	bne.n	8010162 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d156      	bne.n	8010162 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	8b5b      	ldrh	r3, [r3, #26]
 80100b8:	f043 0302 	orr.w	r3, r3, #2
 80100bc:	b29a      	uxth	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f7fe fdbc 	bl	800ec40 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80100c8:	4b13      	ldr	r3, [pc, #76]	; (8010118 <tcp_process+0x5c0>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d105      	bne.n	80100de <tcp_process+0x586>
 80100d2:	4b11      	ldr	r3, [pc, #68]	; (8010118 <tcp_process+0x5c0>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	4a0f      	ldr	r2, [pc, #60]	; (8010118 <tcp_process+0x5c0>)
 80100da:	6013      	str	r3, [r2, #0]
 80100dc:	e02e      	b.n	801013c <tcp_process+0x5e4>
 80100de:	4b0e      	ldr	r3, [pc, #56]	; (8010118 <tcp_process+0x5c0>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	617b      	str	r3, [r7, #20]
 80100e4:	e027      	b.n	8010136 <tcp_process+0x5de>
 80100e6:	bf00      	nop
 80100e8:	20040b84 	.word	0x20040b84
 80100ec:	20040b7c 	.word	0x20040b7c
 80100f0:	20040b82 	.word	0x20040b82
 80100f4:	20040b78 	.word	0x20040b78
 80100f8:	20040b68 	.word	0x20040b68
 80100fc:	200357d0 	.word	0x200357d0
 8010100:	200357d4 	.word	0x200357d4
 8010104:	08024608 	.word	0x08024608
 8010108:	080248a8 	.word	0x080248a8
 801010c:	08024654 	.word	0x08024654
 8010110:	20040b80 	.word	0x20040b80
 8010114:	20040b85 	.word	0x20040b85
 8010118:	20040b4c 	.word	0x20040b4c
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	429a      	cmp	r2, r3
 8010124:	d104      	bne.n	8010130 <tcp_process+0x5d8>
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	68da      	ldr	r2, [r3, #12]
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	60da      	str	r2, [r3, #12]
 801012e:	e005      	b.n	801013c <tcp_process+0x5e4>
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	68db      	ldr	r3, [r3, #12]
 8010134:	617b      	str	r3, [r7, #20]
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1ef      	bne.n	801011c <tcp_process+0x5c4>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2200      	movs	r2, #0
 8010140:	60da      	str	r2, [r3, #12]
 8010142:	4b77      	ldr	r3, [pc, #476]	; (8010320 <tcp_process+0x7c8>)
 8010144:	2201      	movs	r2, #1
 8010146:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	220a      	movs	r2, #10
 801014c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801014e:	4b75      	ldr	r3, [pc, #468]	; (8010324 <tcp_process+0x7cc>)
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	60da      	str	r2, [r3, #12]
 8010156:	4a73      	ldr	r2, [pc, #460]	; (8010324 <tcp_process+0x7cc>)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6013      	str	r3, [r2, #0]
 801015c:	f002 fcfa 	bl	8012b54 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010160:	e0d2      	b.n	8010308 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	8b5b      	ldrh	r3, [r3, #26]
 8010166:	f043 0302 	orr.w	r3, r3, #2
 801016a:	b29a      	uxth	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2208      	movs	r2, #8
 8010174:	751a      	strb	r2, [r3, #20]
      break;
 8010176:	e0c7      	b.n	8010308 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010178:	4b6b      	ldr	r3, [pc, #428]	; (8010328 <tcp_process+0x7d0>)
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	f003 0310 	and.w	r3, r3, #16
 8010180:	2b00      	cmp	r3, #0
 8010182:	f000 80c1 	beq.w	8010308 <tcp_process+0x7b0>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801018a:	4b68      	ldr	r3, [pc, #416]	; (801032c <tcp_process+0x7d4>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	429a      	cmp	r2, r3
 8010190:	f040 80ba 	bne.w	8010308 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010198:	2b00      	cmp	r3, #0
 801019a:	f040 80b5 	bne.w	8010308 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2206      	movs	r2, #6
 80101a2:	751a      	strb	r2, [r3, #20]
      break;
 80101a4:	e0b0      	b.n	8010308 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 f9ca 	bl	8010540 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80101ac:	4b60      	ldr	r3, [pc, #384]	; (8010330 <tcp_process+0x7d8>)
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	f003 0320 	and.w	r3, r3, #32
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	f000 80a9 	beq.w	801030c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	8b5b      	ldrh	r3, [r3, #26]
 80101be:	f043 0302 	orr.w	r3, r3, #2
 80101c2:	b29a      	uxth	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7fe fd39 	bl	800ec40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80101ce:	4b59      	ldr	r3, [pc, #356]	; (8010334 <tcp_process+0x7dc>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	687a      	ldr	r2, [r7, #4]
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d105      	bne.n	80101e4 <tcp_process+0x68c>
 80101d8:	4b56      	ldr	r3, [pc, #344]	; (8010334 <tcp_process+0x7dc>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	4a55      	ldr	r2, [pc, #340]	; (8010334 <tcp_process+0x7dc>)
 80101e0:	6013      	str	r3, [r2, #0]
 80101e2:	e013      	b.n	801020c <tcp_process+0x6b4>
 80101e4:	4b53      	ldr	r3, [pc, #332]	; (8010334 <tcp_process+0x7dc>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	613b      	str	r3, [r7, #16]
 80101ea:	e00c      	b.n	8010206 <tcp_process+0x6ae>
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d104      	bne.n	8010200 <tcp_process+0x6a8>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	68da      	ldr	r2, [r3, #12]
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	60da      	str	r2, [r3, #12]
 80101fe:	e005      	b.n	801020c <tcp_process+0x6b4>
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	613b      	str	r3, [r7, #16]
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d1ef      	bne.n	80101ec <tcp_process+0x694>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2200      	movs	r2, #0
 8010210:	60da      	str	r2, [r3, #12]
 8010212:	4b43      	ldr	r3, [pc, #268]	; (8010320 <tcp_process+0x7c8>)
 8010214:	2201      	movs	r2, #1
 8010216:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	220a      	movs	r2, #10
 801021c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801021e:	4b41      	ldr	r3, [pc, #260]	; (8010324 <tcp_process+0x7cc>)
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	60da      	str	r2, [r3, #12]
 8010226:	4a3f      	ldr	r2, [pc, #252]	; (8010324 <tcp_process+0x7cc>)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6013      	str	r3, [r2, #0]
 801022c:	f002 fc92 	bl	8012b54 <tcp_timer_needed>
      }
      break;
 8010230:	e06c      	b.n	801030c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f984 	bl	8010540 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010238:	4b3b      	ldr	r3, [pc, #236]	; (8010328 <tcp_process+0x7d0>)
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	f003 0310 	and.w	r3, r3, #16
 8010240:	2b00      	cmp	r3, #0
 8010242:	d065      	beq.n	8010310 <tcp_process+0x7b8>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010248:	4b38      	ldr	r3, [pc, #224]	; (801032c <tcp_process+0x7d4>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	429a      	cmp	r2, r3
 801024e:	d15f      	bne.n	8010310 <tcp_process+0x7b8>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010254:	2b00      	cmp	r3, #0
 8010256:	d15b      	bne.n	8010310 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f7fe fcf1 	bl	800ec40 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801025e:	4b35      	ldr	r3, [pc, #212]	; (8010334 <tcp_process+0x7dc>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	429a      	cmp	r2, r3
 8010266:	d105      	bne.n	8010274 <tcp_process+0x71c>
 8010268:	4b32      	ldr	r3, [pc, #200]	; (8010334 <tcp_process+0x7dc>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	4a31      	ldr	r2, [pc, #196]	; (8010334 <tcp_process+0x7dc>)
 8010270:	6013      	str	r3, [r2, #0]
 8010272:	e013      	b.n	801029c <tcp_process+0x744>
 8010274:	4b2f      	ldr	r3, [pc, #188]	; (8010334 <tcp_process+0x7dc>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	60fb      	str	r3, [r7, #12]
 801027a:	e00c      	b.n	8010296 <tcp_process+0x73e>
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	68db      	ldr	r3, [r3, #12]
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	429a      	cmp	r2, r3
 8010284:	d104      	bne.n	8010290 <tcp_process+0x738>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	68da      	ldr	r2, [r3, #12]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	60da      	str	r2, [r3, #12]
 801028e:	e005      	b.n	801029c <tcp_process+0x744>
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	60fb      	str	r3, [r7, #12]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d1ef      	bne.n	801027c <tcp_process+0x724>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2200      	movs	r2, #0
 80102a0:	60da      	str	r2, [r3, #12]
 80102a2:	4b1f      	ldr	r3, [pc, #124]	; (8010320 <tcp_process+0x7c8>)
 80102a4:	2201      	movs	r2, #1
 80102a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	220a      	movs	r2, #10
 80102ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80102ae:	4b1d      	ldr	r3, [pc, #116]	; (8010324 <tcp_process+0x7cc>)
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	60da      	str	r2, [r3, #12]
 80102b6:	4a1b      	ldr	r2, [pc, #108]	; (8010324 <tcp_process+0x7cc>)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6013      	str	r3, [r2, #0]
 80102bc:	f002 fc4a 	bl	8012b54 <tcp_timer_needed>
      }
      break;
 80102c0:	e026      	b.n	8010310 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 f93c 	bl	8010540 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80102c8:	4b17      	ldr	r3, [pc, #92]	; (8010328 <tcp_process+0x7d0>)
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	f003 0310 	and.w	r3, r3, #16
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d01f      	beq.n	8010314 <tcp_process+0x7bc>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102d8:	4b14      	ldr	r3, [pc, #80]	; (801032c <tcp_process+0x7d4>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d119      	bne.n	8010314 <tcp_process+0x7bc>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d115      	bne.n	8010314 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80102e8:	4b11      	ldr	r3, [pc, #68]	; (8010330 <tcp_process+0x7d8>)
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	f043 0310 	orr.w	r3, r3, #16
 80102f0:	b2da      	uxtb	r2, r3
 80102f2:	4b0f      	ldr	r3, [pc, #60]	; (8010330 <tcp_process+0x7d8>)
 80102f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80102f6:	e00d      	b.n	8010314 <tcp_process+0x7bc>
    default:
      break;
 80102f8:	bf00      	nop
 80102fa:	e00c      	b.n	8010316 <tcp_process+0x7be>
      break;
 80102fc:	bf00      	nop
 80102fe:	e00a      	b.n	8010316 <tcp_process+0x7be>
      break;
 8010300:	bf00      	nop
 8010302:	e008      	b.n	8010316 <tcp_process+0x7be>
      break;
 8010304:	bf00      	nop
 8010306:	e006      	b.n	8010316 <tcp_process+0x7be>
      break;
 8010308:	bf00      	nop
 801030a:	e004      	b.n	8010316 <tcp_process+0x7be>
      break;
 801030c:	bf00      	nop
 801030e:	e002      	b.n	8010316 <tcp_process+0x7be>
      break;
 8010310:	bf00      	nop
 8010312:	e000      	b.n	8010316 <tcp_process+0x7be>
      break;
 8010314:	bf00      	nop
  }
  return ERR_OK;
 8010316:	2300      	movs	r3, #0
}
 8010318:	4618      	mov	r0, r3
 801031a:	3724      	adds	r7, #36	; 0x24
 801031c:	46bd      	mov	sp, r7
 801031e:	bd90      	pop	{r4, r7, pc}
 8010320:	20040b54 	.word	0x20040b54
 8010324:	20040b50 	.word	0x20040b50
 8010328:	20040b84 	.word	0x20040b84
 801032c:	20040b7c 	.word	0x20040b7c
 8010330:	20040b85 	.word	0x20040b85
 8010334:	20040b4c 	.word	0x20040b4c

08010338 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010338:	b590      	push	{r4, r7, lr}
 801033a:	b085      	sub	sp, #20
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d106      	bne.n	8010356 <tcp_oos_insert_segment+0x1e>
 8010348:	4b3b      	ldr	r3, [pc, #236]	; (8010438 <tcp_oos_insert_segment+0x100>)
 801034a:	f240 421f 	movw	r2, #1055	; 0x41f
 801034e:	493b      	ldr	r1, [pc, #236]	; (801043c <tcp_oos_insert_segment+0x104>)
 8010350:	483b      	ldr	r0, [pc, #236]	; (8010440 <tcp_oos_insert_segment+0x108>)
 8010352:	f011 fcbb 	bl	8021ccc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	899b      	ldrh	r3, [r3, #12]
 801035c:	b29b      	uxth	r3, r3
 801035e:	4618      	mov	r0, r3
 8010360:	f7fa ff60 	bl	800b224 <lwip_htons>
 8010364:	4603      	mov	r3, r0
 8010366:	b2db      	uxtb	r3, r3
 8010368:	f003 0301 	and.w	r3, r3, #1
 801036c:	2b00      	cmp	r3, #0
 801036e:	d028      	beq.n	80103c2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010370:	6838      	ldr	r0, [r7, #0]
 8010372:	f7fe fa63 	bl	800e83c <tcp_segs_free>
    next = NULL;
 8010376:	2300      	movs	r3, #0
 8010378:	603b      	str	r3, [r7, #0]
 801037a:	e056      	b.n	801042a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	899b      	ldrh	r3, [r3, #12]
 8010382:	b29b      	uxth	r3, r3
 8010384:	4618      	mov	r0, r3
 8010386:	f7fa ff4d 	bl	800b224 <lwip_htons>
 801038a:	4603      	mov	r3, r0
 801038c:	b2db      	uxtb	r3, r3
 801038e:	f003 0301 	and.w	r3, r3, #1
 8010392:	2b00      	cmp	r3, #0
 8010394:	d00d      	beq.n	80103b2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	68db      	ldr	r3, [r3, #12]
 801039a:	899b      	ldrh	r3, [r3, #12]
 801039c:	b29c      	uxth	r4, r3
 801039e:	2001      	movs	r0, #1
 80103a0:	f7fa ff40 	bl	800b224 <lwip_htons>
 80103a4:	4603      	mov	r3, r0
 80103a6:	461a      	mov	r2, r3
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	68db      	ldr	r3, [r3, #12]
 80103ac:	4322      	orrs	r2, r4
 80103ae:	b292      	uxth	r2, r2
 80103b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80103bc:	68f8      	ldr	r0, [r7, #12]
 80103be:	f7fe fa52 	bl	800e866 <tcp_seg_free>
    while (next &&
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d00e      	beq.n	80103e6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	891b      	ldrh	r3, [r3, #8]
 80103cc:	461a      	mov	r2, r3
 80103ce:	4b1d      	ldr	r3, [pc, #116]	; (8010444 <tcp_oos_insert_segment+0x10c>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	441a      	add	r2, r3
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	68db      	ldr	r3, [r3, #12]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	6839      	ldr	r1, [r7, #0]
 80103dc:	8909      	ldrh	r1, [r1, #8]
 80103de:	440b      	add	r3, r1
 80103e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	daca      	bge.n	801037c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d01e      	beq.n	801042a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	891b      	ldrh	r3, [r3, #8]
 80103f0:	461a      	mov	r2, r3
 80103f2:	4b14      	ldr	r3, [pc, #80]	; (8010444 <tcp_oos_insert_segment+0x10c>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	441a      	add	r2, r3
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010400:	2b00      	cmp	r3, #0
 8010402:	dd12      	ble.n	801042a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	b29a      	uxth	r2, r3
 801040c:	4b0d      	ldr	r3, [pc, #52]	; (8010444 <tcp_oos_insert_segment+0x10c>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	b29b      	uxth	r3, r3
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	b29a      	uxth	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	685a      	ldr	r2, [r3, #4]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	891b      	ldrh	r3, [r3, #8]
 8010422:	4619      	mov	r1, r3
 8010424:	4610      	mov	r0, r2
 8010426:	f7fc fc8d 	bl	800cd44 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	683a      	ldr	r2, [r7, #0]
 801042e:	601a      	str	r2, [r3, #0]
}
 8010430:	bf00      	nop
 8010432:	3714      	adds	r7, #20
 8010434:	46bd      	mov	sp, r7
 8010436:	bd90      	pop	{r4, r7, pc}
 8010438:	08024608 	.word	0x08024608
 801043c:	080248c8 	.word	0x080248c8
 8010440:	08024654 	.word	0x08024654
 8010444:	20040b78 	.word	0x20040b78

08010448 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010448:	b5b0      	push	{r4, r5, r7, lr}
 801044a:	b086      	sub	sp, #24
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	607a      	str	r2, [r7, #4]
 8010454:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010456:	e03e      	b.n	80104d6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	4618      	mov	r0, r3
 8010468:	f7fc fe80 	bl	800d16c <pbuf_clen>
 801046c:	4603      	mov	r3, r0
 801046e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010476:	8a7a      	ldrh	r2, [r7, #18]
 8010478:	429a      	cmp	r2, r3
 801047a:	d906      	bls.n	801048a <tcp_free_acked_segments+0x42>
 801047c:	4b2a      	ldr	r3, [pc, #168]	; (8010528 <tcp_free_acked_segments+0xe0>)
 801047e:	f240 4257 	movw	r2, #1111	; 0x457
 8010482:	492a      	ldr	r1, [pc, #168]	; (801052c <tcp_free_acked_segments+0xe4>)
 8010484:	482a      	ldr	r0, [pc, #168]	; (8010530 <tcp_free_acked_segments+0xe8>)
 8010486:	f011 fc21 	bl	8021ccc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010490:	8a7b      	ldrh	r3, [r7, #18]
 8010492:	1ad3      	subs	r3, r2, r3
 8010494:	b29a      	uxth	r2, r3
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	891a      	ldrh	r2, [r3, #8]
 80104a0:	4b24      	ldr	r3, [pc, #144]	; (8010534 <tcp_free_acked_segments+0xec>)
 80104a2:	881b      	ldrh	r3, [r3, #0]
 80104a4:	4413      	add	r3, r2
 80104a6:	b29a      	uxth	r2, r3
 80104a8:	4b22      	ldr	r3, [pc, #136]	; (8010534 <tcp_free_acked_segments+0xec>)
 80104aa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80104ac:	6978      	ldr	r0, [r7, #20]
 80104ae:	f7fe f9da 	bl	800e866 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d00c      	beq.n	80104d6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d109      	bne.n	80104d6 <tcp_free_acked_segments+0x8e>
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d106      	bne.n	80104d6 <tcp_free_acked_segments+0x8e>
 80104c8:	4b17      	ldr	r3, [pc, #92]	; (8010528 <tcp_free_acked_segments+0xe0>)
 80104ca:	f240 4261 	movw	r2, #1121	; 0x461
 80104ce:	491a      	ldr	r1, [pc, #104]	; (8010538 <tcp_free_acked_segments+0xf0>)
 80104d0:	4817      	ldr	r0, [pc, #92]	; (8010530 <tcp_free_acked_segments+0xe8>)
 80104d2:	f011 fbfb 	bl	8021ccc <iprintf>
  while (seg_list != NULL &&
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d020      	beq.n	801051e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	68db      	ldr	r3, [r3, #12]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7fa feb3 	bl	800b24e <lwip_htonl>
 80104e8:	4604      	mov	r4, r0
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	891b      	ldrh	r3, [r3, #8]
 80104ee:	461d      	mov	r5, r3
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	68db      	ldr	r3, [r3, #12]
 80104f4:	899b      	ldrh	r3, [r3, #12]
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fa fe93 	bl	800b224 <lwip_htons>
 80104fe:	4603      	mov	r3, r0
 8010500:	b2db      	uxtb	r3, r3
 8010502:	f003 0303 	and.w	r3, r3, #3
 8010506:	2b00      	cmp	r3, #0
 8010508:	d001      	beq.n	801050e <tcp_free_acked_segments+0xc6>
 801050a:	2301      	movs	r3, #1
 801050c:	e000      	b.n	8010510 <tcp_free_acked_segments+0xc8>
 801050e:	2300      	movs	r3, #0
 8010510:	442b      	add	r3, r5
 8010512:	18e2      	adds	r2, r4, r3
 8010514:	4b09      	ldr	r3, [pc, #36]	; (801053c <tcp_free_acked_segments+0xf4>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801051a:	2b00      	cmp	r3, #0
 801051c:	dd9c      	ble.n	8010458 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801051e:	68bb      	ldr	r3, [r7, #8]
}
 8010520:	4618      	mov	r0, r3
 8010522:	3718      	adds	r7, #24
 8010524:	46bd      	mov	sp, r7
 8010526:	bdb0      	pop	{r4, r5, r7, pc}
 8010528:	08024608 	.word	0x08024608
 801052c:	080248f0 	.word	0x080248f0
 8010530:	08024654 	.word	0x08024654
 8010534:	20040b80 	.word	0x20040b80
 8010538:	08024918 	.word	0x08024918
 801053c:	20040b7c 	.word	0x20040b7c

08010540 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010540:	b5b0      	push	{r4, r5, r7, lr}
 8010542:	b094      	sub	sp, #80	; 0x50
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010548:	2300      	movs	r3, #0
 801054a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <tcp_receive+0x20>
 8010552:	4b91      	ldr	r3, [pc, #580]	; (8010798 <tcp_receive+0x258>)
 8010554:	f240 427b 	movw	r2, #1147	; 0x47b
 8010558:	4990      	ldr	r1, [pc, #576]	; (801079c <tcp_receive+0x25c>)
 801055a:	4891      	ldr	r0, [pc, #580]	; (80107a0 <tcp_receive+0x260>)
 801055c:	f011 fbb6 	bl	8021ccc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	7d1b      	ldrb	r3, [r3, #20]
 8010564:	2b03      	cmp	r3, #3
 8010566:	d806      	bhi.n	8010576 <tcp_receive+0x36>
 8010568:	4b8b      	ldr	r3, [pc, #556]	; (8010798 <tcp_receive+0x258>)
 801056a:	f240 427c 	movw	r2, #1148	; 0x47c
 801056e:	498d      	ldr	r1, [pc, #564]	; (80107a4 <tcp_receive+0x264>)
 8010570:	488b      	ldr	r0, [pc, #556]	; (80107a0 <tcp_receive+0x260>)
 8010572:	f011 fbab 	bl	8021ccc <iprintf>

  if (flags & TCP_ACK) {
 8010576:	4b8c      	ldr	r3, [pc, #560]	; (80107a8 <tcp_receive+0x268>)
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	f003 0310 	and.w	r3, r3, #16
 801057e:	2b00      	cmp	r3, #0
 8010580:	f000 8264 	beq.w	8010a4c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801058a:	461a      	mov	r2, r3
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010590:	4413      	add	r3, r2
 8010592:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010598:	4b84      	ldr	r3, [pc, #528]	; (80107ac <tcp_receive+0x26c>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	1ad3      	subs	r3, r2, r3
 801059e:	2b00      	cmp	r3, #0
 80105a0:	db1b      	blt.n	80105da <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80105a6:	4b81      	ldr	r3, [pc, #516]	; (80107ac <tcp_receive+0x26c>)
 80105a8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d106      	bne.n	80105bc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80105b2:	4b7f      	ldr	r3, [pc, #508]	; (80107b0 <tcp_receive+0x270>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	1ad3      	subs	r3, r2, r3
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	db0e      	blt.n	80105da <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80105c0:	4b7b      	ldr	r3, [pc, #492]	; (80107b0 <tcp_receive+0x270>)
 80105c2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d125      	bne.n	8010614 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80105c8:	4b7a      	ldr	r3, [pc, #488]	; (80107b4 <tcp_receive+0x274>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	89db      	ldrh	r3, [r3, #14]
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d91c      	bls.n	8010614 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80105da:	4b76      	ldr	r3, [pc, #472]	; (80107b4 <tcp_receive+0x274>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	89db      	ldrh	r3, [r3, #14]
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d205      	bcs.n	8010604 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010604:	4b69      	ldr	r3, [pc, #420]	; (80107ac <tcp_receive+0x26c>)
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801060c:	4b68      	ldr	r3, [pc, #416]	; (80107b0 <tcp_receive+0x270>)
 801060e:	681a      	ldr	r2, [r3, #0]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010614:	4b66      	ldr	r3, [pc, #408]	; (80107b0 <tcp_receive+0x270>)
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	2b00      	cmp	r3, #0
 8010620:	dc58      	bgt.n	80106d4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010622:	4b65      	ldr	r3, [pc, #404]	; (80107b8 <tcp_receive+0x278>)
 8010624:	881b      	ldrh	r3, [r3, #0]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d14b      	bne.n	80106c2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801062e:	687a      	ldr	r2, [r7, #4]
 8010630:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010634:	4413      	add	r3, r2
 8010636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010638:	429a      	cmp	r2, r3
 801063a:	d142      	bne.n	80106c2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010642:	2b00      	cmp	r3, #0
 8010644:	db3d      	blt.n	80106c2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801064a:	4b59      	ldr	r3, [pc, #356]	; (80107b0 <tcp_receive+0x270>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	429a      	cmp	r2, r3
 8010650:	d137      	bne.n	80106c2 <tcp_receive+0x182>
              found_dupack = 1;
 8010652:	2301      	movs	r3, #1
 8010654:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801065c:	2bff      	cmp	r3, #255	; 0xff
 801065e:	d007      	beq.n	8010670 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010666:	3301      	adds	r3, #1
 8010668:	b2da      	uxtb	r2, r3
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010676:	2b03      	cmp	r3, #3
 8010678:	d91b      	bls.n	80106b2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010684:	4413      	add	r3, r2
 8010686:	b29a      	uxth	r2, r3
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801068e:	429a      	cmp	r2, r3
 8010690:	d30a      	bcc.n	80106a8 <tcp_receive+0x168>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801069c:	4413      	add	r3, r2
 801069e:	b29a      	uxth	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80106a6:	e004      	b.n	80106b2 <tcp_receive+0x172>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80106b8:	2b02      	cmp	r3, #2
 80106ba:	d902      	bls.n	80106c2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f001 feeb 	bl	8012498 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80106c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	f040 8161 	bne.w	801098c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2200      	movs	r2, #0
 80106ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80106d2:	e15b      	b.n	801098c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80106d4:	4b36      	ldr	r3, [pc, #216]	; (80107b0 <tcp_receive+0x270>)
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106dc:	1ad3      	subs	r3, r2, r3
 80106de:	3b01      	subs	r3, #1
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f2c0 814e 	blt.w	8010982 <tcp_receive+0x442>
 80106e6:	4b32      	ldr	r3, [pc, #200]	; (80107b0 <tcp_receive+0x270>)
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106ee:	1ad3      	subs	r3, r2, r3
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	f300 8146 	bgt.w	8010982 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	8b5b      	ldrh	r3, [r3, #26]
 80106fa:	f003 0304 	and.w	r3, r3, #4
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d010      	beq.n	8010724 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	8b5b      	ldrh	r3, [r3, #26]
 8010706:	f023 0304 	bic.w	r3, r3, #4
 801070a:	b29a      	uxth	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2200      	movs	r2, #0
 8010728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010732:	10db      	asrs	r3, r3, #3
 8010734:	b21b      	sxth	r3, r3
 8010736:	b29a      	uxth	r2, r3
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801073e:	b29b      	uxth	r3, r3
 8010740:	4413      	add	r3, r2
 8010742:	b29b      	uxth	r3, r3
 8010744:	b21a      	sxth	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801074c:	4b18      	ldr	r3, [pc, #96]	; (80107b0 <tcp_receive+0x270>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	b29a      	uxth	r2, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010756:	b29b      	uxth	r3, r3
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010764:	4b12      	ldr	r3, [pc, #72]	; (80107b0 <tcp_receive+0x270>)
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	7d1b      	ldrb	r3, [r3, #20]
 8010770:	2b03      	cmp	r3, #3
 8010772:	f240 8097 	bls.w	80108a4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010782:	429a      	cmp	r2, r3
 8010784:	d245      	bcs.n	8010812 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	8b5b      	ldrh	r3, [r3, #26]
 801078a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801078e:	2b00      	cmp	r3, #0
 8010790:	d014      	beq.n	80107bc <tcp_receive+0x27c>
 8010792:	2301      	movs	r3, #1
 8010794:	e013      	b.n	80107be <tcp_receive+0x27e>
 8010796:	bf00      	nop
 8010798:	08024608 	.word	0x08024608
 801079c:	08024938 	.word	0x08024938
 80107a0:	08024654 	.word	0x08024654
 80107a4:	08024954 	.word	0x08024954
 80107a8:	20040b84 	.word	0x20040b84
 80107ac:	20040b78 	.word	0x20040b78
 80107b0:	20040b7c 	.word	0x20040b7c
 80107b4:	20040b68 	.word	0x20040b68
 80107b8:	20040b82 	.word	0x20040b82
 80107bc:	2302      	movs	r3, #2
 80107be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80107c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107cc:	fb12 f303 	smulbb	r3, r2, r3
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80107d4:	4293      	cmp	r3, r2
 80107d6:	bf28      	it	cs
 80107d8:	4613      	movcs	r3, r2
 80107da:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80107e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80107e4:	4413      	add	r3, r2
 80107e6:	b29a      	uxth	r2, r3
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d309      	bcc.n	8010806 <tcp_receive+0x2c6>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80107f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80107fa:	4413      	add	r3, r2
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010804:	e04e      	b.n	80108a4 <tcp_receive+0x364>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801080c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010810:	e048      	b.n	80108a4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010818:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801081a:	4413      	add	r3, r2
 801081c:	b29a      	uxth	r2, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010824:	429a      	cmp	r2, r3
 8010826:	d309      	bcc.n	801083c <tcp_receive+0x2fc>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801082e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010830:	4413      	add	r3, r2
 8010832:	b29a      	uxth	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801083a:	e004      	b.n	8010846 <tcp_receive+0x306>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010852:	429a      	cmp	r2, r3
 8010854:	d326      	bcc.n	80108a4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010862:	1ad3      	subs	r3, r2, r3
 8010864:	b29a      	uxth	r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010876:	4413      	add	r3, r2
 8010878:	b29a      	uxth	r2, r3
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010880:	429a      	cmp	r2, r3
 8010882:	d30a      	bcc.n	801089a <tcp_receive+0x35a>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801088e:	4413      	add	r3, r2
 8010890:	b29a      	uxth	r2, r3
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010898:	e004      	b.n	80108a4 <tcp_receive+0x364>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108ac:	4a98      	ldr	r2, [pc, #608]	; (8010b10 <tcp_receive+0x5d0>)
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7ff fdca 	bl	8010448 <tcp_free_acked_segments>
 80108b4:	4602      	mov	r2, r0
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108c2:	4a94      	ldr	r2, [pc, #592]	; (8010b14 <tcp_receive+0x5d4>)
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f7ff fdbf 	bl	8010448 <tcp_free_acked_segments>
 80108ca:	4602      	mov	r2, r0
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d104      	bne.n	80108e2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80108de:	861a      	strh	r2, [r3, #48]	; 0x30
 80108e0:	e002      	b.n	80108e8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	2200      	movs	r2, #0
 80108e6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2200      	movs	r2, #0
 80108ec:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d103      	bne.n	80108fe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010904:	4b84      	ldr	r3, [pc, #528]	; (8010b18 <tcp_receive+0x5d8>)
 8010906:	881b      	ldrh	r3, [r3, #0]
 8010908:	4413      	add	r3, r2
 801090a:	b29a      	uxth	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	8b5b      	ldrh	r3, [r3, #26]
 8010916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801091a:	2b00      	cmp	r3, #0
 801091c:	d035      	beq.n	801098a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010922:	2b00      	cmp	r3, #0
 8010924:	d118      	bne.n	8010958 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00c      	beq.n	8010948 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	4618      	mov	r0, r3
 801093c:	f7fa fc87 	bl	800b24e <lwip_htonl>
 8010940:	4603      	mov	r3, r0
 8010942:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010944:	2b00      	cmp	r3, #0
 8010946:	dc20      	bgt.n	801098a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	8b5b      	ldrh	r3, [r3, #26]
 801094c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010950:	b29a      	uxth	r2, r3
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010956:	e018      	b.n	801098a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	4618      	mov	r0, r3
 8010966:	f7fa fc72 	bl	800b24e <lwip_htonl>
 801096a:	4603      	mov	r3, r0
 801096c:	1ae3      	subs	r3, r4, r3
 801096e:	2b00      	cmp	r3, #0
 8010970:	dc0b      	bgt.n	801098a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	8b5b      	ldrh	r3, [r3, #26]
 8010976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801097a:	b29a      	uxth	r2, r3
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010980:	e003      	b.n	801098a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f001 ff76 	bl	8012874 <tcp_send_empty_ack>
 8010988:	e000      	b.n	801098c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801098a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010990:	2b00      	cmp	r3, #0
 8010992:	d05b      	beq.n	8010a4c <tcp_receive+0x50c>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010998:	4b60      	ldr	r3, [pc, #384]	; (8010b1c <tcp_receive+0x5dc>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	1ad3      	subs	r3, r2, r3
 801099e:	2b00      	cmp	r3, #0
 80109a0:	da54      	bge.n	8010a4c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80109a2:	4b5f      	ldr	r3, [pc, #380]	; (8010b20 <tcp_receive+0x5e0>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109ac:	b29b      	uxth	r3, r3
 80109ae:	1ad3      	subs	r3, r2, r3
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80109b6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80109c0:	10db      	asrs	r3, r3, #3
 80109c2:	b21b      	sxth	r3, r3
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	1ad3      	subs	r3, r2, r3
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80109d4:	b29a      	uxth	r2, r3
 80109d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80109da:	4413      	add	r3, r2
 80109dc:	b29b      	uxth	r3, r3
 80109de:	b21a      	sxth	r2, r3
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80109e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	da05      	bge.n	80109f8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80109ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80109f0:	425b      	negs	r3, r3
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80109f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a02:	109b      	asrs	r3, r3, #2
 8010a04:	b21b      	sxth	r3, r3
 8010a06:	b29b      	uxth	r3, r3
 8010a08:	1ad3      	subs	r3, r2, r3
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a16:	b29a      	uxth	r2, r3
 8010a18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010a1c:	4413      	add	r3, r2
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	b21a      	sxth	r2, r3
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a2c:	10db      	asrs	r3, r3, #3
 8010a2e:	b21b      	sxth	r3, r3
 8010a30:	b29a      	uxth	r2, r3
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	4413      	add	r3, r2
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	b21a      	sxth	r2, r3
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010a4c:	4b35      	ldr	r3, [pc, #212]	; (8010b24 <tcp_receive+0x5e4>)
 8010a4e:	881b      	ldrh	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	f000 84e2 	beq.w	801141a <tcp_receive+0xeda>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	7d1b      	ldrb	r3, [r3, #20]
 8010a5a:	2b06      	cmp	r3, #6
 8010a5c:	f200 84dd 	bhi.w	801141a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a64:	4b30      	ldr	r3, [pc, #192]	; (8010b28 <tcp_receive+0x5e8>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f2c0 808f 	blt.w	8010b90 <tcp_receive+0x650>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a76:	4b2b      	ldr	r3, [pc, #172]	; (8010b24 <tcp_receive+0x5e4>)
 8010a78:	881b      	ldrh	r3, [r3, #0]
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	4b2a      	ldr	r3, [pc, #168]	; (8010b28 <tcp_receive+0x5e8>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	440b      	add	r3, r1
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	3301      	adds	r3, #1
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	f300 8082 	bgt.w	8010b90 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010a8c:	4b27      	ldr	r3, [pc, #156]	; (8010b2c <tcp_receive+0x5ec>)
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a96:	4b24      	ldr	r3, [pc, #144]	; (8010b28 <tcp_receive+0x5e8>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	1ad3      	subs	r3, r2, r3
 8010a9c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010a9e:	4b23      	ldr	r3, [pc, #140]	; (8010b2c <tcp_receive+0x5ec>)
 8010aa0:	685b      	ldr	r3, [r3, #4]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d106      	bne.n	8010ab4 <tcp_receive+0x574>
 8010aa6:	4b22      	ldr	r3, [pc, #136]	; (8010b30 <tcp_receive+0x5f0>)
 8010aa8:	f240 5294 	movw	r2, #1428	; 0x594
 8010aac:	4921      	ldr	r1, [pc, #132]	; (8010b34 <tcp_receive+0x5f4>)
 8010aae:	4822      	ldr	r0, [pc, #136]	; (8010b38 <tcp_receive+0x5f8>)
 8010ab0:	f011 f90c 	bl	8021ccc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010aba:	4293      	cmp	r3, r2
 8010abc:	d906      	bls.n	8010acc <tcp_receive+0x58c>
 8010abe:	4b1c      	ldr	r3, [pc, #112]	; (8010b30 <tcp_receive+0x5f0>)
 8010ac0:	f240 5295 	movw	r2, #1429	; 0x595
 8010ac4:	491d      	ldr	r1, [pc, #116]	; (8010b3c <tcp_receive+0x5fc>)
 8010ac6:	481c      	ldr	r0, [pc, #112]	; (8010b38 <tcp_receive+0x5f8>)
 8010ac8:	f011 f900 	bl	8021ccc <iprintf>
      off = (u16_t)off32;
 8010acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ace:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010ad2:	4b16      	ldr	r3, [pc, #88]	; (8010b2c <tcp_receive+0x5ec>)
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	891b      	ldrh	r3, [r3, #8]
 8010ad8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d906      	bls.n	8010aee <tcp_receive+0x5ae>
 8010ae0:	4b13      	ldr	r3, [pc, #76]	; (8010b30 <tcp_receive+0x5f0>)
 8010ae2:	f240 5297 	movw	r2, #1431	; 0x597
 8010ae6:	4916      	ldr	r1, [pc, #88]	; (8010b40 <tcp_receive+0x600>)
 8010ae8:	4813      	ldr	r0, [pc, #76]	; (8010b38 <tcp_receive+0x5f8>)
 8010aea:	f011 f8ef 	bl	8021ccc <iprintf>
      inseg.len -= off;
 8010aee:	4b0f      	ldr	r3, [pc, #60]	; (8010b2c <tcp_receive+0x5ec>)
 8010af0:	891a      	ldrh	r2, [r3, #8]
 8010af2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010af6:	1ad3      	subs	r3, r2, r3
 8010af8:	b29a      	uxth	r2, r3
 8010afa:	4b0c      	ldr	r3, [pc, #48]	; (8010b2c <tcp_receive+0x5ec>)
 8010afc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010afe:	4b0b      	ldr	r3, [pc, #44]	; (8010b2c <tcp_receive+0x5ec>)
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	891a      	ldrh	r2, [r3, #8]
 8010b04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b08:	1ad3      	subs	r3, r2, r3
 8010b0a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010b0c:	e02a      	b.n	8010b64 <tcp_receive+0x624>
 8010b0e:	bf00      	nop
 8010b10:	08024970 	.word	0x08024970
 8010b14:	08024978 	.word	0x08024978
 8010b18:	20040b80 	.word	0x20040b80
 8010b1c:	20040b7c 	.word	0x20040b7c
 8010b20:	20040b40 	.word	0x20040b40
 8010b24:	20040b82 	.word	0x20040b82
 8010b28:	20040b78 	.word	0x20040b78
 8010b2c:	20040b58 	.word	0x20040b58
 8010b30:	08024608 	.word	0x08024608
 8010b34:	08024980 	.word	0x08024980
 8010b38:	08024654 	.word	0x08024654
 8010b3c:	08024990 	.word	0x08024990
 8010b40:	080249a0 	.word	0x080249a0
        off -= p->len;
 8010b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b46:	895b      	ldrh	r3, [r3, #10]
 8010b48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b4c:	1ad3      	subs	r3, r2, r3
 8010b4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b54:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010b56:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b66:	895b      	ldrh	r3, [r3, #10]
 8010b68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d8e9      	bhi.n	8010b44 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010b70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b74:	4619      	mov	r1, r3
 8010b76:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010b78:	f7fc f9e4 	bl	800cf44 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b80:	4a91      	ldr	r2, [pc, #580]	; (8010dc8 <tcp_receive+0x888>)
 8010b82:	6013      	str	r3, [r2, #0]
 8010b84:	4b91      	ldr	r3, [pc, #580]	; (8010dcc <tcp_receive+0x88c>)
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	4a8f      	ldr	r2, [pc, #572]	; (8010dc8 <tcp_receive+0x888>)
 8010b8a:	6812      	ldr	r2, [r2, #0]
 8010b8c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010b8e:	e00d      	b.n	8010bac <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010b90:	4b8d      	ldr	r3, [pc, #564]	; (8010dc8 <tcp_receive+0x888>)
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b98:	1ad3      	subs	r3, r2, r3
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	da06      	bge.n	8010bac <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	8b5b      	ldrh	r3, [r3, #26]
 8010ba2:	f043 0302 	orr.w	r3, r3, #2
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010bac:	4b86      	ldr	r3, [pc, #536]	; (8010dc8 <tcp_receive+0x888>)
 8010bae:	681a      	ldr	r2, [r3, #0]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	f2c0 842a 	blt.w	8011410 <tcp_receive+0xed0>
 8010bbc:	4b82      	ldr	r3, [pc, #520]	; (8010dc8 <tcp_receive+0x888>)
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bc4:	6879      	ldr	r1, [r7, #4]
 8010bc6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bc8:	440b      	add	r3, r1
 8010bca:	1ad3      	subs	r3, r2, r3
 8010bcc:	3301      	adds	r3, #1
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	f300 841e 	bgt.w	8011410 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bd8:	4b7b      	ldr	r3, [pc, #492]	; (8010dc8 <tcp_receive+0x888>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	f040 829a 	bne.w	8011116 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010be2:	4b7a      	ldr	r3, [pc, #488]	; (8010dcc <tcp_receive+0x88c>)
 8010be4:	891c      	ldrh	r4, [r3, #8]
 8010be6:	4b79      	ldr	r3, [pc, #484]	; (8010dcc <tcp_receive+0x88c>)
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	899b      	ldrh	r3, [r3, #12]
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7fa fb18 	bl	800b224 <lwip_htons>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	b2db      	uxtb	r3, r3
 8010bf8:	f003 0303 	and.w	r3, r3, #3
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d001      	beq.n	8010c04 <tcp_receive+0x6c4>
 8010c00:	2301      	movs	r3, #1
 8010c02:	e000      	b.n	8010c06 <tcp_receive+0x6c6>
 8010c04:	2300      	movs	r3, #0
 8010c06:	4423      	add	r3, r4
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	4b71      	ldr	r3, [pc, #452]	; (8010dd0 <tcp_receive+0x890>)
 8010c0c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010c12:	4b6f      	ldr	r3, [pc, #444]	; (8010dd0 <tcp_receive+0x890>)
 8010c14:	881b      	ldrh	r3, [r3, #0]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d275      	bcs.n	8010d06 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c1a:	4b6c      	ldr	r3, [pc, #432]	; (8010dcc <tcp_receive+0x88c>)
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	899b      	ldrh	r3, [r3, #12]
 8010c20:	b29b      	uxth	r3, r3
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7fa fafe 	bl	800b224 <lwip_htons>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	f003 0301 	and.w	r3, r3, #1
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d01f      	beq.n	8010c74 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010c34:	4b65      	ldr	r3, [pc, #404]	; (8010dcc <tcp_receive+0x88c>)
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	899b      	ldrh	r3, [r3, #12]
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	b21b      	sxth	r3, r3
 8010c3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010c42:	b21c      	sxth	r4, r3
 8010c44:	4b61      	ldr	r3, [pc, #388]	; (8010dcc <tcp_receive+0x88c>)
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	899b      	ldrh	r3, [r3, #12]
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fa fae9 	bl	800b224 <lwip_htons>
 8010c52:	4603      	mov	r3, r0
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010c5c:	b29b      	uxth	r3, r3
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fa fae0 	bl	800b224 <lwip_htons>
 8010c64:	4603      	mov	r3, r0
 8010c66:	b21b      	sxth	r3, r3
 8010c68:	4323      	orrs	r3, r4
 8010c6a:	b21a      	sxth	r2, r3
 8010c6c:	4b57      	ldr	r3, [pc, #348]	; (8010dcc <tcp_receive+0x88c>)
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	b292      	uxth	r2, r2
 8010c72:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010c78:	4b54      	ldr	r3, [pc, #336]	; (8010dcc <tcp_receive+0x88c>)
 8010c7a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010c7c:	4b53      	ldr	r3, [pc, #332]	; (8010dcc <tcp_receive+0x88c>)
 8010c7e:	68db      	ldr	r3, [r3, #12]
 8010c80:	899b      	ldrh	r3, [r3, #12]
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7fa facd 	bl	800b224 <lwip_htons>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	f003 0302 	and.w	r3, r3, #2
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d005      	beq.n	8010ca2 <tcp_receive+0x762>
            inseg.len -= 1;
 8010c96:	4b4d      	ldr	r3, [pc, #308]	; (8010dcc <tcp_receive+0x88c>)
 8010c98:	891b      	ldrh	r3, [r3, #8]
 8010c9a:	3b01      	subs	r3, #1
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	4b4b      	ldr	r3, [pc, #300]	; (8010dcc <tcp_receive+0x88c>)
 8010ca0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010ca2:	4b4a      	ldr	r3, [pc, #296]	; (8010dcc <tcp_receive+0x88c>)
 8010ca4:	685b      	ldr	r3, [r3, #4]
 8010ca6:	4a49      	ldr	r2, [pc, #292]	; (8010dcc <tcp_receive+0x88c>)
 8010ca8:	8912      	ldrh	r2, [r2, #8]
 8010caa:	4611      	mov	r1, r2
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7fc f849 	bl	800cd44 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010cb2:	4b46      	ldr	r3, [pc, #280]	; (8010dcc <tcp_receive+0x88c>)
 8010cb4:	891c      	ldrh	r4, [r3, #8]
 8010cb6:	4b45      	ldr	r3, [pc, #276]	; (8010dcc <tcp_receive+0x88c>)
 8010cb8:	68db      	ldr	r3, [r3, #12]
 8010cba:	899b      	ldrh	r3, [r3, #12]
 8010cbc:	b29b      	uxth	r3, r3
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7fa fab0 	bl	800b224 <lwip_htons>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	f003 0303 	and.w	r3, r3, #3
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d001      	beq.n	8010cd4 <tcp_receive+0x794>
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	e000      	b.n	8010cd6 <tcp_receive+0x796>
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	4423      	add	r3, r4
 8010cd8:	b29a      	uxth	r2, r3
 8010cda:	4b3d      	ldr	r3, [pc, #244]	; (8010dd0 <tcp_receive+0x890>)
 8010cdc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010cde:	4b3c      	ldr	r3, [pc, #240]	; (8010dd0 <tcp_receive+0x890>)
 8010ce0:	881b      	ldrh	r3, [r3, #0]
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	4b38      	ldr	r3, [pc, #224]	; (8010dc8 <tcp_receive+0x888>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	441a      	add	r2, r3
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cee:	6879      	ldr	r1, [r7, #4]
 8010cf0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010cf2:	440b      	add	r3, r1
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d006      	beq.n	8010d06 <tcp_receive+0x7c6>
 8010cf8:	4b36      	ldr	r3, [pc, #216]	; (8010dd4 <tcp_receive+0x894>)
 8010cfa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010cfe:	4936      	ldr	r1, [pc, #216]	; (8010dd8 <tcp_receive+0x898>)
 8010d00:	4836      	ldr	r0, [pc, #216]	; (8010ddc <tcp_receive+0x89c>)
 8010d02:	f010 ffe3 	bl	8021ccc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	f000 80e7 	beq.w	8010ede <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010d10:	4b2e      	ldr	r3, [pc, #184]	; (8010dcc <tcp_receive+0x88c>)
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	899b      	ldrh	r3, [r3, #12]
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fa fa83 	bl	800b224 <lwip_htons>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	b2db      	uxtb	r3, r3
 8010d22:	f003 0301 	and.w	r3, r3, #1
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d010      	beq.n	8010d4c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010d2a:	e00a      	b.n	8010d42 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d30:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d36:	681a      	ldr	r2, [r3, #0]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010d3c:	68f8      	ldr	r0, [r7, #12]
 8010d3e:	f7fd fd92 	bl	800e866 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d1f0      	bne.n	8010d2c <tcp_receive+0x7ec>
 8010d4a:	e0c8      	b.n	8010ede <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d50:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010d52:	e052      	b.n	8010dfa <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d56:	68db      	ldr	r3, [r3, #12]
 8010d58:	899b      	ldrh	r3, [r3, #12]
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7fa fa61 	bl	800b224 <lwip_htons>
 8010d62:	4603      	mov	r3, r0
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	f003 0301 	and.w	r3, r3, #1
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d03d      	beq.n	8010dea <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010d6e:	4b17      	ldr	r3, [pc, #92]	; (8010dcc <tcp_receive+0x88c>)
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	899b      	ldrh	r3, [r3, #12]
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	4618      	mov	r0, r3
 8010d78:	f7fa fa54 	bl	800b224 <lwip_htons>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d130      	bne.n	8010dea <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010d88:	4b10      	ldr	r3, [pc, #64]	; (8010dcc <tcp_receive+0x88c>)
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	899b      	ldrh	r3, [r3, #12]
 8010d8e:	b29c      	uxth	r4, r3
 8010d90:	2001      	movs	r0, #1
 8010d92:	f7fa fa47 	bl	800b224 <lwip_htons>
 8010d96:	4603      	mov	r3, r0
 8010d98:	461a      	mov	r2, r3
 8010d9a:	4b0c      	ldr	r3, [pc, #48]	; (8010dcc <tcp_receive+0x88c>)
 8010d9c:	68db      	ldr	r3, [r3, #12]
 8010d9e:	4322      	orrs	r2, r4
 8010da0:	b292      	uxth	r2, r2
 8010da2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010da4:	4b09      	ldr	r3, [pc, #36]	; (8010dcc <tcp_receive+0x88c>)
 8010da6:	891c      	ldrh	r4, [r3, #8]
 8010da8:	4b08      	ldr	r3, [pc, #32]	; (8010dcc <tcp_receive+0x88c>)
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	899b      	ldrh	r3, [r3, #12]
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7fa fa37 	bl	800b224 <lwip_htons>
 8010db6:	4603      	mov	r3, r0
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	f003 0303 	and.w	r3, r3, #3
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d00e      	beq.n	8010de0 <tcp_receive+0x8a0>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e00d      	b.n	8010de2 <tcp_receive+0x8a2>
 8010dc6:	bf00      	nop
 8010dc8:	20040b78 	.word	0x20040b78
 8010dcc:	20040b58 	.word	0x20040b58
 8010dd0:	20040b82 	.word	0x20040b82
 8010dd4:	08024608 	.word	0x08024608
 8010dd8:	080249b0 	.word	0x080249b0
 8010ddc:	08024654 	.word	0x08024654
 8010de0:	2300      	movs	r3, #0
 8010de2:	4423      	add	r3, r4
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	4b98      	ldr	r3, [pc, #608]	; (8011048 <tcp_receive+0xb08>)
 8010de8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dec:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010df4:	6938      	ldr	r0, [r7, #16]
 8010df6:	f7fd fd36 	bl	800e866 <tcp_seg_free>
            while (next &&
 8010dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d00e      	beq.n	8010e1e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010e00:	4b91      	ldr	r3, [pc, #580]	; (8011048 <tcp_receive+0xb08>)
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	461a      	mov	r2, r3
 8010e06:	4b91      	ldr	r3, [pc, #580]	; (801104c <tcp_receive+0xb0c>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	441a      	add	r2, r3
 8010e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	685b      	ldr	r3, [r3, #4]
 8010e12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010e14:	8909      	ldrh	r1, [r1, #8]
 8010e16:	440b      	add	r3, r1
 8010e18:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	da9a      	bge.n	8010d54 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d059      	beq.n	8010ed8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010e24:	4b88      	ldr	r3, [pc, #544]	; (8011048 <tcp_receive+0xb08>)
 8010e26:	881b      	ldrh	r3, [r3, #0]
 8010e28:	461a      	mov	r2, r3
 8010e2a:	4b88      	ldr	r3, [pc, #544]	; (801104c <tcp_receive+0xb0c>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	441a      	add	r2, r3
 8010e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e32:	68db      	ldr	r3, [r3, #12]
 8010e34:	685b      	ldr	r3, [r3, #4]
 8010e36:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	dd4d      	ble.n	8010ed8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	b29a      	uxth	r2, r3
 8010e44:	4b81      	ldr	r3, [pc, #516]	; (801104c <tcp_receive+0xb0c>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	b29b      	uxth	r3, r3
 8010e4a:	1ad3      	subs	r3, r2, r3
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	4b80      	ldr	r3, [pc, #512]	; (8011050 <tcp_receive+0xb10>)
 8010e50:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010e52:	4b7f      	ldr	r3, [pc, #508]	; (8011050 <tcp_receive+0xb10>)
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	899b      	ldrh	r3, [r3, #12]
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fa f9e2 	bl	800b224 <lwip_htons>
 8010e60:	4603      	mov	r3, r0
 8010e62:	b2db      	uxtb	r3, r3
 8010e64:	f003 0302 	and.w	r3, r3, #2
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d005      	beq.n	8010e78 <tcp_receive+0x938>
                inseg.len -= 1;
 8010e6c:	4b78      	ldr	r3, [pc, #480]	; (8011050 <tcp_receive+0xb10>)
 8010e6e:	891b      	ldrh	r3, [r3, #8]
 8010e70:	3b01      	subs	r3, #1
 8010e72:	b29a      	uxth	r2, r3
 8010e74:	4b76      	ldr	r3, [pc, #472]	; (8011050 <tcp_receive+0xb10>)
 8010e76:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010e78:	4b75      	ldr	r3, [pc, #468]	; (8011050 <tcp_receive+0xb10>)
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	4a74      	ldr	r2, [pc, #464]	; (8011050 <tcp_receive+0xb10>)
 8010e7e:	8912      	ldrh	r2, [r2, #8]
 8010e80:	4611      	mov	r1, r2
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fb ff5e 	bl	800cd44 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010e88:	4b71      	ldr	r3, [pc, #452]	; (8011050 <tcp_receive+0xb10>)
 8010e8a:	891c      	ldrh	r4, [r3, #8]
 8010e8c:	4b70      	ldr	r3, [pc, #448]	; (8011050 <tcp_receive+0xb10>)
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	899b      	ldrh	r3, [r3, #12]
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7fa f9c5 	bl	800b224 <lwip_htons>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	f003 0303 	and.w	r3, r3, #3
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d001      	beq.n	8010eaa <tcp_receive+0x96a>
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	e000      	b.n	8010eac <tcp_receive+0x96c>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	4423      	add	r3, r4
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	4b65      	ldr	r3, [pc, #404]	; (8011048 <tcp_receive+0xb08>)
 8010eb2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010eb4:	4b64      	ldr	r3, [pc, #400]	; (8011048 <tcp_receive+0xb08>)
 8010eb6:	881b      	ldrh	r3, [r3, #0]
 8010eb8:	461a      	mov	r2, r3
 8010eba:	4b64      	ldr	r3, [pc, #400]	; (801104c <tcp_receive+0xb0c>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	441a      	add	r2, r3
 8010ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ec2:	68db      	ldr	r3, [r3, #12]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d006      	beq.n	8010ed8 <tcp_receive+0x998>
 8010eca:	4b62      	ldr	r3, [pc, #392]	; (8011054 <tcp_receive+0xb14>)
 8010ecc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010ed0:	4961      	ldr	r1, [pc, #388]	; (8011058 <tcp_receive+0xb18>)
 8010ed2:	4862      	ldr	r0, [pc, #392]	; (801105c <tcp_receive+0xb1c>)
 8010ed4:	f010 fefa 	bl	8021ccc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010edc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010ede:	4b5a      	ldr	r3, [pc, #360]	; (8011048 <tcp_receive+0xb08>)
 8010ee0:	881b      	ldrh	r3, [r3, #0]
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	4b59      	ldr	r3, [pc, #356]	; (801104c <tcp_receive+0xb0c>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	441a      	add	r2, r3
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ef2:	4b55      	ldr	r3, [pc, #340]	; (8011048 <tcp_receive+0xb08>)
 8010ef4:	881b      	ldrh	r3, [r3, #0]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d206      	bcs.n	8010f08 <tcp_receive+0x9c8>
 8010efa:	4b56      	ldr	r3, [pc, #344]	; (8011054 <tcp_receive+0xb14>)
 8010efc:	f240 6207 	movw	r2, #1543	; 0x607
 8010f00:	4957      	ldr	r1, [pc, #348]	; (8011060 <tcp_receive+0xb20>)
 8010f02:	4856      	ldr	r0, [pc, #344]	; (801105c <tcp_receive+0xb1c>)
 8010f04:	f010 fee2 	bl	8021ccc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f0c:	4b4e      	ldr	r3, [pc, #312]	; (8011048 <tcp_receive+0xb08>)
 8010f0e:	881b      	ldrh	r3, [r3, #0]
 8010f10:	1ad3      	subs	r3, r2, r3
 8010f12:	b29a      	uxth	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f7fc ffc5 	bl	800dea8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010f1e:	4b4c      	ldr	r3, [pc, #304]	; (8011050 <tcp_receive+0xb10>)
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	891b      	ldrh	r3, [r3, #8]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d006      	beq.n	8010f36 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010f28:	4b49      	ldr	r3, [pc, #292]	; (8011050 <tcp_receive+0xb10>)
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	4a4d      	ldr	r2, [pc, #308]	; (8011064 <tcp_receive+0xb24>)
 8010f2e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010f30:	4b47      	ldr	r3, [pc, #284]	; (8011050 <tcp_receive+0xb10>)
 8010f32:	2200      	movs	r2, #0
 8010f34:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f36:	4b46      	ldr	r3, [pc, #280]	; (8011050 <tcp_receive+0xb10>)
 8010f38:	68db      	ldr	r3, [r3, #12]
 8010f3a:	899b      	ldrh	r3, [r3, #12]
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fa f970 	bl	800b224 <lwip_htons>
 8010f44:	4603      	mov	r3, r0
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	f003 0301 	and.w	r3, r3, #1
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	f000 80b8 	beq.w	80110c2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010f52:	4b45      	ldr	r3, [pc, #276]	; (8011068 <tcp_receive+0xb28>)
 8010f54:	781b      	ldrb	r3, [r3, #0]
 8010f56:	f043 0320 	orr.w	r3, r3, #32
 8010f5a:	b2da      	uxtb	r2, r3
 8010f5c:	4b42      	ldr	r3, [pc, #264]	; (8011068 <tcp_receive+0xb28>)
 8010f5e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010f60:	e0af      	b.n	80110c2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f66:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f6c:	68db      	ldr	r3, [r3, #12]
 8010f6e:	685b      	ldr	r3, [r3, #4]
 8010f70:	4a36      	ldr	r2, [pc, #216]	; (801104c <tcp_receive+0xb0c>)
 8010f72:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	891b      	ldrh	r3, [r3, #8]
 8010f78:	461c      	mov	r4, r3
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	68db      	ldr	r3, [r3, #12]
 8010f7e:	899b      	ldrh	r3, [r3, #12]
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fa f94e 	bl	800b224 <lwip_htons>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	f003 0303 	and.w	r3, r3, #3
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d001      	beq.n	8010f98 <tcp_receive+0xa58>
 8010f94:	2301      	movs	r3, #1
 8010f96:	e000      	b.n	8010f9a <tcp_receive+0xa5a>
 8010f98:	2300      	movs	r3, #0
 8010f9a:	191a      	adds	r2, r3, r4
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa0:	441a      	add	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010faa:	461c      	mov	r4, r3
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	891b      	ldrh	r3, [r3, #8]
 8010fb0:	461d      	mov	r5, r3
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	68db      	ldr	r3, [r3, #12]
 8010fb6:	899b      	ldrh	r3, [r3, #12]
 8010fb8:	b29b      	uxth	r3, r3
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fa f932 	bl	800b224 <lwip_htons>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	b2db      	uxtb	r3, r3
 8010fc4:	f003 0303 	and.w	r3, r3, #3
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d001      	beq.n	8010fd0 <tcp_receive+0xa90>
 8010fcc:	2301      	movs	r3, #1
 8010fce:	e000      	b.n	8010fd2 <tcp_receive+0xa92>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	442b      	add	r3, r5
 8010fd4:	429c      	cmp	r4, r3
 8010fd6:	d206      	bcs.n	8010fe6 <tcp_receive+0xaa6>
 8010fd8:	4b1e      	ldr	r3, [pc, #120]	; (8011054 <tcp_receive+0xb14>)
 8010fda:	f240 622b 	movw	r2, #1579	; 0x62b
 8010fde:	4923      	ldr	r1, [pc, #140]	; (801106c <tcp_receive+0xb2c>)
 8010fe0:	481e      	ldr	r0, [pc, #120]	; (801105c <tcp_receive+0xb1c>)
 8010fe2:	f010 fe73 	bl	8021ccc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	891b      	ldrh	r3, [r3, #8]
 8010fea:	461c      	mov	r4, r3
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	68db      	ldr	r3, [r3, #12]
 8010ff0:	899b      	ldrh	r3, [r3, #12]
 8010ff2:	b29b      	uxth	r3, r3
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7fa f915 	bl	800b224 <lwip_htons>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	b2db      	uxtb	r3, r3
 8010ffe:	f003 0303 	and.w	r3, r3, #3
 8011002:	2b00      	cmp	r3, #0
 8011004:	d001      	beq.n	801100a <tcp_receive+0xaca>
 8011006:	2301      	movs	r3, #1
 8011008:	e000      	b.n	801100c <tcp_receive+0xacc>
 801100a:	2300      	movs	r3, #0
 801100c:	1919      	adds	r1, r3, r4
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011012:	b28b      	uxth	r3, r1
 8011014:	1ad3      	subs	r3, r2, r3
 8011016:	b29a      	uxth	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f7fc ff43 	bl	800dea8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	891b      	ldrh	r3, [r3, #8]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d028      	beq.n	801107e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801102c:	4b0d      	ldr	r3, [pc, #52]	; (8011064 <tcp_receive+0xb24>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d01d      	beq.n	8011070 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011034:	4b0b      	ldr	r3, [pc, #44]	; (8011064 <tcp_receive+0xb24>)
 8011036:	681a      	ldr	r2, [r3, #0]
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	4619      	mov	r1, r3
 801103e:	4610      	mov	r0, r2
 8011040:	f7fc f8d4 	bl	800d1ec <pbuf_cat>
 8011044:	e018      	b.n	8011078 <tcp_receive+0xb38>
 8011046:	bf00      	nop
 8011048:	20040b82 	.word	0x20040b82
 801104c:	20040b78 	.word	0x20040b78
 8011050:	20040b58 	.word	0x20040b58
 8011054:	08024608 	.word	0x08024608
 8011058:	080249e8 	.word	0x080249e8
 801105c:	08024654 	.word	0x08024654
 8011060:	08024a24 	.word	0x08024a24
 8011064:	20040b88 	.word	0x20040b88
 8011068:	20040b85 	.word	0x20040b85
 801106c:	08024a44 	.word	0x08024a44
            } else {
              recv_data = cseg->p;
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	685b      	ldr	r3, [r3, #4]
 8011074:	4a70      	ldr	r2, [pc, #448]	; (8011238 <tcp_receive+0xcf8>)
 8011076:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	2200      	movs	r2, #0
 801107c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	899b      	ldrh	r3, [r3, #12]
 8011084:	b29b      	uxth	r3, r3
 8011086:	4618      	mov	r0, r3
 8011088:	f7fa f8cc 	bl	800b224 <lwip_htons>
 801108c:	4603      	mov	r3, r0
 801108e:	b2db      	uxtb	r3, r3
 8011090:	f003 0301 	and.w	r3, r3, #1
 8011094:	2b00      	cmp	r3, #0
 8011096:	d00d      	beq.n	80110b4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011098:	4b68      	ldr	r3, [pc, #416]	; (801123c <tcp_receive+0xcfc>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	f043 0320 	orr.w	r3, r3, #32
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	4b66      	ldr	r3, [pc, #408]	; (801123c <tcp_receive+0xcfc>)
 80110a4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	7d1b      	ldrb	r3, [r3, #20]
 80110aa:	2b04      	cmp	r3, #4
 80110ac:	d102      	bne.n	80110b4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2207      	movs	r2, #7
 80110b2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80110bc:	68b8      	ldr	r0, [r7, #8]
 80110be:	f7fd fbd2 	bl	800e866 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d008      	beq.n	80110dc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	685a      	ldr	r2, [r3, #4]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80110d6:	429a      	cmp	r2, r3
 80110d8:	f43f af43 	beq.w	8010f62 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	8b5b      	ldrh	r3, [r3, #26]
 80110e0:	f003 0301 	and.w	r3, r3, #1
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d00e      	beq.n	8011106 <tcp_receive+0xbc6>
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	8b5b      	ldrh	r3, [r3, #26]
 80110ec:	f023 0301 	bic.w	r3, r3, #1
 80110f0:	b29a      	uxth	r2, r3
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	835a      	strh	r2, [r3, #26]
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	8b5b      	ldrh	r3, [r3, #26]
 80110fa:	f043 0302 	orr.w	r3, r3, #2
 80110fe:	b29a      	uxth	r2, r3
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011104:	e188      	b.n	8011418 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	8b5b      	ldrh	r3, [r3, #26]
 801110a:	f043 0301 	orr.w	r3, r3, #1
 801110e:	b29a      	uxth	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011114:	e180      	b.n	8011418 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801111a:	2b00      	cmp	r3, #0
 801111c:	d106      	bne.n	801112c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801111e:	4848      	ldr	r0, [pc, #288]	; (8011240 <tcp_receive+0xd00>)
 8011120:	f7fd fbba 	bl	800e898 <tcp_seg_copy>
 8011124:	4602      	mov	r2, r0
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	675a      	str	r2, [r3, #116]	; 0x74
 801112a:	e16d      	b.n	8011408 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801112c:	2300      	movs	r3, #0
 801112e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011134:	63bb      	str	r3, [r7, #56]	; 0x38
 8011136:	e157      	b.n	80113e8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	685a      	ldr	r2, [r3, #4]
 801113e:	4b41      	ldr	r3, [pc, #260]	; (8011244 <tcp_receive+0xd04>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	429a      	cmp	r2, r3
 8011144:	d11d      	bne.n	8011182 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011146:	4b3e      	ldr	r3, [pc, #248]	; (8011240 <tcp_receive+0xd00>)
 8011148:	891a      	ldrh	r2, [r3, #8]
 801114a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114c:	891b      	ldrh	r3, [r3, #8]
 801114e:	429a      	cmp	r2, r3
 8011150:	f240 814f 	bls.w	80113f2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011154:	483a      	ldr	r0, [pc, #232]	; (8011240 <tcp_receive+0xd00>)
 8011156:	f7fd fb9f 	bl	800e898 <tcp_seg_copy>
 801115a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	2b00      	cmp	r3, #0
 8011160:	f000 8149 	beq.w	80113f6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011166:	2b00      	cmp	r3, #0
 8011168:	d003      	beq.n	8011172 <tcp_receive+0xc32>
                    prev->next = cseg;
 801116a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801116c:	697a      	ldr	r2, [r7, #20]
 801116e:	601a      	str	r2, [r3, #0]
 8011170:	e002      	b.n	8011178 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	697a      	ldr	r2, [r7, #20]
 8011176:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011178:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801117a:	6978      	ldr	r0, [r7, #20]
 801117c:	f7ff f8dc 	bl	8010338 <tcp_oos_insert_segment>
                }
                break;
 8011180:	e139      	b.n	80113f6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011184:	2b00      	cmp	r3, #0
 8011186:	d117      	bne.n	80111b8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011188:	4b2e      	ldr	r3, [pc, #184]	; (8011244 <tcp_receive+0xd04>)
 801118a:	681a      	ldr	r2, [r3, #0]
 801118c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	1ad3      	subs	r3, r2, r3
 8011194:	2b00      	cmp	r3, #0
 8011196:	da57      	bge.n	8011248 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011198:	4829      	ldr	r0, [pc, #164]	; (8011240 <tcp_receive+0xd00>)
 801119a:	f7fd fb7d 	bl	800e898 <tcp_seg_copy>
 801119e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80111a0:	69bb      	ldr	r3, [r7, #24]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	f000 8129 	beq.w	80113fa <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	69ba      	ldr	r2, [r7, #24]
 80111ac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80111ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80111b0:	69b8      	ldr	r0, [r7, #24]
 80111b2:	f7ff f8c1 	bl	8010338 <tcp_oos_insert_segment>
                  }
                  break;
 80111b6:	e120      	b.n	80113fa <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80111b8:	4b22      	ldr	r3, [pc, #136]	; (8011244 <tcp_receive+0xd04>)
 80111ba:	681a      	ldr	r2, [r3, #0]
 80111bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111be:	68db      	ldr	r3, [r3, #12]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	1ad3      	subs	r3, r2, r3
 80111c4:	3b01      	subs	r3, #1
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	db3e      	blt.n	8011248 <tcp_receive+0xd08>
 80111ca:	4b1e      	ldr	r3, [pc, #120]	; (8011244 <tcp_receive+0xd04>)
 80111cc:	681a      	ldr	r2, [r3, #0]
 80111ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d0:	68db      	ldr	r3, [r3, #12]
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	3301      	adds	r3, #1
 80111d8:	2b00      	cmp	r3, #0
 80111da:	dc35      	bgt.n	8011248 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80111dc:	4818      	ldr	r0, [pc, #96]	; (8011240 <tcp_receive+0xd00>)
 80111de:	f7fd fb5b 	bl	800e898 <tcp_seg_copy>
 80111e2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f000 8109 	beq.w	80113fe <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80111ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111ee:	68db      	ldr	r3, [r3, #12]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111f4:	8912      	ldrh	r2, [r2, #8]
 80111f6:	441a      	add	r2, r3
 80111f8:	4b12      	ldr	r3, [pc, #72]	; (8011244 <tcp_receive+0xd04>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	2b00      	cmp	r3, #0
 8011200:	dd12      	ble.n	8011228 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011202:	4b10      	ldr	r3, [pc, #64]	; (8011244 <tcp_receive+0xd04>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	b29a      	uxth	r2, r3
 8011208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	b29b      	uxth	r3, r3
 8011210:	1ad3      	subs	r3, r2, r3
 8011212:	b29a      	uxth	r2, r3
 8011214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011216:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121a:	685a      	ldr	r2, [r3, #4]
 801121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801121e:	891b      	ldrh	r3, [r3, #8]
 8011220:	4619      	mov	r1, r3
 8011222:	4610      	mov	r0, r2
 8011224:	f7fb fd8e 	bl	800cd44 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801122a:	69fa      	ldr	r2, [r7, #28]
 801122c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801122e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011230:	69f8      	ldr	r0, [r7, #28]
 8011232:	f7ff f881 	bl	8010338 <tcp_oos_insert_segment>
                  }
                  break;
 8011236:	e0e2      	b.n	80113fe <tcp_receive+0xebe>
 8011238:	20040b88 	.word	0x20040b88
 801123c:	20040b85 	.word	0x20040b85
 8011240:	20040b58 	.word	0x20040b58
 8011244:	20040b78 	.word	0x20040b78
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801124c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	f040 80c6 	bne.w	80113e2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011256:	4b80      	ldr	r3, [pc, #512]	; (8011458 <tcp_receive+0xf18>)
 8011258:	681a      	ldr	r2, [r3, #0]
 801125a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011262:	2b00      	cmp	r3, #0
 8011264:	f340 80bd 	ble.w	80113e2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	899b      	ldrh	r3, [r3, #12]
 801126e:	b29b      	uxth	r3, r3
 8011270:	4618      	mov	r0, r3
 8011272:	f7f9 ffd7 	bl	800b224 <lwip_htons>
 8011276:	4603      	mov	r3, r0
 8011278:	b2db      	uxtb	r3, r3
 801127a:	f003 0301 	and.w	r3, r3, #1
 801127e:	2b00      	cmp	r3, #0
 8011280:	f040 80bf 	bne.w	8011402 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011284:	4875      	ldr	r0, [pc, #468]	; (801145c <tcp_receive+0xf1c>)
 8011286:	f7fd fb07 	bl	800e898 <tcp_seg_copy>
 801128a:	4602      	mov	r2, r0
 801128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801128e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	f000 80b6 	beq.w	8011406 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801129a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129c:	68db      	ldr	r3, [r3, #12]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112a2:	8912      	ldrh	r2, [r2, #8]
 80112a4:	441a      	add	r2, r3
 80112a6:	4b6c      	ldr	r3, [pc, #432]	; (8011458 <tcp_receive+0xf18>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	dd12      	ble.n	80112d6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80112b0:	4b69      	ldr	r3, [pc, #420]	; (8011458 <tcp_receive+0xf18>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	b29a      	uxth	r2, r3
 80112b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	b29b      	uxth	r3, r3
 80112be:	1ad3      	subs	r3, r2, r3
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80112c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c8:	685a      	ldr	r2, [r3, #4]
 80112ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112cc:	891b      	ldrh	r3, [r3, #8]
 80112ce:	4619      	mov	r1, r3
 80112d0:	4610      	mov	r0, r2
 80112d2:	f7fb fd37 	bl	800cd44 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80112d6:	4b62      	ldr	r3, [pc, #392]	; (8011460 <tcp_receive+0xf20>)
 80112d8:	881b      	ldrh	r3, [r3, #0]
 80112da:	461a      	mov	r2, r3
 80112dc:	4b5e      	ldr	r3, [pc, #376]	; (8011458 <tcp_receive+0xf18>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	441a      	add	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e6:	6879      	ldr	r1, [r7, #4]
 80112e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112ea:	440b      	add	r3, r1
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	f340 8089 	ble.w	8011406 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80112f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	899b      	ldrh	r3, [r3, #12]
 80112fc:	b29b      	uxth	r3, r3
 80112fe:	4618      	mov	r0, r3
 8011300:	f7f9 ff90 	bl	800b224 <lwip_htons>
 8011304:	4603      	mov	r3, r0
 8011306:	b2db      	uxtb	r3, r3
 8011308:	f003 0301 	and.w	r3, r3, #1
 801130c:	2b00      	cmp	r3, #0
 801130e:	d022      	beq.n	8011356 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	899b      	ldrh	r3, [r3, #12]
 8011318:	b29b      	uxth	r3, r3
 801131a:	b21b      	sxth	r3, r3
 801131c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011320:	b21c      	sxth	r4, r3
 8011322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	899b      	ldrh	r3, [r3, #12]
 801132a:	b29b      	uxth	r3, r3
 801132c:	4618      	mov	r0, r3
 801132e:	f7f9 ff79 	bl	800b224 <lwip_htons>
 8011332:	4603      	mov	r3, r0
 8011334:	b2db      	uxtb	r3, r3
 8011336:	b29b      	uxth	r3, r3
 8011338:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801133c:	b29b      	uxth	r3, r3
 801133e:	4618      	mov	r0, r3
 8011340:	f7f9 ff70 	bl	800b224 <lwip_htons>
 8011344:	4603      	mov	r3, r0
 8011346:	b21b      	sxth	r3, r3
 8011348:	4323      	orrs	r3, r4
 801134a:	b21a      	sxth	r2, r3
 801134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	68db      	ldr	r3, [r3, #12]
 8011352:	b292      	uxth	r2, r2
 8011354:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801135a:	b29a      	uxth	r2, r3
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011360:	4413      	add	r3, r2
 8011362:	b299      	uxth	r1, r3
 8011364:	4b3c      	ldr	r3, [pc, #240]	; (8011458 <tcp_receive+0xf18>)
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	b29a      	uxth	r2, r3
 801136a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	1a8a      	subs	r2, r1, r2
 8011370:	b292      	uxth	r2, r2
 8011372:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	685a      	ldr	r2, [r3, #4]
 801137a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	891b      	ldrh	r3, [r3, #8]
 8011380:	4619      	mov	r1, r3
 8011382:	4610      	mov	r0, r2
 8011384:	f7fb fcde 	bl	800cd44 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	891c      	ldrh	r4, [r3, #8]
 801138e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	899b      	ldrh	r3, [r3, #12]
 8011396:	b29b      	uxth	r3, r3
 8011398:	4618      	mov	r0, r3
 801139a:	f7f9 ff43 	bl	800b224 <lwip_htons>
 801139e:	4603      	mov	r3, r0
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	f003 0303 	and.w	r3, r3, #3
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d001      	beq.n	80113ae <tcp_receive+0xe6e>
 80113aa:	2301      	movs	r3, #1
 80113ac:	e000      	b.n	80113b0 <tcp_receive+0xe70>
 80113ae:	2300      	movs	r3, #0
 80113b0:	4423      	add	r3, r4
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	4b2a      	ldr	r3, [pc, #168]	; (8011460 <tcp_receive+0xf20>)
 80113b6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80113b8:	4b29      	ldr	r3, [pc, #164]	; (8011460 <tcp_receive+0xf20>)
 80113ba:	881b      	ldrh	r3, [r3, #0]
 80113bc:	461a      	mov	r2, r3
 80113be:	4b26      	ldr	r3, [pc, #152]	; (8011458 <tcp_receive+0xf18>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	441a      	add	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c8:	6879      	ldr	r1, [r7, #4]
 80113ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80113cc:	440b      	add	r3, r1
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d019      	beq.n	8011406 <tcp_receive+0xec6>
 80113d2:	4b24      	ldr	r3, [pc, #144]	; (8011464 <tcp_receive+0xf24>)
 80113d4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80113d8:	4923      	ldr	r1, [pc, #140]	; (8011468 <tcp_receive+0xf28>)
 80113da:	4824      	ldr	r0, [pc, #144]	; (801146c <tcp_receive+0xf2c>)
 80113dc:	f010 fc76 	bl	8021ccc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80113e0:	e011      	b.n	8011406 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80113e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80113e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	f47f aea4 	bne.w	8011138 <tcp_receive+0xbf8>
 80113f0:	e00a      	b.n	8011408 <tcp_receive+0xec8>
                break;
 80113f2:	bf00      	nop
 80113f4:	e008      	b.n	8011408 <tcp_receive+0xec8>
                break;
 80113f6:	bf00      	nop
 80113f8:	e006      	b.n	8011408 <tcp_receive+0xec8>
                  break;
 80113fa:	bf00      	nop
 80113fc:	e004      	b.n	8011408 <tcp_receive+0xec8>
                  break;
 80113fe:	bf00      	nop
 8011400:	e002      	b.n	8011408 <tcp_receive+0xec8>
                  break;
 8011402:	bf00      	nop
 8011404:	e000      	b.n	8011408 <tcp_receive+0xec8>
                break;
 8011406:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f001 fa33 	bl	8012874 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801140e:	e003      	b.n	8011418 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f001 fa2f 	bl	8012874 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011416:	e01a      	b.n	801144e <tcp_receive+0xf0e>
 8011418:	e019      	b.n	801144e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801141a:	4b0f      	ldr	r3, [pc, #60]	; (8011458 <tcp_receive+0xf18>)
 801141c:	681a      	ldr	r2, [r3, #0]
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011422:	1ad3      	subs	r3, r2, r3
 8011424:	2b00      	cmp	r3, #0
 8011426:	db0a      	blt.n	801143e <tcp_receive+0xefe>
 8011428:	4b0b      	ldr	r3, [pc, #44]	; (8011458 <tcp_receive+0xf18>)
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011430:	6879      	ldr	r1, [r7, #4]
 8011432:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011434:	440b      	add	r3, r1
 8011436:	1ad3      	subs	r3, r2, r3
 8011438:	3301      	adds	r3, #1
 801143a:	2b00      	cmp	r3, #0
 801143c:	dd07      	ble.n	801144e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	8b5b      	ldrh	r3, [r3, #26]
 8011442:	f043 0302 	orr.w	r3, r3, #2
 8011446:	b29a      	uxth	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801144c:	e7ff      	b.n	801144e <tcp_receive+0xf0e>
 801144e:	bf00      	nop
 8011450:	3750      	adds	r7, #80	; 0x50
 8011452:	46bd      	mov	sp, r7
 8011454:	bdb0      	pop	{r4, r5, r7, pc}
 8011456:	bf00      	nop
 8011458:	20040b78 	.word	0x20040b78
 801145c:	20040b58 	.word	0x20040b58
 8011460:	20040b82 	.word	0x20040b82
 8011464:	08024608 	.word	0x08024608
 8011468:	080249b0 	.word	0x080249b0
 801146c:	08024654 	.word	0x08024654

08011470 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011470:	b480      	push	{r7}
 8011472:	b083      	sub	sp, #12
 8011474:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011476:	4b15      	ldr	r3, [pc, #84]	; (80114cc <tcp_get_next_optbyte+0x5c>)
 8011478:	881b      	ldrh	r3, [r3, #0]
 801147a:	1c5a      	adds	r2, r3, #1
 801147c:	b291      	uxth	r1, r2
 801147e:	4a13      	ldr	r2, [pc, #76]	; (80114cc <tcp_get_next_optbyte+0x5c>)
 8011480:	8011      	strh	r1, [r2, #0]
 8011482:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011484:	4b12      	ldr	r3, [pc, #72]	; (80114d0 <tcp_get_next_optbyte+0x60>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d004      	beq.n	8011496 <tcp_get_next_optbyte+0x26>
 801148c:	4b11      	ldr	r3, [pc, #68]	; (80114d4 <tcp_get_next_optbyte+0x64>)
 801148e:	881b      	ldrh	r3, [r3, #0]
 8011490:	88fa      	ldrh	r2, [r7, #6]
 8011492:	429a      	cmp	r2, r3
 8011494:	d208      	bcs.n	80114a8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011496:	4b10      	ldr	r3, [pc, #64]	; (80114d8 <tcp_get_next_optbyte+0x68>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	3314      	adds	r3, #20
 801149c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801149e:	88fb      	ldrh	r3, [r7, #6]
 80114a0:	683a      	ldr	r2, [r7, #0]
 80114a2:	4413      	add	r3, r2
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	e00b      	b.n	80114c0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80114a8:	88fb      	ldrh	r3, [r7, #6]
 80114aa:	b2da      	uxtb	r2, r3
 80114ac:	4b09      	ldr	r3, [pc, #36]	; (80114d4 <tcp_get_next_optbyte+0x64>)
 80114ae:	881b      	ldrh	r3, [r3, #0]
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	1ad3      	subs	r3, r2, r3
 80114b4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80114b6:	4b06      	ldr	r3, [pc, #24]	; (80114d0 <tcp_get_next_optbyte+0x60>)
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	797b      	ldrb	r3, [r7, #5]
 80114bc:	4413      	add	r3, r2
 80114be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	370c      	adds	r7, #12
 80114c4:	46bd      	mov	sp, r7
 80114c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ca:	4770      	bx	lr
 80114cc:	20040b74 	.word	0x20040b74
 80114d0:	20040b70 	.word	0x20040b70
 80114d4:	20040b6e 	.word	0x20040b6e
 80114d8:	20040b68 	.word	0x20040b68

080114dc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d106      	bne.n	80114f8 <tcp_parseopt+0x1c>
 80114ea:	4b32      	ldr	r3, [pc, #200]	; (80115b4 <tcp_parseopt+0xd8>)
 80114ec:	f240 727d 	movw	r2, #1917	; 0x77d
 80114f0:	4931      	ldr	r1, [pc, #196]	; (80115b8 <tcp_parseopt+0xdc>)
 80114f2:	4832      	ldr	r0, [pc, #200]	; (80115bc <tcp_parseopt+0xe0>)
 80114f4:	f010 fbea 	bl	8021ccc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80114f8:	4b31      	ldr	r3, [pc, #196]	; (80115c0 <tcp_parseopt+0xe4>)
 80114fa:	881b      	ldrh	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d055      	beq.n	80115ac <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011500:	4b30      	ldr	r3, [pc, #192]	; (80115c4 <tcp_parseopt+0xe8>)
 8011502:	2200      	movs	r2, #0
 8011504:	801a      	strh	r2, [r3, #0]
 8011506:	e045      	b.n	8011594 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011508:	f7ff ffb2 	bl	8011470 <tcp_get_next_optbyte>
 801150c:	4603      	mov	r3, r0
 801150e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011510:	7bfb      	ldrb	r3, [r7, #15]
 8011512:	2b02      	cmp	r3, #2
 8011514:	d006      	beq.n	8011524 <tcp_parseopt+0x48>
 8011516:	2b02      	cmp	r3, #2
 8011518:	dc2b      	bgt.n	8011572 <tcp_parseopt+0x96>
 801151a:	2b00      	cmp	r3, #0
 801151c:	d041      	beq.n	80115a2 <tcp_parseopt+0xc6>
 801151e:	2b01      	cmp	r3, #1
 8011520:	d127      	bne.n	8011572 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011522:	e037      	b.n	8011594 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011524:	f7ff ffa4 	bl	8011470 <tcp_get_next_optbyte>
 8011528:	4603      	mov	r3, r0
 801152a:	2b04      	cmp	r3, #4
 801152c:	d13b      	bne.n	80115a6 <tcp_parseopt+0xca>
 801152e:	4b25      	ldr	r3, [pc, #148]	; (80115c4 <tcp_parseopt+0xe8>)
 8011530:	881b      	ldrh	r3, [r3, #0]
 8011532:	3301      	adds	r3, #1
 8011534:	4a22      	ldr	r2, [pc, #136]	; (80115c0 <tcp_parseopt+0xe4>)
 8011536:	8812      	ldrh	r2, [r2, #0]
 8011538:	4293      	cmp	r3, r2
 801153a:	da34      	bge.n	80115a6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801153c:	f7ff ff98 	bl	8011470 <tcp_get_next_optbyte>
 8011540:	4603      	mov	r3, r0
 8011542:	b29b      	uxth	r3, r3
 8011544:	021b      	lsls	r3, r3, #8
 8011546:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011548:	f7ff ff92 	bl	8011470 <tcp_get_next_optbyte>
 801154c:	4603      	mov	r3, r0
 801154e:	b29a      	uxth	r2, r3
 8011550:	89bb      	ldrh	r3, [r7, #12]
 8011552:	4313      	orrs	r3, r2
 8011554:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011556:	89bb      	ldrh	r3, [r7, #12]
 8011558:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801155c:	d804      	bhi.n	8011568 <tcp_parseopt+0x8c>
 801155e:	89bb      	ldrh	r3, [r7, #12]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d001      	beq.n	8011568 <tcp_parseopt+0x8c>
 8011564:	89ba      	ldrh	r2, [r7, #12]
 8011566:	e001      	b.n	801156c <tcp_parseopt+0x90>
 8011568:	f44f 7206 	mov.w	r2, #536	; 0x218
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011570:	e010      	b.n	8011594 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011572:	f7ff ff7d 	bl	8011470 <tcp_get_next_optbyte>
 8011576:	4603      	mov	r3, r0
 8011578:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801157a:	7afb      	ldrb	r3, [r7, #11]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d914      	bls.n	80115aa <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011580:	7afb      	ldrb	r3, [r7, #11]
 8011582:	b29a      	uxth	r2, r3
 8011584:	4b0f      	ldr	r3, [pc, #60]	; (80115c4 <tcp_parseopt+0xe8>)
 8011586:	881b      	ldrh	r3, [r3, #0]
 8011588:	4413      	add	r3, r2
 801158a:	b29b      	uxth	r3, r3
 801158c:	3b02      	subs	r3, #2
 801158e:	b29a      	uxth	r2, r3
 8011590:	4b0c      	ldr	r3, [pc, #48]	; (80115c4 <tcp_parseopt+0xe8>)
 8011592:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011594:	4b0b      	ldr	r3, [pc, #44]	; (80115c4 <tcp_parseopt+0xe8>)
 8011596:	881a      	ldrh	r2, [r3, #0]
 8011598:	4b09      	ldr	r3, [pc, #36]	; (80115c0 <tcp_parseopt+0xe4>)
 801159a:	881b      	ldrh	r3, [r3, #0]
 801159c:	429a      	cmp	r2, r3
 801159e:	d3b3      	bcc.n	8011508 <tcp_parseopt+0x2c>
 80115a0:	e004      	b.n	80115ac <tcp_parseopt+0xd0>
          return;
 80115a2:	bf00      	nop
 80115a4:	e002      	b.n	80115ac <tcp_parseopt+0xd0>
            return;
 80115a6:	bf00      	nop
 80115a8:	e000      	b.n	80115ac <tcp_parseopt+0xd0>
            return;
 80115aa:	bf00      	nop
      }
    }
  }
}
 80115ac:	3710      	adds	r7, #16
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	08024608 	.word	0x08024608
 80115b8:	08024a6c 	.word	0x08024a6c
 80115bc:	08024654 	.word	0x08024654
 80115c0:	20040b6c 	.word	0x20040b6c
 80115c4:	20040b74 	.word	0x20040b74

080115c8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80115c8:	b480      	push	{r7}
 80115ca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80115cc:	4b05      	ldr	r3, [pc, #20]	; (80115e4 <tcp_trigger_input_pcb_close+0x1c>)
 80115ce:	781b      	ldrb	r3, [r3, #0]
 80115d0:	f043 0310 	orr.w	r3, r3, #16
 80115d4:	b2da      	uxtb	r2, r3
 80115d6:	4b03      	ldr	r3, [pc, #12]	; (80115e4 <tcp_trigger_input_pcb_close+0x1c>)
 80115d8:	701a      	strb	r2, [r3, #0]
}
 80115da:	bf00      	nop
 80115dc:	46bd      	mov	sp, r7
 80115de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e2:	4770      	bx	lr
 80115e4:	20040b85 	.word	0x20040b85

080115e8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b084      	sub	sp, #16
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d00a      	beq.n	8011610 <tcp_route+0x28>
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	7a1b      	ldrb	r3, [r3, #8]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d006      	beq.n	8011610 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	7a1b      	ldrb	r3, [r3, #8]
 8011606:	4618      	mov	r0, r3
 8011608:	f7fb f994 	bl	800c934 <netif_get_by_index>
 801160c:	4603      	mov	r3, r0
 801160e:	e003      	b.n	8011618 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f003 fd69 	bl	80150e8 <ip4_route>
 8011616:	4603      	mov	r3, r0
  }
}
 8011618:	4618      	mov	r0, r3
 801161a:	3710      	adds	r7, #16
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011620:	b590      	push	{r4, r7, lr}
 8011622:	b087      	sub	sp, #28
 8011624:	af00      	add	r7, sp, #0
 8011626:	60f8      	str	r0, [r7, #12]
 8011628:	60b9      	str	r1, [r7, #8]
 801162a:	603b      	str	r3, [r7, #0]
 801162c:	4613      	mov	r3, r2
 801162e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d105      	bne.n	8011642 <tcp_create_segment+0x22>
 8011636:	4b44      	ldr	r3, [pc, #272]	; (8011748 <tcp_create_segment+0x128>)
 8011638:	22a3      	movs	r2, #163	; 0xa3
 801163a:	4944      	ldr	r1, [pc, #272]	; (801174c <tcp_create_segment+0x12c>)
 801163c:	4844      	ldr	r0, [pc, #272]	; (8011750 <tcp_create_segment+0x130>)
 801163e:	f010 fb45 	bl	8021ccc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d105      	bne.n	8011654 <tcp_create_segment+0x34>
 8011648:	4b3f      	ldr	r3, [pc, #252]	; (8011748 <tcp_create_segment+0x128>)
 801164a:	22a4      	movs	r2, #164	; 0xa4
 801164c:	4941      	ldr	r1, [pc, #260]	; (8011754 <tcp_create_segment+0x134>)
 801164e:	4840      	ldr	r0, [pc, #256]	; (8011750 <tcp_create_segment+0x130>)
 8011650:	f010 fb3c 	bl	8021ccc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011654:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	b2db      	uxtb	r3, r3
 801165c:	f003 0304 	and.w	r3, r3, #4
 8011660:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011662:	2003      	movs	r0, #3
 8011664:	f7fa fde0 	bl	800c228 <memp_malloc>
 8011668:	6138      	str	r0, [r7, #16]
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d104      	bne.n	801167a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011670:	68b8      	ldr	r0, [r7, #8]
 8011672:	f7fb fced 	bl	800d050 <pbuf_free>
    return NULL;
 8011676:	2300      	movs	r3, #0
 8011678:	e061      	b.n	801173e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011680:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	2200      	movs	r2, #0
 8011686:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	68ba      	ldr	r2, [r7, #8]
 801168c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	891a      	ldrh	r2, [r3, #8]
 8011692:	7dfb      	ldrb	r3, [r7, #23]
 8011694:	b29b      	uxth	r3, r3
 8011696:	429a      	cmp	r2, r3
 8011698:	d205      	bcs.n	80116a6 <tcp_create_segment+0x86>
 801169a:	4b2b      	ldr	r3, [pc, #172]	; (8011748 <tcp_create_segment+0x128>)
 801169c:	22b0      	movs	r2, #176	; 0xb0
 801169e:	492e      	ldr	r1, [pc, #184]	; (8011758 <tcp_create_segment+0x138>)
 80116a0:	482b      	ldr	r0, [pc, #172]	; (8011750 <tcp_create_segment+0x130>)
 80116a2:	f010 fb13 	bl	8021ccc <iprintf>
  seg->len = p->tot_len - optlen;
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	891a      	ldrh	r2, [r3, #8]
 80116aa:	7dfb      	ldrb	r3, [r7, #23]
 80116ac:	b29b      	uxth	r3, r3
 80116ae:	1ad3      	subs	r3, r2, r3
 80116b0:	b29a      	uxth	r2, r3
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80116b6:	2114      	movs	r1, #20
 80116b8:	68b8      	ldr	r0, [r7, #8]
 80116ba:	f7fb fc33 	bl	800cf24 <pbuf_add_header>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d004      	beq.n	80116ce <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80116c4:	6938      	ldr	r0, [r7, #16]
 80116c6:	f7fd f8ce 	bl	800e866 <tcp_seg_free>
    return NULL;
 80116ca:	2300      	movs	r3, #0
 80116cc:	e037      	b.n	801173e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	685a      	ldr	r2, [r3, #4]
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	8ada      	ldrh	r2, [r3, #22]
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	68dc      	ldr	r4, [r3, #12]
 80116e0:	4610      	mov	r0, r2
 80116e2:	f7f9 fd9f 	bl	800b224 <lwip_htons>
 80116e6:	4603      	mov	r3, r0
 80116e8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	8b1a      	ldrh	r2, [r3, #24]
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	68dc      	ldr	r4, [r3, #12]
 80116f2:	4610      	mov	r0, r2
 80116f4:	f7f9 fd96 	bl	800b224 <lwip_htons>
 80116f8:	4603      	mov	r3, r0
 80116fa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	68dc      	ldr	r4, [r3, #12]
 8011700:	6838      	ldr	r0, [r7, #0]
 8011702:	f7f9 fda4 	bl	800b24e <lwip_htonl>
 8011706:	4603      	mov	r3, r0
 8011708:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801170a:	7dfb      	ldrb	r3, [r7, #23]
 801170c:	089b      	lsrs	r3, r3, #2
 801170e:	b2db      	uxtb	r3, r3
 8011710:	b29b      	uxth	r3, r3
 8011712:	3305      	adds	r3, #5
 8011714:	b29b      	uxth	r3, r3
 8011716:	031b      	lsls	r3, r3, #12
 8011718:	b29a      	uxth	r2, r3
 801171a:	79fb      	ldrb	r3, [r7, #7]
 801171c:	b29b      	uxth	r3, r3
 801171e:	4313      	orrs	r3, r2
 8011720:	b29a      	uxth	r2, r3
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	68dc      	ldr	r4, [r3, #12]
 8011726:	4610      	mov	r0, r2
 8011728:	f7f9 fd7c 	bl	800b224 <lwip_htons>
 801172c:	4603      	mov	r3, r0
 801172e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	68db      	ldr	r3, [r3, #12]
 8011734:	2200      	movs	r2, #0
 8011736:	749a      	strb	r2, [r3, #18]
 8011738:	2200      	movs	r2, #0
 801173a:	74da      	strb	r2, [r3, #19]
  return seg;
 801173c:	693b      	ldr	r3, [r7, #16]
}
 801173e:	4618      	mov	r0, r3
 8011740:	371c      	adds	r7, #28
 8011742:	46bd      	mov	sp, r7
 8011744:	bd90      	pop	{r4, r7, pc}
 8011746:	bf00      	nop
 8011748:	08024a88 	.word	0x08024a88
 801174c:	08024abc 	.word	0x08024abc
 8011750:	08024adc 	.word	0x08024adc
 8011754:	08024b04 	.word	0x08024b04
 8011758:	08024b28 	.word	0x08024b28

0801175c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801175c:	b590      	push	{r4, r7, lr}
 801175e:	b08b      	sub	sp, #44	; 0x2c
 8011760:	af02      	add	r7, sp, #8
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	460b      	mov	r3, r1
 8011766:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011768:	2300      	movs	r3, #0
 801176a:	61fb      	str	r3, [r7, #28]
 801176c:	2300      	movs	r3, #0
 801176e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011770:	2300      	movs	r3, #0
 8011772:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d106      	bne.n	8011788 <tcp_split_unsent_seg+0x2c>
 801177a:	4b95      	ldr	r3, [pc, #596]	; (80119d0 <tcp_split_unsent_seg+0x274>)
 801177c:	f240 324b 	movw	r2, #843	; 0x34b
 8011780:	4994      	ldr	r1, [pc, #592]	; (80119d4 <tcp_split_unsent_seg+0x278>)
 8011782:	4895      	ldr	r0, [pc, #596]	; (80119d8 <tcp_split_unsent_seg+0x27c>)
 8011784:	f010 faa2 	bl	8021ccc <iprintf>

  useg = pcb->unsent;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801178c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d102      	bne.n	801179a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011798:	e116      	b.n	80119c8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801179a:	887b      	ldrh	r3, [r7, #2]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d109      	bne.n	80117b4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80117a0:	4b8b      	ldr	r3, [pc, #556]	; (80119d0 <tcp_split_unsent_seg+0x274>)
 80117a2:	f240 3253 	movw	r2, #851	; 0x353
 80117a6:	498d      	ldr	r1, [pc, #564]	; (80119dc <tcp_split_unsent_seg+0x280>)
 80117a8:	488b      	ldr	r0, [pc, #556]	; (80119d8 <tcp_split_unsent_seg+0x27c>)
 80117aa:	f010 fa8f 	bl	8021ccc <iprintf>
    return ERR_VAL;
 80117ae:	f06f 0305 	mvn.w	r3, #5
 80117b2:	e109      	b.n	80119c8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	891b      	ldrh	r3, [r3, #8]
 80117b8:	887a      	ldrh	r2, [r7, #2]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d301      	bcc.n	80117c2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80117be:	2300      	movs	r3, #0
 80117c0:	e102      	b.n	80119c8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117c6:	887a      	ldrh	r2, [r7, #2]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d906      	bls.n	80117da <tcp_split_unsent_seg+0x7e>
 80117cc:	4b80      	ldr	r3, [pc, #512]	; (80119d0 <tcp_split_unsent_seg+0x274>)
 80117ce:	f240 325b 	movw	r2, #859	; 0x35b
 80117d2:	4983      	ldr	r1, [pc, #524]	; (80119e0 <tcp_split_unsent_seg+0x284>)
 80117d4:	4880      	ldr	r0, [pc, #512]	; (80119d8 <tcp_split_unsent_seg+0x27c>)
 80117d6:	f010 fa79 	bl	8021ccc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	891b      	ldrh	r3, [r3, #8]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d106      	bne.n	80117f0 <tcp_split_unsent_seg+0x94>
 80117e2:	4b7b      	ldr	r3, [pc, #492]	; (80119d0 <tcp_split_unsent_seg+0x274>)
 80117e4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80117e8:	497e      	ldr	r1, [pc, #504]	; (80119e4 <tcp_split_unsent_seg+0x288>)
 80117ea:	487b      	ldr	r0, [pc, #492]	; (80119d8 <tcp_split_unsent_seg+0x27c>)
 80117ec:	f010 fa6e 	bl	8021ccc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	7a9b      	ldrb	r3, [r3, #10]
 80117f4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80117f6:	7bfb      	ldrb	r3, [r7, #15]
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	f003 0304 	and.w	r3, r3, #4
 8011800:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	891a      	ldrh	r2, [r3, #8]
 8011806:	887b      	ldrh	r3, [r7, #2]
 8011808:	1ad3      	subs	r3, r2, r3
 801180a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801180c:	7bbb      	ldrb	r3, [r7, #14]
 801180e:	b29a      	uxth	r2, r3
 8011810:	89bb      	ldrh	r3, [r7, #12]
 8011812:	4413      	add	r3, r2
 8011814:	b29b      	uxth	r3, r3
 8011816:	f44f 7220 	mov.w	r2, #640	; 0x280
 801181a:	4619      	mov	r1, r3
 801181c:	2036      	movs	r0, #54	; 0x36
 801181e:	f7fb f933 	bl	800ca88 <pbuf_alloc>
 8011822:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011824:	693b      	ldr	r3, [r7, #16]
 8011826:	2b00      	cmp	r3, #0
 8011828:	f000 80b7 	beq.w	801199a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	891a      	ldrh	r2, [r3, #8]
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	891b      	ldrh	r3, [r3, #8]
 8011836:	1ad3      	subs	r3, r2, r3
 8011838:	b29a      	uxth	r2, r3
 801183a:	887b      	ldrh	r3, [r7, #2]
 801183c:	4413      	add	r3, r2
 801183e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	6858      	ldr	r0, [r3, #4]
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	685a      	ldr	r2, [r3, #4]
 8011848:	7bbb      	ldrb	r3, [r7, #14]
 801184a:	18d1      	adds	r1, r2, r3
 801184c:	897b      	ldrh	r3, [r7, #10]
 801184e:	89ba      	ldrh	r2, [r7, #12]
 8011850:	f7fb fe04 	bl	800d45c <pbuf_copy_partial>
 8011854:	4603      	mov	r3, r0
 8011856:	461a      	mov	r2, r3
 8011858:	89bb      	ldrh	r3, [r7, #12]
 801185a:	4293      	cmp	r3, r2
 801185c:	f040 809f 	bne.w	801199e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	68db      	ldr	r3, [r3, #12]
 8011864:	899b      	ldrh	r3, [r3, #12]
 8011866:	b29b      	uxth	r3, r3
 8011868:	4618      	mov	r0, r3
 801186a:	f7f9 fcdb 	bl	800b224 <lwip_htons>
 801186e:	4603      	mov	r3, r0
 8011870:	b2db      	uxtb	r3, r3
 8011872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011876:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011878:	2300      	movs	r3, #0
 801187a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801187c:	7efb      	ldrb	r3, [r7, #27]
 801187e:	f003 0308 	and.w	r3, r3, #8
 8011882:	2b00      	cmp	r3, #0
 8011884:	d007      	beq.n	8011896 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011886:	7efb      	ldrb	r3, [r7, #27]
 8011888:	f023 0308 	bic.w	r3, r3, #8
 801188c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801188e:	7ebb      	ldrb	r3, [r7, #26]
 8011890:	f043 0308 	orr.w	r3, r3, #8
 8011894:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011896:	7efb      	ldrb	r3, [r7, #27]
 8011898:	f003 0301 	and.w	r3, r3, #1
 801189c:	2b00      	cmp	r3, #0
 801189e:	d007      	beq.n	80118b0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80118a0:	7efb      	ldrb	r3, [r7, #27]
 80118a2:	f023 0301 	bic.w	r3, r3, #1
 80118a6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80118a8:	7ebb      	ldrb	r3, [r7, #26]
 80118aa:	f043 0301 	orr.w	r3, r3, #1
 80118ae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	68db      	ldr	r3, [r3, #12]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7f9 fcc9 	bl	800b24e <lwip_htonl>
 80118bc:	4602      	mov	r2, r0
 80118be:	887b      	ldrh	r3, [r7, #2]
 80118c0:	18d1      	adds	r1, r2, r3
 80118c2:	7eba      	ldrb	r2, [r7, #26]
 80118c4:	7bfb      	ldrb	r3, [r7, #15]
 80118c6:	9300      	str	r3, [sp, #0]
 80118c8:	460b      	mov	r3, r1
 80118ca:	6939      	ldr	r1, [r7, #16]
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f7ff fea7 	bl	8011620 <tcp_create_segment>
 80118d2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d063      	beq.n	80119a2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fb fc44 	bl	800d16c <pbuf_clen>
 80118e4:	4603      	mov	r3, r0
 80118e6:	461a      	mov	r2, r3
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118ee:	1a9b      	subs	r3, r3, r2
 80118f0:	b29a      	uxth	r2, r3
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	6858      	ldr	r0, [r3, #4]
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	891a      	ldrh	r2, [r3, #8]
 8011902:	89bb      	ldrh	r3, [r7, #12]
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	b29b      	uxth	r3, r3
 8011908:	4619      	mov	r1, r3
 801190a:	f7fb fa1b 	bl	800cd44 <pbuf_realloc>
  useg->len -= remainder;
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	891a      	ldrh	r2, [r3, #8]
 8011912:	89bb      	ldrh	r3, [r7, #12]
 8011914:	1ad3      	subs	r3, r2, r3
 8011916:	b29a      	uxth	r2, r3
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801191c:	697b      	ldr	r3, [r7, #20]
 801191e:	68db      	ldr	r3, [r3, #12]
 8011920:	899b      	ldrh	r3, [r3, #12]
 8011922:	b29c      	uxth	r4, r3
 8011924:	7efb      	ldrb	r3, [r7, #27]
 8011926:	b29b      	uxth	r3, r3
 8011928:	4618      	mov	r0, r3
 801192a:	f7f9 fc7b 	bl	800b224 <lwip_htons>
 801192e:	4603      	mov	r3, r0
 8011930:	461a      	mov	r2, r3
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	4322      	orrs	r2, r4
 8011938:	b292      	uxth	r2, r2
 801193a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	4618      	mov	r0, r3
 8011942:	f7fb fc13 	bl	800d16c <pbuf_clen>
 8011946:	4603      	mov	r3, r0
 8011948:	461a      	mov	r2, r3
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011950:	4413      	add	r3, r2
 8011952:	b29a      	uxth	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	4618      	mov	r0, r3
 8011960:	f7fb fc04 	bl	800d16c <pbuf_clen>
 8011964:	4603      	mov	r3, r0
 8011966:	461a      	mov	r2, r3
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801196e:	4413      	add	r3, r2
 8011970:	b29a      	uxth	r2, r3
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	681a      	ldr	r2, [r3, #0]
 801197c:	69fb      	ldr	r3, [r7, #28]
 801197e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	69fa      	ldr	r2, [r7, #28]
 8011984:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011986:	69fb      	ldr	r3, [r7, #28]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d103      	bne.n	8011996 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2200      	movs	r2, #0
 8011992:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011996:	2300      	movs	r3, #0
 8011998:	e016      	b.n	80119c8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801199a:	bf00      	nop
 801199c:	e002      	b.n	80119a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801199e:	bf00      	nop
 80119a0:	e000      	b.n	80119a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80119a2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d006      	beq.n	80119b8 <tcp_split_unsent_seg+0x25c>
 80119aa:	4b09      	ldr	r3, [pc, #36]	; (80119d0 <tcp_split_unsent_seg+0x274>)
 80119ac:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80119b0:	490d      	ldr	r1, [pc, #52]	; (80119e8 <tcp_split_unsent_seg+0x28c>)
 80119b2:	4809      	ldr	r0, [pc, #36]	; (80119d8 <tcp_split_unsent_seg+0x27c>)
 80119b4:	f010 f98a 	bl	8021ccc <iprintf>
  if (p != NULL) {
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d002      	beq.n	80119c4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80119be:	6938      	ldr	r0, [r7, #16]
 80119c0:	f7fb fb46 	bl	800d050 <pbuf_free>
  }

  return ERR_MEM;
 80119c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3724      	adds	r7, #36	; 0x24
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd90      	pop	{r4, r7, pc}
 80119d0:	08024a88 	.word	0x08024a88
 80119d4:	08024e1c 	.word	0x08024e1c
 80119d8:	08024adc 	.word	0x08024adc
 80119dc:	08024e40 	.word	0x08024e40
 80119e0:	08024e64 	.word	0x08024e64
 80119e4:	08024e74 	.word	0x08024e74
 80119e8:	08024e84 	.word	0x08024e84

080119ec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80119ec:	b590      	push	{r4, r7, lr}
 80119ee:	b085      	sub	sp, #20
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d106      	bne.n	8011a08 <tcp_send_fin+0x1c>
 80119fa:	4b21      	ldr	r3, [pc, #132]	; (8011a80 <tcp_send_fin+0x94>)
 80119fc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011a00:	4920      	ldr	r1, [pc, #128]	; (8011a84 <tcp_send_fin+0x98>)
 8011a02:	4821      	ldr	r0, [pc, #132]	; (8011a88 <tcp_send_fin+0x9c>)
 8011a04:	f010 f962 	bl	8021ccc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d02e      	beq.n	8011a6e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a14:	60fb      	str	r3, [r7, #12]
 8011a16:	e002      	b.n	8011a1e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d1f8      	bne.n	8011a18 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	68db      	ldr	r3, [r3, #12]
 8011a2a:	899b      	ldrh	r3, [r3, #12]
 8011a2c:	b29b      	uxth	r3, r3
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7f9 fbf8 	bl	800b224 <lwip_htons>
 8011a34:	4603      	mov	r3, r0
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	f003 0307 	and.w	r3, r3, #7
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d116      	bne.n	8011a6e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	68db      	ldr	r3, [r3, #12]
 8011a44:	899b      	ldrh	r3, [r3, #12]
 8011a46:	b29c      	uxth	r4, r3
 8011a48:	2001      	movs	r0, #1
 8011a4a:	f7f9 fbeb 	bl	800b224 <lwip_htons>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	461a      	mov	r2, r3
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	4322      	orrs	r2, r4
 8011a58:	b292      	uxth	r2, r2
 8011a5a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	8b5b      	ldrh	r3, [r3, #26]
 8011a60:	f043 0320 	orr.w	r3, r3, #32
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	e004      	b.n	8011a78 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011a6e:	2101      	movs	r1, #1
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 f80b 	bl	8011a8c <tcp_enqueue_flags>
 8011a76:	4603      	mov	r3, r0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3714      	adds	r7, #20
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd90      	pop	{r4, r7, pc}
 8011a80:	08024a88 	.word	0x08024a88
 8011a84:	08024e90 	.word	0x08024e90
 8011a88:	08024adc 	.word	0x08024adc

08011a8c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08a      	sub	sp, #40	; 0x28
 8011a90:	af02      	add	r7, sp, #8
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	460b      	mov	r3, r1
 8011a96:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011aa0:	78fb      	ldrb	r3, [r7, #3]
 8011aa2:	f003 0303 	and.w	r3, r3, #3
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d106      	bne.n	8011ab8 <tcp_enqueue_flags+0x2c>
 8011aaa:	4b67      	ldr	r3, [pc, #412]	; (8011c48 <tcp_enqueue_flags+0x1bc>)
 8011aac:	f240 4211 	movw	r2, #1041	; 0x411
 8011ab0:	4966      	ldr	r1, [pc, #408]	; (8011c4c <tcp_enqueue_flags+0x1c0>)
 8011ab2:	4867      	ldr	r0, [pc, #412]	; (8011c50 <tcp_enqueue_flags+0x1c4>)
 8011ab4:	f010 f90a 	bl	8021ccc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d106      	bne.n	8011acc <tcp_enqueue_flags+0x40>
 8011abe:	4b62      	ldr	r3, [pc, #392]	; (8011c48 <tcp_enqueue_flags+0x1bc>)
 8011ac0:	f240 4213 	movw	r2, #1043	; 0x413
 8011ac4:	4963      	ldr	r1, [pc, #396]	; (8011c54 <tcp_enqueue_flags+0x1c8>)
 8011ac6:	4862      	ldr	r0, [pc, #392]	; (8011c50 <tcp_enqueue_flags+0x1c4>)
 8011ac8:	f010 f900 	bl	8021ccc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011acc:	78fb      	ldrb	r3, [r7, #3]
 8011ace:	f003 0302 	and.w	r3, r3, #2
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d001      	beq.n	8011ada <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ada:	7ffb      	ldrb	r3, [r7, #31]
 8011adc:	009b      	lsls	r3, r3, #2
 8011ade:	b2db      	uxtb	r3, r3
 8011ae0:	f003 0304 	and.w	r3, r3, #4
 8011ae4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011ae6:	7dfb      	ldrb	r3, [r7, #23]
 8011ae8:	b29b      	uxth	r3, r3
 8011aea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011aee:	4619      	mov	r1, r3
 8011af0:	2036      	movs	r0, #54	; 0x36
 8011af2:	f7fa ffc9 	bl	800ca88 <pbuf_alloc>
 8011af6:	6138      	str	r0, [r7, #16]
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d109      	bne.n	8011b12 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	8b5b      	ldrh	r3, [r3, #26]
 8011b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b10:	e095      	b.n	8011c3e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	895a      	ldrh	r2, [r3, #10]
 8011b16:	7dfb      	ldrb	r3, [r7, #23]
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d206      	bcs.n	8011b2c <tcp_enqueue_flags+0xa0>
 8011b1e:	4b4a      	ldr	r3, [pc, #296]	; (8011c48 <tcp_enqueue_flags+0x1bc>)
 8011b20:	f240 4239 	movw	r2, #1081	; 0x439
 8011b24:	494c      	ldr	r1, [pc, #304]	; (8011c58 <tcp_enqueue_flags+0x1cc>)
 8011b26:	484a      	ldr	r0, [pc, #296]	; (8011c50 <tcp_enqueue_flags+0x1c4>)
 8011b28:	f010 f8d0 	bl	8021ccc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011b30:	78fa      	ldrb	r2, [r7, #3]
 8011b32:	7ffb      	ldrb	r3, [r7, #31]
 8011b34:	9300      	str	r3, [sp, #0]
 8011b36:	460b      	mov	r3, r1
 8011b38:	6939      	ldr	r1, [r7, #16]
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	f7ff fd70 	bl	8011620 <tcp_create_segment>
 8011b40:	60f8      	str	r0, [r7, #12]
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d109      	bne.n	8011b5c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	8b5b      	ldrh	r3, [r3, #26]
 8011b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b5a:	e070      	b.n	8011c3e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	f003 0303 	and.w	r3, r3, #3
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d006      	beq.n	8011b76 <tcp_enqueue_flags+0xea>
 8011b68:	4b37      	ldr	r3, [pc, #220]	; (8011c48 <tcp_enqueue_flags+0x1bc>)
 8011b6a:	f240 4242 	movw	r2, #1090	; 0x442
 8011b6e:	493b      	ldr	r1, [pc, #236]	; (8011c5c <tcp_enqueue_flags+0x1d0>)
 8011b70:	4837      	ldr	r0, [pc, #220]	; (8011c50 <tcp_enqueue_flags+0x1c4>)
 8011b72:	f010 f8ab 	bl	8021ccc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	891b      	ldrh	r3, [r3, #8]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d006      	beq.n	8011b8c <tcp_enqueue_flags+0x100>
 8011b7e:	4b32      	ldr	r3, [pc, #200]	; (8011c48 <tcp_enqueue_flags+0x1bc>)
 8011b80:	f240 4243 	movw	r2, #1091	; 0x443
 8011b84:	4936      	ldr	r1, [pc, #216]	; (8011c60 <tcp_enqueue_flags+0x1d4>)
 8011b86:	4832      	ldr	r0, [pc, #200]	; (8011c50 <tcp_enqueue_flags+0x1c4>)
 8011b88:	f010 f8a0 	bl	8021ccc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d103      	bne.n	8011b9c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	68fa      	ldr	r2, [r7, #12]
 8011b98:	66da      	str	r2, [r3, #108]	; 0x6c
 8011b9a:	e00d      	b.n	8011bb8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ba0:	61bb      	str	r3, [r7, #24]
 8011ba2:	e002      	b.n	8011baa <tcp_enqueue_flags+0x11e>
 8011ba4:	69bb      	ldr	r3, [r7, #24]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	61bb      	str	r3, [r7, #24]
 8011baa:	69bb      	ldr	r3, [r7, #24]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d1f8      	bne.n	8011ba4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011bb2:	69bb      	ldr	r3, [r7, #24]
 8011bb4:	68fa      	ldr	r2, [r7, #12]
 8011bb6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011bc0:	78fb      	ldrb	r3, [r7, #3]
 8011bc2:	f003 0302 	and.w	r3, r3, #2
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d104      	bne.n	8011bd4 <tcp_enqueue_flags+0x148>
 8011bca:	78fb      	ldrb	r3, [r7, #3]
 8011bcc:	f003 0301 	and.w	r3, r3, #1
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d004      	beq.n	8011bde <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011bd8:	1c5a      	adds	r2, r3, #1
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011bde:	78fb      	ldrb	r3, [r7, #3]
 8011be0:	f003 0301 	and.w	r3, r3, #1
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d006      	beq.n	8011bf6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	8b5b      	ldrh	r3, [r3, #26]
 8011bec:	f043 0320 	orr.w	r3, r3, #32
 8011bf0:	b29a      	uxth	r2, r3
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7fb fab6 	bl	800d16c <pbuf_clen>
 8011c00:	4603      	mov	r3, r0
 8011c02:	461a      	mov	r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c0a:	4413      	add	r3, r2
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d00e      	beq.n	8011c3c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d10a      	bne.n	8011c3c <tcp_enqueue_flags+0x1b0>
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d106      	bne.n	8011c3c <tcp_enqueue_flags+0x1b0>
 8011c2e:	4b06      	ldr	r3, [pc, #24]	; (8011c48 <tcp_enqueue_flags+0x1bc>)
 8011c30:	f240 4265 	movw	r2, #1125	; 0x465
 8011c34:	490b      	ldr	r1, [pc, #44]	; (8011c64 <tcp_enqueue_flags+0x1d8>)
 8011c36:	4806      	ldr	r0, [pc, #24]	; (8011c50 <tcp_enqueue_flags+0x1c4>)
 8011c38:	f010 f848 	bl	8021ccc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011c3c:	2300      	movs	r3, #0
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3720      	adds	r7, #32
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	08024a88 	.word	0x08024a88
 8011c4c:	08024eac 	.word	0x08024eac
 8011c50:	08024adc 	.word	0x08024adc
 8011c54:	08024f04 	.word	0x08024f04
 8011c58:	08024f24 	.word	0x08024f24
 8011c5c:	08024f60 	.word	0x08024f60
 8011c60:	08024f78 	.word	0x08024f78
 8011c64:	08024fa4 	.word	0x08024fa4

08011c68 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011c68:	b5b0      	push	{r4, r5, r7, lr}
 8011c6a:	b08a      	sub	sp, #40	; 0x28
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d106      	bne.n	8011c84 <tcp_output+0x1c>
 8011c76:	4b8a      	ldr	r3, [pc, #552]	; (8011ea0 <tcp_output+0x238>)
 8011c78:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011c7c:	4989      	ldr	r1, [pc, #548]	; (8011ea4 <tcp_output+0x23c>)
 8011c7e:	488a      	ldr	r0, [pc, #552]	; (8011ea8 <tcp_output+0x240>)
 8011c80:	f010 f824 	bl	8021ccc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	7d1b      	ldrb	r3, [r3, #20]
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d106      	bne.n	8011c9a <tcp_output+0x32>
 8011c8c:	4b84      	ldr	r3, [pc, #528]	; (8011ea0 <tcp_output+0x238>)
 8011c8e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011c92:	4986      	ldr	r1, [pc, #536]	; (8011eac <tcp_output+0x244>)
 8011c94:	4884      	ldr	r0, [pc, #528]	; (8011ea8 <tcp_output+0x240>)
 8011c96:	f010 f819 	bl	8021ccc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011c9a:	4b85      	ldr	r3, [pc, #532]	; (8011eb0 <tcp_output+0x248>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d101      	bne.n	8011ca8 <tcp_output+0x40>
    return ERR_OK;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	e1ce      	b.n	8012046 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	bf28      	it	cs
 8011cb8:	4613      	movcs	r3, r2
 8011cba:	b29b      	uxth	r3, r3
 8011cbc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d10b      	bne.n	8011ce2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	8b5b      	ldrh	r3, [r3, #26]
 8011cce:	f003 0302 	and.w	r3, r3, #2
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	f000 81aa 	beq.w	801202c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f000 fdcb 	bl	8012874 <tcp_send_empty_ack>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	e1b1      	b.n	8012046 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011ce2:	6879      	ldr	r1, [r7, #4]
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	3304      	adds	r3, #4
 8011ce8:	461a      	mov	r2, r3
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f7ff fc7c 	bl	80115e8 <tcp_route>
 8011cf0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d102      	bne.n	8011cfe <tcp_output+0x96>
    return ERR_RTE;
 8011cf8:	f06f 0303 	mvn.w	r3, #3
 8011cfc:	e1a3      	b.n	8012046 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d003      	beq.n	8011d0c <tcp_output+0xa4>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d111      	bne.n	8011d30 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d002      	beq.n	8011d18 <tcp_output+0xb0>
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	3304      	adds	r3, #4
 8011d16:	e000      	b.n	8011d1a <tcp_output+0xb2>
 8011d18:	2300      	movs	r3, #0
 8011d1a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d102      	bne.n	8011d28 <tcp_output+0xc0>
      return ERR_RTE;
 8011d22:	f06f 0303 	mvn.w	r3, #3
 8011d26:	e18e      	b.n	8012046 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d32:	68db      	ldr	r3, [r3, #12]
 8011d34:	685b      	ldr	r3, [r3, #4]
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7f9 fa89 	bl	800b24e <lwip_htonl>
 8011d3c:	4602      	mov	r2, r0
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d42:	1ad3      	subs	r3, r2, r3
 8011d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d46:	8912      	ldrh	r2, [r2, #8]
 8011d48:	4413      	add	r3, r2
 8011d4a:	69ba      	ldr	r2, [r7, #24]
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	d227      	bcs.n	8011da0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d56:	461a      	mov	r2, r3
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d114      	bne.n	8011d88 <tcp_output+0x120>
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d110      	bne.n	8011d88 <tcp_output+0x120>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d10b      	bne.n	8011d88 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2201      	movs	r2, #1
 8011d7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2200      	movs	r2, #0
 8011d84:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	8b5b      	ldrh	r3, [r3, #26]
 8011d8c:	f003 0302 	and.w	r3, r3, #2
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f000 814d 	beq.w	8012030 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f000 fd6c 	bl	8012874 <tcp_send_empty_ack>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	e152      	b.n	8012046 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2200      	movs	r2, #0
 8011da4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011dae:	6a3b      	ldr	r3, [r7, #32]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	f000 811c 	beq.w	8011fee <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011db6:	e002      	b.n	8011dbe <tcp_output+0x156>
 8011db8:	6a3b      	ldr	r3, [r7, #32]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	623b      	str	r3, [r7, #32]
 8011dbe:	6a3b      	ldr	r3, [r7, #32]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d1f8      	bne.n	8011db8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011dc6:	e112      	b.n	8011fee <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	899b      	ldrh	r3, [r3, #12]
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7f9 fa27 	bl	800b224 <lwip_htons>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	f003 0304 	and.w	r3, r3, #4
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d006      	beq.n	8011df0 <tcp_output+0x188>
 8011de2:	4b2f      	ldr	r3, [pc, #188]	; (8011ea0 <tcp_output+0x238>)
 8011de4:	f240 5236 	movw	r2, #1334	; 0x536
 8011de8:	4932      	ldr	r1, [pc, #200]	; (8011eb4 <tcp_output+0x24c>)
 8011dea:	482f      	ldr	r0, [pc, #188]	; (8011ea8 <tcp_output+0x240>)
 8011dec:	f00f ff6e 	bl	8021ccc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d01f      	beq.n	8011e38 <tcp_output+0x1d0>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	8b5b      	ldrh	r3, [r3, #26]
 8011dfc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d119      	bne.n	8011e38 <tcp_output+0x1d0>
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00b      	beq.n	8011e24 <tcp_output+0x1bc>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d110      	bne.n	8011e38 <tcp_output+0x1d0>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e1a:	891a      	ldrh	r2, [r3, #8]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d209      	bcs.n	8011e38 <tcp_output+0x1d0>
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d004      	beq.n	8011e38 <tcp_output+0x1d0>
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e34:	2b08      	cmp	r3, #8
 8011e36:	d901      	bls.n	8011e3c <tcp_output+0x1d4>
 8011e38:	2301      	movs	r3, #1
 8011e3a:	e000      	b.n	8011e3e <tcp_output+0x1d6>
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d106      	bne.n	8011e50 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	8b5b      	ldrh	r3, [r3, #26]
 8011e46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f000 80e4 	beq.w	8012018 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	7d1b      	ldrb	r3, [r3, #20]
 8011e54:	2b02      	cmp	r3, #2
 8011e56:	d00d      	beq.n	8011e74 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	899b      	ldrh	r3, [r3, #12]
 8011e5e:	b29c      	uxth	r4, r3
 8011e60:	2010      	movs	r0, #16
 8011e62:	f7f9 f9df 	bl	800b224 <lwip_htons>
 8011e66:	4603      	mov	r3, r0
 8011e68:	461a      	mov	r2, r3
 8011e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6c:	68db      	ldr	r3, [r3, #12]
 8011e6e:	4322      	orrs	r2, r4
 8011e70:	b292      	uxth	r2, r2
 8011e72:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011e74:	697a      	ldr	r2, [r7, #20]
 8011e76:	6879      	ldr	r1, [r7, #4]
 8011e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e7a:	f000 f909 	bl	8012090 <tcp_output_segment>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d016      	beq.n	8011eb8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	8b5b      	ldrh	r3, [r3, #26]
 8011e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e92:	b29a      	uxth	r2, r3
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	835a      	strh	r2, [r3, #26]
      return err;
 8011e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e9c:	e0d3      	b.n	8012046 <tcp_output+0x3de>
 8011e9e:	bf00      	nop
 8011ea0:	08024a88 	.word	0x08024a88
 8011ea4:	08024fcc 	.word	0x08024fcc
 8011ea8:	08024adc 	.word	0x08024adc
 8011eac:	08024fe4 	.word	0x08024fe4
 8011eb0:	20040b8c 	.word	0x20040b8c
 8011eb4:	0802500c 	.word	0x0802500c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eba:	681a      	ldr	r2, [r3, #0]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	7d1b      	ldrb	r3, [r3, #20]
 8011ec4:	2b02      	cmp	r3, #2
 8011ec6:	d006      	beq.n	8011ed6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	8b5b      	ldrh	r3, [r3, #26]
 8011ecc:	f023 0303 	bic.w	r3, r3, #3
 8011ed0:	b29a      	uxth	r2, r3
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed8:	68db      	ldr	r3, [r3, #12]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7f9 f9b6 	bl	800b24e <lwip_htonl>
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee6:	891b      	ldrh	r3, [r3, #8]
 8011ee8:	461d      	mov	r5, r3
 8011eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eec:	68db      	ldr	r3, [r3, #12]
 8011eee:	899b      	ldrh	r3, [r3, #12]
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7f9 f996 	bl	800b224 <lwip_htons>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	f003 0303 	and.w	r3, r3, #3
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d001      	beq.n	8011f08 <tcp_output+0x2a0>
 8011f04:	2301      	movs	r3, #1
 8011f06:	e000      	b.n	8011f0a <tcp_output+0x2a2>
 8011f08:	2300      	movs	r3, #0
 8011f0a:	442b      	add	r3, r5
 8011f0c:	4423      	add	r3, r4
 8011f0e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	1ad3      	subs	r3, r2, r3
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	da02      	bge.n	8011f22 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	68ba      	ldr	r2, [r7, #8]
 8011f20:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f24:	891b      	ldrh	r3, [r3, #8]
 8011f26:	461c      	mov	r4, r3
 8011f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f2a:	68db      	ldr	r3, [r3, #12]
 8011f2c:	899b      	ldrh	r3, [r3, #12]
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7f9 f977 	bl	800b224 <lwip_htons>
 8011f36:	4603      	mov	r3, r0
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	f003 0303 	and.w	r3, r3, #3
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d001      	beq.n	8011f46 <tcp_output+0x2de>
 8011f42:	2301      	movs	r3, #1
 8011f44:	e000      	b.n	8011f48 <tcp_output+0x2e0>
 8011f46:	2300      	movs	r3, #0
 8011f48:	4423      	add	r3, r4
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d049      	beq.n	8011fe2 <tcp_output+0x37a>
      seg->next = NULL;
 8011f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f50:	2200      	movs	r2, #0
 8011f52:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d105      	bne.n	8011f68 <tcp_output+0x300>
        pcb->unacked = seg;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f60:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f64:	623b      	str	r3, [r7, #32]
 8011f66:	e03f      	b.n	8011fe8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7f9 f96d 	bl	800b24e <lwip_htonl>
 8011f74:	4604      	mov	r4, r0
 8011f76:	6a3b      	ldr	r3, [r7, #32]
 8011f78:	68db      	ldr	r3, [r3, #12]
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7f9 f966 	bl	800b24e <lwip_htonl>
 8011f82:	4603      	mov	r3, r0
 8011f84:	1ae3      	subs	r3, r4, r3
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	da24      	bge.n	8011fd4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	3370      	adds	r3, #112	; 0x70
 8011f8e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011f90:	e002      	b.n	8011f98 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d011      	beq.n	8011fc4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011fa0:	69fb      	ldr	r3, [r7, #28]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	685b      	ldr	r3, [r3, #4]
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7f9 f950 	bl	800b24e <lwip_htonl>
 8011fae:	4604      	mov	r4, r0
 8011fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7f9 f949 	bl	800b24e <lwip_htonl>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	dbe6      	blt.n	8011f92 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fca:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fd0:	601a      	str	r2, [r3, #0]
 8011fd2:	e009      	b.n	8011fe8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011fd4:	6a3b      	ldr	r3, [r7, #32]
 8011fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fd8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011fda:	6a3b      	ldr	r3, [r7, #32]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	623b      	str	r3, [r7, #32]
 8011fe0:	e002      	b.n	8011fe8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011fe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fe4:	f7fc fc3f 	bl	800e866 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fec:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d012      	beq.n	801201a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7f9 f927 	bl	800b24e <lwip_htonl>
 8012000:	4602      	mov	r2, r0
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012006:	1ad3      	subs	r3, r2, r3
 8012008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801200a:	8912      	ldrh	r2, [r2, #8]
 801200c:	4413      	add	r3, r2
  while (seg != NULL &&
 801200e:	69ba      	ldr	r2, [r7, #24]
 8012010:	429a      	cmp	r2, r3
 8012012:	f4bf aed9 	bcs.w	8011dc8 <tcp_output+0x160>
 8012016:	e000      	b.n	801201a <tcp_output+0x3b2>
      break;
 8012018:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801201e:	2b00      	cmp	r3, #0
 8012020:	d108      	bne.n	8012034 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2200      	movs	r2, #0
 8012026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801202a:	e004      	b.n	8012036 <tcp_output+0x3ce>
    goto output_done;
 801202c:	bf00      	nop
 801202e:	e002      	b.n	8012036 <tcp_output+0x3ce>
    goto output_done;
 8012030:	bf00      	nop
 8012032:	e000      	b.n	8012036 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012034:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	8b5b      	ldrh	r3, [r3, #26]
 801203a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801203e:	b29a      	uxth	r2, r3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	3728      	adds	r7, #40	; 0x28
 801204a:	46bd      	mov	sp, r7
 801204c:	bdb0      	pop	{r4, r5, r7, pc}
 801204e:	bf00      	nop

08012050 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d106      	bne.n	801206c <tcp_output_segment_busy+0x1c>
 801205e:	4b09      	ldr	r3, [pc, #36]	; (8012084 <tcp_output_segment_busy+0x34>)
 8012060:	f240 529a 	movw	r2, #1434	; 0x59a
 8012064:	4908      	ldr	r1, [pc, #32]	; (8012088 <tcp_output_segment_busy+0x38>)
 8012066:	4809      	ldr	r0, [pc, #36]	; (801208c <tcp_output_segment_busy+0x3c>)
 8012068:	f00f fe30 	bl	8021ccc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	685b      	ldr	r3, [r3, #4]
 8012070:	7b9b      	ldrb	r3, [r3, #14]
 8012072:	2b01      	cmp	r3, #1
 8012074:	d001      	beq.n	801207a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012076:	2301      	movs	r3, #1
 8012078:	e000      	b.n	801207c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801207a:	2300      	movs	r3, #0
}
 801207c:	4618      	mov	r0, r3
 801207e:	3708      	adds	r7, #8
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}
 8012084:	08024a88 	.word	0x08024a88
 8012088:	08025024 	.word	0x08025024
 801208c:	08024adc 	.word	0x08024adc

08012090 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012090:	b5b0      	push	{r4, r5, r7, lr}
 8012092:	b08c      	sub	sp, #48	; 0x30
 8012094:	af04      	add	r7, sp, #16
 8012096:	60f8      	str	r0, [r7, #12]
 8012098:	60b9      	str	r1, [r7, #8]
 801209a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d106      	bne.n	80120b0 <tcp_output_segment+0x20>
 80120a2:	4b63      	ldr	r3, [pc, #396]	; (8012230 <tcp_output_segment+0x1a0>)
 80120a4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80120a8:	4962      	ldr	r1, [pc, #392]	; (8012234 <tcp_output_segment+0x1a4>)
 80120aa:	4863      	ldr	r0, [pc, #396]	; (8012238 <tcp_output_segment+0x1a8>)
 80120ac:	f00f fe0e 	bl	8021ccc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d106      	bne.n	80120c4 <tcp_output_segment+0x34>
 80120b6:	4b5e      	ldr	r3, [pc, #376]	; (8012230 <tcp_output_segment+0x1a0>)
 80120b8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80120bc:	495f      	ldr	r1, [pc, #380]	; (801223c <tcp_output_segment+0x1ac>)
 80120be:	485e      	ldr	r0, [pc, #376]	; (8012238 <tcp_output_segment+0x1a8>)
 80120c0:	f00f fe04 	bl	8021ccc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d106      	bne.n	80120d8 <tcp_output_segment+0x48>
 80120ca:	4b59      	ldr	r3, [pc, #356]	; (8012230 <tcp_output_segment+0x1a0>)
 80120cc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80120d0:	495b      	ldr	r1, [pc, #364]	; (8012240 <tcp_output_segment+0x1b0>)
 80120d2:	4859      	ldr	r0, [pc, #356]	; (8012238 <tcp_output_segment+0x1a8>)
 80120d4:	f00f fdfa 	bl	8021ccc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80120d8:	68f8      	ldr	r0, [r7, #12]
 80120da:	f7ff ffb9 	bl	8012050 <tcp_output_segment_busy>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d001      	beq.n	80120e8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80120e4:	2300      	movs	r3, #0
 80120e6:	e09f      	b.n	8012228 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	68dc      	ldr	r4, [r3, #12]
 80120f0:	4610      	mov	r0, r2
 80120f2:	f7f9 f8ac 	bl	800b24e <lwip_htonl>
 80120f6:	4603      	mov	r3, r0
 80120f8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	68dc      	ldr	r4, [r3, #12]
 8012102:	4610      	mov	r0, r2
 8012104:	f7f9 f88e 	bl	800b224 <lwip_htons>
 8012108:	4603      	mov	r3, r0
 801210a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012110:	68ba      	ldr	r2, [r7, #8]
 8012112:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012114:	441a      	add	r2, r3
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	68db      	ldr	r3, [r3, #12]
 801211e:	3314      	adds	r3, #20
 8012120:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	7a9b      	ldrb	r3, [r3, #10]
 8012126:	f003 0301 	and.w	r3, r3, #1
 801212a:	2b00      	cmp	r3, #0
 801212c:	d015      	beq.n	801215a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	3304      	adds	r3, #4
 8012132:	461a      	mov	r2, r3
 8012134:	6879      	ldr	r1, [r7, #4]
 8012136:	f44f 7006 	mov.w	r0, #536	; 0x218
 801213a:	f7fc fe8b 	bl	800ee54 <tcp_eff_send_mss_netif>
 801213e:	4603      	mov	r3, r0
 8012140:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012142:	8b7b      	ldrh	r3, [r7, #26]
 8012144:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012148:	4618      	mov	r0, r3
 801214a:	f7f9 f880 	bl	800b24e <lwip_htonl>
 801214e:	4602      	mov	r2, r0
 8012150:	69fb      	ldr	r3, [r7, #28]
 8012152:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012154:	69fb      	ldr	r3, [r7, #28]
 8012156:	3304      	adds	r3, #4
 8012158:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012160:	2b00      	cmp	r3, #0
 8012162:	da02      	bge.n	801216a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	2200      	movs	r2, #0
 8012168:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801216e:	2b00      	cmp	r3, #0
 8012170:	d10c      	bne.n	801218c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012172:	4b34      	ldr	r3, [pc, #208]	; (8012244 <tcp_output_segment+0x1b4>)
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	68db      	ldr	r3, [r3, #12]
 801217e:	685b      	ldr	r3, [r3, #4]
 8012180:	4618      	mov	r0, r3
 8012182:	f7f9 f864 	bl	800b24e <lwip_htonl>
 8012186:	4602      	mov	r2, r0
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	68da      	ldr	r2, [r3, #12]
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	1ad3      	subs	r3, r2, r3
 8012198:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	8959      	ldrh	r1, [r3, #10]
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	8b3a      	ldrh	r2, [r7, #24]
 80121a6:	1a8a      	subs	r2, r1, r2
 80121a8:	b292      	uxth	r2, r2
 80121aa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	685b      	ldr	r3, [r3, #4]
 80121b0:	8919      	ldrh	r1, [r3, #8]
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	8b3a      	ldrh	r2, [r7, #24]
 80121b8:	1a8a      	subs	r2, r1, r2
 80121ba:	b292      	uxth	r2, r2
 80121bc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	68fa      	ldr	r2, [r7, #12]
 80121c4:	68d2      	ldr	r2, [r2, #12]
 80121c6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	68db      	ldr	r3, [r3, #12]
 80121cc:	2200      	movs	r2, #0
 80121ce:	741a      	strb	r2, [r3, #16]
 80121d0:	2200      	movs	r2, #0
 80121d2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	f103 0214 	add.w	r2, r3, #20
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	7a9b      	ldrb	r3, [r3, #10]
 80121e0:	009b      	lsls	r3, r3, #2
 80121e2:	f003 0304 	and.w	r3, r3, #4
 80121e6:	4413      	add	r3, r2
 80121e8:	69fa      	ldr	r2, [r7, #28]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d006      	beq.n	80121fc <tcp_output_segment+0x16c>
 80121ee:	4b10      	ldr	r3, [pc, #64]	; (8012230 <tcp_output_segment+0x1a0>)
 80121f0:	f240 621c 	movw	r2, #1564	; 0x61c
 80121f4:	4914      	ldr	r1, [pc, #80]	; (8012248 <tcp_output_segment+0x1b8>)
 80121f6:	4810      	ldr	r0, [pc, #64]	; (8012238 <tcp_output_segment+0x1a8>)
 80121f8:	f00f fd68 	bl	8021ccc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	6858      	ldr	r0, [r3, #4]
 8012200:	68b9      	ldr	r1, [r7, #8]
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	1d1c      	adds	r4, r3, #4
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	7add      	ldrb	r5, [r3, #11]
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	7a9b      	ldrb	r3, [r3, #10]
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	9202      	str	r2, [sp, #8]
 8012212:	2206      	movs	r2, #6
 8012214:	9201      	str	r2, [sp, #4]
 8012216:	9300      	str	r3, [sp, #0]
 8012218:	462b      	mov	r3, r5
 801221a:	4622      	mov	r2, r4
 801221c:	f003 f96c 	bl	80154f8 <ip4_output_if>
 8012220:	4603      	mov	r3, r0
 8012222:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012224:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012228:	4618      	mov	r0, r3
 801222a:	3720      	adds	r7, #32
 801222c:	46bd      	mov	sp, r7
 801222e:	bdb0      	pop	{r4, r5, r7, pc}
 8012230:	08024a88 	.word	0x08024a88
 8012234:	0802504c 	.word	0x0802504c
 8012238:	08024adc 	.word	0x08024adc
 801223c:	0802506c 	.word	0x0802506c
 8012240:	0802508c 	.word	0x0802508c
 8012244:	20040b40 	.word	0x20040b40
 8012248:	080250b0 	.word	0x080250b0

0801224c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801224c:	b5b0      	push	{r4, r5, r7, lr}
 801224e:	b084      	sub	sp, #16
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d106      	bne.n	8012268 <tcp_rexmit_rto_prepare+0x1c>
 801225a:	4b31      	ldr	r3, [pc, #196]	; (8012320 <tcp_rexmit_rto_prepare+0xd4>)
 801225c:	f240 6263 	movw	r2, #1635	; 0x663
 8012260:	4930      	ldr	r1, [pc, #192]	; (8012324 <tcp_rexmit_rto_prepare+0xd8>)
 8012262:	4831      	ldr	r0, [pc, #196]	; (8012328 <tcp_rexmit_rto_prepare+0xdc>)
 8012264:	f00f fd32 	bl	8021ccc <iprintf>

  if (pcb->unacked == NULL) {
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801226c:	2b00      	cmp	r3, #0
 801226e:	d102      	bne.n	8012276 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012270:	f06f 0305 	mvn.w	r3, #5
 8012274:	e050      	b.n	8012318 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801227a:	60fb      	str	r3, [r7, #12]
 801227c:	e00b      	b.n	8012296 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801227e:	68f8      	ldr	r0, [r7, #12]
 8012280:	f7ff fee6 	bl	8012050 <tcp_output_segment_busy>
 8012284:	4603      	mov	r3, r0
 8012286:	2b00      	cmp	r3, #0
 8012288:	d002      	beq.n	8012290 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801228a:	f06f 0305 	mvn.w	r3, #5
 801228e:	e043      	b.n	8012318 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	60fb      	str	r3, [r7, #12]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d1ef      	bne.n	801227e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801229e:	68f8      	ldr	r0, [r7, #12]
 80122a0:	f7ff fed6 	bl	8012050 <tcp_output_segment_busy>
 80122a4:	4603      	mov	r3, r0
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d002      	beq.n	80122b0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80122aa:	f06f 0305 	mvn.w	r3, #5
 80122ae:	e033      	b.n	8012318 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2200      	movs	r2, #0
 80122c4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	8b5b      	ldrh	r3, [r3, #26]
 80122ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80122ce:	b29a      	uxth	r2, r3
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	4618      	mov	r0, r3
 80122dc:	f7f8 ffb7 	bl	800b24e <lwip_htonl>
 80122e0:	4604      	mov	r4, r0
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	891b      	ldrh	r3, [r3, #8]
 80122e6:	461d      	mov	r5, r3
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	68db      	ldr	r3, [r3, #12]
 80122ec:	899b      	ldrh	r3, [r3, #12]
 80122ee:	b29b      	uxth	r3, r3
 80122f0:	4618      	mov	r0, r3
 80122f2:	f7f8 ff97 	bl	800b224 <lwip_htons>
 80122f6:	4603      	mov	r3, r0
 80122f8:	b2db      	uxtb	r3, r3
 80122fa:	f003 0303 	and.w	r3, r3, #3
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d001      	beq.n	8012306 <tcp_rexmit_rto_prepare+0xba>
 8012302:	2301      	movs	r3, #1
 8012304:	e000      	b.n	8012308 <tcp_rexmit_rto_prepare+0xbc>
 8012306:	2300      	movs	r3, #0
 8012308:	442b      	add	r3, r5
 801230a:	18e2      	adds	r2, r4, r3
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2200      	movs	r2, #0
 8012314:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012316:	2300      	movs	r3, #0
}
 8012318:	4618      	mov	r0, r3
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bdb0      	pop	{r4, r5, r7, pc}
 8012320:	08024a88 	.word	0x08024a88
 8012324:	080250c4 	.word	0x080250c4
 8012328:	08024adc 	.word	0x08024adc

0801232c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d106      	bne.n	8012348 <tcp_rexmit_rto_commit+0x1c>
 801233a:	4b0d      	ldr	r3, [pc, #52]	; (8012370 <tcp_rexmit_rto_commit+0x44>)
 801233c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012340:	490c      	ldr	r1, [pc, #48]	; (8012374 <tcp_rexmit_rto_commit+0x48>)
 8012342:	480d      	ldr	r0, [pc, #52]	; (8012378 <tcp_rexmit_rto_commit+0x4c>)
 8012344:	f00f fcc2 	bl	8021ccc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801234e:	2bff      	cmp	r3, #255	; 0xff
 8012350:	d007      	beq.n	8012362 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012358:	3301      	adds	r3, #1
 801235a:	b2da      	uxtb	r2, r3
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f7ff fc80 	bl	8011c68 <tcp_output>
}
 8012368:	bf00      	nop
 801236a:	3708      	adds	r7, #8
 801236c:	46bd      	mov	sp, r7
 801236e:	bd80      	pop	{r7, pc}
 8012370:	08024a88 	.word	0x08024a88
 8012374:	080250e8 	.word	0x080250e8
 8012378:	08024adc 	.word	0x08024adc

0801237c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d106      	bne.n	8012398 <tcp_rexmit_rto+0x1c>
 801238a:	4b0a      	ldr	r3, [pc, #40]	; (80123b4 <tcp_rexmit_rto+0x38>)
 801238c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012390:	4909      	ldr	r1, [pc, #36]	; (80123b8 <tcp_rexmit_rto+0x3c>)
 8012392:	480a      	ldr	r0, [pc, #40]	; (80123bc <tcp_rexmit_rto+0x40>)
 8012394:	f00f fc9a 	bl	8021ccc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f7ff ff57 	bl	801224c <tcp_rexmit_rto_prepare>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d102      	bne.n	80123aa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f7ff ffc1 	bl	801232c <tcp_rexmit_rto_commit>
  }
}
 80123aa:	bf00      	nop
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	08024a88 	.word	0x08024a88
 80123b8:	0802510c 	.word	0x0802510c
 80123bc:	08024adc 	.word	0x08024adc

080123c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80123c0:	b590      	push	{r4, r7, lr}
 80123c2:	b085      	sub	sp, #20
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d106      	bne.n	80123dc <tcp_rexmit+0x1c>
 80123ce:	4b2f      	ldr	r3, [pc, #188]	; (801248c <tcp_rexmit+0xcc>)
 80123d0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80123d4:	492e      	ldr	r1, [pc, #184]	; (8012490 <tcp_rexmit+0xd0>)
 80123d6:	482f      	ldr	r0, [pc, #188]	; (8012494 <tcp_rexmit+0xd4>)
 80123d8:	f00f fc78 	bl	8021ccc <iprintf>

  if (pcb->unacked == NULL) {
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d102      	bne.n	80123ea <tcp_rexmit+0x2a>
    return ERR_VAL;
 80123e4:	f06f 0305 	mvn.w	r3, #5
 80123e8:	e04c      	b.n	8012484 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80123f0:	68b8      	ldr	r0, [r7, #8]
 80123f2:	f7ff fe2d 	bl	8012050 <tcp_output_segment_busy>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d002      	beq.n	8012402 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80123fc:	f06f 0305 	mvn.w	r3, #5
 8012400:	e040      	b.n	8012484 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	681a      	ldr	r2, [r3, #0]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	336c      	adds	r3, #108	; 0x6c
 801240e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012410:	e002      	b.n	8012418 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d011      	beq.n	8012444 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	4618      	mov	r0, r3
 801242a:	f7f8 ff10 	bl	800b24e <lwip_htonl>
 801242e:	4604      	mov	r4, r0
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	68db      	ldr	r3, [r3, #12]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	4618      	mov	r0, r3
 8012438:	f7f8 ff09 	bl	800b24e <lwip_htonl>
 801243c:	4603      	mov	r3, r0
 801243e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012440:	2b00      	cmp	r3, #0
 8012442:	dbe6      	blt.n	8012412 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	681a      	ldr	r2, [r3, #0]
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	68ba      	ldr	r2, [r7, #8]
 8012450:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d103      	bne.n	8012462 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2200      	movs	r2, #0
 801245e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012468:	2bff      	cmp	r3, #255	; 0xff
 801246a:	d007      	beq.n	801247c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012472:	3301      	adds	r3, #1
 8012474:	b2da      	uxtb	r2, r3
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012482:	2300      	movs	r3, #0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3714      	adds	r7, #20
 8012488:	46bd      	mov	sp, r7
 801248a:	bd90      	pop	{r4, r7, pc}
 801248c:	08024a88 	.word	0x08024a88
 8012490:	08025128 	.word	0x08025128
 8012494:	08024adc 	.word	0x08024adc

08012498 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d106      	bne.n	80124b4 <tcp_rexmit_fast+0x1c>
 80124a6:	4b2a      	ldr	r3, [pc, #168]	; (8012550 <tcp_rexmit_fast+0xb8>)
 80124a8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80124ac:	4929      	ldr	r1, [pc, #164]	; (8012554 <tcp_rexmit_fast+0xbc>)
 80124ae:	482a      	ldr	r0, [pc, #168]	; (8012558 <tcp_rexmit_fast+0xc0>)
 80124b0:	f00f fc0c 	bl	8021ccc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d045      	beq.n	8012548 <tcp_rexmit_fast+0xb0>
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	8b5b      	ldrh	r3, [r3, #26]
 80124c0:	f003 0304 	and.w	r3, r3, #4
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d13f      	bne.n	8012548 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f7ff ff79 	bl	80123c0 <tcp_rexmit>
 80124ce:	4603      	mov	r3, r0
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d139      	bne.n	8012548 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124e0:	4293      	cmp	r3, r2
 80124e2:	bf28      	it	cs
 80124e4:	4613      	movcs	r3, r2
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	da00      	bge.n	80124ee <tcp_rexmit_fast+0x56>
 80124ec:	3301      	adds	r3, #1
 80124ee:	105b      	asrs	r3, r3, #1
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80124fe:	461a      	mov	r2, r3
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012504:	005b      	lsls	r3, r3, #1
 8012506:	429a      	cmp	r2, r3
 8012508:	d206      	bcs.n	8012518 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801250e:	005b      	lsls	r3, r3, #1
 8012510:	b29a      	uxth	r2, r3
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012522:	4619      	mov	r1, r3
 8012524:	0049      	lsls	r1, r1, #1
 8012526:	440b      	add	r3, r1
 8012528:	b29b      	uxth	r3, r3
 801252a:	4413      	add	r3, r2
 801252c:	b29a      	uxth	r2, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	8b5b      	ldrh	r3, [r3, #26]
 8012538:	f043 0304 	orr.w	r3, r3, #4
 801253c:	b29a      	uxth	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	2200      	movs	r2, #0
 8012546:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012548:	bf00      	nop
 801254a:	3708      	adds	r7, #8
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	08024a88 	.word	0x08024a88
 8012554:	08025140 	.word	0x08025140
 8012558:	08024adc 	.word	0x08024adc

0801255c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b086      	sub	sp, #24
 8012560:	af00      	add	r7, sp, #0
 8012562:	60f8      	str	r0, [r7, #12]
 8012564:	607b      	str	r3, [r7, #4]
 8012566:	460b      	mov	r3, r1
 8012568:	817b      	strh	r3, [r7, #10]
 801256a:	4613      	mov	r3, r2
 801256c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801256e:	897a      	ldrh	r2, [r7, #10]
 8012570:	893b      	ldrh	r3, [r7, #8]
 8012572:	4413      	add	r3, r2
 8012574:	b29b      	uxth	r3, r3
 8012576:	3314      	adds	r3, #20
 8012578:	b29b      	uxth	r3, r3
 801257a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801257e:	4619      	mov	r1, r3
 8012580:	2022      	movs	r0, #34	; 0x22
 8012582:	f7fa fa81 	bl	800ca88 <pbuf_alloc>
 8012586:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d04d      	beq.n	801262a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801258e:	897b      	ldrh	r3, [r7, #10]
 8012590:	3313      	adds	r3, #19
 8012592:	697a      	ldr	r2, [r7, #20]
 8012594:	8952      	ldrh	r2, [r2, #10]
 8012596:	4293      	cmp	r3, r2
 8012598:	db06      	blt.n	80125a8 <tcp_output_alloc_header_common+0x4c>
 801259a:	4b26      	ldr	r3, [pc, #152]	; (8012634 <tcp_output_alloc_header_common+0xd8>)
 801259c:	f240 7223 	movw	r2, #1827	; 0x723
 80125a0:	4925      	ldr	r1, [pc, #148]	; (8012638 <tcp_output_alloc_header_common+0xdc>)
 80125a2:	4826      	ldr	r0, [pc, #152]	; (801263c <tcp_output_alloc_header_common+0xe0>)
 80125a4:	f00f fb92 	bl	8021ccc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80125ae:	8c3b      	ldrh	r3, [r7, #32]
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7f8 fe37 	bl	800b224 <lwip_htons>
 80125b6:	4603      	mov	r3, r0
 80125b8:	461a      	mov	r2, r3
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80125be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7f8 fe2f 	bl	800b224 <lwip_htons>
 80125c6:	4603      	mov	r3, r0
 80125c8:	461a      	mov	r2, r3
 80125ca:	693b      	ldr	r3, [r7, #16]
 80125cc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80125d4:	68f8      	ldr	r0, [r7, #12]
 80125d6:	f7f8 fe3a 	bl	800b24e <lwip_htonl>
 80125da:	4602      	mov	r2, r0
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80125e0:	897b      	ldrh	r3, [r7, #10]
 80125e2:	089b      	lsrs	r3, r3, #2
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	3305      	adds	r3, #5
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	031b      	lsls	r3, r3, #12
 80125ec:	b29a      	uxth	r2, r3
 80125ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80125f2:	b29b      	uxth	r3, r3
 80125f4:	4313      	orrs	r3, r2
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7f8 fe13 	bl	800b224 <lwip_htons>
 80125fe:	4603      	mov	r3, r0
 8012600:	461a      	mov	r2, r3
 8012602:	693b      	ldr	r3, [r7, #16]
 8012604:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012606:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012608:	4618      	mov	r0, r3
 801260a:	f7f8 fe0b 	bl	800b224 <lwip_htons>
 801260e:	4603      	mov	r3, r0
 8012610:	461a      	mov	r2, r3
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	2200      	movs	r2, #0
 801261a:	741a      	strb	r2, [r3, #16]
 801261c:	2200      	movs	r2, #0
 801261e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	2200      	movs	r2, #0
 8012624:	749a      	strb	r2, [r3, #18]
 8012626:	2200      	movs	r2, #0
 8012628:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801262a:	697b      	ldr	r3, [r7, #20]
}
 801262c:	4618      	mov	r0, r3
 801262e:	3718      	adds	r7, #24
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}
 8012634:	08024a88 	.word	0x08024a88
 8012638:	08025160 	.word	0x08025160
 801263c:	08024adc 	.word	0x08024adc

08012640 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012640:	b5b0      	push	{r4, r5, r7, lr}
 8012642:	b08a      	sub	sp, #40	; 0x28
 8012644:	af04      	add	r7, sp, #16
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	607b      	str	r3, [r7, #4]
 801264a:	460b      	mov	r3, r1
 801264c:	817b      	strh	r3, [r7, #10]
 801264e:	4613      	mov	r3, r2
 8012650:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d106      	bne.n	8012666 <tcp_output_alloc_header+0x26>
 8012658:	4b15      	ldr	r3, [pc, #84]	; (80126b0 <tcp_output_alloc_header+0x70>)
 801265a:	f240 7242 	movw	r2, #1858	; 0x742
 801265e:	4915      	ldr	r1, [pc, #84]	; (80126b4 <tcp_output_alloc_header+0x74>)
 8012660:	4815      	ldr	r0, [pc, #84]	; (80126b8 <tcp_output_alloc_header+0x78>)
 8012662:	f00f fb33 	bl	8021ccc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	8adb      	ldrh	r3, [r3, #22]
 801266e:	68fa      	ldr	r2, [r7, #12]
 8012670:	8b12      	ldrh	r2, [r2, #24]
 8012672:	68f9      	ldr	r1, [r7, #12]
 8012674:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012676:	893d      	ldrh	r5, [r7, #8]
 8012678:	897c      	ldrh	r4, [r7, #10]
 801267a:	9103      	str	r1, [sp, #12]
 801267c:	2110      	movs	r1, #16
 801267e:	9102      	str	r1, [sp, #8]
 8012680:	9201      	str	r2, [sp, #4]
 8012682:	9300      	str	r3, [sp, #0]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	462a      	mov	r2, r5
 8012688:	4621      	mov	r1, r4
 801268a:	f7ff ff67 	bl	801255c <tcp_output_alloc_header_common>
 801268e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d006      	beq.n	80126a4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801269a:	68fa      	ldr	r2, [r7, #12]
 801269c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801269e:	441a      	add	r2, r3
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80126a4:	697b      	ldr	r3, [r7, #20]
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3718      	adds	r7, #24
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bdb0      	pop	{r4, r5, r7, pc}
 80126ae:	bf00      	nop
 80126b0:	08024a88 	.word	0x08024a88
 80126b4:	08025190 	.word	0x08025190
 80126b8:	08024adc 	.word	0x08024adc

080126bc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b088      	sub	sp, #32
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	60f8      	str	r0, [r7, #12]
 80126c4:	60b9      	str	r1, [r7, #8]
 80126c6:	4611      	mov	r1, r2
 80126c8:	461a      	mov	r2, r3
 80126ca:	460b      	mov	r3, r1
 80126cc:	71fb      	strb	r3, [r7, #7]
 80126ce:	4613      	mov	r3, r2
 80126d0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80126d2:	2300      	movs	r3, #0
 80126d4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d106      	bne.n	80126ea <tcp_output_fill_options+0x2e>
 80126dc:	4b13      	ldr	r3, [pc, #76]	; (801272c <tcp_output_fill_options+0x70>)
 80126de:	f240 7256 	movw	r2, #1878	; 0x756
 80126e2:	4913      	ldr	r1, [pc, #76]	; (8012730 <tcp_output_fill_options+0x74>)
 80126e4:	4813      	ldr	r0, [pc, #76]	; (8012734 <tcp_output_fill_options+0x78>)
 80126e6:	f00f faf1 	bl	8021ccc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	3314      	adds	r3, #20
 80126f4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80126f6:	69bb      	ldr	r3, [r7, #24]
 80126f8:	f103 0214 	add.w	r2, r3, #20
 80126fc:	8bfb      	ldrh	r3, [r7, #30]
 80126fe:	009b      	lsls	r3, r3, #2
 8012700:	4619      	mov	r1, r3
 8012702:	79fb      	ldrb	r3, [r7, #7]
 8012704:	009b      	lsls	r3, r3, #2
 8012706:	f003 0304 	and.w	r3, r3, #4
 801270a:	440b      	add	r3, r1
 801270c:	4413      	add	r3, r2
 801270e:	697a      	ldr	r2, [r7, #20]
 8012710:	429a      	cmp	r2, r3
 8012712:	d006      	beq.n	8012722 <tcp_output_fill_options+0x66>
 8012714:	4b05      	ldr	r3, [pc, #20]	; (801272c <tcp_output_fill_options+0x70>)
 8012716:	f240 7275 	movw	r2, #1909	; 0x775
 801271a:	4907      	ldr	r1, [pc, #28]	; (8012738 <tcp_output_fill_options+0x7c>)
 801271c:	4805      	ldr	r0, [pc, #20]	; (8012734 <tcp_output_fill_options+0x78>)
 801271e:	f00f fad5 	bl	8021ccc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012722:	bf00      	nop
 8012724:	3720      	adds	r7, #32
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	08024a88 	.word	0x08024a88
 8012730:	080251b8 	.word	0x080251b8
 8012734:	08024adc 	.word	0x08024adc
 8012738:	080250b0 	.word	0x080250b0

0801273c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b08a      	sub	sp, #40	; 0x28
 8012740:	af04      	add	r7, sp, #16
 8012742:	60f8      	str	r0, [r7, #12]
 8012744:	60b9      	str	r1, [r7, #8]
 8012746:	607a      	str	r2, [r7, #4]
 8012748:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d106      	bne.n	801275e <tcp_output_control_segment+0x22>
 8012750:	4b1c      	ldr	r3, [pc, #112]	; (80127c4 <tcp_output_control_segment+0x88>)
 8012752:	f240 7287 	movw	r2, #1927	; 0x787
 8012756:	491c      	ldr	r1, [pc, #112]	; (80127c8 <tcp_output_control_segment+0x8c>)
 8012758:	481c      	ldr	r0, [pc, #112]	; (80127cc <tcp_output_control_segment+0x90>)
 801275a:	f00f fab7 	bl	8021ccc <iprintf>

  netif = tcp_route(pcb, src, dst);
 801275e:	683a      	ldr	r2, [r7, #0]
 8012760:	6879      	ldr	r1, [r7, #4]
 8012762:	68f8      	ldr	r0, [r7, #12]
 8012764:	f7fe ff40 	bl	80115e8 <tcp_route>
 8012768:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d102      	bne.n	8012776 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012770:	23fc      	movs	r3, #252	; 0xfc
 8012772:	75fb      	strb	r3, [r7, #23]
 8012774:	e01c      	b.n	80127b0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d006      	beq.n	801278a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	7adb      	ldrb	r3, [r3, #11]
 8012780:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	7a9b      	ldrb	r3, [r3, #10]
 8012786:	757b      	strb	r3, [r7, #21]
 8012788:	e003      	b.n	8012792 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801278a:	23ff      	movs	r3, #255	; 0xff
 801278c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801278e:	2300      	movs	r3, #0
 8012790:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012792:	7dba      	ldrb	r2, [r7, #22]
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	9302      	str	r3, [sp, #8]
 8012798:	2306      	movs	r3, #6
 801279a:	9301      	str	r3, [sp, #4]
 801279c:	7d7b      	ldrb	r3, [r7, #21]
 801279e:	9300      	str	r3, [sp, #0]
 80127a0:	4613      	mov	r3, r2
 80127a2:	683a      	ldr	r2, [r7, #0]
 80127a4:	6879      	ldr	r1, [r7, #4]
 80127a6:	68b8      	ldr	r0, [r7, #8]
 80127a8:	f002 fea6 	bl	80154f8 <ip4_output_if>
 80127ac:	4603      	mov	r3, r0
 80127ae:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80127b0:	68b8      	ldr	r0, [r7, #8]
 80127b2:	f7fa fc4d 	bl	800d050 <pbuf_free>
  return err;
 80127b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127ba:	4618      	mov	r0, r3
 80127bc:	3718      	adds	r7, #24
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	08024a88 	.word	0x08024a88
 80127c8:	080251e0 	.word	0x080251e0
 80127cc:	08024adc 	.word	0x08024adc

080127d0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80127d0:	b590      	push	{r4, r7, lr}
 80127d2:	b08b      	sub	sp, #44	; 0x2c
 80127d4:	af04      	add	r7, sp, #16
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	607a      	str	r2, [r7, #4]
 80127dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d106      	bne.n	80127f2 <tcp_rst+0x22>
 80127e4:	4b1f      	ldr	r3, [pc, #124]	; (8012864 <tcp_rst+0x94>)
 80127e6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80127ea:	491f      	ldr	r1, [pc, #124]	; (8012868 <tcp_rst+0x98>)
 80127ec:	481f      	ldr	r0, [pc, #124]	; (801286c <tcp_rst+0x9c>)
 80127ee:	f00f fa6d 	bl	8021ccc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80127f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d106      	bne.n	8012806 <tcp_rst+0x36>
 80127f8:	4b1a      	ldr	r3, [pc, #104]	; (8012864 <tcp_rst+0x94>)
 80127fa:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80127fe:	491c      	ldr	r1, [pc, #112]	; (8012870 <tcp_rst+0xa0>)
 8012800:	481a      	ldr	r0, [pc, #104]	; (801286c <tcp_rst+0x9c>)
 8012802:	f00f fa63 	bl	8021ccc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012806:	2300      	movs	r3, #0
 8012808:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801280a:	f246 0308 	movw	r3, #24584	; 0x6008
 801280e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012810:	7dfb      	ldrb	r3, [r7, #23]
 8012812:	b29c      	uxth	r4, r3
 8012814:	68b8      	ldr	r0, [r7, #8]
 8012816:	f7f8 fd1a 	bl	800b24e <lwip_htonl>
 801281a:	4602      	mov	r2, r0
 801281c:	8abb      	ldrh	r3, [r7, #20]
 801281e:	9303      	str	r3, [sp, #12]
 8012820:	2314      	movs	r3, #20
 8012822:	9302      	str	r3, [sp, #8]
 8012824:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012826:	9301      	str	r3, [sp, #4]
 8012828:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801282a:	9300      	str	r3, [sp, #0]
 801282c:	4613      	mov	r3, r2
 801282e:	2200      	movs	r2, #0
 8012830:	4621      	mov	r1, r4
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f7ff fe92 	bl	801255c <tcp_output_alloc_header_common>
 8012838:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00c      	beq.n	801285a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012840:	7dfb      	ldrb	r3, [r7, #23]
 8012842:	2200      	movs	r2, #0
 8012844:	6939      	ldr	r1, [r7, #16]
 8012846:	68f8      	ldr	r0, [r7, #12]
 8012848:	f7ff ff38 	bl	80126bc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801284e:	683a      	ldr	r2, [r7, #0]
 8012850:	6939      	ldr	r1, [r7, #16]
 8012852:	68f8      	ldr	r0, [r7, #12]
 8012854:	f7ff ff72 	bl	801273c <tcp_output_control_segment>
 8012858:	e000      	b.n	801285c <tcp_rst+0x8c>
    return;
 801285a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801285c:	371c      	adds	r7, #28
 801285e:	46bd      	mov	sp, r7
 8012860:	bd90      	pop	{r4, r7, pc}
 8012862:	bf00      	nop
 8012864:	08024a88 	.word	0x08024a88
 8012868:	0802520c 	.word	0x0802520c
 801286c:	08024adc 	.word	0x08024adc
 8012870:	08025228 	.word	0x08025228

08012874 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012874:	b590      	push	{r4, r7, lr}
 8012876:	b087      	sub	sp, #28
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801287c:	2300      	movs	r3, #0
 801287e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012880:	2300      	movs	r3, #0
 8012882:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d106      	bne.n	8012898 <tcp_send_empty_ack+0x24>
 801288a:	4b28      	ldr	r3, [pc, #160]	; (801292c <tcp_send_empty_ack+0xb8>)
 801288c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012890:	4927      	ldr	r1, [pc, #156]	; (8012930 <tcp_send_empty_ack+0xbc>)
 8012892:	4828      	ldr	r0, [pc, #160]	; (8012934 <tcp_send_empty_ack+0xc0>)
 8012894:	f00f fa1a 	bl	8021ccc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012898:	7dfb      	ldrb	r3, [r7, #23]
 801289a:	009b      	lsls	r3, r3, #2
 801289c:	b2db      	uxtb	r3, r3
 801289e:	f003 0304 	and.w	r3, r3, #4
 80128a2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80128a4:	7d7b      	ldrb	r3, [r7, #21]
 80128a6:	b29c      	uxth	r4, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7f8 fcce 	bl	800b24e <lwip_htonl>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2200      	movs	r2, #0
 80128b6:	4621      	mov	r1, r4
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f7ff fec1 	bl	8012640 <tcp_output_alloc_header>
 80128be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80128c0:	693b      	ldr	r3, [r7, #16]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d109      	bne.n	80128da <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	8b5b      	ldrh	r3, [r3, #26]
 80128ca:	f043 0303 	orr.w	r3, r3, #3
 80128ce:	b29a      	uxth	r2, r3
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80128d4:	f06f 0301 	mvn.w	r3, #1
 80128d8:	e023      	b.n	8012922 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80128da:	7dbb      	ldrb	r3, [r7, #22]
 80128dc:	7dfa      	ldrb	r2, [r7, #23]
 80128de:	6939      	ldr	r1, [r7, #16]
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7ff feeb 	bl	80126bc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	3304      	adds	r3, #4
 80128ec:	6939      	ldr	r1, [r7, #16]
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f7ff ff24 	bl	801273c <tcp_output_control_segment>
 80128f4:	4603      	mov	r3, r0
 80128f6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80128f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d007      	beq.n	8012910 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	8b5b      	ldrh	r3, [r3, #26]
 8012904:	f043 0303 	orr.w	r3, r3, #3
 8012908:	b29a      	uxth	r2, r3
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	835a      	strh	r2, [r3, #26]
 801290e:	e006      	b.n	801291e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	8b5b      	ldrh	r3, [r3, #26]
 8012914:	f023 0303 	bic.w	r3, r3, #3
 8012918:	b29a      	uxth	r2, r3
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012922:	4618      	mov	r0, r3
 8012924:	371c      	adds	r7, #28
 8012926:	46bd      	mov	sp, r7
 8012928:	bd90      	pop	{r4, r7, pc}
 801292a:	bf00      	nop
 801292c:	08024a88 	.word	0x08024a88
 8012930:	08025244 	.word	0x08025244
 8012934:	08024adc 	.word	0x08024adc

08012938 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012938:	b590      	push	{r4, r7, lr}
 801293a:	b087      	sub	sp, #28
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012940:	2300      	movs	r3, #0
 8012942:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d106      	bne.n	8012958 <tcp_keepalive+0x20>
 801294a:	4b18      	ldr	r3, [pc, #96]	; (80129ac <tcp_keepalive+0x74>)
 801294c:	f640 0224 	movw	r2, #2084	; 0x824
 8012950:	4917      	ldr	r1, [pc, #92]	; (80129b0 <tcp_keepalive+0x78>)
 8012952:	4818      	ldr	r0, [pc, #96]	; (80129b4 <tcp_keepalive+0x7c>)
 8012954:	f00f f9ba 	bl	8021ccc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012958:	7dfb      	ldrb	r3, [r7, #23]
 801295a:	b29c      	uxth	r4, r3
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012960:	3b01      	subs	r3, #1
 8012962:	4618      	mov	r0, r3
 8012964:	f7f8 fc73 	bl	800b24e <lwip_htonl>
 8012968:	4603      	mov	r3, r0
 801296a:	2200      	movs	r2, #0
 801296c:	4621      	mov	r1, r4
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f7ff fe66 	bl	8012640 <tcp_output_alloc_header>
 8012974:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d102      	bne.n	8012982 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801297c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012980:	e010      	b.n	80129a4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012982:	7dfb      	ldrb	r3, [r7, #23]
 8012984:	2200      	movs	r2, #0
 8012986:	6939      	ldr	r1, [r7, #16]
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	f7ff fe97 	bl	80126bc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	3304      	adds	r3, #4
 8012994:	6939      	ldr	r1, [r7, #16]
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f7ff fed0 	bl	801273c <tcp_output_control_segment>
 801299c:	4603      	mov	r3, r0
 801299e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80129a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	371c      	adds	r7, #28
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd90      	pop	{r4, r7, pc}
 80129ac:	08024a88 	.word	0x08024a88
 80129b0:	08025264 	.word	0x08025264
 80129b4:	08024adc 	.word	0x08024adc

080129b8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80129b8:	b590      	push	{r4, r7, lr}
 80129ba:	b08b      	sub	sp, #44	; 0x2c
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80129c0:	2300      	movs	r3, #0
 80129c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d106      	bne.n	80129da <tcp_zero_window_probe+0x22>
 80129cc:	4b4c      	ldr	r3, [pc, #304]	; (8012b00 <tcp_zero_window_probe+0x148>)
 80129ce:	f640 024f 	movw	r2, #2127	; 0x84f
 80129d2:	494c      	ldr	r1, [pc, #304]	; (8012b04 <tcp_zero_window_probe+0x14c>)
 80129d4:	484c      	ldr	r0, [pc, #304]	; (8012b08 <tcp_zero_window_probe+0x150>)
 80129d6:	f00f f979 	bl	8021ccc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129de:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80129e0:	6a3b      	ldr	r3, [r7, #32]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d101      	bne.n	80129ea <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80129e6:	2300      	movs	r3, #0
 80129e8:	e086      	b.n	8012af8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80129f0:	2bff      	cmp	r3, #255	; 0xff
 80129f2:	d007      	beq.n	8012a04 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80129fa:	3301      	adds	r3, #1
 80129fc:	b2da      	uxtb	r2, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012a04:	6a3b      	ldr	r3, [r7, #32]
 8012a06:	68db      	ldr	r3, [r3, #12]
 8012a08:	899b      	ldrh	r3, [r3, #12]
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7f8 fc09 	bl	800b224 <lwip_htons>
 8012a12:	4603      	mov	r3, r0
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	f003 0301 	and.w	r3, r3, #1
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d005      	beq.n	8012a2a <tcp_zero_window_probe+0x72>
 8012a1e:	6a3b      	ldr	r3, [r7, #32]
 8012a20:	891b      	ldrh	r3, [r3, #8]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d101      	bne.n	8012a2a <tcp_zero_window_probe+0x72>
 8012a26:	2301      	movs	r3, #1
 8012a28:	e000      	b.n	8012a2c <tcp_zero_window_probe+0x74>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012a2e:	7ffb      	ldrb	r3, [r7, #31]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	bf0c      	ite	eq
 8012a34:	2301      	moveq	r3, #1
 8012a36:	2300      	movne	r3, #0
 8012a38:	b2db      	uxtb	r3, r3
 8012a3a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a40:	b299      	uxth	r1, r3
 8012a42:	6a3b      	ldr	r3, [r7, #32]
 8012a44:	68db      	ldr	r3, [r3, #12]
 8012a46:	685b      	ldr	r3, [r3, #4]
 8012a48:	8bba      	ldrh	r2, [r7, #28]
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f7ff fdf8 	bl	8012640 <tcp_output_alloc_header>
 8012a50:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012a52:	69bb      	ldr	r3, [r7, #24]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d102      	bne.n	8012a5e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a5c:	e04c      	b.n	8012af8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012a5e:	69bb      	ldr	r3, [r7, #24]
 8012a60:	685b      	ldr	r3, [r3, #4]
 8012a62:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012a64:	7ffb      	ldrb	r3, [r7, #31]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d011      	beq.n	8012a8e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012a6a:	697b      	ldr	r3, [r7, #20]
 8012a6c:	899b      	ldrh	r3, [r3, #12]
 8012a6e:	b29b      	uxth	r3, r3
 8012a70:	b21b      	sxth	r3, r3
 8012a72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012a76:	b21c      	sxth	r4, r3
 8012a78:	2011      	movs	r0, #17
 8012a7a:	f7f8 fbd3 	bl	800b224 <lwip_htons>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	b21b      	sxth	r3, r3
 8012a82:	4323      	orrs	r3, r4
 8012a84:	b21b      	sxth	r3, r3
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	819a      	strh	r2, [r3, #12]
 8012a8c:	e010      	b.n	8012ab0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012a8e:	69bb      	ldr	r3, [r7, #24]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	3314      	adds	r3, #20
 8012a94:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012a96:	6a3b      	ldr	r3, [r7, #32]
 8012a98:	6858      	ldr	r0, [r3, #4]
 8012a9a:	6a3b      	ldr	r3, [r7, #32]
 8012a9c:	685b      	ldr	r3, [r3, #4]
 8012a9e:	891a      	ldrh	r2, [r3, #8]
 8012aa0:	6a3b      	ldr	r3, [r7, #32]
 8012aa2:	891b      	ldrh	r3, [r3, #8]
 8012aa4:	1ad3      	subs	r3, r2, r3
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	2201      	movs	r2, #1
 8012aaa:	6939      	ldr	r1, [r7, #16]
 8012aac:	f7fa fcd6 	bl	800d45c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012ab0:	6a3b      	ldr	r3, [r7, #32]
 8012ab2:	68db      	ldr	r3, [r3, #12]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	f7f8 fbc9 	bl	800b24e <lwip_htonl>
 8012abc:	4603      	mov	r3, r0
 8012abe:	3301      	adds	r3, #1
 8012ac0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	1ad3      	subs	r3, r2, r3
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	da02      	bge.n	8012ad4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	68fa      	ldr	r2, [r7, #12]
 8012ad2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ad8:	2200      	movs	r2, #0
 8012ada:	69b9      	ldr	r1, [r7, #24]
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f7ff fded 	bl	80126bc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	3304      	adds	r3, #4
 8012ae8:	69b9      	ldr	r1, [r7, #24]
 8012aea:	6878      	ldr	r0, [r7, #4]
 8012aec:	f7ff fe26 	bl	801273c <tcp_output_control_segment>
 8012af0:	4603      	mov	r3, r0
 8012af2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012af4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	372c      	adds	r7, #44	; 0x2c
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd90      	pop	{r4, r7, pc}
 8012b00:	08024a88 	.word	0x08024a88
 8012b04:	08025280 	.word	0x08025280
 8012b08:	08024adc 	.word	0x08024adc

08012b0c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012b14:	f7fa ff0c 	bl	800d930 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012b18:	4b0a      	ldr	r3, [pc, #40]	; (8012b44 <tcpip_tcp_timer+0x38>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d103      	bne.n	8012b28 <tcpip_tcp_timer+0x1c>
 8012b20:	4b09      	ldr	r3, [pc, #36]	; (8012b48 <tcpip_tcp_timer+0x3c>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d005      	beq.n	8012b34 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012b28:	2200      	movs	r2, #0
 8012b2a:	4908      	ldr	r1, [pc, #32]	; (8012b4c <tcpip_tcp_timer+0x40>)
 8012b2c:	20fa      	movs	r0, #250	; 0xfa
 8012b2e:	f000 f8f3 	bl	8012d18 <sys_timeout>
 8012b32:	e003      	b.n	8012b3c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012b34:	4b06      	ldr	r3, [pc, #24]	; (8012b50 <tcpip_tcp_timer+0x44>)
 8012b36:	2200      	movs	r2, #0
 8012b38:	601a      	str	r2, [r3, #0]
  }
}
 8012b3a:	bf00      	nop
 8012b3c:	bf00      	nop
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	20040b4c 	.word	0x20040b4c
 8012b48:	20040b50 	.word	0x20040b50
 8012b4c:	08012b0d 	.word	0x08012b0d
 8012b50:	20040b98 	.word	0x20040b98

08012b54 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012b58:	4b0a      	ldr	r3, [pc, #40]	; (8012b84 <tcp_timer_needed+0x30>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d10f      	bne.n	8012b80 <tcp_timer_needed+0x2c>
 8012b60:	4b09      	ldr	r3, [pc, #36]	; (8012b88 <tcp_timer_needed+0x34>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d103      	bne.n	8012b70 <tcp_timer_needed+0x1c>
 8012b68:	4b08      	ldr	r3, [pc, #32]	; (8012b8c <tcp_timer_needed+0x38>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d007      	beq.n	8012b80 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012b70:	4b04      	ldr	r3, [pc, #16]	; (8012b84 <tcp_timer_needed+0x30>)
 8012b72:	2201      	movs	r2, #1
 8012b74:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012b76:	2200      	movs	r2, #0
 8012b78:	4905      	ldr	r1, [pc, #20]	; (8012b90 <tcp_timer_needed+0x3c>)
 8012b7a:	20fa      	movs	r0, #250	; 0xfa
 8012b7c:	f000 f8cc 	bl	8012d18 <sys_timeout>
  }
}
 8012b80:	bf00      	nop
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	20040b98 	.word	0x20040b98
 8012b88:	20040b4c 	.word	0x20040b4c
 8012b8c:	20040b50 	.word	0x20040b50
 8012b90:	08012b0d 	.word	0x08012b0d

08012b94 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b086      	sub	sp, #24
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	60f8      	str	r0, [r7, #12]
 8012b9c:	60b9      	str	r1, [r7, #8]
 8012b9e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012ba0:	200b      	movs	r0, #11
 8012ba2:	f7f9 fb41 	bl	800c228 <memp_malloc>
 8012ba6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d109      	bne.n	8012bc2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d151      	bne.n	8012c58 <sys_timeout_abs+0xc4>
 8012bb4:	4b2a      	ldr	r3, [pc, #168]	; (8012c60 <sys_timeout_abs+0xcc>)
 8012bb6:	22be      	movs	r2, #190	; 0xbe
 8012bb8:	492a      	ldr	r1, [pc, #168]	; (8012c64 <sys_timeout_abs+0xd0>)
 8012bba:	482b      	ldr	r0, [pc, #172]	; (8012c68 <sys_timeout_abs+0xd4>)
 8012bbc:	f00f f886 	bl	8021ccc <iprintf>
    return;
 8012bc0:	e04a      	b.n	8012c58 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	68ba      	ldr	r2, [r7, #8]
 8012bcc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	687a      	ldr	r2, [r7, #4]
 8012bd2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	68fa      	ldr	r2, [r7, #12]
 8012bd8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012bda:	4b24      	ldr	r3, [pc, #144]	; (8012c6c <sys_timeout_abs+0xd8>)
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d103      	bne.n	8012bea <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012be2:	4a22      	ldr	r2, [pc, #136]	; (8012c6c <sys_timeout_abs+0xd8>)
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	6013      	str	r3, [r2, #0]
    return;
 8012be8:	e037      	b.n	8012c5a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	685a      	ldr	r2, [r3, #4]
 8012bee:	4b1f      	ldr	r3, [pc, #124]	; (8012c6c <sys_timeout_abs+0xd8>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	1ad3      	subs	r3, r2, r3
 8012bf6:	0fdb      	lsrs	r3, r3, #31
 8012bf8:	f003 0301 	and.w	r3, r3, #1
 8012bfc:	b2db      	uxtb	r3, r3
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d007      	beq.n	8012c12 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012c02:	4b1a      	ldr	r3, [pc, #104]	; (8012c6c <sys_timeout_abs+0xd8>)
 8012c04:	681a      	ldr	r2, [r3, #0]
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012c0a:	4a18      	ldr	r2, [pc, #96]	; (8012c6c <sys_timeout_abs+0xd8>)
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	6013      	str	r3, [r2, #0]
 8012c10:	e023      	b.n	8012c5a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c12:	4b16      	ldr	r3, [pc, #88]	; (8012c6c <sys_timeout_abs+0xd8>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	617b      	str	r3, [r7, #20]
 8012c18:	e01a      	b.n	8012c50 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d00b      	beq.n	8012c3a <sys_timeout_abs+0xa6>
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	685a      	ldr	r2, [r3, #4]
 8012c26:	697b      	ldr	r3, [r7, #20]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	1ad3      	subs	r3, r2, r3
 8012c2e:	0fdb      	lsrs	r3, r3, #31
 8012c30:	f003 0301 	and.w	r3, r3, #1
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d007      	beq.n	8012c4a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	681a      	ldr	r2, [r3, #0]
 8012c3e:	693b      	ldr	r3, [r7, #16]
 8012c40:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	693a      	ldr	r2, [r7, #16]
 8012c46:	601a      	str	r2, [r3, #0]
        break;
 8012c48:	e007      	b.n	8012c5a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	617b      	str	r3, [r7, #20]
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d1e1      	bne.n	8012c1a <sys_timeout_abs+0x86>
 8012c56:	e000      	b.n	8012c5a <sys_timeout_abs+0xc6>
    return;
 8012c58:	bf00      	nop
      }
    }
  }
}
 8012c5a:	3718      	adds	r7, #24
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	080252a4 	.word	0x080252a4
 8012c64:	080252d8 	.word	0x080252d8
 8012c68:	08025318 	.word	0x08025318
 8012c6c:	20040b90 	.word	0x20040b90

08012c70 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b086      	sub	sp, #24
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	4798      	blx	r3

  now = sys_now();
 8012c82:	f7f4 fd9b 	bl	80077bc <sys_now>
 8012c86:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	4b0f      	ldr	r3, [pc, #60]	; (8012ccc <lwip_cyclic_timer+0x5c>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	4413      	add	r3, r2
 8012c92:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	1ad3      	subs	r3, r2, r3
 8012c9a:	0fdb      	lsrs	r3, r3, #31
 8012c9c:	f003 0301 	and.w	r3, r3, #1
 8012ca0:	b2db      	uxtb	r3, r3
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d009      	beq.n	8012cba <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	4413      	add	r3, r2
 8012cae:	687a      	ldr	r2, [r7, #4]
 8012cb0:	4907      	ldr	r1, [pc, #28]	; (8012cd0 <lwip_cyclic_timer+0x60>)
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7ff ff6e 	bl	8012b94 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012cb8:	e004      	b.n	8012cc4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012cba:	687a      	ldr	r2, [r7, #4]
 8012cbc:	4904      	ldr	r1, [pc, #16]	; (8012cd0 <lwip_cyclic_timer+0x60>)
 8012cbe:	68f8      	ldr	r0, [r7, #12]
 8012cc0:	f7ff ff68 	bl	8012b94 <sys_timeout_abs>
}
 8012cc4:	bf00      	nop
 8012cc6:	3718      	adds	r7, #24
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}
 8012ccc:	20040b94 	.word	0x20040b94
 8012cd0:	08012c71 	.word	0x08012c71

08012cd4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012cda:	2301      	movs	r3, #1
 8012cdc:	607b      	str	r3, [r7, #4]
 8012cde:	e00e      	b.n	8012cfe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012ce0:	4a0b      	ldr	r2, [pc, #44]	; (8012d10 <sys_timeouts_init+0x3c>)
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	00db      	lsls	r3, r3, #3
 8012cec:	4a08      	ldr	r2, [pc, #32]	; (8012d10 <sys_timeouts_init+0x3c>)
 8012cee:	4413      	add	r3, r2
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	4908      	ldr	r1, [pc, #32]	; (8012d14 <sys_timeouts_init+0x40>)
 8012cf4:	f000 f810 	bl	8012d18 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	3301      	adds	r3, #1
 8012cfc:	607b      	str	r3, [r7, #4]
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2b04      	cmp	r3, #4
 8012d02:	d9ed      	bls.n	8012ce0 <sys_timeouts_init+0xc>
  }
}
 8012d04:	bf00      	nop
 8012d06:	bf00      	nop
 8012d08:	3708      	adds	r7, #8
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}
 8012d0e:	bf00      	nop
 8012d10:	08026278 	.word	0x08026278
 8012d14:	08012c71 	.word	0x08012c71

08012d18 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b086      	sub	sp, #24
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d2a:	d306      	bcc.n	8012d3a <sys_timeout+0x22>
 8012d2c:	4b0a      	ldr	r3, [pc, #40]	; (8012d58 <sys_timeout+0x40>)
 8012d2e:	f240 1229 	movw	r2, #297	; 0x129
 8012d32:	490a      	ldr	r1, [pc, #40]	; (8012d5c <sys_timeout+0x44>)
 8012d34:	480a      	ldr	r0, [pc, #40]	; (8012d60 <sys_timeout+0x48>)
 8012d36:	f00e ffc9 	bl	8021ccc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012d3a:	f7f4 fd3f 	bl	80077bc <sys_now>
 8012d3e:	4602      	mov	r2, r0
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	4413      	add	r3, r2
 8012d44:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	68b9      	ldr	r1, [r7, #8]
 8012d4a:	6978      	ldr	r0, [r7, #20]
 8012d4c:	f7ff ff22 	bl	8012b94 <sys_timeout_abs>
#endif
}
 8012d50:	bf00      	nop
 8012d52:	3718      	adds	r7, #24
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	080252a4 	.word	0x080252a4
 8012d5c:	08025340 	.word	0x08025340
 8012d60:	08025318 	.word	0x08025318

08012d64 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012d6a:	f7f4 fd27 	bl	80077bc <sys_now>
 8012d6e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012d70:	4b17      	ldr	r3, [pc, #92]	; (8012dd0 <sys_check_timeouts+0x6c>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d022      	beq.n	8012dc2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	685b      	ldr	r3, [r3, #4]
 8012d80:	68fa      	ldr	r2, [r7, #12]
 8012d82:	1ad3      	subs	r3, r2, r3
 8012d84:	0fdb      	lsrs	r3, r3, #31
 8012d86:	f003 0301 	and.w	r3, r3, #1
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d11a      	bne.n	8012dc6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4a0e      	ldr	r2, [pc, #56]	; (8012dd0 <sys_check_timeouts+0x6c>)
 8012d96:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	689b      	ldr	r3, [r3, #8]
 8012d9c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	68db      	ldr	r3, [r3, #12]
 8012da2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	685b      	ldr	r3, [r3, #4]
 8012da8:	4a0a      	ldr	r2, [pc, #40]	; (8012dd4 <sys_check_timeouts+0x70>)
 8012daa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012dac:	68b9      	ldr	r1, [r7, #8]
 8012dae:	200b      	movs	r0, #11
 8012db0:	f7f9 fa8c 	bl	800c2cc <memp_free>
    if (handler != NULL) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d0da      	beq.n	8012d70 <sys_check_timeouts+0xc>
      handler(arg);
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	6838      	ldr	r0, [r7, #0]
 8012dbe:	4798      	blx	r3
  do {
 8012dc0:	e7d6      	b.n	8012d70 <sys_check_timeouts+0xc>
      return;
 8012dc2:	bf00      	nop
 8012dc4:	e000      	b.n	8012dc8 <sys_check_timeouts+0x64>
      return;
 8012dc6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012dc8:	3710      	adds	r7, #16
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	20040b90 	.word	0x20040b90
 8012dd4:	20040b94 	.word	0x20040b94

08012dd8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b082      	sub	sp, #8
 8012ddc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012dde:	4b16      	ldr	r3, [pc, #88]	; (8012e38 <sys_timeouts_sleeptime+0x60>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d102      	bne.n	8012dec <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dea:	e020      	b.n	8012e2e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012dec:	f7f4 fce6 	bl	80077bc <sys_now>
 8012df0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012df2:	4b11      	ldr	r3, [pc, #68]	; (8012e38 <sys_timeouts_sleeptime+0x60>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	685a      	ldr	r2, [r3, #4]
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	1ad3      	subs	r3, r2, r3
 8012dfc:	0fdb      	lsrs	r3, r3, #31
 8012dfe:	f003 0301 	and.w	r3, r3, #1
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d001      	beq.n	8012e0c <sys_timeouts_sleeptime+0x34>
    return 0;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	e010      	b.n	8012e2e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012e0c:	4b0a      	ldr	r3, [pc, #40]	; (8012e38 <sys_timeouts_sleeptime+0x60>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	685a      	ldr	r2, [r3, #4]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	1ad3      	subs	r3, r2, r3
 8012e16:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	da06      	bge.n	8012e2c <sys_timeouts_sleeptime+0x54>
 8012e1e:	4b07      	ldr	r3, [pc, #28]	; (8012e3c <sys_timeouts_sleeptime+0x64>)
 8012e20:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012e24:	4906      	ldr	r1, [pc, #24]	; (8012e40 <sys_timeouts_sleeptime+0x68>)
 8012e26:	4807      	ldr	r0, [pc, #28]	; (8012e44 <sys_timeouts_sleeptime+0x6c>)
 8012e28:	f00e ff50 	bl	8021ccc <iprintf>
    return ret;
 8012e2c:	683b      	ldr	r3, [r7, #0]
  }
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3708      	adds	r7, #8
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	20040b90 	.word	0x20040b90
 8012e3c:	080252a4 	.word	0x080252a4
 8012e40:	08025378 	.word	0x08025378
 8012e44:	08025318 	.word	0x08025318

08012e48 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012e4c:	f00e fffa 	bl	8021e44 <rand>
 8012e50:	4603      	mov	r3, r0
 8012e52:	b29b      	uxth	r3, r3
 8012e54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012e58:	b29b      	uxth	r3, r3
 8012e5a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012e5e:	b29a      	uxth	r2, r3
 8012e60:	4b01      	ldr	r3, [pc, #4]	; (8012e68 <udp_init+0x20>)
 8012e62:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012e64:	bf00      	nop
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	2000001c 	.word	0x2000001c

08012e6c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012e72:	2300      	movs	r3, #0
 8012e74:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012e76:	4b17      	ldr	r3, [pc, #92]	; (8012ed4 <udp_new_port+0x68>)
 8012e78:	881b      	ldrh	r3, [r3, #0]
 8012e7a:	1c5a      	adds	r2, r3, #1
 8012e7c:	b291      	uxth	r1, r2
 8012e7e:	4a15      	ldr	r2, [pc, #84]	; (8012ed4 <udp_new_port+0x68>)
 8012e80:	8011      	strh	r1, [r2, #0]
 8012e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d103      	bne.n	8012e92 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012e8a:	4b12      	ldr	r3, [pc, #72]	; (8012ed4 <udp_new_port+0x68>)
 8012e8c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012e90:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e92:	4b11      	ldr	r3, [pc, #68]	; (8012ed8 <udp_new_port+0x6c>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	603b      	str	r3, [r7, #0]
 8012e98:	e011      	b.n	8012ebe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	8a5a      	ldrh	r2, [r3, #18]
 8012e9e:	4b0d      	ldr	r3, [pc, #52]	; (8012ed4 <udp_new_port+0x68>)
 8012ea0:	881b      	ldrh	r3, [r3, #0]
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d108      	bne.n	8012eb8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012ea6:	88fb      	ldrh	r3, [r7, #6]
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	80fb      	strh	r3, [r7, #6]
 8012eac:	88fb      	ldrh	r3, [r7, #6]
 8012eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012eb2:	d3e0      	bcc.n	8012e76 <udp_new_port+0xa>
        return 0;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	e007      	b.n	8012ec8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	68db      	ldr	r3, [r3, #12]
 8012ebc:	603b      	str	r3, [r7, #0]
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d1ea      	bne.n	8012e9a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012ec4:	4b03      	ldr	r3, [pc, #12]	; (8012ed4 <udp_new_port+0x68>)
 8012ec6:	881b      	ldrh	r3, [r3, #0]
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	370c      	adds	r7, #12
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed2:	4770      	bx	lr
 8012ed4:	2000001c 	.word	0x2000001c
 8012ed8:	20040b9c 	.word	0x20040b9c

08012edc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d105      	bne.n	8012efc <udp_input_local_match+0x20>
 8012ef0:	4b27      	ldr	r3, [pc, #156]	; (8012f90 <udp_input_local_match+0xb4>)
 8012ef2:	2287      	movs	r2, #135	; 0x87
 8012ef4:	4927      	ldr	r1, [pc, #156]	; (8012f94 <udp_input_local_match+0xb8>)
 8012ef6:	4828      	ldr	r0, [pc, #160]	; (8012f98 <udp_input_local_match+0xbc>)
 8012ef8:	f00e fee8 	bl	8021ccc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d105      	bne.n	8012f0e <udp_input_local_match+0x32>
 8012f02:	4b23      	ldr	r3, [pc, #140]	; (8012f90 <udp_input_local_match+0xb4>)
 8012f04:	2288      	movs	r2, #136	; 0x88
 8012f06:	4925      	ldr	r1, [pc, #148]	; (8012f9c <udp_input_local_match+0xc0>)
 8012f08:	4823      	ldr	r0, [pc, #140]	; (8012f98 <udp_input_local_match+0xbc>)
 8012f0a:	f00e fedf 	bl	8021ccc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	7a1b      	ldrb	r3, [r3, #8]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00b      	beq.n	8012f2e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	7a1a      	ldrb	r2, [r3, #8]
 8012f1a:	4b21      	ldr	r3, [pc, #132]	; (8012fa0 <udp_input_local_match+0xc4>)
 8012f1c:	685b      	ldr	r3, [r3, #4]
 8012f1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012f22:	3301      	adds	r3, #1
 8012f24:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d001      	beq.n	8012f2e <udp_input_local_match+0x52>
    return 0;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	e02b      	b.n	8012f86 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012f2e:	79fb      	ldrb	r3, [r7, #7]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d018      	beq.n	8012f66 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d013      	beq.n	8012f62 <udp_input_local_match+0x86>
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d00f      	beq.n	8012f62 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012f42:	4b17      	ldr	r3, [pc, #92]	; (8012fa0 <udp_input_local_match+0xc4>)
 8012f44:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f4a:	d00a      	beq.n	8012f62 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	681a      	ldr	r2, [r3, #0]
 8012f50:	4b13      	ldr	r3, [pc, #76]	; (8012fa0 <udp_input_local_match+0xc4>)
 8012f52:	695b      	ldr	r3, [r3, #20]
 8012f54:	405a      	eors	r2, r3
 8012f56:	68bb      	ldr	r3, [r7, #8]
 8012f58:	3308      	adds	r3, #8
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d110      	bne.n	8012f84 <udp_input_local_match+0xa8>
          return 1;
 8012f62:	2301      	movs	r3, #1
 8012f64:	e00f      	b.n	8012f86 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d009      	beq.n	8012f80 <udp_input_local_match+0xa4>
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d005      	beq.n	8012f80 <udp_input_local_match+0xa4>
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681a      	ldr	r2, [r3, #0]
 8012f78:	4b09      	ldr	r3, [pc, #36]	; (8012fa0 <udp_input_local_match+0xc4>)
 8012f7a:	695b      	ldr	r3, [r3, #20]
 8012f7c:	429a      	cmp	r2, r3
 8012f7e:	d101      	bne.n	8012f84 <udp_input_local_match+0xa8>
        return 1;
 8012f80:	2301      	movs	r3, #1
 8012f82:	e000      	b.n	8012f86 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012f84:	2300      	movs	r3, #0
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	3710      	adds	r7, #16
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	bd80      	pop	{r7, pc}
 8012f8e:	bf00      	nop
 8012f90:	0802538c 	.word	0x0802538c
 8012f94:	080253bc 	.word	0x080253bc
 8012f98:	080253e0 	.word	0x080253e0
 8012f9c:	08025408 	.word	0x08025408
 8012fa0:	200357c0 	.word	0x200357c0

08012fa4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012fa4:	b590      	push	{r4, r7, lr}
 8012fa6:	b08d      	sub	sp, #52	; 0x34
 8012fa8:	af02      	add	r7, sp, #8
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d105      	bne.n	8012fc4 <udp_input+0x20>
 8012fb8:	4b7c      	ldr	r3, [pc, #496]	; (80131ac <udp_input+0x208>)
 8012fba:	22cf      	movs	r2, #207	; 0xcf
 8012fbc:	497c      	ldr	r1, [pc, #496]	; (80131b0 <udp_input+0x20c>)
 8012fbe:	487d      	ldr	r0, [pc, #500]	; (80131b4 <udp_input+0x210>)
 8012fc0:	f00e fe84 	bl	8021ccc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d105      	bne.n	8012fd6 <udp_input+0x32>
 8012fca:	4b78      	ldr	r3, [pc, #480]	; (80131ac <udp_input+0x208>)
 8012fcc:	22d0      	movs	r2, #208	; 0xd0
 8012fce:	497a      	ldr	r1, [pc, #488]	; (80131b8 <udp_input+0x214>)
 8012fd0:	4878      	ldr	r0, [pc, #480]	; (80131b4 <udp_input+0x210>)
 8012fd2:	f00e fe7b 	bl	8021ccc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	895b      	ldrh	r3, [r3, #10]
 8012fda:	2b07      	cmp	r3, #7
 8012fdc:	d803      	bhi.n	8012fe6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f7fa f836 	bl	800d050 <pbuf_free>
    goto end;
 8012fe4:	e0de      	b.n	80131a4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	685b      	ldr	r3, [r3, #4]
 8012fea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012fec:	4b73      	ldr	r3, [pc, #460]	; (80131bc <udp_input+0x218>)
 8012fee:	695b      	ldr	r3, [r3, #20]
 8012ff0:	4a72      	ldr	r2, [pc, #456]	; (80131bc <udp_input+0x218>)
 8012ff2:	6812      	ldr	r2, [r2, #0]
 8012ff4:	4611      	mov	r1, r2
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f002 fbcc 	bl	8015794 <ip4_addr_isbroadcast_u32>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	881b      	ldrh	r3, [r3, #0]
 8013004:	b29b      	uxth	r3, r3
 8013006:	4618      	mov	r0, r3
 8013008:	f7f8 f90c 	bl	800b224 <lwip_htons>
 801300c:	4603      	mov	r3, r0
 801300e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013010:	697b      	ldr	r3, [r7, #20]
 8013012:	885b      	ldrh	r3, [r3, #2]
 8013014:	b29b      	uxth	r3, r3
 8013016:	4618      	mov	r0, r3
 8013018:	f7f8 f904 	bl	800b224 <lwip_htons>
 801301c:	4603      	mov	r3, r0
 801301e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013020:	2300      	movs	r3, #0
 8013022:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013024:	2300      	movs	r3, #0
 8013026:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013028:	2300      	movs	r3, #0
 801302a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801302c:	4b64      	ldr	r3, [pc, #400]	; (80131c0 <udp_input+0x21c>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	627b      	str	r3, [r7, #36]	; 0x24
 8013032:	e054      	b.n	80130de <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013036:	8a5b      	ldrh	r3, [r3, #18]
 8013038:	89fa      	ldrh	r2, [r7, #14]
 801303a:	429a      	cmp	r2, r3
 801303c:	d14a      	bne.n	80130d4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801303e:	7cfb      	ldrb	r3, [r7, #19]
 8013040:	461a      	mov	r2, r3
 8013042:	6839      	ldr	r1, [r7, #0]
 8013044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013046:	f7ff ff49 	bl	8012edc <udp_input_local_match>
 801304a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801304c:	2b00      	cmp	r3, #0
 801304e:	d041      	beq.n	80130d4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013052:	7c1b      	ldrb	r3, [r3, #16]
 8013054:	f003 0304 	and.w	r3, r3, #4
 8013058:	2b00      	cmp	r3, #0
 801305a:	d11d      	bne.n	8013098 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d102      	bne.n	8013068 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013064:	61fb      	str	r3, [r7, #28]
 8013066:	e017      	b.n	8013098 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013068:	7cfb      	ldrb	r3, [r7, #19]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d014      	beq.n	8013098 <udp_input+0xf4>
 801306e:	4b53      	ldr	r3, [pc, #332]	; (80131bc <udp_input+0x218>)
 8013070:	695b      	ldr	r3, [r3, #20]
 8013072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013076:	d10f      	bne.n	8013098 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013078:	69fb      	ldr	r3, [r7, #28]
 801307a:	681a      	ldr	r2, [r3, #0]
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	3304      	adds	r3, #4
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	429a      	cmp	r2, r3
 8013084:	d008      	beq.n	8013098 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013088:	681a      	ldr	r2, [r3, #0]
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	3304      	adds	r3, #4
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	429a      	cmp	r2, r3
 8013092:	d101      	bne.n	8013098 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013096:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309a:	8a9b      	ldrh	r3, [r3, #20]
 801309c:	8a3a      	ldrh	r2, [r7, #16]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d118      	bne.n	80130d4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80130a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d005      	beq.n	80130b6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	685a      	ldr	r2, [r3, #4]
 80130ae:	4b43      	ldr	r3, [pc, #268]	; (80131bc <udp_input+0x218>)
 80130b0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d10e      	bne.n	80130d4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80130b6:	6a3b      	ldr	r3, [r7, #32]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d014      	beq.n	80130e6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80130bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130be:	68da      	ldr	r2, [r3, #12]
 80130c0:	6a3b      	ldr	r3, [r7, #32]
 80130c2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80130c4:	4b3e      	ldr	r3, [pc, #248]	; (80131c0 <udp_input+0x21c>)
 80130c6:	681a      	ldr	r2, [r3, #0]
 80130c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80130cc:	4a3c      	ldr	r2, [pc, #240]	; (80131c0 <udp_input+0x21c>)
 80130ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80130d2:	e008      	b.n	80130e6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80130d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130da:	68db      	ldr	r3, [r3, #12]
 80130dc:	627b      	str	r3, [r7, #36]	; 0x24
 80130de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d1a7      	bne.n	8013034 <udp_input+0x90>
 80130e4:	e000      	b.n	80130e8 <udp_input+0x144>
        break;
 80130e6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80130e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d101      	bne.n	80130f2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80130ee:	69fb      	ldr	r3, [r7, #28]
 80130f0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80130f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d002      	beq.n	80130fe <udp_input+0x15a>
    for_us = 1;
 80130f8:	2301      	movs	r3, #1
 80130fa:	76fb      	strb	r3, [r7, #27]
 80130fc:	e00a      	b.n	8013114 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	3304      	adds	r3, #4
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	4b2d      	ldr	r3, [pc, #180]	; (80131bc <udp_input+0x218>)
 8013106:	695b      	ldr	r3, [r3, #20]
 8013108:	429a      	cmp	r2, r3
 801310a:	bf0c      	ite	eq
 801310c:	2301      	moveq	r3, #1
 801310e:	2300      	movne	r3, #0
 8013110:	b2db      	uxtb	r3, r3
 8013112:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013114:	7efb      	ldrb	r3, [r7, #27]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d041      	beq.n	801319e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801311a:	2108      	movs	r1, #8
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f7f9 ff11 	bl	800cf44 <pbuf_remove_header>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d00a      	beq.n	801313e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013128:	4b20      	ldr	r3, [pc, #128]	; (80131ac <udp_input+0x208>)
 801312a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801312e:	4925      	ldr	r1, [pc, #148]	; (80131c4 <udp_input+0x220>)
 8013130:	4820      	ldr	r0, [pc, #128]	; (80131b4 <udp_input+0x210>)
 8013132:	f00e fdcb 	bl	8021ccc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f7f9 ff8a 	bl	800d050 <pbuf_free>
      goto end;
 801313c:	e032      	b.n	80131a4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013140:	2b00      	cmp	r3, #0
 8013142:	d012      	beq.n	801316a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013146:	6a1b      	ldr	r3, [r3, #32]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00a      	beq.n	8013162 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314e:	6a1c      	ldr	r4, [r3, #32]
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013154:	8a3b      	ldrh	r3, [r7, #16]
 8013156:	9300      	str	r3, [sp, #0]
 8013158:	4b1b      	ldr	r3, [pc, #108]	; (80131c8 <udp_input+0x224>)
 801315a:	687a      	ldr	r2, [r7, #4]
 801315c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801315e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013160:	e021      	b.n	80131a6 <udp_input+0x202>
        pbuf_free(p);
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f7f9 ff74 	bl	800d050 <pbuf_free>
        goto end;
 8013168:	e01c      	b.n	80131a4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801316a:	7cfb      	ldrb	r3, [r7, #19]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d112      	bne.n	8013196 <udp_input+0x1f2>
 8013170:	4b12      	ldr	r3, [pc, #72]	; (80131bc <udp_input+0x218>)
 8013172:	695b      	ldr	r3, [r3, #20]
 8013174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013178:	2be0      	cmp	r3, #224	; 0xe0
 801317a:	d00c      	beq.n	8013196 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801317c:	4b0f      	ldr	r3, [pc, #60]	; (80131bc <udp_input+0x218>)
 801317e:	899b      	ldrh	r3, [r3, #12]
 8013180:	3308      	adds	r3, #8
 8013182:	b29b      	uxth	r3, r3
 8013184:	b21b      	sxth	r3, r3
 8013186:	4619      	mov	r1, r3
 8013188:	6878      	ldr	r0, [r7, #4]
 801318a:	f7f9 ff4e 	bl	800d02a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801318e:	2103      	movs	r1, #3
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f001 fb99 	bl	80148c8 <icmp_dest_unreach>
      pbuf_free(p);
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f7f9 ff5a 	bl	800d050 <pbuf_free>
  return;
 801319c:	e003      	b.n	80131a6 <udp_input+0x202>
    pbuf_free(p);
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7f9 ff56 	bl	800d050 <pbuf_free>
  return;
 80131a4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80131a6:	372c      	adds	r7, #44	; 0x2c
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd90      	pop	{r4, r7, pc}
 80131ac:	0802538c 	.word	0x0802538c
 80131b0:	08025430 	.word	0x08025430
 80131b4:	080253e0 	.word	0x080253e0
 80131b8:	08025448 	.word	0x08025448
 80131bc:	200357c0 	.word	0x200357c0
 80131c0:	20040b9c 	.word	0x20040b9c
 80131c4:	08025464 	.word	0x08025464
 80131c8:	200357d0 	.word	0x200357d0

080131cc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b088      	sub	sp, #32
 80131d0:	af02      	add	r7, sp, #8
 80131d2:	60f8      	str	r0, [r7, #12]
 80131d4:	60b9      	str	r1, [r7, #8]
 80131d6:	607a      	str	r2, [r7, #4]
 80131d8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d109      	bne.n	80131f4 <udp_sendto+0x28>
 80131e0:	4b36      	ldr	r3, [pc, #216]	; (80132bc <udp_sendto+0xf0>)
 80131e2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80131e6:	4936      	ldr	r1, [pc, #216]	; (80132c0 <udp_sendto+0xf4>)
 80131e8:	4836      	ldr	r0, [pc, #216]	; (80132c4 <udp_sendto+0xf8>)
 80131ea:	f00e fd6f 	bl	8021ccc <iprintf>
 80131ee:	f06f 030f 	mvn.w	r3, #15
 80131f2:	e05e      	b.n	80132b2 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d109      	bne.n	801320e <udp_sendto+0x42>
 80131fa:	4b30      	ldr	r3, [pc, #192]	; (80132bc <udp_sendto+0xf0>)
 80131fc:	f240 2219 	movw	r2, #537	; 0x219
 8013200:	4931      	ldr	r1, [pc, #196]	; (80132c8 <udp_sendto+0xfc>)
 8013202:	4830      	ldr	r0, [pc, #192]	; (80132c4 <udp_sendto+0xf8>)
 8013204:	f00e fd62 	bl	8021ccc <iprintf>
 8013208:	f06f 030f 	mvn.w	r3, #15
 801320c:	e051      	b.n	80132b2 <udp_sendto+0xe6>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d109      	bne.n	8013228 <udp_sendto+0x5c>
 8013214:	4b29      	ldr	r3, [pc, #164]	; (80132bc <udp_sendto+0xf0>)
 8013216:	f240 221a 	movw	r2, #538	; 0x21a
 801321a:	492c      	ldr	r1, [pc, #176]	; (80132cc <udp_sendto+0x100>)
 801321c:	4829      	ldr	r0, [pc, #164]	; (80132c4 <udp_sendto+0xf8>)
 801321e:	f00e fd55 	bl	8021ccc <iprintf>
 8013222:	f06f 030f 	mvn.w	r3, #15
 8013226:	e044      	b.n	80132b2 <udp_sendto+0xe6>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	7a1b      	ldrb	r3, [r3, #8]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d006      	beq.n	801323e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	7a1b      	ldrb	r3, [r3, #8]
 8013234:	4618      	mov	r0, r3
 8013236:	f7f9 fb7d 	bl	800c934 <netif_get_by_index>
 801323a:	6178      	str	r0, [r7, #20]
 801323c:	e029      	b.n	8013292 <udp_sendto+0xc6>
  } else {
#if LWIP_MULTICAST_TX_OPTIONS
    netif = NULL;
 801323e:	2300      	movs	r3, #0
 8013240:	617b      	str	r3, [r7, #20]
    if (ip_addr_ismulticast(dst_ip)) {
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801324a:	2be0      	cmp	r3, #224	; 0xe0
 801324c:	d11a      	bne.n	8013284 <udp_sendto+0xb8>
       * is specified using an interface index. The same approach may be used for
       * IPv4 as well, in which case it overrides the IPv4 multicast override
       * address below. Here we have to look up the netif by going through the
       * list, but by doing so we skip a route lookup. If the interface index has
       * gone stale, we fall through and do the regular route lookup after all. */
      if (pcb->mcast_ifindex != NETIF_NO_INDEX) {
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	7f1b      	ldrb	r3, [r3, #28]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d006      	beq.n	8013264 <udp_sendto+0x98>
        netif = netif_get_by_index(pcb->mcast_ifindex);
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	7f1b      	ldrb	r3, [r3, #28]
 801325a:	4618      	mov	r0, r3
 801325c:	f7f9 fb6a 	bl	800c934 <netif_get_by_index>
 8013260:	6178      	str	r0, [r7, #20]
 8013262:	e00f      	b.n	8013284 <udp_sendto+0xb8>
          /* IPv4 does not use source-based routing by default, so we use an
             administratively selected interface for multicast by default.
             However, this can be overridden by setting an interface address
             in pcb->mcast_ip4 that is used for routing. If this routing lookup
             fails, we try regular routing as though no override was set. */
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	699b      	ldr	r3, [r3, #24]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d00b      	beq.n	8013284 <udp_sendto+0xb8>
              !ip4_addr_cmp(&pcb->mcast_ip4, IP4_ADDR_BROADCAST)) {
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	699a      	ldr	r2, [r3, #24]
 8013270:	4b17      	ldr	r3, [pc, #92]	; (80132d0 <udp_sendto+0x104>)
 8013272:	681b      	ldr	r3, [r3, #0]
          if (!ip4_addr_isany_val(pcb->mcast_ip4) &&
 8013274:	429a      	cmp	r2, r3
 8013276:	d005      	beq.n	8013284 <udp_sendto+0xb8>
            netif = ip4_route_src(ip_2_ip4(&pcb->local_ip), &pcb->mcast_ip4);
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	3318      	adds	r3, #24
 801327c:	4618      	mov	r0, r3
 801327e:	f001 ff33 	bl	80150e8 <ip4_route>
 8013282:	6178      	str	r0, [r7, #20]
          }
        }
#endif /* LWIP_IPV4 */
    }

    if (netif == NULL)
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d103      	bne.n	8013292 <udp_sendto+0xc6>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f001 ff2c 	bl	80150e8 <ip4_route>
 8013290:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d102      	bne.n	801329e <udp_sendto+0xd2>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013298:	f06f 0303 	mvn.w	r3, #3
 801329c:	e009      	b.n	80132b2 <udp_sendto+0xe6>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801329e:	887a      	ldrh	r2, [r7, #2]
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	9300      	str	r3, [sp, #0]
 80132a4:	4613      	mov	r3, r2
 80132a6:	687a      	ldr	r2, [r7, #4]
 80132a8:	68b9      	ldr	r1, [r7, #8]
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	f000 f812 	bl	80132d4 <udp_sendto_if>
 80132b0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3718      	adds	r7, #24
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	0802538c 	.word	0x0802538c
 80132c0:	080254b0 	.word	0x080254b0
 80132c4:	080253e0 	.word	0x080253e0
 80132c8:	080254c8 	.word	0x080254c8
 80132cc:	080254e4 	.word	0x080254e4
 80132d0:	080262a4 	.word	0x080262a4

080132d4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b088      	sub	sp, #32
 80132d8:	af02      	add	r7, sp, #8
 80132da:	60f8      	str	r0, [r7, #12]
 80132dc:	60b9      	str	r1, [r7, #8]
 80132de:	607a      	str	r2, [r7, #4]
 80132e0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d109      	bne.n	80132fc <udp_sendto_if+0x28>
 80132e8:	4b2e      	ldr	r3, [pc, #184]	; (80133a4 <udp_sendto_if+0xd0>)
 80132ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132ee:	492e      	ldr	r1, [pc, #184]	; (80133a8 <udp_sendto_if+0xd4>)
 80132f0:	482e      	ldr	r0, [pc, #184]	; (80133ac <udp_sendto_if+0xd8>)
 80132f2:	f00e fceb 	bl	8021ccc <iprintf>
 80132f6:	f06f 030f 	mvn.w	r3, #15
 80132fa:	e04f      	b.n	801339c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d109      	bne.n	8013316 <udp_sendto_if+0x42>
 8013302:	4b28      	ldr	r3, [pc, #160]	; (80133a4 <udp_sendto_if+0xd0>)
 8013304:	f240 2281 	movw	r2, #641	; 0x281
 8013308:	4929      	ldr	r1, [pc, #164]	; (80133b0 <udp_sendto_if+0xdc>)
 801330a:	4828      	ldr	r0, [pc, #160]	; (80133ac <udp_sendto_if+0xd8>)
 801330c:	f00e fcde 	bl	8021ccc <iprintf>
 8013310:	f06f 030f 	mvn.w	r3, #15
 8013314:	e042      	b.n	801339c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d109      	bne.n	8013330 <udp_sendto_if+0x5c>
 801331c:	4b21      	ldr	r3, [pc, #132]	; (80133a4 <udp_sendto_if+0xd0>)
 801331e:	f240 2282 	movw	r2, #642	; 0x282
 8013322:	4924      	ldr	r1, [pc, #144]	; (80133b4 <udp_sendto_if+0xe0>)
 8013324:	4821      	ldr	r0, [pc, #132]	; (80133ac <udp_sendto_if+0xd8>)
 8013326:	f00e fcd1 	bl	8021ccc <iprintf>
 801332a:	f06f 030f 	mvn.w	r3, #15
 801332e:	e035      	b.n	801339c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013330:	6a3b      	ldr	r3, [r7, #32]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d109      	bne.n	801334a <udp_sendto_if+0x76>
 8013336:	4b1b      	ldr	r3, [pc, #108]	; (80133a4 <udp_sendto_if+0xd0>)
 8013338:	f240 2283 	movw	r2, #643	; 0x283
 801333c:	491e      	ldr	r1, [pc, #120]	; (80133b8 <udp_sendto_if+0xe4>)
 801333e:	481b      	ldr	r0, [pc, #108]	; (80133ac <udp_sendto_if+0xd8>)
 8013340:	f00e fcc4 	bl	8021ccc <iprintf>
 8013344:	f06f 030f 	mvn.w	r3, #15
 8013348:	e028      	b.n	801339c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d009      	beq.n	8013364 <udp_sendto_if+0x90>
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d005      	beq.n	8013364 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013360:	2be0      	cmp	r3, #224	; 0xe0
 8013362:	d103      	bne.n	801336c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	3304      	adds	r3, #4
 8013368:	617b      	str	r3, [r7, #20]
 801336a:	e00b      	b.n	8013384 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	681a      	ldr	r2, [r3, #0]
 8013370:	6a3b      	ldr	r3, [r7, #32]
 8013372:	3304      	adds	r3, #4
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	429a      	cmp	r2, r3
 8013378:	d002      	beq.n	8013380 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801337a:	f06f 0303 	mvn.w	r3, #3
 801337e:	e00d      	b.n	801339c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013384:	887a      	ldrh	r2, [r7, #2]
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	9301      	str	r3, [sp, #4]
 801338a:	6a3b      	ldr	r3, [r7, #32]
 801338c:	9300      	str	r3, [sp, #0]
 801338e:	4613      	mov	r3, r2
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	68b9      	ldr	r1, [r7, #8]
 8013394:	68f8      	ldr	r0, [r7, #12]
 8013396:	f000 f811 	bl	80133bc <udp_sendto_if_src>
 801339a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801339c:	4618      	mov	r0, r3
 801339e:	3718      	adds	r7, #24
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}
 80133a4:	0802538c 	.word	0x0802538c
 80133a8:	08025500 	.word	0x08025500
 80133ac:	080253e0 	.word	0x080253e0
 80133b0:	0802551c 	.word	0x0802551c
 80133b4:	08025538 	.word	0x08025538
 80133b8:	08025558 	.word	0x08025558

080133bc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b08c      	sub	sp, #48	; 0x30
 80133c0:	af04      	add	r7, sp, #16
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	607a      	str	r2, [r7, #4]
 80133c8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d109      	bne.n	80133e4 <udp_sendto_if_src+0x28>
 80133d0:	4b73      	ldr	r3, [pc, #460]	; (80135a0 <udp_sendto_if_src+0x1e4>)
 80133d2:	f240 22d1 	movw	r2, #721	; 0x2d1
 80133d6:	4973      	ldr	r1, [pc, #460]	; (80135a4 <udp_sendto_if_src+0x1e8>)
 80133d8:	4873      	ldr	r0, [pc, #460]	; (80135a8 <udp_sendto_if_src+0x1ec>)
 80133da:	f00e fc77 	bl	8021ccc <iprintf>
 80133de:	f06f 030f 	mvn.w	r3, #15
 80133e2:	e0d8      	b.n	8013596 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d109      	bne.n	80133fe <udp_sendto_if_src+0x42>
 80133ea:	4b6d      	ldr	r3, [pc, #436]	; (80135a0 <udp_sendto_if_src+0x1e4>)
 80133ec:	f240 22d2 	movw	r2, #722	; 0x2d2
 80133f0:	496e      	ldr	r1, [pc, #440]	; (80135ac <udp_sendto_if_src+0x1f0>)
 80133f2:	486d      	ldr	r0, [pc, #436]	; (80135a8 <udp_sendto_if_src+0x1ec>)
 80133f4:	f00e fc6a 	bl	8021ccc <iprintf>
 80133f8:	f06f 030f 	mvn.w	r3, #15
 80133fc:	e0cb      	b.n	8013596 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d109      	bne.n	8013418 <udp_sendto_if_src+0x5c>
 8013404:	4b66      	ldr	r3, [pc, #408]	; (80135a0 <udp_sendto_if_src+0x1e4>)
 8013406:	f240 22d3 	movw	r2, #723	; 0x2d3
 801340a:	4969      	ldr	r1, [pc, #420]	; (80135b0 <udp_sendto_if_src+0x1f4>)
 801340c:	4866      	ldr	r0, [pc, #408]	; (80135a8 <udp_sendto_if_src+0x1ec>)
 801340e:	f00e fc5d 	bl	8021ccc <iprintf>
 8013412:	f06f 030f 	mvn.w	r3, #15
 8013416:	e0be      	b.n	8013596 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341a:	2b00      	cmp	r3, #0
 801341c:	d109      	bne.n	8013432 <udp_sendto_if_src+0x76>
 801341e:	4b60      	ldr	r3, [pc, #384]	; (80135a0 <udp_sendto_if_src+0x1e4>)
 8013420:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013424:	4963      	ldr	r1, [pc, #396]	; (80135b4 <udp_sendto_if_src+0x1f8>)
 8013426:	4860      	ldr	r0, [pc, #384]	; (80135a8 <udp_sendto_if_src+0x1ec>)
 8013428:	f00e fc50 	bl	8021ccc <iprintf>
 801342c:	f06f 030f 	mvn.w	r3, #15
 8013430:	e0b1      	b.n	8013596 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013434:	2b00      	cmp	r3, #0
 8013436:	d109      	bne.n	801344c <udp_sendto_if_src+0x90>
 8013438:	4b59      	ldr	r3, [pc, #356]	; (80135a0 <udp_sendto_if_src+0x1e4>)
 801343a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801343e:	495e      	ldr	r1, [pc, #376]	; (80135b8 <udp_sendto_if_src+0x1fc>)
 8013440:	4859      	ldr	r0, [pc, #356]	; (80135a8 <udp_sendto_if_src+0x1ec>)
 8013442:	f00e fc43 	bl	8021ccc <iprintf>
 8013446:	f06f 030f 	mvn.w	r3, #15
 801344a:	e0a4      	b.n	8013596 <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	8a5b      	ldrh	r3, [r3, #18]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d10f      	bne.n	8013474 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013454:	68f9      	ldr	r1, [r7, #12]
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	8a5b      	ldrh	r3, [r3, #18]
 801345a:	461a      	mov	r2, r3
 801345c:	68f8      	ldr	r0, [r7, #12]
 801345e:	f000 f8af 	bl	80135c0 <udp_bind>
 8013462:	4603      	mov	r3, r0
 8013464:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013466:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d002      	beq.n	8013474 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801346e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013472:	e090      	b.n	8013596 <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	891b      	ldrh	r3, [r3, #8]
 8013478:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801347c:	4293      	cmp	r3, r2
 801347e:	d902      	bls.n	8013486 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013484:	e087      	b.n	8013596 <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013486:	2108      	movs	r1, #8
 8013488:	68b8      	ldr	r0, [r7, #8]
 801348a:	f7f9 fd4b 	bl	800cf24 <pbuf_add_header>
 801348e:	4603      	mov	r3, r0
 8013490:	2b00      	cmp	r3, #0
 8013492:	d015      	beq.n	80134c0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013494:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013498:	2108      	movs	r1, #8
 801349a:	2022      	movs	r0, #34	; 0x22
 801349c:	f7f9 faf4 	bl	800ca88 <pbuf_alloc>
 80134a0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80134a2:	69fb      	ldr	r3, [r7, #28]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d102      	bne.n	80134ae <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80134a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134ac:	e073      	b.n	8013596 <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 80134ae:	68bb      	ldr	r3, [r7, #8]
 80134b0:	891b      	ldrh	r3, [r3, #8]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d006      	beq.n	80134c4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80134b6:	68b9      	ldr	r1, [r7, #8]
 80134b8:	69f8      	ldr	r0, [r7, #28]
 80134ba:	f7f9 feed 	bl	800d298 <pbuf_chain>
 80134be:	e001      	b.n	80134c4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80134c0:	68bb      	ldr	r3, [r7, #8]
 80134c2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	895b      	ldrh	r3, [r3, #10]
 80134c8:	2b07      	cmp	r3, #7
 80134ca:	d806      	bhi.n	80134da <udp_sendto_if_src+0x11e>
 80134cc:	4b34      	ldr	r3, [pc, #208]	; (80135a0 <udp_sendto_if_src+0x1e4>)
 80134ce:	f240 320d 	movw	r2, #781	; 0x30d
 80134d2:	493a      	ldr	r1, [pc, #232]	; (80135bc <udp_sendto_if_src+0x200>)
 80134d4:	4834      	ldr	r0, [pc, #208]	; (80135a8 <udp_sendto_if_src+0x1ec>)
 80134d6:	f00e fbf9 	bl	8021ccc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80134da:	69fb      	ldr	r3, [r7, #28]
 80134dc:	685b      	ldr	r3, [r3, #4]
 80134de:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	8a5b      	ldrh	r3, [r3, #18]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7f7 fe9d 	bl	800b224 <lwip_htons>
 80134ea:	4603      	mov	r3, r0
 80134ec:	461a      	mov	r2, r3
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80134f2:	887b      	ldrh	r3, [r7, #2]
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7f7 fe95 	bl	800b224 <lwip_htons>
 80134fa:	4603      	mov	r3, r0
 80134fc:	461a      	mov	r2, r3
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	2200      	movs	r2, #0
 8013506:	719a      	strb	r2, [r3, #6]
 8013508:	2200      	movs	r2, #0
 801350a:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	7c1b      	ldrb	r3, [r3, #16]
 8013510:	f003 0308 	and.w	r3, r3, #8
 8013514:	2b00      	cmp	r3, #0
 8013516:	d00c      	beq.n	8013532 <udp_sendto_if_src+0x176>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013520:	2be0      	cmp	r3, #224	; 0xe0
 8013522:	d106      	bne.n	8013532 <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8013524:	69fb      	ldr	r3, [r7, #28]
 8013526:	7b5b      	ldrb	r3, [r3, #13]
 8013528:	f043 0304 	orr.w	r3, r3, #4
 801352c:	b2da      	uxtb	r2, r3
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013532:	69fb      	ldr	r3, [r7, #28]
 8013534:	891b      	ldrh	r3, [r3, #8]
 8013536:	4618      	mov	r0, r3
 8013538:	f7f7 fe74 	bl	800b224 <lwip_htons>
 801353c:	4603      	mov	r3, r0
 801353e:	461a      	mov	r2, r3
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013544:	2311      	movs	r3, #17
 8013546:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013550:	2be0      	cmp	r3, #224	; 0xe0
 8013552:	d102      	bne.n	801355a <udp_sendto_if_src+0x19e>
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	7f5b      	ldrb	r3, [r3, #29]
 8013558:	e001      	b.n	801355e <udp_sendto_if_src+0x1a2>
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	7adb      	ldrb	r3, [r3, #11]
 801355e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	7a9b      	ldrb	r3, [r3, #10]
 8013564:	7cb9      	ldrb	r1, [r7, #18]
 8013566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013568:	9202      	str	r2, [sp, #8]
 801356a:	7cfa      	ldrb	r2, [r7, #19]
 801356c:	9201      	str	r2, [sp, #4]
 801356e:	9300      	str	r3, [sp, #0]
 8013570:	460b      	mov	r3, r1
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013576:	69f8      	ldr	r0, [r7, #28]
 8013578:	f002 f809 	bl	801558e <ip4_output_if_src>
 801357c:	4603      	mov	r3, r0
 801357e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013580:	69fa      	ldr	r2, [r7, #28]
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	429a      	cmp	r2, r3
 8013586:	d004      	beq.n	8013592 <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 8013588:	69f8      	ldr	r0, [r7, #28]
 801358a:	f7f9 fd61 	bl	800d050 <pbuf_free>
    q = NULL;
 801358e:	2300      	movs	r3, #0
 8013590:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013592:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013596:	4618      	mov	r0, r3
 8013598:	3720      	adds	r7, #32
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}
 801359e:	bf00      	nop
 80135a0:	0802538c 	.word	0x0802538c
 80135a4:	08025578 	.word	0x08025578
 80135a8:	080253e0 	.word	0x080253e0
 80135ac:	08025598 	.word	0x08025598
 80135b0:	080255b8 	.word	0x080255b8
 80135b4:	080255dc 	.word	0x080255dc
 80135b8:	08025600 	.word	0x08025600
 80135bc:	08025624 	.word	0x08025624

080135c0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b086      	sub	sp, #24
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	4613      	mov	r3, r2
 80135cc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d101      	bne.n	80135d8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80135d4:	4b39      	ldr	r3, [pc, #228]	; (80136bc <udp_bind+0xfc>)
 80135d6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d109      	bne.n	80135f2 <udp_bind+0x32>
 80135de:	4b38      	ldr	r3, [pc, #224]	; (80136c0 <udp_bind+0x100>)
 80135e0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80135e4:	4937      	ldr	r1, [pc, #220]	; (80136c4 <udp_bind+0x104>)
 80135e6:	4838      	ldr	r0, [pc, #224]	; (80136c8 <udp_bind+0x108>)
 80135e8:	f00e fb70 	bl	8021ccc <iprintf>
 80135ec:	f06f 030f 	mvn.w	r3, #15
 80135f0:	e060      	b.n	80136b4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80135f2:	2300      	movs	r3, #0
 80135f4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80135f6:	4b35      	ldr	r3, [pc, #212]	; (80136cc <udp_bind+0x10c>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	617b      	str	r3, [r7, #20]
 80135fc:	e009      	b.n	8013612 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	429a      	cmp	r2, r3
 8013604:	d102      	bne.n	801360c <udp_bind+0x4c>
      rebind = 1;
 8013606:	2301      	movs	r3, #1
 8013608:	74fb      	strb	r3, [r7, #19]
      break;
 801360a:	e005      	b.n	8013618 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801360c:	697b      	ldr	r3, [r7, #20]
 801360e:	68db      	ldr	r3, [r3, #12]
 8013610:	617b      	str	r3, [r7, #20]
 8013612:	697b      	ldr	r3, [r7, #20]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d1f2      	bne.n	80135fe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013618:	88fb      	ldrh	r3, [r7, #6]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d109      	bne.n	8013632 <udp_bind+0x72>
    port = udp_new_port();
 801361e:	f7ff fc25 	bl	8012e6c <udp_new_port>
 8013622:	4603      	mov	r3, r0
 8013624:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013626:	88fb      	ldrh	r3, [r7, #6]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d12c      	bne.n	8013686 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801362c:	f06f 0307 	mvn.w	r3, #7
 8013630:	e040      	b.n	80136b4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013632:	4b26      	ldr	r3, [pc, #152]	; (80136cc <udp_bind+0x10c>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	617b      	str	r3, [r7, #20]
 8013638:	e022      	b.n	8013680 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801363a:	68fa      	ldr	r2, [r7, #12]
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	429a      	cmp	r2, r3
 8013640:	d01b      	beq.n	801367a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	8a5b      	ldrh	r3, [r3, #18]
 8013646:	88fa      	ldrh	r2, [r7, #6]
 8013648:	429a      	cmp	r2, r3
 801364a:	d116      	bne.n	801367a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	681a      	ldr	r2, [r3, #0]
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013654:	429a      	cmp	r2, r3
 8013656:	d00d      	beq.n	8013674 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d00a      	beq.n	8013674 <udp_bind+0xb4>
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d006      	beq.n	8013674 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013666:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013668:	2b00      	cmp	r3, #0
 801366a:	d003      	beq.n	8013674 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801366c:	697b      	ldr	r3, [r7, #20]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d102      	bne.n	801367a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013674:	f06f 0307 	mvn.w	r3, #7
 8013678:	e01c      	b.n	80136b4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	68db      	ldr	r3, [r3, #12]
 801367e:	617b      	str	r3, [r7, #20]
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d1d9      	bne.n	801363a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013686:	68bb      	ldr	r3, [r7, #8]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d002      	beq.n	8013692 <udp_bind+0xd2>
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	e000      	b.n	8013694 <udp_bind+0xd4>
 8013692:	2300      	movs	r3, #0
 8013694:	68fa      	ldr	r2, [r7, #12]
 8013696:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	88fa      	ldrh	r2, [r7, #6]
 801369c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801369e:	7cfb      	ldrb	r3, [r7, #19]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d106      	bne.n	80136b2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80136a4:	4b09      	ldr	r3, [pc, #36]	; (80136cc <udp_bind+0x10c>)
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80136ac:	4a07      	ldr	r2, [pc, #28]	; (80136cc <udp_bind+0x10c>)
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80136b2:	2300      	movs	r3, #0
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3718      	adds	r7, #24
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}
 80136bc:	080262a0 	.word	0x080262a0
 80136c0:	0802538c 	.word	0x0802538c
 80136c4:	08025654 	.word	0x08025654
 80136c8:	080253e0 	.word	0x080253e0
 80136cc:	20040b9c 	.word	0x20040b9c

080136d0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b084      	sub	sp, #16
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	60b9      	str	r1, [r7, #8]
 80136da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d107      	bne.n	80136f2 <udp_recv+0x22>
 80136e2:	4b08      	ldr	r3, [pc, #32]	; (8013704 <udp_recv+0x34>)
 80136e4:	f240 428a 	movw	r2, #1162	; 0x48a
 80136e8:	4907      	ldr	r1, [pc, #28]	; (8013708 <udp_recv+0x38>)
 80136ea:	4808      	ldr	r0, [pc, #32]	; (801370c <udp_recv+0x3c>)
 80136ec:	f00e faee 	bl	8021ccc <iprintf>
 80136f0:	e005      	b.n	80136fe <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	68ba      	ldr	r2, [r7, #8]
 80136f6:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80136fe:	3710      	adds	r7, #16
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}
 8013704:	0802538c 	.word	0x0802538c
 8013708:	080256c0 	.word	0x080256c0
 801370c:	080253e0 	.word	0x080253e0

08013710 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d107      	bne.n	801372e <udp_remove+0x1e>
 801371e:	4b19      	ldr	r3, [pc, #100]	; (8013784 <udp_remove+0x74>)
 8013720:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013724:	4918      	ldr	r1, [pc, #96]	; (8013788 <udp_remove+0x78>)
 8013726:	4819      	ldr	r0, [pc, #100]	; (801378c <udp_remove+0x7c>)
 8013728:	f00e fad0 	bl	8021ccc <iprintf>
 801372c:	e026      	b.n	801377c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801372e:	4b18      	ldr	r3, [pc, #96]	; (8013790 <udp_remove+0x80>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	687a      	ldr	r2, [r7, #4]
 8013734:	429a      	cmp	r2, r3
 8013736:	d105      	bne.n	8013744 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013738:	4b15      	ldr	r3, [pc, #84]	; (8013790 <udp_remove+0x80>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	68db      	ldr	r3, [r3, #12]
 801373e:	4a14      	ldr	r2, [pc, #80]	; (8013790 <udp_remove+0x80>)
 8013740:	6013      	str	r3, [r2, #0]
 8013742:	e017      	b.n	8013774 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013744:	4b12      	ldr	r3, [pc, #72]	; (8013790 <udp_remove+0x80>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	60fb      	str	r3, [r7, #12]
 801374a:	e010      	b.n	801376e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d009      	beq.n	8013768 <udp_remove+0x58>
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	429a      	cmp	r2, r3
 801375c:	d104      	bne.n	8013768 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	68da      	ldr	r2, [r3, #12]
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	60da      	str	r2, [r3, #12]
        break;
 8013766:	e005      	b.n	8013774 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	68db      	ldr	r3, [r3, #12]
 801376c:	60fb      	str	r3, [r7, #12]
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d1eb      	bne.n	801374c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013774:	6879      	ldr	r1, [r7, #4]
 8013776:	2000      	movs	r0, #0
 8013778:	f7f8 fda8 	bl	800c2cc <memp_free>
}
 801377c:	3710      	adds	r7, #16
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
 8013782:	bf00      	nop
 8013784:	0802538c 	.word	0x0802538c
 8013788:	080256d8 	.word	0x080256d8
 801378c:	080253e0 	.word	0x080253e0
 8013790:	20040b9c 	.word	0x20040b9c

08013794 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801379a:	2000      	movs	r0, #0
 801379c:	f7f8 fd44 	bl	800c228 <memp_malloc>
 80137a0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d00a      	beq.n	80137be <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80137a8:	2228      	movs	r2, #40	; 0x28
 80137aa:	2100      	movs	r1, #0
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f00e f98f 	bl	8021ad0 <memset>
    pcb->ttl = UDP_TTL;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	22ff      	movs	r2, #255	; 0xff
 80137b6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	22ff      	movs	r2, #255	; 0xff
 80137bc:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80137be:	687b      	ldr	r3, [r7, #4]
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3708      	adds	r7, #8
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b085      	sub	sp, #20
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d01e      	beq.n	8013816 <udp_netif_ip_addr_changed+0x4e>
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d01a      	beq.n	8013816 <udp_netif_ip_addr_changed+0x4e>
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d017      	beq.n	8013816 <udp_netif_ip_addr_changed+0x4e>
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d013      	beq.n	8013816 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80137ee:	4b0d      	ldr	r3, [pc, #52]	; (8013824 <udp_netif_ip_addr_changed+0x5c>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	60fb      	str	r3, [r7, #12]
 80137f4:	e00c      	b.n	8013810 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d103      	bne.n	801380a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	681a      	ldr	r2, [r3, #0]
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	68db      	ldr	r3, [r3, #12]
 801380e:	60fb      	str	r3, [r7, #12]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d1ef      	bne.n	80137f6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013816:	bf00      	nop
 8013818:	3714      	adds	r7, #20
 801381a:	46bd      	mov	sp, r7
 801381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013820:	4770      	bx	lr
 8013822:	bf00      	nop
 8013824:	20040b9c 	.word	0x20040b9c

08013828 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b082      	sub	sp, #8
 801382c:	af00      	add	r7, sp, #0
 801382e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013830:	4915      	ldr	r1, [pc, #84]	; (8013888 <etharp_free_entry+0x60>)
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	4613      	mov	r3, r2
 8013836:	005b      	lsls	r3, r3, #1
 8013838:	4413      	add	r3, r2
 801383a:	00db      	lsls	r3, r3, #3
 801383c:	440b      	add	r3, r1
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d013      	beq.n	801386c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013844:	4910      	ldr	r1, [pc, #64]	; (8013888 <etharp_free_entry+0x60>)
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	4613      	mov	r3, r2
 801384a:	005b      	lsls	r3, r3, #1
 801384c:	4413      	add	r3, r2
 801384e:	00db      	lsls	r3, r3, #3
 8013850:	440b      	add	r3, r1
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	4618      	mov	r0, r3
 8013856:	f7f9 fbfb 	bl	800d050 <pbuf_free>
    arp_table[i].q = NULL;
 801385a:	490b      	ldr	r1, [pc, #44]	; (8013888 <etharp_free_entry+0x60>)
 801385c:	687a      	ldr	r2, [r7, #4]
 801385e:	4613      	mov	r3, r2
 8013860:	005b      	lsls	r3, r3, #1
 8013862:	4413      	add	r3, r2
 8013864:	00db      	lsls	r3, r3, #3
 8013866:	440b      	add	r3, r1
 8013868:	2200      	movs	r2, #0
 801386a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801386c:	4906      	ldr	r1, [pc, #24]	; (8013888 <etharp_free_entry+0x60>)
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	4613      	mov	r3, r2
 8013872:	005b      	lsls	r3, r3, #1
 8013874:	4413      	add	r3, r2
 8013876:	00db      	lsls	r3, r3, #3
 8013878:	440b      	add	r3, r1
 801387a:	3314      	adds	r3, #20
 801387c:	2200      	movs	r2, #0
 801387e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013880:	bf00      	nop
 8013882:	3708      	adds	r7, #8
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}
 8013888:	20040ba0 	.word	0x20040ba0

0801388c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b082      	sub	sp, #8
 8013890:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013892:	2300      	movs	r3, #0
 8013894:	607b      	str	r3, [r7, #4]
 8013896:	e096      	b.n	80139c6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013898:	494f      	ldr	r1, [pc, #316]	; (80139d8 <etharp_tmr+0x14c>)
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	4613      	mov	r3, r2
 801389e:	005b      	lsls	r3, r3, #1
 80138a0:	4413      	add	r3, r2
 80138a2:	00db      	lsls	r3, r3, #3
 80138a4:	440b      	add	r3, r1
 80138a6:	3314      	adds	r3, #20
 80138a8:	781b      	ldrb	r3, [r3, #0]
 80138aa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80138ac:	78fb      	ldrb	r3, [r7, #3]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	f000 8086 	beq.w	80139c0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80138b4:	4948      	ldr	r1, [pc, #288]	; (80139d8 <etharp_tmr+0x14c>)
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	4613      	mov	r3, r2
 80138ba:	005b      	lsls	r3, r3, #1
 80138bc:	4413      	add	r3, r2
 80138be:	00db      	lsls	r3, r3, #3
 80138c0:	440b      	add	r3, r1
 80138c2:	3312      	adds	r3, #18
 80138c4:	881b      	ldrh	r3, [r3, #0]
 80138c6:	3301      	adds	r3, #1
 80138c8:	b298      	uxth	r0, r3
 80138ca:	4943      	ldr	r1, [pc, #268]	; (80139d8 <etharp_tmr+0x14c>)
 80138cc:	687a      	ldr	r2, [r7, #4]
 80138ce:	4613      	mov	r3, r2
 80138d0:	005b      	lsls	r3, r3, #1
 80138d2:	4413      	add	r3, r2
 80138d4:	00db      	lsls	r3, r3, #3
 80138d6:	440b      	add	r3, r1
 80138d8:	3312      	adds	r3, #18
 80138da:	4602      	mov	r2, r0
 80138dc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80138de:	493e      	ldr	r1, [pc, #248]	; (80139d8 <etharp_tmr+0x14c>)
 80138e0:	687a      	ldr	r2, [r7, #4]
 80138e2:	4613      	mov	r3, r2
 80138e4:	005b      	lsls	r3, r3, #1
 80138e6:	4413      	add	r3, r2
 80138e8:	00db      	lsls	r3, r3, #3
 80138ea:	440b      	add	r3, r1
 80138ec:	3312      	adds	r3, #18
 80138ee:	881b      	ldrh	r3, [r3, #0]
 80138f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80138f4:	d215      	bcs.n	8013922 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80138f6:	4938      	ldr	r1, [pc, #224]	; (80139d8 <etharp_tmr+0x14c>)
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	4613      	mov	r3, r2
 80138fc:	005b      	lsls	r3, r3, #1
 80138fe:	4413      	add	r3, r2
 8013900:	00db      	lsls	r3, r3, #3
 8013902:	440b      	add	r3, r1
 8013904:	3314      	adds	r3, #20
 8013906:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013908:	2b01      	cmp	r3, #1
 801390a:	d10e      	bne.n	801392a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801390c:	4932      	ldr	r1, [pc, #200]	; (80139d8 <etharp_tmr+0x14c>)
 801390e:	687a      	ldr	r2, [r7, #4]
 8013910:	4613      	mov	r3, r2
 8013912:	005b      	lsls	r3, r3, #1
 8013914:	4413      	add	r3, r2
 8013916:	00db      	lsls	r3, r3, #3
 8013918:	440b      	add	r3, r1
 801391a:	3312      	adds	r3, #18
 801391c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801391e:	2b04      	cmp	r3, #4
 8013920:	d903      	bls.n	801392a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f7ff ff80 	bl	8013828 <etharp_free_entry>
 8013928:	e04a      	b.n	80139c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801392a:	492b      	ldr	r1, [pc, #172]	; (80139d8 <etharp_tmr+0x14c>)
 801392c:	687a      	ldr	r2, [r7, #4]
 801392e:	4613      	mov	r3, r2
 8013930:	005b      	lsls	r3, r3, #1
 8013932:	4413      	add	r3, r2
 8013934:	00db      	lsls	r3, r3, #3
 8013936:	440b      	add	r3, r1
 8013938:	3314      	adds	r3, #20
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	2b03      	cmp	r3, #3
 801393e:	d10a      	bne.n	8013956 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013940:	4925      	ldr	r1, [pc, #148]	; (80139d8 <etharp_tmr+0x14c>)
 8013942:	687a      	ldr	r2, [r7, #4]
 8013944:	4613      	mov	r3, r2
 8013946:	005b      	lsls	r3, r3, #1
 8013948:	4413      	add	r3, r2
 801394a:	00db      	lsls	r3, r3, #3
 801394c:	440b      	add	r3, r1
 801394e:	3314      	adds	r3, #20
 8013950:	2204      	movs	r2, #4
 8013952:	701a      	strb	r2, [r3, #0]
 8013954:	e034      	b.n	80139c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013956:	4920      	ldr	r1, [pc, #128]	; (80139d8 <etharp_tmr+0x14c>)
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	4613      	mov	r3, r2
 801395c:	005b      	lsls	r3, r3, #1
 801395e:	4413      	add	r3, r2
 8013960:	00db      	lsls	r3, r3, #3
 8013962:	440b      	add	r3, r1
 8013964:	3314      	adds	r3, #20
 8013966:	781b      	ldrb	r3, [r3, #0]
 8013968:	2b04      	cmp	r3, #4
 801396a:	d10a      	bne.n	8013982 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801396c:	491a      	ldr	r1, [pc, #104]	; (80139d8 <etharp_tmr+0x14c>)
 801396e:	687a      	ldr	r2, [r7, #4]
 8013970:	4613      	mov	r3, r2
 8013972:	005b      	lsls	r3, r3, #1
 8013974:	4413      	add	r3, r2
 8013976:	00db      	lsls	r3, r3, #3
 8013978:	440b      	add	r3, r1
 801397a:	3314      	adds	r3, #20
 801397c:	2202      	movs	r2, #2
 801397e:	701a      	strb	r2, [r3, #0]
 8013980:	e01e      	b.n	80139c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013982:	4915      	ldr	r1, [pc, #84]	; (80139d8 <etharp_tmr+0x14c>)
 8013984:	687a      	ldr	r2, [r7, #4]
 8013986:	4613      	mov	r3, r2
 8013988:	005b      	lsls	r3, r3, #1
 801398a:	4413      	add	r3, r2
 801398c:	00db      	lsls	r3, r3, #3
 801398e:	440b      	add	r3, r1
 8013990:	3314      	adds	r3, #20
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	2b01      	cmp	r3, #1
 8013996:	d113      	bne.n	80139c0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013998:	490f      	ldr	r1, [pc, #60]	; (80139d8 <etharp_tmr+0x14c>)
 801399a:	687a      	ldr	r2, [r7, #4]
 801399c:	4613      	mov	r3, r2
 801399e:	005b      	lsls	r3, r3, #1
 80139a0:	4413      	add	r3, r2
 80139a2:	00db      	lsls	r3, r3, #3
 80139a4:	440b      	add	r3, r1
 80139a6:	3308      	adds	r3, #8
 80139a8:	6818      	ldr	r0, [r3, #0]
 80139aa:	687a      	ldr	r2, [r7, #4]
 80139ac:	4613      	mov	r3, r2
 80139ae:	005b      	lsls	r3, r3, #1
 80139b0:	4413      	add	r3, r2
 80139b2:	00db      	lsls	r3, r3, #3
 80139b4:	4a08      	ldr	r2, [pc, #32]	; (80139d8 <etharp_tmr+0x14c>)
 80139b6:	4413      	add	r3, r2
 80139b8:	3304      	adds	r3, #4
 80139ba:	4619      	mov	r1, r3
 80139bc:	f000 fe6e 	bl	801469c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	3301      	adds	r3, #1
 80139c4:	607b      	str	r3, [r7, #4]
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2b09      	cmp	r3, #9
 80139ca:	f77f af65 	ble.w	8013898 <etharp_tmr+0xc>
      }
    }
  }
}
 80139ce:	bf00      	nop
 80139d0:	bf00      	nop
 80139d2:	3708      	adds	r7, #8
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}
 80139d8:	20040ba0 	.word	0x20040ba0

080139dc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b08a      	sub	sp, #40	; 0x28
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	460b      	mov	r3, r1
 80139e6:	607a      	str	r2, [r7, #4]
 80139e8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80139ea:	230a      	movs	r3, #10
 80139ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80139ee:	230a      	movs	r3, #10
 80139f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80139f2:	230a      	movs	r3, #10
 80139f4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80139f6:	2300      	movs	r3, #0
 80139f8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80139fa:	230a      	movs	r3, #10
 80139fc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80139fe:	2300      	movs	r3, #0
 8013a00:	83bb      	strh	r3, [r7, #28]
 8013a02:	2300      	movs	r3, #0
 8013a04:	837b      	strh	r3, [r7, #26]
 8013a06:	2300      	movs	r3, #0
 8013a08:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	843b      	strh	r3, [r7, #32]
 8013a0e:	e0ae      	b.n	8013b6e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013a10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a14:	49a6      	ldr	r1, [pc, #664]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013a16:	4613      	mov	r3, r2
 8013a18:	005b      	lsls	r3, r3, #1
 8013a1a:	4413      	add	r3, r2
 8013a1c:	00db      	lsls	r3, r3, #3
 8013a1e:	440b      	add	r3, r1
 8013a20:	3314      	adds	r3, #20
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013a26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013a2a:	2b0a      	cmp	r3, #10
 8013a2c:	d105      	bne.n	8013a3a <etharp_find_entry+0x5e>
 8013a2e:	7dfb      	ldrb	r3, [r7, #23]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d102      	bne.n	8013a3a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013a34:	8c3b      	ldrh	r3, [r7, #32]
 8013a36:	847b      	strh	r3, [r7, #34]	; 0x22
 8013a38:	e095      	b.n	8013b66 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013a3a:	7dfb      	ldrb	r3, [r7, #23]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	f000 8092 	beq.w	8013b66 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013a42:	7dfb      	ldrb	r3, [r7, #23]
 8013a44:	2b01      	cmp	r3, #1
 8013a46:	d009      	beq.n	8013a5c <etharp_find_entry+0x80>
 8013a48:	7dfb      	ldrb	r3, [r7, #23]
 8013a4a:	2b01      	cmp	r3, #1
 8013a4c:	d806      	bhi.n	8013a5c <etharp_find_entry+0x80>
 8013a4e:	4b99      	ldr	r3, [pc, #612]	; (8013cb4 <etharp_find_entry+0x2d8>)
 8013a50:	f240 1223 	movw	r2, #291	; 0x123
 8013a54:	4998      	ldr	r1, [pc, #608]	; (8013cb8 <etharp_find_entry+0x2dc>)
 8013a56:	4899      	ldr	r0, [pc, #612]	; (8013cbc <etharp_find_entry+0x2e0>)
 8013a58:	f00e f938 	bl	8021ccc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d020      	beq.n	8013aa4 <etharp_find_entry+0xc8>
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	6819      	ldr	r1, [r3, #0]
 8013a66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a6a:	4891      	ldr	r0, [pc, #580]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013a6c:	4613      	mov	r3, r2
 8013a6e:	005b      	lsls	r3, r3, #1
 8013a70:	4413      	add	r3, r2
 8013a72:	00db      	lsls	r3, r3, #3
 8013a74:	4403      	add	r3, r0
 8013a76:	3304      	adds	r3, #4
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	4299      	cmp	r1, r3
 8013a7c:	d112      	bne.n	8013aa4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d00c      	beq.n	8013a9e <etharp_find_entry+0xc2>
 8013a84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a88:	4989      	ldr	r1, [pc, #548]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013a8a:	4613      	mov	r3, r2
 8013a8c:	005b      	lsls	r3, r3, #1
 8013a8e:	4413      	add	r3, r2
 8013a90:	00db      	lsls	r3, r3, #3
 8013a92:	440b      	add	r3, r1
 8013a94:	3308      	adds	r3, #8
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d102      	bne.n	8013aa4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013a9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013aa2:	e100      	b.n	8013ca6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013aa4:	7dfb      	ldrb	r3, [r7, #23]
 8013aa6:	2b01      	cmp	r3, #1
 8013aa8:	d140      	bne.n	8013b2c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013aaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013aae:	4980      	ldr	r1, [pc, #512]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	005b      	lsls	r3, r3, #1
 8013ab4:	4413      	add	r3, r2
 8013ab6:	00db      	lsls	r3, r3, #3
 8013ab8:	440b      	add	r3, r1
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d01a      	beq.n	8013af6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013ac0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ac4:	497a      	ldr	r1, [pc, #488]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	005b      	lsls	r3, r3, #1
 8013aca:	4413      	add	r3, r2
 8013acc:	00db      	lsls	r3, r3, #3
 8013ace:	440b      	add	r3, r1
 8013ad0:	3312      	adds	r3, #18
 8013ad2:	881b      	ldrh	r3, [r3, #0]
 8013ad4:	8bba      	ldrh	r2, [r7, #28]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d845      	bhi.n	8013b66 <etharp_find_entry+0x18a>
            old_queue = i;
 8013ada:	8c3b      	ldrh	r3, [r7, #32]
 8013adc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013ade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ae2:	4973      	ldr	r1, [pc, #460]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013ae4:	4613      	mov	r3, r2
 8013ae6:	005b      	lsls	r3, r3, #1
 8013ae8:	4413      	add	r3, r2
 8013aea:	00db      	lsls	r3, r3, #3
 8013aec:	440b      	add	r3, r1
 8013aee:	3312      	adds	r3, #18
 8013af0:	881b      	ldrh	r3, [r3, #0]
 8013af2:	83bb      	strh	r3, [r7, #28]
 8013af4:	e037      	b.n	8013b66 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013af6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013afa:	496d      	ldr	r1, [pc, #436]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013afc:	4613      	mov	r3, r2
 8013afe:	005b      	lsls	r3, r3, #1
 8013b00:	4413      	add	r3, r2
 8013b02:	00db      	lsls	r3, r3, #3
 8013b04:	440b      	add	r3, r1
 8013b06:	3312      	adds	r3, #18
 8013b08:	881b      	ldrh	r3, [r3, #0]
 8013b0a:	8b7a      	ldrh	r2, [r7, #26]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d82a      	bhi.n	8013b66 <etharp_find_entry+0x18a>
            old_pending = i;
 8013b10:	8c3b      	ldrh	r3, [r7, #32]
 8013b12:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013b14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b18:	4965      	ldr	r1, [pc, #404]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013b1a:	4613      	mov	r3, r2
 8013b1c:	005b      	lsls	r3, r3, #1
 8013b1e:	4413      	add	r3, r2
 8013b20:	00db      	lsls	r3, r3, #3
 8013b22:	440b      	add	r3, r1
 8013b24:	3312      	adds	r3, #18
 8013b26:	881b      	ldrh	r3, [r3, #0]
 8013b28:	837b      	strh	r3, [r7, #26]
 8013b2a:	e01c      	b.n	8013b66 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013b2c:	7dfb      	ldrb	r3, [r7, #23]
 8013b2e:	2b01      	cmp	r3, #1
 8013b30:	d919      	bls.n	8013b66 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013b32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b36:	495e      	ldr	r1, [pc, #376]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013b38:	4613      	mov	r3, r2
 8013b3a:	005b      	lsls	r3, r3, #1
 8013b3c:	4413      	add	r3, r2
 8013b3e:	00db      	lsls	r3, r3, #3
 8013b40:	440b      	add	r3, r1
 8013b42:	3312      	adds	r3, #18
 8013b44:	881b      	ldrh	r3, [r3, #0]
 8013b46:	8b3a      	ldrh	r2, [r7, #24]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d80c      	bhi.n	8013b66 <etharp_find_entry+0x18a>
            old_stable = i;
 8013b4c:	8c3b      	ldrh	r3, [r7, #32]
 8013b4e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013b50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b54:	4956      	ldr	r1, [pc, #344]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013b56:	4613      	mov	r3, r2
 8013b58:	005b      	lsls	r3, r3, #1
 8013b5a:	4413      	add	r3, r2
 8013b5c:	00db      	lsls	r3, r3, #3
 8013b5e:	440b      	add	r3, r1
 8013b60:	3312      	adds	r3, #18
 8013b62:	881b      	ldrh	r3, [r3, #0]
 8013b64:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013b66:	8c3b      	ldrh	r3, [r7, #32]
 8013b68:	3301      	adds	r3, #1
 8013b6a:	b29b      	uxth	r3, r3
 8013b6c:	843b      	strh	r3, [r7, #32]
 8013b6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b72:	2b09      	cmp	r3, #9
 8013b74:	f77f af4c 	ble.w	8013a10 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013b78:	7afb      	ldrb	r3, [r7, #11]
 8013b7a:	f003 0302 	and.w	r3, r3, #2
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d108      	bne.n	8013b94 <etharp_find_entry+0x1b8>
 8013b82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013b86:	2b0a      	cmp	r3, #10
 8013b88:	d107      	bne.n	8013b9a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013b8a:	7afb      	ldrb	r3, [r7, #11]
 8013b8c:	f003 0301 	and.w	r3, r3, #1
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d102      	bne.n	8013b9a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b98:	e085      	b.n	8013ca6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013b9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013b9e:	2b09      	cmp	r3, #9
 8013ba0:	dc02      	bgt.n	8013ba8 <etharp_find_entry+0x1cc>
    i = empty;
 8013ba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ba4:	843b      	strh	r3, [r7, #32]
 8013ba6:	e039      	b.n	8013c1c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013ba8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013bac:	2b09      	cmp	r3, #9
 8013bae:	dc14      	bgt.n	8013bda <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bb2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013bb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bb8:	493d      	ldr	r1, [pc, #244]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013bba:	4613      	mov	r3, r2
 8013bbc:	005b      	lsls	r3, r3, #1
 8013bbe:	4413      	add	r3, r2
 8013bc0:	00db      	lsls	r3, r3, #3
 8013bc2:	440b      	add	r3, r1
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d018      	beq.n	8013bfc <etharp_find_entry+0x220>
 8013bca:	4b3a      	ldr	r3, [pc, #232]	; (8013cb4 <etharp_find_entry+0x2d8>)
 8013bcc:	f240 126d 	movw	r2, #365	; 0x16d
 8013bd0:	493b      	ldr	r1, [pc, #236]	; (8013cc0 <etharp_find_entry+0x2e4>)
 8013bd2:	483a      	ldr	r0, [pc, #232]	; (8013cbc <etharp_find_entry+0x2e0>)
 8013bd4:	f00e f87a 	bl	8021ccc <iprintf>
 8013bd8:	e010      	b.n	8013bfc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013bda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013bde:	2b09      	cmp	r3, #9
 8013be0:	dc02      	bgt.n	8013be8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013be4:	843b      	strh	r3, [r7, #32]
 8013be6:	e009      	b.n	8013bfc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013be8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013bec:	2b09      	cmp	r3, #9
 8013bee:	dc02      	bgt.n	8013bf6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013bf0:	8bfb      	ldrh	r3, [r7, #30]
 8013bf2:	843b      	strh	r3, [r7, #32]
 8013bf4:	e002      	b.n	8013bfc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bfa:	e054      	b.n	8013ca6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013bfc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013c00:	2b09      	cmp	r3, #9
 8013c02:	dd06      	ble.n	8013c12 <etharp_find_entry+0x236>
 8013c04:	4b2b      	ldr	r3, [pc, #172]	; (8013cb4 <etharp_find_entry+0x2d8>)
 8013c06:	f240 127f 	movw	r2, #383	; 0x17f
 8013c0a:	492e      	ldr	r1, [pc, #184]	; (8013cc4 <etharp_find_entry+0x2e8>)
 8013c0c:	482b      	ldr	r0, [pc, #172]	; (8013cbc <etharp_find_entry+0x2e0>)
 8013c0e:	f00e f85d 	bl	8021ccc <iprintf>
    etharp_free_entry(i);
 8013c12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7ff fe06 	bl	8013828 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013c1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013c20:	2b09      	cmp	r3, #9
 8013c22:	dd06      	ble.n	8013c32 <etharp_find_entry+0x256>
 8013c24:	4b23      	ldr	r3, [pc, #140]	; (8013cb4 <etharp_find_entry+0x2d8>)
 8013c26:	f240 1283 	movw	r2, #387	; 0x183
 8013c2a:	4926      	ldr	r1, [pc, #152]	; (8013cc4 <etharp_find_entry+0x2e8>)
 8013c2c:	4823      	ldr	r0, [pc, #140]	; (8013cbc <etharp_find_entry+0x2e0>)
 8013c2e:	f00e f84d 	bl	8021ccc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013c32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c36:	491e      	ldr	r1, [pc, #120]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013c38:	4613      	mov	r3, r2
 8013c3a:	005b      	lsls	r3, r3, #1
 8013c3c:	4413      	add	r3, r2
 8013c3e:	00db      	lsls	r3, r3, #3
 8013c40:	440b      	add	r3, r1
 8013c42:	3314      	adds	r3, #20
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d006      	beq.n	8013c58 <etharp_find_entry+0x27c>
 8013c4a:	4b1a      	ldr	r3, [pc, #104]	; (8013cb4 <etharp_find_entry+0x2d8>)
 8013c4c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013c50:	491d      	ldr	r1, [pc, #116]	; (8013cc8 <etharp_find_entry+0x2ec>)
 8013c52:	481a      	ldr	r0, [pc, #104]	; (8013cbc <etharp_find_entry+0x2e0>)
 8013c54:	f00e f83a 	bl	8021ccc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d00b      	beq.n	8013c76 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013c5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	6819      	ldr	r1, [r3, #0]
 8013c66:	4812      	ldr	r0, [pc, #72]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013c68:	4613      	mov	r3, r2
 8013c6a:	005b      	lsls	r3, r3, #1
 8013c6c:	4413      	add	r3, r2
 8013c6e:	00db      	lsls	r3, r3, #3
 8013c70:	4403      	add	r3, r0
 8013c72:	3304      	adds	r3, #4
 8013c74:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013c76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c7a:	490d      	ldr	r1, [pc, #52]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013c7c:	4613      	mov	r3, r2
 8013c7e:	005b      	lsls	r3, r3, #1
 8013c80:	4413      	add	r3, r2
 8013c82:	00db      	lsls	r3, r3, #3
 8013c84:	440b      	add	r3, r1
 8013c86:	3312      	adds	r3, #18
 8013c88:	2200      	movs	r2, #0
 8013c8a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013c8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c90:	4907      	ldr	r1, [pc, #28]	; (8013cb0 <etharp_find_entry+0x2d4>)
 8013c92:	4613      	mov	r3, r2
 8013c94:	005b      	lsls	r3, r3, #1
 8013c96:	4413      	add	r3, r2
 8013c98:	00db      	lsls	r3, r3, #3
 8013c9a:	440b      	add	r3, r1
 8013c9c:	3308      	adds	r3, #8
 8013c9e:	687a      	ldr	r2, [r7, #4]
 8013ca0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013ca2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	3728      	adds	r7, #40	; 0x28
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	20040ba0 	.word	0x20040ba0
 8013cb4:	080256f0 	.word	0x080256f0
 8013cb8:	08025728 	.word	0x08025728
 8013cbc:	08025768 	.word	0x08025768
 8013cc0:	08025790 	.word	0x08025790
 8013cc4:	080257a8 	.word	0x080257a8
 8013cc8:	080257bc 	.word	0x080257bc

08013ccc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b088      	sub	sp, #32
 8013cd0:	af02      	add	r7, sp, #8
 8013cd2:	60f8      	str	r0, [r7, #12]
 8013cd4:	60b9      	str	r1, [r7, #8]
 8013cd6:	607a      	str	r2, [r7, #4]
 8013cd8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ce0:	2b06      	cmp	r3, #6
 8013ce2:	d006      	beq.n	8013cf2 <etharp_update_arp_entry+0x26>
 8013ce4:	4b48      	ldr	r3, [pc, #288]	; (8013e08 <etharp_update_arp_entry+0x13c>)
 8013ce6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013cea:	4948      	ldr	r1, [pc, #288]	; (8013e0c <etharp_update_arp_entry+0x140>)
 8013cec:	4848      	ldr	r0, [pc, #288]	; (8013e10 <etharp_update_arp_entry+0x144>)
 8013cee:	f00d ffed 	bl	8021ccc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d012      	beq.n	8013d1e <etharp_update_arp_entry+0x52>
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d00e      	beq.n	8013d1e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	68f9      	ldr	r1, [r7, #12]
 8013d06:	4618      	mov	r0, r3
 8013d08:	f001 fd44 	bl	8015794 <ip4_addr_isbroadcast_u32>
 8013d0c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d105      	bne.n	8013d1e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013d1a:	2be0      	cmp	r3, #224	; 0xe0
 8013d1c:	d102      	bne.n	8013d24 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013d1e:	f06f 030f 	mvn.w	r3, #15
 8013d22:	e06c      	b.n	8013dfe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013d24:	78fb      	ldrb	r3, [r7, #3]
 8013d26:	68fa      	ldr	r2, [r7, #12]
 8013d28:	4619      	mov	r1, r3
 8013d2a:	68b8      	ldr	r0, [r7, #8]
 8013d2c:	f7ff fe56 	bl	80139dc <etharp_find_entry>
 8013d30:	4603      	mov	r3, r0
 8013d32:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013d34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	da02      	bge.n	8013d42 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013d3c:	8afb      	ldrh	r3, [r7, #22]
 8013d3e:	b25b      	sxtb	r3, r3
 8013d40:	e05d      	b.n	8013dfe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013d42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d46:	4933      	ldr	r1, [pc, #204]	; (8013e14 <etharp_update_arp_entry+0x148>)
 8013d48:	4613      	mov	r3, r2
 8013d4a:	005b      	lsls	r3, r3, #1
 8013d4c:	4413      	add	r3, r2
 8013d4e:	00db      	lsls	r3, r3, #3
 8013d50:	440b      	add	r3, r1
 8013d52:	3314      	adds	r3, #20
 8013d54:	2202      	movs	r2, #2
 8013d56:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013d58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d5c:	492d      	ldr	r1, [pc, #180]	; (8013e14 <etharp_update_arp_entry+0x148>)
 8013d5e:	4613      	mov	r3, r2
 8013d60:	005b      	lsls	r3, r3, #1
 8013d62:	4413      	add	r3, r2
 8013d64:	00db      	lsls	r3, r3, #3
 8013d66:	440b      	add	r3, r1
 8013d68:	3308      	adds	r3, #8
 8013d6a:	68fa      	ldr	r2, [r7, #12]
 8013d6c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013d6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d72:	4613      	mov	r3, r2
 8013d74:	005b      	lsls	r3, r3, #1
 8013d76:	4413      	add	r3, r2
 8013d78:	00db      	lsls	r3, r3, #3
 8013d7a:	3308      	adds	r3, #8
 8013d7c:	4a25      	ldr	r2, [pc, #148]	; (8013e14 <etharp_update_arp_entry+0x148>)
 8013d7e:	4413      	add	r3, r2
 8013d80:	3304      	adds	r3, #4
 8013d82:	2206      	movs	r2, #6
 8013d84:	6879      	ldr	r1, [r7, #4]
 8013d86:	4618      	mov	r0, r3
 8013d88:	f00d fe7a 	bl	8021a80 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013d8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d90:	4920      	ldr	r1, [pc, #128]	; (8013e14 <etharp_update_arp_entry+0x148>)
 8013d92:	4613      	mov	r3, r2
 8013d94:	005b      	lsls	r3, r3, #1
 8013d96:	4413      	add	r3, r2
 8013d98:	00db      	lsls	r3, r3, #3
 8013d9a:	440b      	add	r3, r1
 8013d9c:	3312      	adds	r3, #18
 8013d9e:	2200      	movs	r2, #0
 8013da0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013da2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013da6:	491b      	ldr	r1, [pc, #108]	; (8013e14 <etharp_update_arp_entry+0x148>)
 8013da8:	4613      	mov	r3, r2
 8013daa:	005b      	lsls	r3, r3, #1
 8013dac:	4413      	add	r3, r2
 8013dae:	00db      	lsls	r3, r3, #3
 8013db0:	440b      	add	r3, r1
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d021      	beq.n	8013dfc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013db8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013dbc:	4915      	ldr	r1, [pc, #84]	; (8013e14 <etharp_update_arp_entry+0x148>)
 8013dbe:	4613      	mov	r3, r2
 8013dc0:	005b      	lsls	r3, r3, #1
 8013dc2:	4413      	add	r3, r2
 8013dc4:	00db      	lsls	r3, r3, #3
 8013dc6:	440b      	add	r3, r1
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013dcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013dd0:	4910      	ldr	r1, [pc, #64]	; (8013e14 <etharp_update_arp_entry+0x148>)
 8013dd2:	4613      	mov	r3, r2
 8013dd4:	005b      	lsls	r3, r3, #1
 8013dd6:	4413      	add	r3, r2
 8013dd8:	00db      	lsls	r3, r3, #3
 8013dda:	440b      	add	r3, r1
 8013ddc:	2200      	movs	r2, #0
 8013dde:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8013de6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013dea:	9300      	str	r3, [sp, #0]
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	6939      	ldr	r1, [r7, #16]
 8013df0:	68f8      	ldr	r0, [r7, #12]
 8013df2:	f002 fc6d 	bl	80166d0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013df6:	6938      	ldr	r0, [r7, #16]
 8013df8:	f7f9 f92a 	bl	800d050 <pbuf_free>
  }
  return ERR_OK;
 8013dfc:	2300      	movs	r3, #0
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3718      	adds	r7, #24
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd80      	pop	{r7, pc}
 8013e06:	bf00      	nop
 8013e08:	080256f0 	.word	0x080256f0
 8013e0c:	080257e8 	.word	0x080257e8
 8013e10:	08025768 	.word	0x08025768
 8013e14:	20040ba0 	.word	0x20040ba0

08013e18 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b084      	sub	sp, #16
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e20:	2300      	movs	r3, #0
 8013e22:	60fb      	str	r3, [r7, #12]
 8013e24:	e01e      	b.n	8013e64 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013e26:	4913      	ldr	r1, [pc, #76]	; (8013e74 <etharp_cleanup_netif+0x5c>)
 8013e28:	68fa      	ldr	r2, [r7, #12]
 8013e2a:	4613      	mov	r3, r2
 8013e2c:	005b      	lsls	r3, r3, #1
 8013e2e:	4413      	add	r3, r2
 8013e30:	00db      	lsls	r3, r3, #3
 8013e32:	440b      	add	r3, r1
 8013e34:	3314      	adds	r3, #20
 8013e36:	781b      	ldrb	r3, [r3, #0]
 8013e38:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013e3a:	7afb      	ldrb	r3, [r7, #11]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d00e      	beq.n	8013e5e <etharp_cleanup_netif+0x46>
 8013e40:	490c      	ldr	r1, [pc, #48]	; (8013e74 <etharp_cleanup_netif+0x5c>)
 8013e42:	68fa      	ldr	r2, [r7, #12]
 8013e44:	4613      	mov	r3, r2
 8013e46:	005b      	lsls	r3, r3, #1
 8013e48:	4413      	add	r3, r2
 8013e4a:	00db      	lsls	r3, r3, #3
 8013e4c:	440b      	add	r3, r1
 8013e4e:	3308      	adds	r3, #8
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d102      	bne.n	8013e5e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013e58:	68f8      	ldr	r0, [r7, #12]
 8013e5a:	f7ff fce5 	bl	8013828 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	3301      	adds	r3, #1
 8013e62:	60fb      	str	r3, [r7, #12]
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	2b09      	cmp	r3, #9
 8013e68:	dddd      	ble.n	8013e26 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013e6a:	bf00      	nop
 8013e6c:	bf00      	nop
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}
 8013e74:	20040ba0 	.word	0x20040ba0

08013e78 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013e78:	b5b0      	push	{r4, r5, r7, lr}
 8013e7a:	b08a      	sub	sp, #40	; 0x28
 8013e7c:	af04      	add	r7, sp, #16
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d107      	bne.n	8013e98 <etharp_input+0x20>
 8013e88:	4b3d      	ldr	r3, [pc, #244]	; (8013f80 <etharp_input+0x108>)
 8013e8a:	f240 228a 	movw	r2, #650	; 0x28a
 8013e8e:	493d      	ldr	r1, [pc, #244]	; (8013f84 <etharp_input+0x10c>)
 8013e90:	483d      	ldr	r0, [pc, #244]	; (8013f88 <etharp_input+0x110>)
 8013e92:	f00d ff1b 	bl	8021ccc <iprintf>
 8013e96:	e06f      	b.n	8013f78 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	685b      	ldr	r3, [r3, #4]
 8013e9c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	881b      	ldrh	r3, [r3, #0]
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ea8:	d10c      	bne.n	8013ec4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013eae:	2b06      	cmp	r3, #6
 8013eb0:	d108      	bne.n	8013ec4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013eb2:	693b      	ldr	r3, [r7, #16]
 8013eb4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013eb6:	2b04      	cmp	r3, #4
 8013eb8:	d104      	bne.n	8013ec4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	885b      	ldrh	r3, [r3, #2]
 8013ebe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013ec0:	2b08      	cmp	r3, #8
 8013ec2:	d003      	beq.n	8013ecc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f7f9 f8c3 	bl	800d050 <pbuf_free>
    return;
 8013eca:	e055      	b.n	8013f78 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	330e      	adds	r3, #14
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013ed4:	693b      	ldr	r3, [r7, #16]
 8013ed6:	3318      	adds	r3, #24
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	3304      	adds	r3, #4
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d102      	bne.n	8013eec <etharp_input+0x74>
    for_us = 0;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	75fb      	strb	r3, [r7, #23]
 8013eea:	e009      	b.n	8013f00 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013eec:	68ba      	ldr	r2, [r7, #8]
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	3304      	adds	r3, #4
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	429a      	cmp	r2, r3
 8013ef6:	bf0c      	ite	eq
 8013ef8:	2301      	moveq	r3, #1
 8013efa:	2300      	movne	r3, #0
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013f00:	693b      	ldr	r3, [r7, #16]
 8013f02:	f103 0208 	add.w	r2, r3, #8
 8013f06:	7dfb      	ldrb	r3, [r7, #23]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d001      	beq.n	8013f10 <etharp_input+0x98>
 8013f0c:	2301      	movs	r3, #1
 8013f0e:	e000      	b.n	8013f12 <etharp_input+0x9a>
 8013f10:	2302      	movs	r3, #2
 8013f12:	f107 010c 	add.w	r1, r7, #12
 8013f16:	6838      	ldr	r0, [r7, #0]
 8013f18:	f7ff fed8 	bl	8013ccc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	88db      	ldrh	r3, [r3, #6]
 8013f20:	b29b      	uxth	r3, r3
 8013f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f26:	d003      	beq.n	8013f30 <etharp_input+0xb8>
 8013f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f2c:	d01e      	beq.n	8013f6c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013f2e:	e020      	b.n	8013f72 <etharp_input+0xfa>
      if (for_us) {
 8013f30:	7dfb      	ldrb	r3, [r7, #23]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d01c      	beq.n	8013f70 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8013f3c:	693b      	ldr	r3, [r7, #16]
 8013f3e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8013f48:	683b      	ldr	r3, [r7, #0]
 8013f4a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013f4c:	693a      	ldr	r2, [r7, #16]
 8013f4e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013f50:	2102      	movs	r1, #2
 8013f52:	9103      	str	r1, [sp, #12]
 8013f54:	f107 010c 	add.w	r1, r7, #12
 8013f58:	9102      	str	r1, [sp, #8]
 8013f5a:	9201      	str	r2, [sp, #4]
 8013f5c:	9300      	str	r3, [sp, #0]
 8013f5e:	462b      	mov	r3, r5
 8013f60:	4622      	mov	r2, r4
 8013f62:	4601      	mov	r1, r0
 8013f64:	6838      	ldr	r0, [r7, #0]
 8013f66:	f000 faeb 	bl	8014540 <etharp_raw>
      break;
 8013f6a:	e001      	b.n	8013f70 <etharp_input+0xf8>
      break;
 8013f6c:	bf00      	nop
 8013f6e:	e000      	b.n	8013f72 <etharp_input+0xfa>
      break;
 8013f70:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f7f9 f86c 	bl	800d050 <pbuf_free>
}
 8013f78:	3718      	adds	r7, #24
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	080256f0 	.word	0x080256f0
 8013f84:	08025840 	.word	0x08025840
 8013f88:	08025768 	.word	0x08025768

08013f8c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b086      	sub	sp, #24
 8013f90:	af02      	add	r7, sp, #8
 8013f92:	60f8      	str	r0, [r7, #12]
 8013f94:	60b9      	str	r1, [r7, #8]
 8013f96:	4613      	mov	r3, r2
 8013f98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013f9a:	79fa      	ldrb	r2, [r7, #7]
 8013f9c:	4944      	ldr	r1, [pc, #272]	; (80140b0 <etharp_output_to_arp_index+0x124>)
 8013f9e:	4613      	mov	r3, r2
 8013fa0:	005b      	lsls	r3, r3, #1
 8013fa2:	4413      	add	r3, r2
 8013fa4:	00db      	lsls	r3, r3, #3
 8013fa6:	440b      	add	r3, r1
 8013fa8:	3314      	adds	r3, #20
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	2b01      	cmp	r3, #1
 8013fae:	d806      	bhi.n	8013fbe <etharp_output_to_arp_index+0x32>
 8013fb0:	4b40      	ldr	r3, [pc, #256]	; (80140b4 <etharp_output_to_arp_index+0x128>)
 8013fb2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013fb6:	4940      	ldr	r1, [pc, #256]	; (80140b8 <etharp_output_to_arp_index+0x12c>)
 8013fb8:	4840      	ldr	r0, [pc, #256]	; (80140bc <etharp_output_to_arp_index+0x130>)
 8013fba:	f00d fe87 	bl	8021ccc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013fbe:	79fa      	ldrb	r2, [r7, #7]
 8013fc0:	493b      	ldr	r1, [pc, #236]	; (80140b0 <etharp_output_to_arp_index+0x124>)
 8013fc2:	4613      	mov	r3, r2
 8013fc4:	005b      	lsls	r3, r3, #1
 8013fc6:	4413      	add	r3, r2
 8013fc8:	00db      	lsls	r3, r3, #3
 8013fca:	440b      	add	r3, r1
 8013fcc:	3314      	adds	r3, #20
 8013fce:	781b      	ldrb	r3, [r3, #0]
 8013fd0:	2b02      	cmp	r3, #2
 8013fd2:	d153      	bne.n	801407c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013fd4:	79fa      	ldrb	r2, [r7, #7]
 8013fd6:	4936      	ldr	r1, [pc, #216]	; (80140b0 <etharp_output_to_arp_index+0x124>)
 8013fd8:	4613      	mov	r3, r2
 8013fda:	005b      	lsls	r3, r3, #1
 8013fdc:	4413      	add	r3, r2
 8013fde:	00db      	lsls	r3, r3, #3
 8013fe0:	440b      	add	r3, r1
 8013fe2:	3312      	adds	r3, #18
 8013fe4:	881b      	ldrh	r3, [r3, #0]
 8013fe6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013fea:	d919      	bls.n	8014020 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013fec:	79fa      	ldrb	r2, [r7, #7]
 8013fee:	4613      	mov	r3, r2
 8013ff0:	005b      	lsls	r3, r3, #1
 8013ff2:	4413      	add	r3, r2
 8013ff4:	00db      	lsls	r3, r3, #3
 8013ff6:	4a2e      	ldr	r2, [pc, #184]	; (80140b0 <etharp_output_to_arp_index+0x124>)
 8013ff8:	4413      	add	r3, r2
 8013ffa:	3304      	adds	r3, #4
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f000 fb4c 	bl	801469c <etharp_request>
 8014004:	4603      	mov	r3, r0
 8014006:	2b00      	cmp	r3, #0
 8014008:	d138      	bne.n	801407c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801400a:	79fa      	ldrb	r2, [r7, #7]
 801400c:	4928      	ldr	r1, [pc, #160]	; (80140b0 <etharp_output_to_arp_index+0x124>)
 801400e:	4613      	mov	r3, r2
 8014010:	005b      	lsls	r3, r3, #1
 8014012:	4413      	add	r3, r2
 8014014:	00db      	lsls	r3, r3, #3
 8014016:	440b      	add	r3, r1
 8014018:	3314      	adds	r3, #20
 801401a:	2203      	movs	r2, #3
 801401c:	701a      	strb	r2, [r3, #0]
 801401e:	e02d      	b.n	801407c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014020:	79fa      	ldrb	r2, [r7, #7]
 8014022:	4923      	ldr	r1, [pc, #140]	; (80140b0 <etharp_output_to_arp_index+0x124>)
 8014024:	4613      	mov	r3, r2
 8014026:	005b      	lsls	r3, r3, #1
 8014028:	4413      	add	r3, r2
 801402a:	00db      	lsls	r3, r3, #3
 801402c:	440b      	add	r3, r1
 801402e:	3312      	adds	r3, #18
 8014030:	881b      	ldrh	r3, [r3, #0]
 8014032:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014036:	d321      	bcc.n	801407c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014038:	79fa      	ldrb	r2, [r7, #7]
 801403a:	4613      	mov	r3, r2
 801403c:	005b      	lsls	r3, r3, #1
 801403e:	4413      	add	r3, r2
 8014040:	00db      	lsls	r3, r3, #3
 8014042:	4a1b      	ldr	r2, [pc, #108]	; (80140b0 <etharp_output_to_arp_index+0x124>)
 8014044:	4413      	add	r3, r2
 8014046:	1d19      	adds	r1, r3, #4
 8014048:	79fa      	ldrb	r2, [r7, #7]
 801404a:	4613      	mov	r3, r2
 801404c:	005b      	lsls	r3, r3, #1
 801404e:	4413      	add	r3, r2
 8014050:	00db      	lsls	r3, r3, #3
 8014052:	3308      	adds	r3, #8
 8014054:	4a16      	ldr	r2, [pc, #88]	; (80140b0 <etharp_output_to_arp_index+0x124>)
 8014056:	4413      	add	r3, r2
 8014058:	3304      	adds	r3, #4
 801405a:	461a      	mov	r2, r3
 801405c:	68f8      	ldr	r0, [r7, #12]
 801405e:	f000 fafb 	bl	8014658 <etharp_request_dst>
 8014062:	4603      	mov	r3, r0
 8014064:	2b00      	cmp	r3, #0
 8014066:	d109      	bne.n	801407c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014068:	79fa      	ldrb	r2, [r7, #7]
 801406a:	4911      	ldr	r1, [pc, #68]	; (80140b0 <etharp_output_to_arp_index+0x124>)
 801406c:	4613      	mov	r3, r2
 801406e:	005b      	lsls	r3, r3, #1
 8014070:	4413      	add	r3, r2
 8014072:	00db      	lsls	r3, r3, #3
 8014074:	440b      	add	r3, r1
 8014076:	3314      	adds	r3, #20
 8014078:	2203      	movs	r2, #3
 801407a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014082:	79fa      	ldrb	r2, [r7, #7]
 8014084:	4613      	mov	r3, r2
 8014086:	005b      	lsls	r3, r3, #1
 8014088:	4413      	add	r3, r2
 801408a:	00db      	lsls	r3, r3, #3
 801408c:	3308      	adds	r3, #8
 801408e:	4a08      	ldr	r2, [pc, #32]	; (80140b0 <etharp_output_to_arp_index+0x124>)
 8014090:	4413      	add	r3, r2
 8014092:	3304      	adds	r3, #4
 8014094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014098:	9200      	str	r2, [sp, #0]
 801409a:	460a      	mov	r2, r1
 801409c:	68b9      	ldr	r1, [r7, #8]
 801409e:	68f8      	ldr	r0, [r7, #12]
 80140a0:	f002 fb16 	bl	80166d0 <ethernet_output>
 80140a4:	4603      	mov	r3, r0
}
 80140a6:	4618      	mov	r0, r3
 80140a8:	3710      	adds	r7, #16
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	20040ba0 	.word	0x20040ba0
 80140b4:	080256f0 	.word	0x080256f0
 80140b8:	08025860 	.word	0x08025860
 80140bc:	08025768 	.word	0x08025768

080140c0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b08a      	sub	sp, #40	; 0x28
 80140c4:	af02      	add	r7, sp, #8
 80140c6:	60f8      	str	r0, [r7, #12]
 80140c8:	60b9      	str	r1, [r7, #8]
 80140ca:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d106      	bne.n	80140e4 <etharp_output+0x24>
 80140d6:	4b73      	ldr	r3, [pc, #460]	; (80142a4 <etharp_output+0x1e4>)
 80140d8:	f240 321e 	movw	r2, #798	; 0x31e
 80140dc:	4972      	ldr	r1, [pc, #456]	; (80142a8 <etharp_output+0x1e8>)
 80140de:	4873      	ldr	r0, [pc, #460]	; (80142ac <etharp_output+0x1ec>)
 80140e0:	f00d fdf4 	bl	8021ccc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80140e4:	68bb      	ldr	r3, [r7, #8]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d106      	bne.n	80140f8 <etharp_output+0x38>
 80140ea:	4b6e      	ldr	r3, [pc, #440]	; (80142a4 <etharp_output+0x1e4>)
 80140ec:	f240 321f 	movw	r2, #799	; 0x31f
 80140f0:	496f      	ldr	r1, [pc, #444]	; (80142b0 <etharp_output+0x1f0>)
 80140f2:	486e      	ldr	r0, [pc, #440]	; (80142ac <etharp_output+0x1ec>)
 80140f4:	f00d fdea 	bl	8021ccc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d106      	bne.n	801410c <etharp_output+0x4c>
 80140fe:	4b69      	ldr	r3, [pc, #420]	; (80142a4 <etharp_output+0x1e4>)
 8014100:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014104:	496b      	ldr	r1, [pc, #428]	; (80142b4 <etharp_output+0x1f4>)
 8014106:	4869      	ldr	r0, [pc, #420]	; (80142ac <etharp_output+0x1ec>)
 8014108:	f00d fde0 	bl	8021ccc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	68f9      	ldr	r1, [r7, #12]
 8014112:	4618      	mov	r0, r3
 8014114:	f001 fb3e 	bl	8015794 <ip4_addr_isbroadcast_u32>
 8014118:	4603      	mov	r3, r0
 801411a:	2b00      	cmp	r3, #0
 801411c:	d002      	beq.n	8014124 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801411e:	4b66      	ldr	r3, [pc, #408]	; (80142b8 <etharp_output+0x1f8>)
 8014120:	61fb      	str	r3, [r7, #28]
 8014122:	e0af      	b.n	8014284 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801412c:	2be0      	cmp	r3, #224	; 0xe0
 801412e:	d118      	bne.n	8014162 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014130:	2301      	movs	r3, #1
 8014132:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014134:	2300      	movs	r3, #0
 8014136:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014138:	235e      	movs	r3, #94	; 0x5e
 801413a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	3301      	adds	r3, #1
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014146:	b2db      	uxtb	r3, r3
 8014148:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	3302      	adds	r3, #2
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	3303      	adds	r3, #3
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801415a:	f107 0310 	add.w	r3, r7, #16
 801415e:	61fb      	str	r3, [r7, #28]
 8014160:	e090      	b.n	8014284 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	681a      	ldr	r2, [r3, #0]
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	3304      	adds	r3, #4
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	405a      	eors	r2, r3
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	3308      	adds	r3, #8
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	4013      	ands	r3, r2
 8014176:	2b00      	cmp	r3, #0
 8014178:	d012      	beq.n	80141a0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014180:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014184:	4293      	cmp	r3, r2
 8014186:	d00b      	beq.n	80141a0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	330c      	adds	r3, #12
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d003      	beq.n	801419a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	330c      	adds	r3, #12
 8014196:	61bb      	str	r3, [r7, #24]
 8014198:	e002      	b.n	80141a0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801419a:	f06f 0303 	mvn.w	r3, #3
 801419e:	e07d      	b.n	801429c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80141a0:	4b46      	ldr	r3, [pc, #280]	; (80142bc <etharp_output+0x1fc>)
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	4619      	mov	r1, r3
 80141a6:	4a46      	ldr	r2, [pc, #280]	; (80142c0 <etharp_output+0x200>)
 80141a8:	460b      	mov	r3, r1
 80141aa:	005b      	lsls	r3, r3, #1
 80141ac:	440b      	add	r3, r1
 80141ae:	00db      	lsls	r3, r3, #3
 80141b0:	4413      	add	r3, r2
 80141b2:	3314      	adds	r3, #20
 80141b4:	781b      	ldrb	r3, [r3, #0]
 80141b6:	2b01      	cmp	r3, #1
 80141b8:	d925      	bls.n	8014206 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80141ba:	4b40      	ldr	r3, [pc, #256]	; (80142bc <etharp_output+0x1fc>)
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	4619      	mov	r1, r3
 80141c0:	4a3f      	ldr	r2, [pc, #252]	; (80142c0 <etharp_output+0x200>)
 80141c2:	460b      	mov	r3, r1
 80141c4:	005b      	lsls	r3, r3, #1
 80141c6:	440b      	add	r3, r1
 80141c8:	00db      	lsls	r3, r3, #3
 80141ca:	4413      	add	r3, r2
 80141cc:	3308      	adds	r3, #8
 80141ce:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80141d0:	68fa      	ldr	r2, [r7, #12]
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d117      	bne.n	8014206 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80141d6:	69bb      	ldr	r3, [r7, #24]
 80141d8:	681a      	ldr	r2, [r3, #0]
 80141da:	4b38      	ldr	r3, [pc, #224]	; (80142bc <etharp_output+0x1fc>)
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	4618      	mov	r0, r3
 80141e0:	4937      	ldr	r1, [pc, #220]	; (80142c0 <etharp_output+0x200>)
 80141e2:	4603      	mov	r3, r0
 80141e4:	005b      	lsls	r3, r3, #1
 80141e6:	4403      	add	r3, r0
 80141e8:	00db      	lsls	r3, r3, #3
 80141ea:	440b      	add	r3, r1
 80141ec:	3304      	adds	r3, #4
 80141ee:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d108      	bne.n	8014206 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80141f4:	4b31      	ldr	r3, [pc, #196]	; (80142bc <etharp_output+0x1fc>)
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	461a      	mov	r2, r3
 80141fa:	68b9      	ldr	r1, [r7, #8]
 80141fc:	68f8      	ldr	r0, [r7, #12]
 80141fe:	f7ff fec5 	bl	8013f8c <etharp_output_to_arp_index>
 8014202:	4603      	mov	r3, r0
 8014204:	e04a      	b.n	801429c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014206:	2300      	movs	r3, #0
 8014208:	75fb      	strb	r3, [r7, #23]
 801420a:	e031      	b.n	8014270 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801420c:	7dfa      	ldrb	r2, [r7, #23]
 801420e:	492c      	ldr	r1, [pc, #176]	; (80142c0 <etharp_output+0x200>)
 8014210:	4613      	mov	r3, r2
 8014212:	005b      	lsls	r3, r3, #1
 8014214:	4413      	add	r3, r2
 8014216:	00db      	lsls	r3, r3, #3
 8014218:	440b      	add	r3, r1
 801421a:	3314      	adds	r3, #20
 801421c:	781b      	ldrb	r3, [r3, #0]
 801421e:	2b01      	cmp	r3, #1
 8014220:	d923      	bls.n	801426a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014222:	7dfa      	ldrb	r2, [r7, #23]
 8014224:	4926      	ldr	r1, [pc, #152]	; (80142c0 <etharp_output+0x200>)
 8014226:	4613      	mov	r3, r2
 8014228:	005b      	lsls	r3, r3, #1
 801422a:	4413      	add	r3, r2
 801422c:	00db      	lsls	r3, r3, #3
 801422e:	440b      	add	r3, r1
 8014230:	3308      	adds	r3, #8
 8014232:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014234:	68fa      	ldr	r2, [r7, #12]
 8014236:	429a      	cmp	r2, r3
 8014238:	d117      	bne.n	801426a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801423a:	69bb      	ldr	r3, [r7, #24]
 801423c:	6819      	ldr	r1, [r3, #0]
 801423e:	7dfa      	ldrb	r2, [r7, #23]
 8014240:	481f      	ldr	r0, [pc, #124]	; (80142c0 <etharp_output+0x200>)
 8014242:	4613      	mov	r3, r2
 8014244:	005b      	lsls	r3, r3, #1
 8014246:	4413      	add	r3, r2
 8014248:	00db      	lsls	r3, r3, #3
 801424a:	4403      	add	r3, r0
 801424c:	3304      	adds	r3, #4
 801424e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014250:	4299      	cmp	r1, r3
 8014252:	d10a      	bne.n	801426a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014254:	4a19      	ldr	r2, [pc, #100]	; (80142bc <etharp_output+0x1fc>)
 8014256:	7dfb      	ldrb	r3, [r7, #23]
 8014258:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801425a:	7dfb      	ldrb	r3, [r7, #23]
 801425c:	461a      	mov	r2, r3
 801425e:	68b9      	ldr	r1, [r7, #8]
 8014260:	68f8      	ldr	r0, [r7, #12]
 8014262:	f7ff fe93 	bl	8013f8c <etharp_output_to_arp_index>
 8014266:	4603      	mov	r3, r0
 8014268:	e018      	b.n	801429c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801426a:	7dfb      	ldrb	r3, [r7, #23]
 801426c:	3301      	adds	r3, #1
 801426e:	75fb      	strb	r3, [r7, #23]
 8014270:	7dfb      	ldrb	r3, [r7, #23]
 8014272:	2b09      	cmp	r3, #9
 8014274:	d9ca      	bls.n	801420c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014276:	68ba      	ldr	r2, [r7, #8]
 8014278:	69b9      	ldr	r1, [r7, #24]
 801427a:	68f8      	ldr	r0, [r7, #12]
 801427c:	f000 f822 	bl	80142c4 <etharp_query>
 8014280:	4603      	mov	r3, r0
 8014282:	e00b      	b.n	801429c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801428a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801428e:	9300      	str	r3, [sp, #0]
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	68b9      	ldr	r1, [r7, #8]
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f002 fa1b 	bl	80166d0 <ethernet_output>
 801429a:	4603      	mov	r3, r0
}
 801429c:	4618      	mov	r0, r3
 801429e:	3720      	adds	r7, #32
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	080256f0 	.word	0x080256f0
 80142a8:	08025840 	.word	0x08025840
 80142ac:	08025768 	.word	0x08025768
 80142b0:	08025890 	.word	0x08025890
 80142b4:	08025830 	.word	0x08025830
 80142b8:	080262a8 	.word	0x080262a8
 80142bc:	20040c90 	.word	0x20040c90
 80142c0:	20040ba0 	.word	0x20040ba0

080142c4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b08c      	sub	sp, #48	; 0x30
 80142c8:	af02      	add	r7, sp, #8
 80142ca:	60f8      	str	r0, [r7, #12]
 80142cc:	60b9      	str	r1, [r7, #8]
 80142ce:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	332a      	adds	r3, #42	; 0x2a
 80142d4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80142d6:	23ff      	movs	r3, #255	; 0xff
 80142d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80142dc:	2300      	movs	r3, #0
 80142de:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	68f9      	ldr	r1, [r7, #12]
 80142e6:	4618      	mov	r0, r3
 80142e8:	f001 fa54 	bl	8015794 <ip4_addr_isbroadcast_u32>
 80142ec:	4603      	mov	r3, r0
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d10c      	bne.n	801430c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80142fa:	2be0      	cmp	r3, #224	; 0xe0
 80142fc:	d006      	beq.n	801430c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d003      	beq.n	801430c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d102      	bne.n	8014312 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801430c:	f06f 030f 	mvn.w	r3, #15
 8014310:	e101      	b.n	8014516 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014312:	68fa      	ldr	r2, [r7, #12]
 8014314:	2101      	movs	r1, #1
 8014316:	68b8      	ldr	r0, [r7, #8]
 8014318:	f7ff fb60 	bl	80139dc <etharp_find_entry>
 801431c:	4603      	mov	r3, r0
 801431e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014320:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014324:	2b00      	cmp	r3, #0
 8014326:	da02      	bge.n	801432e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014328:	8a7b      	ldrh	r3, [r7, #18]
 801432a:	b25b      	sxtb	r3, r3
 801432c:	e0f3      	b.n	8014516 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801432e:	8a7b      	ldrh	r3, [r7, #18]
 8014330:	2b7e      	cmp	r3, #126	; 0x7e
 8014332:	d906      	bls.n	8014342 <etharp_query+0x7e>
 8014334:	4b7a      	ldr	r3, [pc, #488]	; (8014520 <etharp_query+0x25c>)
 8014336:	f240 32c1 	movw	r2, #961	; 0x3c1
 801433a:	497a      	ldr	r1, [pc, #488]	; (8014524 <etharp_query+0x260>)
 801433c:	487a      	ldr	r0, [pc, #488]	; (8014528 <etharp_query+0x264>)
 801433e:	f00d fcc5 	bl	8021ccc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014342:	8a7b      	ldrh	r3, [r7, #18]
 8014344:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014346:	7c7a      	ldrb	r2, [r7, #17]
 8014348:	4978      	ldr	r1, [pc, #480]	; (801452c <etharp_query+0x268>)
 801434a:	4613      	mov	r3, r2
 801434c:	005b      	lsls	r3, r3, #1
 801434e:	4413      	add	r3, r2
 8014350:	00db      	lsls	r3, r3, #3
 8014352:	440b      	add	r3, r1
 8014354:	3314      	adds	r3, #20
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d115      	bne.n	8014388 <etharp_query+0xc4>
    is_new_entry = 1;
 801435c:	2301      	movs	r3, #1
 801435e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014360:	7c7a      	ldrb	r2, [r7, #17]
 8014362:	4972      	ldr	r1, [pc, #456]	; (801452c <etharp_query+0x268>)
 8014364:	4613      	mov	r3, r2
 8014366:	005b      	lsls	r3, r3, #1
 8014368:	4413      	add	r3, r2
 801436a:	00db      	lsls	r3, r3, #3
 801436c:	440b      	add	r3, r1
 801436e:	3314      	adds	r3, #20
 8014370:	2201      	movs	r2, #1
 8014372:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014374:	7c7a      	ldrb	r2, [r7, #17]
 8014376:	496d      	ldr	r1, [pc, #436]	; (801452c <etharp_query+0x268>)
 8014378:	4613      	mov	r3, r2
 801437a:	005b      	lsls	r3, r3, #1
 801437c:	4413      	add	r3, r2
 801437e:	00db      	lsls	r3, r3, #3
 8014380:	440b      	add	r3, r1
 8014382:	3308      	adds	r3, #8
 8014384:	68fa      	ldr	r2, [r7, #12]
 8014386:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014388:	7c7a      	ldrb	r2, [r7, #17]
 801438a:	4968      	ldr	r1, [pc, #416]	; (801452c <etharp_query+0x268>)
 801438c:	4613      	mov	r3, r2
 801438e:	005b      	lsls	r3, r3, #1
 8014390:	4413      	add	r3, r2
 8014392:	00db      	lsls	r3, r3, #3
 8014394:	440b      	add	r3, r1
 8014396:	3314      	adds	r3, #20
 8014398:	781b      	ldrb	r3, [r3, #0]
 801439a:	2b01      	cmp	r3, #1
 801439c:	d011      	beq.n	80143c2 <etharp_query+0xfe>
 801439e:	7c7a      	ldrb	r2, [r7, #17]
 80143a0:	4962      	ldr	r1, [pc, #392]	; (801452c <etharp_query+0x268>)
 80143a2:	4613      	mov	r3, r2
 80143a4:	005b      	lsls	r3, r3, #1
 80143a6:	4413      	add	r3, r2
 80143a8:	00db      	lsls	r3, r3, #3
 80143aa:	440b      	add	r3, r1
 80143ac:	3314      	adds	r3, #20
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	d806      	bhi.n	80143c2 <etharp_query+0xfe>
 80143b4:	4b5a      	ldr	r3, [pc, #360]	; (8014520 <etharp_query+0x25c>)
 80143b6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80143ba:	495d      	ldr	r1, [pc, #372]	; (8014530 <etharp_query+0x26c>)
 80143bc:	485a      	ldr	r0, [pc, #360]	; (8014528 <etharp_query+0x264>)
 80143be:	f00d fc85 	bl	8021ccc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80143c2:	6a3b      	ldr	r3, [r7, #32]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d102      	bne.n	80143ce <etharp_query+0x10a>
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d10c      	bne.n	80143e8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80143ce:	68b9      	ldr	r1, [r7, #8]
 80143d0:	68f8      	ldr	r0, [r7, #12]
 80143d2:	f000 f963 	bl	801469c <etharp_request>
 80143d6:	4603      	mov	r3, r0
 80143d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d102      	bne.n	80143e8 <etharp_query+0x124>
      return result;
 80143e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80143e6:	e096      	b.n	8014516 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d106      	bne.n	80143fc <etharp_query+0x138>
 80143ee:	4b4c      	ldr	r3, [pc, #304]	; (8014520 <etharp_query+0x25c>)
 80143f0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80143f4:	494f      	ldr	r1, [pc, #316]	; (8014534 <etharp_query+0x270>)
 80143f6:	484c      	ldr	r0, [pc, #304]	; (8014528 <etharp_query+0x264>)
 80143f8:	f00d fc68 	bl	8021ccc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80143fc:	7c7a      	ldrb	r2, [r7, #17]
 80143fe:	494b      	ldr	r1, [pc, #300]	; (801452c <etharp_query+0x268>)
 8014400:	4613      	mov	r3, r2
 8014402:	005b      	lsls	r3, r3, #1
 8014404:	4413      	add	r3, r2
 8014406:	00db      	lsls	r3, r3, #3
 8014408:	440b      	add	r3, r1
 801440a:	3314      	adds	r3, #20
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	2b01      	cmp	r3, #1
 8014410:	d917      	bls.n	8014442 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014412:	4a49      	ldr	r2, [pc, #292]	; (8014538 <etharp_query+0x274>)
 8014414:	7c7b      	ldrb	r3, [r7, #17]
 8014416:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014418:	7c7a      	ldrb	r2, [r7, #17]
 801441a:	4613      	mov	r3, r2
 801441c:	005b      	lsls	r3, r3, #1
 801441e:	4413      	add	r3, r2
 8014420:	00db      	lsls	r3, r3, #3
 8014422:	3308      	adds	r3, #8
 8014424:	4a41      	ldr	r2, [pc, #260]	; (801452c <etharp_query+0x268>)
 8014426:	4413      	add	r3, r2
 8014428:	3304      	adds	r3, #4
 801442a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801442e:	9200      	str	r2, [sp, #0]
 8014430:	697a      	ldr	r2, [r7, #20]
 8014432:	6879      	ldr	r1, [r7, #4]
 8014434:	68f8      	ldr	r0, [r7, #12]
 8014436:	f002 f94b 	bl	80166d0 <ethernet_output>
 801443a:	4603      	mov	r3, r0
 801443c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014440:	e067      	b.n	8014512 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014442:	7c7a      	ldrb	r2, [r7, #17]
 8014444:	4939      	ldr	r1, [pc, #228]	; (801452c <etharp_query+0x268>)
 8014446:	4613      	mov	r3, r2
 8014448:	005b      	lsls	r3, r3, #1
 801444a:	4413      	add	r3, r2
 801444c:	00db      	lsls	r3, r3, #3
 801444e:	440b      	add	r3, r1
 8014450:	3314      	adds	r3, #20
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	2b01      	cmp	r3, #1
 8014456:	d15c      	bne.n	8014512 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014458:	2300      	movs	r3, #0
 801445a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014460:	e01c      	b.n	801449c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	895a      	ldrh	r2, [r3, #10]
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	891b      	ldrh	r3, [r3, #8]
 801446a:	429a      	cmp	r2, r3
 801446c:	d10a      	bne.n	8014484 <etharp_query+0x1c0>
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d006      	beq.n	8014484 <etharp_query+0x1c0>
 8014476:	4b2a      	ldr	r3, [pc, #168]	; (8014520 <etharp_query+0x25c>)
 8014478:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801447c:	492f      	ldr	r1, [pc, #188]	; (801453c <etharp_query+0x278>)
 801447e:	482a      	ldr	r0, [pc, #168]	; (8014528 <etharp_query+0x264>)
 8014480:	f00d fc24 	bl	8021ccc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	7b1b      	ldrb	r3, [r3, #12]
 8014488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801448c:	2b00      	cmp	r3, #0
 801448e:	d002      	beq.n	8014496 <etharp_query+0x1d2>
        copy_needed = 1;
 8014490:	2301      	movs	r3, #1
 8014492:	61bb      	str	r3, [r7, #24]
        break;
 8014494:	e005      	b.n	80144a2 <etharp_query+0x1de>
      }
      p = p->next;
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801449c:	69fb      	ldr	r3, [r7, #28]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d1df      	bne.n	8014462 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80144a2:	69bb      	ldr	r3, [r7, #24]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d007      	beq.n	80144b8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80144a8:	687a      	ldr	r2, [r7, #4]
 80144aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80144ae:	200e      	movs	r0, #14
 80144b0:	f7f9 f97e 	bl	800d7b0 <pbuf_clone>
 80144b4:	61f8      	str	r0, [r7, #28]
 80144b6:	e004      	b.n	80144c2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80144bc:	69f8      	ldr	r0, [r7, #28]
 80144be:	f7f8 fe6d 	bl	800d19c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80144c2:	69fb      	ldr	r3, [r7, #28]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d021      	beq.n	801450c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80144c8:	7c7a      	ldrb	r2, [r7, #17]
 80144ca:	4918      	ldr	r1, [pc, #96]	; (801452c <etharp_query+0x268>)
 80144cc:	4613      	mov	r3, r2
 80144ce:	005b      	lsls	r3, r3, #1
 80144d0:	4413      	add	r3, r2
 80144d2:	00db      	lsls	r3, r3, #3
 80144d4:	440b      	add	r3, r1
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d00a      	beq.n	80144f2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80144dc:	7c7a      	ldrb	r2, [r7, #17]
 80144de:	4913      	ldr	r1, [pc, #76]	; (801452c <etharp_query+0x268>)
 80144e0:	4613      	mov	r3, r2
 80144e2:	005b      	lsls	r3, r3, #1
 80144e4:	4413      	add	r3, r2
 80144e6:	00db      	lsls	r3, r3, #3
 80144e8:	440b      	add	r3, r1
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	4618      	mov	r0, r3
 80144ee:	f7f8 fdaf 	bl	800d050 <pbuf_free>
      }
      arp_table[i].q = p;
 80144f2:	7c7a      	ldrb	r2, [r7, #17]
 80144f4:	490d      	ldr	r1, [pc, #52]	; (801452c <etharp_query+0x268>)
 80144f6:	4613      	mov	r3, r2
 80144f8:	005b      	lsls	r3, r3, #1
 80144fa:	4413      	add	r3, r2
 80144fc:	00db      	lsls	r3, r3, #3
 80144fe:	440b      	add	r3, r1
 8014500:	69fa      	ldr	r2, [r7, #28]
 8014502:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014504:	2300      	movs	r3, #0
 8014506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801450a:	e002      	b.n	8014512 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801450c:	23ff      	movs	r3, #255	; 0xff
 801450e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014512:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014516:	4618      	mov	r0, r3
 8014518:	3728      	adds	r7, #40	; 0x28
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	080256f0 	.word	0x080256f0
 8014524:	0802589c 	.word	0x0802589c
 8014528:	08025768 	.word	0x08025768
 801452c:	20040ba0 	.word	0x20040ba0
 8014530:	080258ac 	.word	0x080258ac
 8014534:	08025890 	.word	0x08025890
 8014538:	20040c90 	.word	0x20040c90
 801453c:	080258d4 	.word	0x080258d4

08014540 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b08a      	sub	sp, #40	; 0x28
 8014544:	af02      	add	r7, sp, #8
 8014546:	60f8      	str	r0, [r7, #12]
 8014548:	60b9      	str	r1, [r7, #8]
 801454a:	607a      	str	r2, [r7, #4]
 801454c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801454e:	2300      	movs	r3, #0
 8014550:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d106      	bne.n	8014566 <etharp_raw+0x26>
 8014558:	4b3a      	ldr	r3, [pc, #232]	; (8014644 <etharp_raw+0x104>)
 801455a:	f240 4257 	movw	r2, #1111	; 0x457
 801455e:	493a      	ldr	r1, [pc, #232]	; (8014648 <etharp_raw+0x108>)
 8014560:	483a      	ldr	r0, [pc, #232]	; (801464c <etharp_raw+0x10c>)
 8014562:	f00d fbb3 	bl	8021ccc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014566:	f44f 7220 	mov.w	r2, #640	; 0x280
 801456a:	211c      	movs	r1, #28
 801456c:	200e      	movs	r0, #14
 801456e:	f7f8 fa8b 	bl	800ca88 <pbuf_alloc>
 8014572:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014574:	69bb      	ldr	r3, [r7, #24]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d102      	bne.n	8014580 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801457a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801457e:	e05d      	b.n	801463c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014580:	69bb      	ldr	r3, [r7, #24]
 8014582:	895b      	ldrh	r3, [r3, #10]
 8014584:	2b1b      	cmp	r3, #27
 8014586:	d806      	bhi.n	8014596 <etharp_raw+0x56>
 8014588:	4b2e      	ldr	r3, [pc, #184]	; (8014644 <etharp_raw+0x104>)
 801458a:	f240 4262 	movw	r2, #1122	; 0x462
 801458e:	4930      	ldr	r1, [pc, #192]	; (8014650 <etharp_raw+0x110>)
 8014590:	482e      	ldr	r0, [pc, #184]	; (801464c <etharp_raw+0x10c>)
 8014592:	f00d fb9b 	bl	8021ccc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014596:	69bb      	ldr	r3, [r7, #24]
 8014598:	685b      	ldr	r3, [r3, #4]
 801459a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801459c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801459e:	4618      	mov	r0, r3
 80145a0:	f7f6 fe40 	bl	800b224 <lwip_htons>
 80145a4:	4603      	mov	r3, r0
 80145a6:	461a      	mov	r2, r3
 80145a8:	697b      	ldr	r3, [r7, #20]
 80145aa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80145b2:	2b06      	cmp	r3, #6
 80145b4:	d006      	beq.n	80145c4 <etharp_raw+0x84>
 80145b6:	4b23      	ldr	r3, [pc, #140]	; (8014644 <etharp_raw+0x104>)
 80145b8:	f240 4269 	movw	r2, #1129	; 0x469
 80145bc:	4925      	ldr	r1, [pc, #148]	; (8014654 <etharp_raw+0x114>)
 80145be:	4823      	ldr	r0, [pc, #140]	; (801464c <etharp_raw+0x10c>)
 80145c0:	f00d fb84 	bl	8021ccc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	3308      	adds	r3, #8
 80145c8:	2206      	movs	r2, #6
 80145ca:	6839      	ldr	r1, [r7, #0]
 80145cc:	4618      	mov	r0, r3
 80145ce:	f00d fa57 	bl	8021a80 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	3312      	adds	r3, #18
 80145d6:	2206      	movs	r2, #6
 80145d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80145da:	4618      	mov	r0, r3
 80145dc:	f00d fa50 	bl	8021a80 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80145e0:	697b      	ldr	r3, [r7, #20]
 80145e2:	330e      	adds	r3, #14
 80145e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145e6:	6812      	ldr	r2, [r2, #0]
 80145e8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	3318      	adds	r3, #24
 80145ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145f0:	6812      	ldr	r2, [r2, #0]
 80145f2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	2200      	movs	r2, #0
 80145f8:	701a      	strb	r2, [r3, #0]
 80145fa:	2200      	movs	r2, #0
 80145fc:	f042 0201 	orr.w	r2, r2, #1
 8014600:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014602:	697b      	ldr	r3, [r7, #20]
 8014604:	2200      	movs	r2, #0
 8014606:	f042 0208 	orr.w	r2, r2, #8
 801460a:	709a      	strb	r2, [r3, #2]
 801460c:	2200      	movs	r2, #0
 801460e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014610:	697b      	ldr	r3, [r7, #20]
 8014612:	2206      	movs	r2, #6
 8014614:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	2204      	movs	r2, #4
 801461a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801461c:	f640 0306 	movw	r3, #2054	; 0x806
 8014620:	9300      	str	r3, [sp, #0]
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	68ba      	ldr	r2, [r7, #8]
 8014626:	69b9      	ldr	r1, [r7, #24]
 8014628:	68f8      	ldr	r0, [r7, #12]
 801462a:	f002 f851 	bl	80166d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801462e:	69b8      	ldr	r0, [r7, #24]
 8014630:	f7f8 fd0e 	bl	800d050 <pbuf_free>
  p = NULL;
 8014634:	2300      	movs	r3, #0
 8014636:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014638:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801463c:	4618      	mov	r0, r3
 801463e:	3720      	adds	r7, #32
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}
 8014644:	080256f0 	.word	0x080256f0
 8014648:	08025840 	.word	0x08025840
 801464c:	08025768 	.word	0x08025768
 8014650:	080258f0 	.word	0x080258f0
 8014654:	08025924 	.word	0x08025924

08014658 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b088      	sub	sp, #32
 801465c:	af04      	add	r7, sp, #16
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	60b9      	str	r1, [r7, #8]
 8014662:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014674:	2201      	movs	r2, #1
 8014676:	9203      	str	r2, [sp, #12]
 8014678:	68ba      	ldr	r2, [r7, #8]
 801467a:	9202      	str	r2, [sp, #8]
 801467c:	4a06      	ldr	r2, [pc, #24]	; (8014698 <etharp_request_dst+0x40>)
 801467e:	9201      	str	r2, [sp, #4]
 8014680:	9300      	str	r3, [sp, #0]
 8014682:	4603      	mov	r3, r0
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	68f8      	ldr	r0, [r7, #12]
 8014688:	f7ff ff5a 	bl	8014540 <etharp_raw>
 801468c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801468e:	4618      	mov	r0, r3
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	080262b0 	.word	0x080262b0

0801469c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80146a6:	4a05      	ldr	r2, [pc, #20]	; (80146bc <etharp_request+0x20>)
 80146a8:	6839      	ldr	r1, [r7, #0]
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7ff ffd4 	bl	8014658 <etharp_request_dst>
 80146b0:	4603      	mov	r3, r0
}
 80146b2:	4618      	mov	r0, r3
 80146b4:	3708      	adds	r7, #8
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}
 80146ba:	bf00      	nop
 80146bc:	080262a8 	.word	0x080262a8

080146c0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b08e      	sub	sp, #56	; 0x38
 80146c4:	af04      	add	r7, sp, #16
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80146ca:	4b79      	ldr	r3, [pc, #484]	; (80148b0 <icmp_input+0x1f0>)
 80146cc:	689b      	ldr	r3, [r3, #8]
 80146ce:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80146d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	f003 030f 	and.w	r3, r3, #15
 80146d8:	b2db      	uxtb	r3, r3
 80146da:	009b      	lsls	r3, r3, #2
 80146dc:	b2db      	uxtb	r3, r3
 80146de:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80146e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146e2:	2b13      	cmp	r3, #19
 80146e4:	f240 80cd 	bls.w	8014882 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	895b      	ldrh	r3, [r3, #10]
 80146ec:	2b03      	cmp	r3, #3
 80146ee:	f240 80ca 	bls.w	8014886 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	685b      	ldr	r3, [r3, #4]
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80146fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014700:	2b00      	cmp	r3, #0
 8014702:	f000 80b7 	beq.w	8014874 <icmp_input+0x1b4>
 8014706:	2b08      	cmp	r3, #8
 8014708:	f040 80b7 	bne.w	801487a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801470c:	4b69      	ldr	r3, [pc, #420]	; (80148b4 <icmp_input+0x1f4>)
 801470e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014710:	4b67      	ldr	r3, [pc, #412]	; (80148b0 <icmp_input+0x1f0>)
 8014712:	695b      	ldr	r3, [r3, #20]
 8014714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014718:	2be0      	cmp	r3, #224	; 0xe0
 801471a:	f000 80bb 	beq.w	8014894 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801471e:	4b64      	ldr	r3, [pc, #400]	; (80148b0 <icmp_input+0x1f0>)
 8014720:	695b      	ldr	r3, [r3, #20]
 8014722:	4a63      	ldr	r2, [pc, #396]	; (80148b0 <icmp_input+0x1f0>)
 8014724:	6812      	ldr	r2, [r2, #0]
 8014726:	4611      	mov	r1, r2
 8014728:	4618      	mov	r0, r3
 801472a:	f001 f833 	bl	8015794 <ip4_addr_isbroadcast_u32>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	f040 80b1 	bne.w	8014898 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	891b      	ldrh	r3, [r3, #8]
 801473a:	2b07      	cmp	r3, #7
 801473c:	f240 80a5 	bls.w	801488a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014742:	330e      	adds	r3, #14
 8014744:	4619      	mov	r1, r3
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f7f8 fbec 	bl	800cf24 <pbuf_add_header>
 801474c:	4603      	mov	r3, r0
 801474e:	2b00      	cmp	r3, #0
 8014750:	d04b      	beq.n	80147ea <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	891a      	ldrh	r2, [r3, #8]
 8014756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014758:	4413      	add	r3, r2
 801475a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	891b      	ldrh	r3, [r3, #8]
 8014760:	8b7a      	ldrh	r2, [r7, #26]
 8014762:	429a      	cmp	r2, r3
 8014764:	f0c0 809a 	bcc.w	801489c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014768:	8b7b      	ldrh	r3, [r7, #26]
 801476a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801476e:	4619      	mov	r1, r3
 8014770:	200e      	movs	r0, #14
 8014772:	f7f8 f989 	bl	800ca88 <pbuf_alloc>
 8014776:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	2b00      	cmp	r3, #0
 801477c:	f000 8090 	beq.w	80148a0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	895b      	ldrh	r3, [r3, #10]
 8014784:	461a      	mov	r2, r3
 8014786:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014788:	3308      	adds	r3, #8
 801478a:	429a      	cmp	r2, r3
 801478c:	d203      	bcs.n	8014796 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801478e:	6978      	ldr	r0, [r7, #20]
 8014790:	f7f8 fc5e 	bl	800d050 <pbuf_free>
          goto icmperr;
 8014794:	e085      	b.n	80148a2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	685b      	ldr	r3, [r3, #4]
 801479a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801479c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801479e:	4618      	mov	r0, r3
 80147a0:	f00d f96e 	bl	8021a80 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80147a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147a6:	4619      	mov	r1, r3
 80147a8:	6978      	ldr	r0, [r7, #20]
 80147aa:	f7f8 fbcb 	bl	800cf44 <pbuf_remove_header>
 80147ae:	4603      	mov	r3, r0
 80147b0:	2b00      	cmp	r3, #0
 80147b2:	d009      	beq.n	80147c8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80147b4:	4b40      	ldr	r3, [pc, #256]	; (80148b8 <icmp_input+0x1f8>)
 80147b6:	22b6      	movs	r2, #182	; 0xb6
 80147b8:	4940      	ldr	r1, [pc, #256]	; (80148bc <icmp_input+0x1fc>)
 80147ba:	4841      	ldr	r0, [pc, #260]	; (80148c0 <icmp_input+0x200>)
 80147bc:	f00d fa86 	bl	8021ccc <iprintf>
          pbuf_free(r);
 80147c0:	6978      	ldr	r0, [r7, #20]
 80147c2:	f7f8 fc45 	bl	800d050 <pbuf_free>
          goto icmperr;
 80147c6:	e06c      	b.n	80148a2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80147c8:	6879      	ldr	r1, [r7, #4]
 80147ca:	6978      	ldr	r0, [r7, #20]
 80147cc:	f7f8 fd74 	bl	800d2b8 <pbuf_copy>
 80147d0:	4603      	mov	r3, r0
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d003      	beq.n	80147de <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80147d6:	6978      	ldr	r0, [r7, #20]
 80147d8:	f7f8 fc3a 	bl	800d050 <pbuf_free>
          goto icmperr;
 80147dc:	e061      	b.n	80148a2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f7f8 fc36 	bl	800d050 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	607b      	str	r3, [r7, #4]
 80147e8:	e00f      	b.n	801480a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80147ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147ec:	330e      	adds	r3, #14
 80147ee:	4619      	mov	r1, r3
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7f8 fba7 	bl	800cf44 <pbuf_remove_header>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d006      	beq.n	801480a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80147fc:	4b2e      	ldr	r3, [pc, #184]	; (80148b8 <icmp_input+0x1f8>)
 80147fe:	22c7      	movs	r2, #199	; 0xc7
 8014800:	4930      	ldr	r1, [pc, #192]	; (80148c4 <icmp_input+0x204>)
 8014802:	482f      	ldr	r0, [pc, #188]	; (80148c0 <icmp_input+0x200>)
 8014804:	f00d fa62 	bl	8021ccc <iprintf>
          goto icmperr;
 8014808:	e04b      	b.n	80148a2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014812:	4619      	mov	r1, r3
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7f8 fb85 	bl	800cf24 <pbuf_add_header>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d12b      	bne.n	8014878 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	685b      	ldr	r3, [r3, #4]
 8014824:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014826:	69fb      	ldr	r3, [r7, #28]
 8014828:	681a      	ldr	r2, [r3, #0]
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801482e:	4b20      	ldr	r3, [pc, #128]	; (80148b0 <icmp_input+0x1f0>)
 8014830:	691a      	ldr	r2, [r3, #16]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	2200      	movs	r2, #0
 801483a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	2200      	movs	r2, #0
 8014840:	709a      	strb	r2, [r3, #2]
 8014842:	2200      	movs	r2, #0
 8014844:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	22ff      	movs	r2, #255	; 0xff
 801484a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	2200      	movs	r2, #0
 8014850:	729a      	strb	r2, [r3, #10]
 8014852:	2200      	movs	r2, #0
 8014854:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	9302      	str	r3, [sp, #8]
 801485a:	2301      	movs	r3, #1
 801485c:	9301      	str	r3, [sp, #4]
 801485e:	2300      	movs	r3, #0
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	23ff      	movs	r3, #255	; 0xff
 8014864:	2200      	movs	r2, #0
 8014866:	69f9      	ldr	r1, [r7, #28]
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f000 fe45 	bl	80154f8 <ip4_output_if>
 801486e:	4603      	mov	r3, r0
 8014870:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014872:	e001      	b.n	8014878 <icmp_input+0x1b8>
      break;
 8014874:	bf00      	nop
 8014876:	e000      	b.n	801487a <icmp_input+0x1ba>
      break;
 8014878:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f7f8 fbe8 	bl	800d050 <pbuf_free>
  return;
 8014880:	e013      	b.n	80148aa <icmp_input+0x1ea>
    goto lenerr;
 8014882:	bf00      	nop
 8014884:	e002      	b.n	801488c <icmp_input+0x1cc>
    goto lenerr;
 8014886:	bf00      	nop
 8014888:	e000      	b.n	801488c <icmp_input+0x1cc>
        goto lenerr;
 801488a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f7f8 fbdf 	bl	800d050 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014892:	e00a      	b.n	80148aa <icmp_input+0x1ea>
        goto icmperr;
 8014894:	bf00      	nop
 8014896:	e004      	b.n	80148a2 <icmp_input+0x1e2>
        goto icmperr;
 8014898:	bf00      	nop
 801489a:	e002      	b.n	80148a2 <icmp_input+0x1e2>
          goto icmperr;
 801489c:	bf00      	nop
 801489e:	e000      	b.n	80148a2 <icmp_input+0x1e2>
          goto icmperr;
 80148a0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80148a2:	6878      	ldr	r0, [r7, #4]
 80148a4:	f7f8 fbd4 	bl	800d050 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80148a8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80148aa:	3728      	adds	r7, #40	; 0x28
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	200357c0 	.word	0x200357c0
 80148b4:	200357d4 	.word	0x200357d4
 80148b8:	08025968 	.word	0x08025968
 80148bc:	080259a0 	.word	0x080259a0
 80148c0:	080259d8 	.word	0x080259d8
 80148c4:	08025a00 	.word	0x08025a00

080148c8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b082      	sub	sp, #8
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
 80148d0:	460b      	mov	r3, r1
 80148d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80148d4:	78fb      	ldrb	r3, [r7, #3]
 80148d6:	461a      	mov	r2, r3
 80148d8:	2103      	movs	r1, #3
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f000 f814 	bl	8014908 <icmp_send_response>
}
 80148e0:	bf00      	nop
 80148e2:	3708      	adds	r7, #8
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}

080148e8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b082      	sub	sp, #8
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
 80148f0:	460b      	mov	r3, r1
 80148f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80148f4:	78fb      	ldrb	r3, [r7, #3]
 80148f6:	461a      	mov	r2, r3
 80148f8:	210b      	movs	r1, #11
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f000 f804 	bl	8014908 <icmp_send_response>
}
 8014900:	bf00      	nop
 8014902:	3708      	adds	r7, #8
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b08c      	sub	sp, #48	; 0x30
 801490c:	af04      	add	r7, sp, #16
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	460b      	mov	r3, r1
 8014912:	70fb      	strb	r3, [r7, #3]
 8014914:	4613      	mov	r3, r2
 8014916:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014918:	f44f 7220 	mov.w	r2, #640	; 0x280
 801491c:	2124      	movs	r1, #36	; 0x24
 801491e:	2022      	movs	r0, #34	; 0x22
 8014920:	f7f8 f8b2 	bl	800ca88 <pbuf_alloc>
 8014924:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014926:	69fb      	ldr	r3, [r7, #28]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d04c      	beq.n	80149c6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801492c:	69fb      	ldr	r3, [r7, #28]
 801492e:	895b      	ldrh	r3, [r3, #10]
 8014930:	2b23      	cmp	r3, #35	; 0x23
 8014932:	d806      	bhi.n	8014942 <icmp_send_response+0x3a>
 8014934:	4b26      	ldr	r3, [pc, #152]	; (80149d0 <icmp_send_response+0xc8>)
 8014936:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801493a:	4926      	ldr	r1, [pc, #152]	; (80149d4 <icmp_send_response+0xcc>)
 801493c:	4826      	ldr	r0, [pc, #152]	; (80149d8 <icmp_send_response+0xd0>)
 801493e:	f00d f9c5 	bl	8021ccc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	685b      	ldr	r3, [r3, #4]
 8014946:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014948:	69fb      	ldr	r3, [r7, #28]
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	78fa      	ldrb	r2, [r7, #3]
 8014952:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	78ba      	ldrb	r2, [r7, #2]
 8014958:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	2200      	movs	r2, #0
 801495e:	711a      	strb	r2, [r3, #4]
 8014960:	2200      	movs	r2, #0
 8014962:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014964:	697b      	ldr	r3, [r7, #20]
 8014966:	2200      	movs	r2, #0
 8014968:	719a      	strb	r2, [r3, #6]
 801496a:	2200      	movs	r2, #0
 801496c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801496e:	69fb      	ldr	r3, [r7, #28]
 8014970:	685b      	ldr	r3, [r3, #4]
 8014972:	f103 0008 	add.w	r0, r3, #8
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	221c      	movs	r2, #28
 801497c:	4619      	mov	r1, r3
 801497e:	f00d f87f 	bl	8021a80 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014982:	69bb      	ldr	r3, [r7, #24]
 8014984:	68db      	ldr	r3, [r3, #12]
 8014986:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014988:	f107 030c 	add.w	r3, r7, #12
 801498c:	4618      	mov	r0, r3
 801498e:	f000 fbab 	bl	80150e8 <ip4_route>
 8014992:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014994:	693b      	ldr	r3, [r7, #16]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d011      	beq.n	80149be <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801499a:	697b      	ldr	r3, [r7, #20]
 801499c:	2200      	movs	r2, #0
 801499e:	709a      	strb	r2, [r3, #2]
 80149a0:	2200      	movs	r2, #0
 80149a2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80149a4:	f107 020c 	add.w	r2, r7, #12
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	9302      	str	r3, [sp, #8]
 80149ac:	2301      	movs	r3, #1
 80149ae:	9301      	str	r3, [sp, #4]
 80149b0:	2300      	movs	r3, #0
 80149b2:	9300      	str	r3, [sp, #0]
 80149b4:	23ff      	movs	r3, #255	; 0xff
 80149b6:	2100      	movs	r1, #0
 80149b8:	69f8      	ldr	r0, [r7, #28]
 80149ba:	f000 fd9d 	bl	80154f8 <ip4_output_if>
  }
  pbuf_free(q);
 80149be:	69f8      	ldr	r0, [r7, #28]
 80149c0:	f7f8 fb46 	bl	800d050 <pbuf_free>
 80149c4:	e000      	b.n	80149c8 <icmp_send_response+0xc0>
    return;
 80149c6:	bf00      	nop
}
 80149c8:	3720      	adds	r7, #32
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd80      	pop	{r7, pc}
 80149ce:	bf00      	nop
 80149d0:	08025968 	.word	0x08025968
 80149d4:	08025a34 	.word	0x08025a34
 80149d8:	080259d8 	.word	0x080259d8

080149dc <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 80149dc:	b480      	push	{r7}
 80149de:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 80149e0:	4b05      	ldr	r3, [pc, #20]	; (80149f8 <igmp_init+0x1c>)
 80149e2:	4a06      	ldr	r2, [pc, #24]	; (80149fc <igmp_init+0x20>)
 80149e4:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 80149e6:	4b06      	ldr	r3, [pc, #24]	; (8014a00 <igmp_init+0x24>)
 80149e8:	4a06      	ldr	r2, [pc, #24]	; (8014a04 <igmp_init+0x28>)
 80149ea:	601a      	str	r2, [r3, #0]
}
 80149ec:	bf00      	nop
 80149ee:	46bd      	mov	sp, r7
 80149f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f4:	4770      	bx	lr
 80149f6:	bf00      	nop
 80149f8:	20040c94 	.word	0x20040c94
 80149fc:	010000e0 	.word	0x010000e0
 8014a00:	20040c98 	.word	0x20040c98
 8014a04:	020000e0 	.word	0x020000e0

08014a08 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 8014a10:	4911      	ldr	r1, [pc, #68]	; (8014a58 <igmp_start+0x50>)
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f000 f85e 	bl	8014ad4 <igmp_lookup_group>
 8014a18:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d014      	beq.n	8014a4a <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	2202      	movs	r2, #2
 8014a24:	725a      	strb	r2, [r3, #9]
    group->use++;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	7b1b      	ldrb	r3, [r3, #12]
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	b2da      	uxtb	r2, r3
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d005      	beq.n	8014a46 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a3e:	2201      	movs	r2, #1
 8014a40:	4905      	ldr	r1, [pc, #20]	; (8014a58 <igmp_start+0x50>)
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	4798      	blx	r3
    }

    return ERR_OK;
 8014a46:	2300      	movs	r3, #0
 8014a48:	e001      	b.n	8014a4e <igmp_start+0x46>
  }

  return ERR_MEM;
 8014a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014a4e:	4618      	mov	r0, r3
 8014a50:	3710      	adds	r7, #16
 8014a52:	46bd      	mov	sp, r7
 8014a54:	bd80      	pop	{r7, pc}
 8014a56:	bf00      	nop
 8014a58:	20040c94 	.word	0x20040c94

08014a5c <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b084      	sub	sp, #16
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a68:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d00a      	beq.n	8014a86 <igmp_report_groups+0x2a>
    group = group->next;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 8014a76:	e006      	b.n	8014a86 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8014a78:	2105      	movs	r1, #5
 8014a7a:	68f8      	ldr	r0, [r7, #12]
 8014a7c:	f000 fa79 	bl	8014f72 <igmp_delaying_member>
    group = group->next;
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d1f5      	bne.n	8014a78 <igmp_report_groups+0x1c>
  }
}
 8014a8c:	bf00      	nop
 8014a8e:	bf00      	nop
 8014a90:	3710      	adds	r7, #16
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}

08014a96 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8014a96:	b480      	push	{r7}
 8014a98:	b085      	sub	sp, #20
 8014a9a:	af00      	add	r7, sp, #0
 8014a9c:	6078      	str	r0, [r7, #4]
 8014a9e:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aa4:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8014aa6:	e00a      	b.n	8014abe <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	685a      	ldr	r2, [r3, #4]
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d101      	bne.n	8014ab8 <igmp_lookfor_group+0x22>
      return group;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	e006      	b.n	8014ac6 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d1f1      	bne.n	8014aa8 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 8014ac4:	2300      	movs	r3, #0
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3714      	adds	r7, #20
 8014aca:	46bd      	mov	sp, r7
 8014acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad0:	4770      	bx	lr
	...

08014ad4 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b084      	sub	sp, #16
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
 8014adc:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ae2:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 8014ae4:	6839      	ldr	r1, [r7, #0]
 8014ae6:	6878      	ldr	r0, [r7, #4]
 8014ae8:	f7ff ffd5 	bl	8014a96 <igmp_lookfor_group>
 8014aec:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d001      	beq.n	8014af8 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	e047      	b.n	8014b88 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 8014af8:	200a      	movs	r0, #10
 8014afa:	f7f7 fb95 	bl	800c228 <memp_malloc>
 8014afe:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 8014b00:	68bb      	ldr	r3, [r7, #8]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d03f      	beq.n	8014b86 <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d002      	beq.n	8014b12 <igmp_lookup_group+0x3e>
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	e000      	b.n	8014b14 <igmp_lookup_group+0x40>
 8014b12:	2300      	movs	r3, #0
 8014b14:	68ba      	ldr	r2, [r7, #8]
 8014b16:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	2200      	movs	r2, #0
 8014b22:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	2200      	movs	r2, #0
 8014b28:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d113      	bne.n	8014b5e <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	681a      	ldr	r2, [r3, #0]
 8014b3a:	4b15      	ldr	r3, [pc, #84]	; (8014b90 <igmp_lookup_group+0xbc>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	d006      	beq.n	8014b50 <igmp_lookup_group+0x7c>
 8014b42:	4b14      	ldr	r3, [pc, #80]	; (8014b94 <igmp_lookup_group+0xc0>)
 8014b44:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8014b48:	4913      	ldr	r1, [pc, #76]	; (8014b98 <igmp_lookup_group+0xc4>)
 8014b4a:	4814      	ldr	r0, [pc, #80]	; (8014b9c <igmp_lookup_group+0xc8>)
 8014b4c:	f00d f8be 	bl	8021ccc <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	2200      	movs	r2, #0
 8014b54:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	68ba      	ldr	r2, [r7, #8]
 8014b5a:	625a      	str	r2, [r3, #36]	; 0x24
 8014b5c:	e013      	b.n	8014b86 <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 8014b5e:	683b      	ldr	r3, [r7, #0]
 8014b60:	681a      	ldr	r2, [r3, #0]
 8014b62:	4b0b      	ldr	r3, [pc, #44]	; (8014b90 <igmp_lookup_group+0xbc>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d106      	bne.n	8014b78 <igmp_lookup_group+0xa4>
 8014b6a:	4b0a      	ldr	r3, [pc, #40]	; (8014b94 <igmp_lookup_group+0xc0>)
 8014b6c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014b70:	490b      	ldr	r1, [pc, #44]	; (8014ba0 <igmp_lookup_group+0xcc>)
 8014b72:	480a      	ldr	r0, [pc, #40]	; (8014b9c <igmp_lookup_group+0xc8>)
 8014b74:	f00d f8aa 	bl	8021ccc <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	681a      	ldr	r2, [r3, #0]
 8014b7c:	68bb      	ldr	r3, [r7, #8]
 8014b7e:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	68ba      	ldr	r2, [r7, #8]
 8014b84:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 8014b86:	68bb      	ldr	r3, [r7, #8]
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3710      	adds	r7, #16
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	20040c94 	.word	0x20040c94
 8014b94:	08025a60 	.word	0x08025a60
 8014b98:	08025a98 	.word	0x08025a98
 8014b9c:	08025acc 	.word	0x08025acc
 8014ba0:	08025af4 	.word	0x08025af4

08014ba4 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b088      	sub	sp, #32
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	895b      	ldrh	r3, [r3, #10]
 8014bb4:	2b07      	cmp	r3, #7
 8014bb6:	d803      	bhi.n	8014bc0 <igmp_input+0x1c>
    pbuf_free(p);
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f7f8 fa49 	bl	800d050 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 8014bbe:	e086      	b.n	8014cce <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	685b      	ldr	r3, [r3, #4]
 8014bc4:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	895b      	ldrh	r3, [r3, #10]
 8014bca:	4619      	mov	r1, r3
 8014bcc:	6978      	ldr	r0, [r7, #20]
 8014bce:	f7f6 fe7d 	bl	800b8cc <inet_chksum>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d003      	beq.n	8014be0 <igmp_input+0x3c>
    pbuf_free(p);
 8014bd8:	68f8      	ldr	r0, [r7, #12]
 8014bda:	f7f8 fa39 	bl	800d050 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 8014bde:	e076      	b.n	8014cce <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8014be0:	6879      	ldr	r1, [r7, #4]
 8014be2:	68b8      	ldr	r0, [r7, #8]
 8014be4:	f7ff ff57 	bl	8014a96 <igmp_lookfor_group>
 8014be8:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 8014bea:	69fb      	ldr	r3, [r7, #28]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d103      	bne.n	8014bf8 <igmp_input+0x54>
    pbuf_free(p);
 8014bf0:	68f8      	ldr	r0, [r7, #12]
 8014bf2:	f7f8 fa2d 	bl	800d050 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 8014bf6:	e06a      	b.n	8014cce <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	781b      	ldrb	r3, [r3, #0]
 8014bfc:	2b11      	cmp	r3, #17
 8014bfe:	d002      	beq.n	8014c06 <igmp_input+0x62>
 8014c00:	2b16      	cmp	r3, #22
 8014c02:	d04f      	beq.n	8014ca4 <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 8014c04:	e05f      	b.n	8014cc6 <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	681a      	ldr	r2, [r3, #0]
 8014c0a:	4b32      	ldr	r3, [pc, #200]	; (8014cd4 <igmp_input+0x130>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	429a      	cmp	r2, r3
 8014c10:	d125      	bne.n	8014c5e <igmp_input+0xba>
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	3304      	adds	r3, #4
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d003      	beq.n	8014c22 <igmp_input+0x7e>
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	685b      	ldr	r3, [r3, #4]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d11d      	bne.n	8014c5e <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 8014c22:	697b      	ldr	r3, [r7, #20]
 8014c24:	785b      	ldrb	r3, [r3, #1]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d102      	bne.n	8014c30 <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8014c2a:	697b      	ldr	r3, [r7, #20]
 8014c2c:	220a      	movs	r2, #10
 8014c2e:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c34:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 8014c36:	69bb      	ldr	r3, [r7, #24]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d00c      	beq.n	8014c56 <igmp_input+0xb2>
          groupref = groupref->next;
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 8014c42:	e008      	b.n	8014c56 <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 8014c44:	697b      	ldr	r3, [r7, #20]
 8014c46:	785b      	ldrb	r3, [r3, #1]
 8014c48:	4619      	mov	r1, r3
 8014c4a:	69b8      	ldr	r0, [r7, #24]
 8014c4c:	f000 f991 	bl	8014f72 <igmp_delaying_member>
          groupref = groupref->next;
 8014c50:	69bb      	ldr	r3, [r7, #24]
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 8014c56:	69bb      	ldr	r3, [r7, #24]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d1f3      	bne.n	8014c44 <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8014c5c:	e021      	b.n	8014ca2 <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	3304      	adds	r3, #4
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d02c      	beq.n	8014cc0 <igmp_input+0x11c>
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d028      	beq.n	8014cc0 <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681a      	ldr	r2, [r3, #0]
 8014c72:	4b18      	ldr	r3, [pc, #96]	; (8014cd4 <igmp_input+0x130>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	429a      	cmp	r2, r3
 8014c78:	d109      	bne.n	8014c8e <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	685b      	ldr	r3, [r3, #4]
 8014c7e:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 8014c80:	f107 0310 	add.w	r3, r7, #16
 8014c84:	4619      	mov	r1, r3
 8014c86:	68b8      	ldr	r0, [r7, #8]
 8014c88:	f7ff ff05 	bl	8014a96 <igmp_lookfor_group>
 8014c8c:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d015      	beq.n	8014cc0 <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 8014c94:	697b      	ldr	r3, [r7, #20]
 8014c96:	785b      	ldrb	r3, [r3, #1]
 8014c98:	4619      	mov	r1, r3
 8014c9a:	69f8      	ldr	r0, [r7, #28]
 8014c9c:	f000 f969 	bl	8014f72 <igmp_delaying_member>
      break;
 8014ca0:	e00e      	b.n	8014cc0 <igmp_input+0x11c>
 8014ca2:	e00d      	b.n	8014cc0 <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 8014ca4:	69fb      	ldr	r3, [r7, #28]
 8014ca6:	7a5b      	ldrb	r3, [r3, #9]
 8014ca8:	2b01      	cmp	r3, #1
 8014caa:	d10b      	bne.n	8014cc4 <igmp_input+0x120>
        group->timer = 0; /* stopped */
 8014cac:	69fb      	ldr	r3, [r7, #28]
 8014cae:	2200      	movs	r2, #0
 8014cb0:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8014cb2:	69fb      	ldr	r3, [r7, #28]
 8014cb4:	2202      	movs	r2, #2
 8014cb6:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 8014cb8:	69fb      	ldr	r3, [r7, #28]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	721a      	strb	r2, [r3, #8]
      break;
 8014cbe:	e001      	b.n	8014cc4 <igmp_input+0x120>
      break;
 8014cc0:	bf00      	nop
 8014cc2:	e000      	b.n	8014cc6 <igmp_input+0x122>
      break;
 8014cc4:	bf00      	nop
  }

  pbuf_free(p);
 8014cc6:	68f8      	ldr	r0, [r7, #12]
 8014cc8:	f7f8 f9c2 	bl	800d050 <pbuf_free>
  return;
 8014ccc:	bf00      	nop
}
 8014cce:	3720      	adds	r7, #32
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}
 8014cd4:	20040c94 	.word	0x20040c94

08014cd8 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b084      	sub	sp, #16
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
 8014ce0:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 8014ce2:	23fa      	movs	r3, #250	; 0xfa
 8014ce4:	73fb      	strb	r3, [r7, #15]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8014ce6:	683b      	ldr	r3, [r7, #0]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014cee:	2be0      	cmp	r3, #224	; 0xe0
 8014cf0:	d009      	beq.n	8014d06 <igmp_joingroup+0x2e>
 8014cf2:	4b26      	ldr	r3, [pc, #152]	; (8014d8c <igmp_joingroup+0xb4>)
 8014cf4:	f240 12c9 	movw	r2, #457	; 0x1c9
 8014cf8:	4925      	ldr	r1, [pc, #148]	; (8014d90 <igmp_joingroup+0xb8>)
 8014cfa:	4826      	ldr	r0, [pc, #152]	; (8014d94 <igmp_joingroup+0xbc>)
 8014cfc:	f00c ffe6 	bl	8021ccc <iprintf>
 8014d00:	f06f 0305 	mvn.w	r3, #5
 8014d04:	e03d      	b.n	8014d82 <igmp_joingroup+0xaa>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8014d06:	683b      	ldr	r3, [r7, #0]
 8014d08:	681a      	ldr	r2, [r3, #0]
 8014d0a:	4b23      	ldr	r3, [pc, #140]	; (8014d98 <igmp_joingroup+0xc0>)
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	d109      	bne.n	8014d26 <igmp_joingroup+0x4e>
 8014d12:	4b1e      	ldr	r3, [pc, #120]	; (8014d8c <igmp_joingroup+0xb4>)
 8014d14:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
 8014d18:	4920      	ldr	r1, [pc, #128]	; (8014d9c <igmp_joingroup+0xc4>)
 8014d1a:	481e      	ldr	r0, [pc, #120]	; (8014d94 <igmp_joingroup+0xbc>)
 8014d1c:	f00c ffd6 	bl	8021ccc <iprintf>
 8014d20:	f06f 0305 	mvn.w	r3, #5
 8014d24:	e02d      	b.n	8014d82 <igmp_joingroup+0xaa>

  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014d26:	4b1e      	ldr	r3, [pc, #120]	; (8014da0 <igmp_joingroup+0xc8>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	60bb      	str	r3, [r7, #8]
 8014d2c:	e024      	b.n	8014d78 <igmp_joingroup+0xa0>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 8014d2e:	68bb      	ldr	r3, [r7, #8]
 8014d30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014d34:	f003 0320 	and.w	r3, r3, #32
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d01a      	beq.n	8014d72 <igmp_joingroup+0x9a>
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d00a      	beq.n	8014d58 <igmp_joingroup+0x80>
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d006      	beq.n	8014d58 <igmp_joingroup+0x80>
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	3304      	adds	r3, #4
 8014d4e:	681a      	ldr	r2, [r3, #0]
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	429a      	cmp	r2, r3
 8014d56:	d10c      	bne.n	8014d72 <igmp_joingroup+0x9a>
      err = igmp_joingroup_netif(netif, groupaddr);
 8014d58:	6839      	ldr	r1, [r7, #0]
 8014d5a:	68b8      	ldr	r0, [r7, #8]
 8014d5c:	f000 f822 	bl	8014da4 <igmp_joingroup_netif>
 8014d60:	4603      	mov	r3, r0
 8014d62:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8014d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d002      	beq.n	8014d72 <igmp_joingroup+0x9a>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
 8014d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d70:	e007      	b.n	8014d82 <igmp_joingroup+0xaa>
  NETIF_FOREACH(netif) {
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	60bb      	str	r3, [r7, #8]
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d1d7      	bne.n	8014d2e <igmp_joingroup+0x56>
      }
    }
  }

  return err;
 8014d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3710      	adds	r7, #16
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	08025a60 	.word	0x08025a60
 8014d90:	08025b38 	.word	0x08025b38
 8014d94:	08025acc 	.word	0x08025acc
 8014d98:	20040c94 	.word	0x20040c94
 8014d9c:	08025b70 	.word	0x08025b70
 8014da0:	20040b34 	.word	0x20040b34

08014da4 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b084      	sub	sp, #16
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014db6:	2be0      	cmp	r3, #224	; 0xe0
 8014db8:	d009      	beq.n	8014dce <igmp_joingroup_netif+0x2a>
 8014dba:	4b2f      	ldr	r3, [pc, #188]	; (8014e78 <igmp_joingroup_netif+0xd4>)
 8014dbc:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8014dc0:	492e      	ldr	r1, [pc, #184]	; (8014e7c <igmp_joingroup_netif+0xd8>)
 8014dc2:	482f      	ldr	r0, [pc, #188]	; (8014e80 <igmp_joingroup_netif+0xdc>)
 8014dc4:	f00c ff82 	bl	8021ccc <iprintf>
 8014dc8:	f06f 0305 	mvn.w	r3, #5
 8014dcc:	e050      	b.n	8014e70 <igmp_joingroup_netif+0xcc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	681a      	ldr	r2, [r3, #0]
 8014dd2:	4b2c      	ldr	r3, [pc, #176]	; (8014e84 <igmp_joingroup_netif+0xe0>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d109      	bne.n	8014dee <igmp_joingroup_netif+0x4a>
 8014dda:	4b27      	ldr	r3, [pc, #156]	; (8014e78 <igmp_joingroup_netif+0xd4>)
 8014ddc:	f240 12ed 	movw	r2, #493	; 0x1ed
 8014de0:	4929      	ldr	r1, [pc, #164]	; (8014e88 <igmp_joingroup_netif+0xe4>)
 8014de2:	4827      	ldr	r0, [pc, #156]	; (8014e80 <igmp_joingroup_netif+0xdc>)
 8014de4:	f00c ff72 	bl	8021ccc <iprintf>
 8014de8:	f06f 0305 	mvn.w	r3, #5
 8014dec:	e040      	b.n	8014e70 <igmp_joingroup_netif+0xcc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014df4:	f003 0320 	and.w	r3, r3, #32
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d109      	bne.n	8014e10 <igmp_joingroup_netif+0x6c>
 8014dfc:	4b1e      	ldr	r3, [pc, #120]	; (8014e78 <igmp_joingroup_netif+0xd4>)
 8014dfe:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8014e02:	4922      	ldr	r1, [pc, #136]	; (8014e8c <igmp_joingroup_netif+0xe8>)
 8014e04:	481e      	ldr	r0, [pc, #120]	; (8014e80 <igmp_joingroup_netif+0xdc>)
 8014e06:	f00c ff61 	bl	8021ccc <iprintf>
 8014e0a:	f06f 0305 	mvn.w	r3, #5
 8014e0e:	e02f      	b.n	8014e70 <igmp_joingroup_netif+0xcc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 8014e10:	6839      	ldr	r1, [r7, #0]
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f7ff fe5e 	bl	8014ad4 <igmp_lookup_group>
 8014e18:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d025      	beq.n	8014e6c <igmp_joingroup_netif+0xc8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	7a5b      	ldrb	r3, [r3, #9]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d119      	bne.n	8014e5c <igmp_joingroup_netif+0xb8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	7b1b      	ldrb	r3, [r3, #12]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d109      	bne.n	8014e44 <igmp_joingroup_netif+0xa0>
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d005      	beq.n	8014e44 <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e3c:	2201      	movs	r2, #1
 8014e3e:	6839      	ldr	r1, [r7, #0]
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8014e44:	2216      	movs	r2, #22
 8014e46:	68f9      	ldr	r1, [r7, #12]
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f000 f8d9 	bl	8015000 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8014e4e:	2105      	movs	r1, #5
 8014e50:	68f8      	ldr	r0, [r7, #12]
 8014e52:	f000 f86b 	bl	8014f2c <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	2201      	movs	r2, #1
 8014e5a:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	7b1b      	ldrb	r3, [r3, #12]
 8014e60:	3301      	adds	r3, #1
 8014e62:	b2da      	uxtb	r2, r3
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	e001      	b.n	8014e70 <igmp_joingroup_netif+0xcc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 8014e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	3710      	adds	r7, #16
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}
 8014e78:	08025a60 	.word	0x08025a60
 8014e7c:	08025ba4 	.word	0x08025ba4
 8014e80:	08025acc 	.word	0x08025acc
 8014e84:	20040c94 	.word	0x20040c94
 8014e88:	08025be0 	.word	0x08025be0
 8014e8c:	08025c1c 	.word	0x08025c1c

08014e90 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b082      	sub	sp, #8
 8014e94:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 8014e96:	4b15      	ldr	r3, [pc, #84]	; (8014eec <igmp_tmr+0x5c>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	607b      	str	r3, [r7, #4]
 8014e9c:	e01e      	b.n	8014edc <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ea2:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 8014ea4:	e014      	b.n	8014ed0 <igmp_tmr+0x40>
      if (group->timer > 0) {
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	895b      	ldrh	r3, [r3, #10]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d00d      	beq.n	8014eca <igmp_tmr+0x3a>
        group->timer--;
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	895b      	ldrh	r3, [r3, #10]
 8014eb2:	3b01      	subs	r3, #1
 8014eb4:	b29a      	uxth	r2, r3
 8014eb6:	683b      	ldr	r3, [r7, #0]
 8014eb8:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	895b      	ldrh	r3, [r3, #10]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d103      	bne.n	8014eca <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 8014ec2:	6839      	ldr	r1, [r7, #0]
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f000 f813 	bl	8014ef0 <igmp_timeout>
        }
      }
      group = group->next;
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d1e7      	bne.n	8014ea6 <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	607b      	str	r3, [r7, #4]
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d1dd      	bne.n	8014e9e <igmp_tmr+0xe>
    }
  }
}
 8014ee2:	bf00      	nop
 8014ee4:	bf00      	nop
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}
 8014eec:	20040b34 	.word	0x20040b34

08014ef0 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	7a5b      	ldrb	r3, [r3, #9]
 8014efe:	2b01      	cmp	r3, #1
 8014f00:	d10d      	bne.n	8014f1e <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	685a      	ldr	r2, [r3, #4]
 8014f06:	4b08      	ldr	r3, [pc, #32]	; (8014f28 <igmp_timeout+0x38>)
 8014f08:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d007      	beq.n	8014f1e <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	2202      	movs	r2, #2
 8014f12:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8014f14:	2216      	movs	r2, #22
 8014f16:	6839      	ldr	r1, [r7, #0]
 8014f18:	6878      	ldr	r0, [r7, #4]
 8014f1a:	f000 f871 	bl	8015000 <igmp_send>
  }
}
 8014f1e:	bf00      	nop
 8014f20:	3708      	adds	r7, #8
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}
 8014f26:	bf00      	nop
 8014f28:	20040c94 	.word	0x20040c94

08014f2c <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b082      	sub	sp, #8
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	460b      	mov	r3, r1
 8014f36:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 8014f38:	78fb      	ldrb	r3, [r7, #3]
 8014f3a:	2b02      	cmp	r3, #2
 8014f3c:	d90b      	bls.n	8014f56 <igmp_start_timer+0x2a>
 8014f3e:	f00c ff81 	bl	8021e44 <rand>
 8014f42:	4603      	mov	r3, r0
 8014f44:	461a      	mov	r2, r3
 8014f46:	78fb      	ldrb	r3, [r7, #3]
 8014f48:	fbb2 f1f3 	udiv	r1, r2, r3
 8014f4c:	fb01 f303 	mul.w	r3, r1, r3
 8014f50:	1ad3      	subs	r3, r2, r3
 8014f52:	b29a      	uxth	r2, r3
 8014f54:	e000      	b.n	8014f58 <igmp_start_timer+0x2c>
 8014f56:	2201      	movs	r2, #1
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	895b      	ldrh	r3, [r3, #10]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d102      	bne.n	8014f6a <igmp_start_timer+0x3e>
    group->timer = 1;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2201      	movs	r2, #1
 8014f68:	815a      	strh	r2, [r3, #10]
  }
}
 8014f6a:	bf00      	nop
 8014f6c:	3708      	adds	r7, #8
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}

08014f72 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8014f72:	b580      	push	{r7, lr}
 8014f74:	b082      	sub	sp, #8
 8014f76:	af00      	add	r7, sp, #0
 8014f78:	6078      	str	r0, [r7, #4]
 8014f7a:	460b      	mov	r3, r1
 8014f7c:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	7a5b      	ldrb	r3, [r3, #9]
 8014f82:	2b02      	cmp	r3, #2
 8014f84:	d00d      	beq.n	8014fa2 <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8014f8a:	2b01      	cmp	r3, #1
 8014f8c:	d111      	bne.n	8014fb2 <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d005      	beq.n	8014fa2 <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 8014f96:	78fb      	ldrb	r3, [r7, #3]
 8014f98:	b29a      	uxth	r2, r3
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	895b      	ldrh	r3, [r3, #10]
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d207      	bcs.n	8014fb2 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8014fa2:	78fb      	ldrb	r3, [r7, #3]
 8014fa4:	4619      	mov	r1, r3
 8014fa6:	6878      	ldr	r0, [r7, #4]
 8014fa8:	f7ff ffc0 	bl	8014f2c <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2201      	movs	r2, #1
 8014fb0:	725a      	strb	r2, [r3, #9]
  }
}
 8014fb2:	bf00      	nop
 8014fb4:	3708      	adds	r7, #8
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}

08014fba <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 8014fba:	b580      	push	{r7, lr}
 8014fbc:	b08c      	sub	sp, #48	; 0x30
 8014fbe:	af06      	add	r7, sp, #24
 8014fc0:	60f8      	str	r0, [r7, #12]
 8014fc2:	60b9      	str	r1, [r7, #8]
 8014fc4:	607a      	str	r2, [r7, #4]
 8014fc6:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8014fc8:	f240 4394 	movw	r3, #1172	; 0x494
 8014fcc:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8014fce:	2300      	movs	r3, #0
 8014fd0:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8014fd2:	2304      	movs	r3, #4
 8014fd4:	9304      	str	r3, [sp, #16]
 8014fd6:	f107 0314 	add.w	r3, r7, #20
 8014fda:	9303      	str	r3, [sp, #12]
 8014fdc:	683b      	ldr	r3, [r7, #0]
 8014fde:	9302      	str	r3, [sp, #8]
 8014fe0:	2302      	movs	r3, #2
 8014fe2:	9301      	str	r3, [sp, #4]
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	9300      	str	r3, [sp, #0]
 8014fe8:	2301      	movs	r3, #1
 8014fea:	687a      	ldr	r2, [r7, #4]
 8014fec:	68b9      	ldr	r1, [r7, #8]
 8014fee:	68f8      	ldr	r0, [r7, #12]
 8014ff0:	f000 fa9f 	bl	8015532 <ip4_output_if_opt>
 8014ff4:	4603      	mov	r3, r0
}
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	3718      	adds	r7, #24
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}
	...

08015000 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b088      	sub	sp, #32
 8015004:	af00      	add	r7, sp, #0
 8015006:	60f8      	str	r0, [r7, #12]
 8015008:	60b9      	str	r1, [r7, #8]
 801500a:	4613      	mov	r3, r2
 801500c:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 801500e:	2300      	movs	r3, #0
 8015010:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 8015012:	2300      	movs	r3, #0
 8015014:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 8015016:	4b2f      	ldr	r3, [pc, #188]	; (80150d4 <igmp_send+0xd4>)
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 801501c:	2300      	movs	r3, #0
 801501e:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 8015020:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015024:	2108      	movs	r1, #8
 8015026:	2036      	movs	r0, #54	; 0x36
 8015028:	f7f7 fd2e 	bl	800ca88 <pbuf_alloc>
 801502c:	61b8      	str	r0, [r7, #24]

  if (p) {
 801502e:	69bb      	ldr	r3, [r7, #24]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d04b      	beq.n	80150cc <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 8015034:	69bb      	ldr	r3, [r7, #24]
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 801503a:	69bb      	ldr	r3, [r7, #24]
 801503c:	895b      	ldrh	r3, [r3, #10]
 801503e:	2b07      	cmp	r3, #7
 8015040:	d806      	bhi.n	8015050 <igmp_send+0x50>
 8015042:	4b25      	ldr	r3, [pc, #148]	; (80150d8 <igmp_send+0xd8>)
 8015044:	f240 3202 	movw	r2, #770	; 0x302
 8015048:	4924      	ldr	r1, [pc, #144]	; (80150dc <igmp_send+0xdc>)
 801504a:	4825      	ldr	r0, [pc, #148]	; (80150e0 <igmp_send+0xe0>)
 801504c:	f00c fe3e 	bl	8021ccc <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	3304      	adds	r3, #4
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 8015058:	79fb      	ldrb	r3, [r7, #7]
 801505a:	2b16      	cmp	r3, #22
 801505c:	d10a      	bne.n	8015074 <igmp_send+0x74>
      dest = &(group->group_address);
 801505e:	68bb      	ldr	r3, [r7, #8]
 8015060:	3304      	adds	r3, #4
 8015062:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	685a      	ldr	r2, [r3, #4]
 8015068:	697b      	ldr	r3, [r7, #20]
 801506a:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 801506c:	68bb      	ldr	r3, [r7, #8]
 801506e:	2201      	movs	r2, #1
 8015070:	721a      	strb	r2, [r3, #8]
 8015072:	e008      	b.n	8015086 <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8015074:	79fb      	ldrb	r3, [r7, #7]
 8015076:	2b17      	cmp	r3, #23
 8015078:	d105      	bne.n	8015086 <igmp_send+0x86>
        dest = &allrouters;
 801507a:	4b1a      	ldr	r3, [pc, #104]	; (80150e4 <igmp_send+0xe4>)
 801507c:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 801507e:	68bb      	ldr	r3, [r7, #8]
 8015080:	685a      	ldr	r2, [r3, #4]
 8015082:	697b      	ldr	r3, [r7, #20]
 8015084:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8015086:	79fb      	ldrb	r3, [r7, #7]
 8015088:	2b16      	cmp	r3, #22
 801508a:	d002      	beq.n	8015092 <igmp_send+0x92>
 801508c:	79fb      	ldrb	r3, [r7, #7]
 801508e:	2b17      	cmp	r3, #23
 8015090:	d119      	bne.n	80150c6 <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 8015092:	697b      	ldr	r3, [r7, #20]
 8015094:	79fa      	ldrb	r2, [r7, #7]
 8015096:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	2200      	movs	r2, #0
 801509c:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	2200      	movs	r2, #0
 80150a2:	709a      	strb	r2, [r3, #2]
 80150a4:	2200      	movs	r2, #0
 80150a6:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 80150a8:	2108      	movs	r1, #8
 80150aa:	6978      	ldr	r0, [r7, #20]
 80150ac:	f7f6 fc0e 	bl	800b8cc <inet_chksum>
 80150b0:	4603      	mov	r3, r0
 80150b2:	461a      	mov	r2, r3
 80150b4:	697b      	ldr	r3, [r7, #20]
 80150b6:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 80150b8:	f107 0110 	add.w	r1, r7, #16
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	69fa      	ldr	r2, [r7, #28]
 80150c0:	69b8      	ldr	r0, [r7, #24]
 80150c2:	f7ff ff7a 	bl	8014fba <igmp_ip_output_if>
    }

    pbuf_free(p);
 80150c6:	69b8      	ldr	r0, [r7, #24]
 80150c8:	f7f7 ffc2 	bl	800d050 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 80150cc:	bf00      	nop
 80150ce:	3720      	adds	r7, #32
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}
 80150d4:	080262a0 	.word	0x080262a0
 80150d8:	08025a60 	.word	0x08025a60
 80150dc:	08025d7c 	.word	0x08025d7c
 80150e0:	08025acc 	.word	0x08025acc
 80150e4:	20040c98 	.word	0x20040c98

080150e8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80150e8:	b480      	push	{r7}
 80150ea:	b085      	sub	sp, #20
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150f8:	2be0      	cmp	r3, #224	; 0xe0
 80150fa:	d106      	bne.n	801510a <ip4_route+0x22>
 80150fc:	4b36      	ldr	r3, [pc, #216]	; (80151d8 <ip4_route+0xf0>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d002      	beq.n	801510a <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8015104:	4b34      	ldr	r3, [pc, #208]	; (80151d8 <ip4_route+0xf0>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	e060      	b.n	80151cc <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801510a:	4b34      	ldr	r3, [pc, #208]	; (80151dc <ip4_route+0xf4>)
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	60fb      	str	r3, [r7, #12]
 8015110:	e036      	b.n	8015180 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015118:	f003 0301 	and.w	r3, r3, #1
 801511c:	b2db      	uxtb	r3, r3
 801511e:	2b00      	cmp	r3, #0
 8015120:	d02b      	beq.n	801517a <ip4_route+0x92>
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015128:	089b      	lsrs	r3, r3, #2
 801512a:	f003 0301 	and.w	r3, r3, #1
 801512e:	b2db      	uxtb	r3, r3
 8015130:	2b00      	cmp	r3, #0
 8015132:	d022      	beq.n	801517a <ip4_route+0x92>
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	3304      	adds	r3, #4
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d01d      	beq.n	801517a <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	681a      	ldr	r2, [r3, #0]
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	3304      	adds	r3, #4
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	405a      	eors	r2, r3
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	3308      	adds	r3, #8
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	4013      	ands	r3, r2
 8015152:	2b00      	cmp	r3, #0
 8015154:	d101      	bne.n	801515a <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	e038      	b.n	80151cc <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015160:	f003 0302 	and.w	r3, r3, #2
 8015164:	2b00      	cmp	r3, #0
 8015166:	d108      	bne.n	801517a <ip4_route+0x92>
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	681a      	ldr	r2, [r3, #0]
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	330c      	adds	r3, #12
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	429a      	cmp	r2, r3
 8015174:	d101      	bne.n	801517a <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	e028      	b.n	80151cc <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	60fb      	str	r3, [r7, #12]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d1c5      	bne.n	8015112 <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015186:	4b16      	ldr	r3, [pc, #88]	; (80151e0 <ip4_route+0xf8>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d01a      	beq.n	80151c4 <ip4_route+0xdc>
 801518e:	4b14      	ldr	r3, [pc, #80]	; (80151e0 <ip4_route+0xf8>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015196:	f003 0301 	and.w	r3, r3, #1
 801519a:	2b00      	cmp	r3, #0
 801519c:	d012      	beq.n	80151c4 <ip4_route+0xdc>
 801519e:	4b10      	ldr	r3, [pc, #64]	; (80151e0 <ip4_route+0xf8>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80151a6:	f003 0304 	and.w	r3, r3, #4
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d00a      	beq.n	80151c4 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80151ae:	4b0c      	ldr	r3, [pc, #48]	; (80151e0 <ip4_route+0xf8>)
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	3304      	adds	r3, #4
 80151b4:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d004      	beq.n	80151c4 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	b2db      	uxtb	r3, r3
 80151c0:	2b7f      	cmp	r3, #127	; 0x7f
 80151c2:	d101      	bne.n	80151c8 <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80151c4:	2300      	movs	r3, #0
 80151c6:	e001      	b.n	80151cc <ip4_route+0xe4>
  }

  return netif_default;
 80151c8:	4b05      	ldr	r3, [pc, #20]	; (80151e0 <ip4_route+0xf8>)
 80151ca:	681b      	ldr	r3, [r3, #0]
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3714      	adds	r7, #20
 80151d0:	46bd      	mov	sp, r7
 80151d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d6:	4770      	bx	lr
 80151d8:	20040ca0 	.word	0x20040ca0
 80151dc:	20040b34 	.word	0x20040b34
 80151e0:	20040b38 	.word	0x20040b38

080151e4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80151f2:	f003 0301 	and.w	r3, r3, #1
 80151f6:	b2db      	uxtb	r3, r3
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d016      	beq.n	801522a <ip4_input_accept+0x46>
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	3304      	adds	r3, #4
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d011      	beq.n	801522a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015206:	4b0b      	ldr	r3, [pc, #44]	; (8015234 <ip4_input_accept+0x50>)
 8015208:	695a      	ldr	r2, [r3, #20]
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	3304      	adds	r3, #4
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	429a      	cmp	r2, r3
 8015212:	d008      	beq.n	8015226 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015214:	4b07      	ldr	r3, [pc, #28]	; (8015234 <ip4_input_accept+0x50>)
 8015216:	695b      	ldr	r3, [r3, #20]
 8015218:	6879      	ldr	r1, [r7, #4]
 801521a:	4618      	mov	r0, r3
 801521c:	f000 faba 	bl	8015794 <ip4_addr_isbroadcast_u32>
 8015220:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015222:	2b00      	cmp	r3, #0
 8015224:	d001      	beq.n	801522a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015226:	2301      	movs	r3, #1
 8015228:	e000      	b.n	801522c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801522a:	2300      	movs	r3, #0
}
 801522c:	4618      	mov	r0, r3
 801522e:	3708      	adds	r7, #8
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}
 8015234:	200357c0 	.word	0x200357c0

08015238 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b088      	sub	sp, #32
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
 8015240:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015242:	2301      	movs	r3, #1
 8015244:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	685b      	ldr	r3, [r3, #4]
 801524a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801524c:	69fb      	ldr	r3, [r7, #28]
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	091b      	lsrs	r3, r3, #4
 8015252:	b2db      	uxtb	r3, r3
 8015254:	2b04      	cmp	r3, #4
 8015256:	d004      	beq.n	8015262 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f7f7 fef9 	bl	800d050 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801525e:	2300      	movs	r3, #0
 8015260:	e13d      	b.n	80154de <ip4_input+0x2a6>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	f003 030f 	and.w	r3, r3, #15
 801526a:	b2db      	uxtb	r3, r3
 801526c:	009b      	lsls	r3, r3, #2
 801526e:	b2db      	uxtb	r3, r3
 8015270:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015272:	69fb      	ldr	r3, [r7, #28]
 8015274:	885b      	ldrh	r3, [r3, #2]
 8015276:	b29b      	uxth	r3, r3
 8015278:	4618      	mov	r0, r3
 801527a:	f7f5 ffd3 	bl	800b224 <lwip_htons>
 801527e:	4603      	mov	r3, r0
 8015280:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	891b      	ldrh	r3, [r3, #8]
 8015286:	8a3a      	ldrh	r2, [r7, #16]
 8015288:	429a      	cmp	r2, r3
 801528a:	d204      	bcs.n	8015296 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801528c:	8a3b      	ldrh	r3, [r7, #16]
 801528e:	4619      	mov	r1, r3
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f7f7 fd57 	bl	800cd44 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	895b      	ldrh	r3, [r3, #10]
 801529a:	8a7a      	ldrh	r2, [r7, #18]
 801529c:	429a      	cmp	r2, r3
 801529e:	d807      	bhi.n	80152b0 <ip4_input+0x78>
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	891b      	ldrh	r3, [r3, #8]
 80152a4:	8a3a      	ldrh	r2, [r7, #16]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d802      	bhi.n	80152b0 <ip4_input+0x78>
 80152aa:	8a7b      	ldrh	r3, [r7, #18]
 80152ac:	2b13      	cmp	r3, #19
 80152ae:	d804      	bhi.n	80152ba <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f7f7 fecd 	bl	800d050 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80152b6:	2300      	movs	r3, #0
 80152b8:	e111      	b.n	80154de <ip4_input+0x2a6>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	691b      	ldr	r3, [r3, #16]
 80152be:	4a8a      	ldr	r2, [pc, #552]	; (80154e8 <ip4_input+0x2b0>)
 80152c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80152c2:	69fb      	ldr	r3, [r7, #28]
 80152c4:	68db      	ldr	r3, [r3, #12]
 80152c6:	4a88      	ldr	r2, [pc, #544]	; (80154e8 <ip4_input+0x2b0>)
 80152c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80152ca:	4b87      	ldr	r3, [pc, #540]	; (80154e8 <ip4_input+0x2b0>)
 80152cc:	695b      	ldr	r3, [r3, #20]
 80152ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152d2:	2be0      	cmp	r3, #224	; 0xe0
 80152d4:	d120      	bne.n	8015318 <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80152dc:	f003 0320 	and.w	r3, r3, #32
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d016      	beq.n	8015312 <ip4_input+0xda>
 80152e4:	4981      	ldr	r1, [pc, #516]	; (80154ec <ip4_input+0x2b4>)
 80152e6:	6838      	ldr	r0, [r7, #0]
 80152e8:	f7ff fbd5 	bl	8014a96 <igmp_lookfor_group>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d00f      	beq.n	8015312 <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 80152f2:	4b7f      	ldr	r3, [pc, #508]	; (80154f0 <ip4_input+0x2b8>)
 80152f4:	60fb      	str	r3, [r7, #12]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 80152f6:	4b7c      	ldr	r3, [pc, #496]	; (80154e8 <ip4_input+0x2b0>)
 80152f8:	695a      	ldr	r2, [r3, #20]
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d105      	bne.n	801530c <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 8015300:	4b79      	ldr	r3, [pc, #484]	; (80154e8 <ip4_input+0x2b0>)
 8015302:	691b      	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 8015304:	2b00      	cmp	r3, #0
 8015306:	d101      	bne.n	801530c <ip4_input+0xd4>
        check_ip_src = 0;
 8015308:	2300      	movs	r3, #0
 801530a:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 8015310:	e02a      	b.n	8015368 <ip4_input+0x130>
    } else {
      netif = NULL;
 8015312:	2300      	movs	r3, #0
 8015314:	61bb      	str	r3, [r7, #24]
 8015316:	e027      	b.n	8015368 <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015318:	6838      	ldr	r0, [r7, #0]
 801531a:	f7ff ff63 	bl	80151e4 <ip4_input_accept>
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	d002      	beq.n	801532a <ip4_input+0xf2>
      netif = inp;
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	61bb      	str	r3, [r7, #24]
 8015328:	e01e      	b.n	8015368 <ip4_input+0x130>
    } else {
      netif = NULL;
 801532a:	2300      	movs	r3, #0
 801532c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801532e:	4b6e      	ldr	r3, [pc, #440]	; (80154e8 <ip4_input+0x2b0>)
 8015330:	695b      	ldr	r3, [r3, #20]
 8015332:	b2db      	uxtb	r3, r3
 8015334:	2b7f      	cmp	r3, #127	; 0x7f
 8015336:	d017      	beq.n	8015368 <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015338:	4b6e      	ldr	r3, [pc, #440]	; (80154f4 <ip4_input+0x2bc>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	61bb      	str	r3, [r7, #24]
 801533e:	e00e      	b.n	801535e <ip4_input+0x126>
          if (netif == inp) {
 8015340:	69ba      	ldr	r2, [r7, #24]
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	429a      	cmp	r2, r3
 8015346:	d006      	beq.n	8015356 <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015348:	69b8      	ldr	r0, [r7, #24]
 801534a:	f7ff ff4b 	bl	80151e4 <ip4_input_accept>
 801534e:	4603      	mov	r3, r0
 8015350:	2b00      	cmp	r3, #0
 8015352:	d108      	bne.n	8015366 <ip4_input+0x12e>
 8015354:	e000      	b.n	8015358 <ip4_input+0x120>
            continue;
 8015356:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015358:	69bb      	ldr	r3, [r7, #24]
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	61bb      	str	r3, [r7, #24]
 801535e:	69bb      	ldr	r3, [r7, #24]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d1ed      	bne.n	8015340 <ip4_input+0x108>
 8015364:	e000      	b.n	8015368 <ip4_input+0x130>
            break;
 8015366:	bf00      	nop
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d013      	beq.n	8015396 <ip4_input+0x15e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801536e:	4b5e      	ldr	r3, [pc, #376]	; (80154e8 <ip4_input+0x2b0>)
 8015370:	691b      	ldr	r3, [r3, #16]
 8015372:	6839      	ldr	r1, [r7, #0]
 8015374:	4618      	mov	r0, r3
 8015376:	f000 fa0d 	bl	8015794 <ip4_addr_isbroadcast_u32>
 801537a:	4603      	mov	r3, r0
 801537c:	2b00      	cmp	r3, #0
 801537e:	d105      	bne.n	801538c <ip4_input+0x154>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015380:	4b59      	ldr	r3, [pc, #356]	; (80154e8 <ip4_input+0x2b0>)
 8015382:	691b      	ldr	r3, [r3, #16]
 8015384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015388:	2be0      	cmp	r3, #224	; 0xe0
 801538a:	d104      	bne.n	8015396 <ip4_input+0x15e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801538c:	6878      	ldr	r0, [r7, #4]
 801538e:	f7f7 fe5f 	bl	800d050 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015392:	2300      	movs	r3, #0
 8015394:	e0a3      	b.n	80154de <ip4_input+0x2a6>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015396:	69bb      	ldr	r3, [r7, #24]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d104      	bne.n	80153a6 <ip4_input+0x16e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f7f7 fe57 	bl	800d050 <pbuf_free>
    return ERR_OK;
 80153a2:	2300      	movs	r3, #0
 80153a4:	e09b      	b.n	80154de <ip4_input+0x2a6>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80153a6:	69fb      	ldr	r3, [r7, #28]
 80153a8:	88db      	ldrh	r3, [r3, #6]
 80153aa:	b29b      	uxth	r3, r3
 80153ac:	461a      	mov	r2, r3
 80153ae:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80153b2:	4013      	ands	r3, r2
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d00b      	beq.n	80153d0 <ip4_input+0x198>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80153b8:	6878      	ldr	r0, [r7, #4]
 80153ba:	f000 fdc1 	bl	8015f40 <ip4_reass>
 80153be:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d101      	bne.n	80153ca <ip4_input+0x192>
      return ERR_OK;
 80153c6:	2300      	movs	r3, #0
 80153c8:	e089      	b.n	80154de <ip4_input+0x2a6>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80153d0:	4a45      	ldr	r2, [pc, #276]	; (80154e8 <ip4_input+0x2b0>)
 80153d2:	69bb      	ldr	r3, [r7, #24]
 80153d4:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80153d6:	4a44      	ldr	r2, [pc, #272]	; (80154e8 <ip4_input+0x2b0>)
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80153dc:	4a42      	ldr	r2, [pc, #264]	; (80154e8 <ip4_input+0x2b0>)
 80153de:	69fb      	ldr	r3, [r7, #28]
 80153e0:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80153e2:	69fb      	ldr	r3, [r7, #28]
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	f003 030f 	and.w	r3, r3, #15
 80153ea:	b2db      	uxtb	r3, r3
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	b2db      	uxtb	r3, r3
 80153f0:	b29a      	uxth	r2, r3
 80153f2:	4b3d      	ldr	r3, [pc, #244]	; (80154e8 <ip4_input+0x2b0>)
 80153f4:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80153f6:	8a7b      	ldrh	r3, [r7, #18]
 80153f8:	4619      	mov	r1, r3
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f7f7 fda2 	bl	800cf44 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015400:	69fb      	ldr	r3, [r7, #28]
 8015402:	7a5b      	ldrb	r3, [r3, #9]
 8015404:	3b01      	subs	r3, #1
 8015406:	2b10      	cmp	r3, #16
 8015408:	d839      	bhi.n	801547e <ip4_input+0x246>
 801540a:	a201      	add	r2, pc, #4	; (adr r2, 8015410 <ip4_input+0x1d8>)
 801540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015410:	08015469 	.word	0x08015469
 8015414:	08015473 	.word	0x08015473
 8015418:	0801547f 	.word	0x0801547f
 801541c:	0801547f 	.word	0x0801547f
 8015420:	0801547f 	.word	0x0801547f
 8015424:	0801545f 	.word	0x0801545f
 8015428:	0801547f 	.word	0x0801547f
 801542c:	0801547f 	.word	0x0801547f
 8015430:	0801547f 	.word	0x0801547f
 8015434:	0801547f 	.word	0x0801547f
 8015438:	0801547f 	.word	0x0801547f
 801543c:	0801547f 	.word	0x0801547f
 8015440:	0801547f 	.word	0x0801547f
 8015444:	0801547f 	.word	0x0801547f
 8015448:	0801547f 	.word	0x0801547f
 801544c:	0801547f 	.word	0x0801547f
 8015450:	08015455 	.word	0x08015455
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015454:	6839      	ldr	r1, [r7, #0]
 8015456:	6878      	ldr	r0, [r7, #4]
 8015458:	f7fd fda4 	bl	8012fa4 <udp_input>
        break;
 801545c:	e02c      	b.n	80154b8 <ip4_input+0x280>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801545e:	6839      	ldr	r1, [r7, #0]
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f7f9 fdb5 	bl	800efd0 <tcp_input>
        break;
 8015466:	e027      	b.n	80154b8 <ip4_input+0x280>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015468:	6839      	ldr	r1, [r7, #0]
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f7ff f928 	bl	80146c0 <icmp_input>
        break;
 8015470:	e022      	b.n	80154b8 <ip4_input+0x280>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 8015472:	4a1e      	ldr	r2, [pc, #120]	; (80154ec <ip4_input+0x2b4>)
 8015474:	6839      	ldr	r1, [r7, #0]
 8015476:	6878      	ldr	r0, [r7, #4]
 8015478:	f7ff fb94 	bl	8014ba4 <igmp_input>
        break;
 801547c:	e01c      	b.n	80154b8 <ip4_input+0x280>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801547e:	4b1a      	ldr	r3, [pc, #104]	; (80154e8 <ip4_input+0x2b0>)
 8015480:	695b      	ldr	r3, [r3, #20]
 8015482:	69b9      	ldr	r1, [r7, #24]
 8015484:	4618      	mov	r0, r3
 8015486:	f000 f985 	bl	8015794 <ip4_addr_isbroadcast_u32>
 801548a:	4603      	mov	r3, r0
 801548c:	2b00      	cmp	r3, #0
 801548e:	d10f      	bne.n	80154b0 <ip4_input+0x278>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015490:	4b15      	ldr	r3, [pc, #84]	; (80154e8 <ip4_input+0x2b0>)
 8015492:	695b      	ldr	r3, [r3, #20]
 8015494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015498:	2be0      	cmp	r3, #224	; 0xe0
 801549a:	d009      	beq.n	80154b0 <ip4_input+0x278>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801549c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80154a0:	4619      	mov	r1, r3
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f7f7 fdc1 	bl	800d02a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80154a8:	2102      	movs	r1, #2
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f7ff fa0c 	bl	80148c8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80154b0:	6878      	ldr	r0, [r7, #4]
 80154b2:	f7f7 fdcd 	bl	800d050 <pbuf_free>
        break;
 80154b6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80154b8:	4b0b      	ldr	r3, [pc, #44]	; (80154e8 <ip4_input+0x2b0>)
 80154ba:	2200      	movs	r2, #0
 80154bc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80154be:	4b0a      	ldr	r3, [pc, #40]	; (80154e8 <ip4_input+0x2b0>)
 80154c0:	2200      	movs	r2, #0
 80154c2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80154c4:	4b08      	ldr	r3, [pc, #32]	; (80154e8 <ip4_input+0x2b0>)
 80154c6:	2200      	movs	r2, #0
 80154c8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80154ca:	4b07      	ldr	r3, [pc, #28]	; (80154e8 <ip4_input+0x2b0>)
 80154cc:	2200      	movs	r2, #0
 80154ce:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80154d0:	4b05      	ldr	r3, [pc, #20]	; (80154e8 <ip4_input+0x2b0>)
 80154d2:	2200      	movs	r2, #0
 80154d4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80154d6:	4b04      	ldr	r3, [pc, #16]	; (80154e8 <ip4_input+0x2b0>)
 80154d8:	2200      	movs	r2, #0
 80154da:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80154dc:	2300      	movs	r3, #0
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3720      	adds	r7, #32
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	200357c0 	.word	0x200357c0
 80154ec:	200357d4 	.word	0x200357d4
 80154f0:	010000e0 	.word	0x010000e0
 80154f4:	20040b34 	.word	0x20040b34

080154f8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b08a      	sub	sp, #40	; 0x28
 80154fc:	af06      	add	r7, sp, #24
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
 8015504:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8015506:	78fa      	ldrb	r2, [r7, #3]
 8015508:	2300      	movs	r3, #0
 801550a:	9304      	str	r3, [sp, #16]
 801550c:	2300      	movs	r3, #0
 801550e:	9303      	str	r3, [sp, #12]
 8015510:	6a3b      	ldr	r3, [r7, #32]
 8015512:	9302      	str	r3, [sp, #8]
 8015514:	7f3b      	ldrb	r3, [r7, #28]
 8015516:	9301      	str	r3, [sp, #4]
 8015518:	7e3b      	ldrb	r3, [r7, #24]
 801551a:	9300      	str	r3, [sp, #0]
 801551c:	4613      	mov	r3, r2
 801551e:	687a      	ldr	r2, [r7, #4]
 8015520:	68b9      	ldr	r1, [r7, #8]
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	f000 f805 	bl	8015532 <ip4_output_if_opt>
 8015528:	4603      	mov	r3, r0
}
 801552a:	4618      	mov	r0, r3
 801552c:	3710      	adds	r7, #16
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}

08015532 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 8015532:	b580      	push	{r7, lr}
 8015534:	b08c      	sub	sp, #48	; 0x30
 8015536:	af06      	add	r7, sp, #24
 8015538:	60f8      	str	r0, [r7, #12]
 801553a:	60b9      	str	r1, [r7, #8]
 801553c:	607a      	str	r2, [r7, #4]
 801553e:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015540:	68bb      	ldr	r3, [r7, #8]
 8015542:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d009      	beq.n	801555e <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d003      	beq.n	8015558 <ip4_output_if_opt+0x26>
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d102      	bne.n	801555e <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 8015558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801555a:	3304      	adds	r3, #4
 801555c:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 801555e:	78fa      	ldrb	r2, [r7, #3]
 8015560:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015562:	9304      	str	r3, [sp, #16]
 8015564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015566:	9303      	str	r3, [sp, #12]
 8015568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801556a:	9302      	str	r3, [sp, #8]
 801556c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015570:	9301      	str	r3, [sp, #4]
 8015572:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015576:	9300      	str	r3, [sp, #0]
 8015578:	4613      	mov	r3, r2
 801557a:	687a      	ldr	r2, [r7, #4]
 801557c:	6979      	ldr	r1, [r7, #20]
 801557e:	68f8      	ldr	r0, [r7, #12]
 8015580:	f000 f822 	bl	80155c8 <ip4_output_if_opt_src>
 8015584:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 8015586:	4618      	mov	r0, r3
 8015588:	3718      	adds	r7, #24
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}

0801558e <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801558e:	b580      	push	{r7, lr}
 8015590:	b08a      	sub	sp, #40	; 0x28
 8015592:	af06      	add	r7, sp, #24
 8015594:	60f8      	str	r0, [r7, #12]
 8015596:	60b9      	str	r1, [r7, #8]
 8015598:	607a      	str	r2, [r7, #4]
 801559a:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801559c:	78fa      	ldrb	r2, [r7, #3]
 801559e:	2300      	movs	r3, #0
 80155a0:	9304      	str	r3, [sp, #16]
 80155a2:	2300      	movs	r3, #0
 80155a4:	9303      	str	r3, [sp, #12]
 80155a6:	6a3b      	ldr	r3, [r7, #32]
 80155a8:	9302      	str	r3, [sp, #8]
 80155aa:	7f3b      	ldrb	r3, [r7, #28]
 80155ac:	9301      	str	r3, [sp, #4]
 80155ae:	7e3b      	ldrb	r3, [r7, #24]
 80155b0:	9300      	str	r3, [sp, #0]
 80155b2:	4613      	mov	r3, r2
 80155b4:	687a      	ldr	r2, [r7, #4]
 80155b6:	68b9      	ldr	r1, [r7, #8]
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f000 f805 	bl	80155c8 <ip4_output_if_opt_src>
 80155be:	4603      	mov	r3, r0
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3710      	adds	r7, #16
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}

080155c8 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b088      	sub	sp, #32
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	60f8      	str	r0, [r7, #12]
 80155d0:	60b9      	str	r1, [r7, #8]
 80155d2:	607a      	str	r2, [r7, #4]
 80155d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	7b9b      	ldrb	r3, [r3, #14]
 80155da:	2b01      	cmp	r3, #1
 80155dc:	d006      	beq.n	80155ec <ip4_output_if_opt_src+0x24>
 80155de:	4b67      	ldr	r3, [pc, #412]	; (801577c <ip4_output_if_opt_src+0x1b4>)
 80155e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80155e4:	4966      	ldr	r1, [pc, #408]	; (8015780 <ip4_output_if_opt_src+0x1b8>)
 80155e6:	4867      	ldr	r0, [pc, #412]	; (8015784 <ip4_output_if_opt_src+0x1bc>)
 80155e8:	f00c fb70 	bl	8021ccc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	f000 8097 	beq.w	8015722 <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 80155f4:	2314      	movs	r3, #20
 80155f6:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 80155f8:	2300      	movs	r3, #0
 80155fa:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 80155fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d030      	beq.n	8015664 <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 8015602:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015604:	2b28      	cmp	r3, #40	; 0x28
 8015606:	d902      	bls.n	801560e <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 8015608:	f06f 0305 	mvn.w	r3, #5
 801560c:	e0b1      	b.n	8015772 <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 801560e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015610:	3303      	adds	r3, #3
 8015612:	b29b      	uxth	r3, r3
 8015614:	f023 0303 	bic.w	r3, r3, #3
 8015618:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 801561a:	8bfa      	ldrh	r2, [r7, #30]
 801561c:	8afb      	ldrh	r3, [r7, #22]
 801561e:	4413      	add	r3, r2
 8015620:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 8015622:	8afb      	ldrh	r3, [r7, #22]
 8015624:	4619      	mov	r1, r3
 8015626:	68f8      	ldr	r0, [r7, #12]
 8015628:	f7f7 fc7c 	bl	800cf24 <pbuf_add_header>
 801562c:	4603      	mov	r3, r0
 801562e:	2b00      	cmp	r3, #0
 8015630:	d002      	beq.n	8015638 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 8015632:	f06f 0301 	mvn.w	r3, #1
 8015636:	e09c      	b.n	8015772 <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	685b      	ldr	r3, [r3, #4]
 801563c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801563e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015640:	4618      	mov	r0, r3
 8015642:	f00c fa1d 	bl	8021a80 <memcpy>
      if (optlen < optlen_aligned) {
 8015646:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015648:	8afb      	ldrh	r3, [r7, #22]
 801564a:	429a      	cmp	r2, r3
 801564c:	d20a      	bcs.n	8015664 <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	685a      	ldr	r2, [r3, #4]
 8015652:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015654:	18d0      	adds	r0, r2, r3
 8015656:	8afa      	ldrh	r2, [r7, #22]
 8015658:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801565a:	1ad3      	subs	r3, r2, r3
 801565c:	461a      	mov	r2, r3
 801565e:	2100      	movs	r1, #0
 8015660:	f00c fa36 	bl	8021ad0 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015664:	2114      	movs	r1, #20
 8015666:	68f8      	ldr	r0, [r7, #12]
 8015668:	f7f7 fc5c 	bl	800cf24 <pbuf_add_header>
 801566c:	4603      	mov	r3, r0
 801566e:	2b00      	cmp	r3, #0
 8015670:	d002      	beq.n	8015678 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015672:	f06f 0301 	mvn.w	r3, #1
 8015676:	e07c      	b.n	8015772 <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	685b      	ldr	r3, [r3, #4]
 801567c:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	895b      	ldrh	r3, [r3, #10]
 8015682:	2b13      	cmp	r3, #19
 8015684:	d806      	bhi.n	8015694 <ip4_output_if_opt_src+0xcc>
 8015686:	4b3d      	ldr	r3, [pc, #244]	; (801577c <ip4_output_if_opt_src+0x1b4>)
 8015688:	f44f 7262 	mov.w	r2, #904	; 0x388
 801568c:	493e      	ldr	r1, [pc, #248]	; (8015788 <ip4_output_if_opt_src+0x1c0>)
 801568e:	483d      	ldr	r0, [pc, #244]	; (8015784 <ip4_output_if_opt_src+0x1bc>)
 8015690:	f00c fb1c 	bl	8021ccc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015694:	69bb      	ldr	r3, [r7, #24]
 8015696:	78fa      	ldrb	r2, [r7, #3]
 8015698:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801569a:	69bb      	ldr	r3, [r7, #24]
 801569c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80156a0:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	69bb      	ldr	r3, [r7, #24]
 80156a8:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80156aa:	8bfb      	ldrh	r3, [r7, #30]
 80156ac:	089b      	lsrs	r3, r3, #2
 80156ae:	b29b      	uxth	r3, r3
 80156b0:	b2db      	uxtb	r3, r3
 80156b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156b6:	b2da      	uxtb	r2, r3
 80156b8:	69bb      	ldr	r3, [r7, #24]
 80156ba:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80156bc:	69bb      	ldr	r3, [r7, #24]
 80156be:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80156c2:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	891b      	ldrh	r3, [r3, #8]
 80156c8:	4618      	mov	r0, r3
 80156ca:	f7f5 fdab 	bl	800b224 <lwip_htons>
 80156ce:	4603      	mov	r3, r0
 80156d0:	461a      	mov	r2, r3
 80156d2:	69bb      	ldr	r3, [r7, #24]
 80156d4:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80156d6:	69bb      	ldr	r3, [r7, #24]
 80156d8:	2200      	movs	r2, #0
 80156da:	719a      	strb	r2, [r3, #6]
 80156dc:	2200      	movs	r2, #0
 80156de:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80156e0:	4b2a      	ldr	r3, [pc, #168]	; (801578c <ip4_output_if_opt_src+0x1c4>)
 80156e2:	881b      	ldrh	r3, [r3, #0]
 80156e4:	4618      	mov	r0, r3
 80156e6:	f7f5 fd9d 	bl	800b224 <lwip_htons>
 80156ea:	4603      	mov	r3, r0
 80156ec:	461a      	mov	r2, r3
 80156ee:	69bb      	ldr	r3, [r7, #24]
 80156f0:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80156f2:	4b26      	ldr	r3, [pc, #152]	; (801578c <ip4_output_if_opt_src+0x1c4>)
 80156f4:	881b      	ldrh	r3, [r3, #0]
 80156f6:	3301      	adds	r3, #1
 80156f8:	b29a      	uxth	r2, r3
 80156fa:	4b24      	ldr	r3, [pc, #144]	; (801578c <ip4_output_if_opt_src+0x1c4>)
 80156fc:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80156fe:	68bb      	ldr	r3, [r7, #8]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d104      	bne.n	801570e <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015704:	4b22      	ldr	r3, [pc, #136]	; (8015790 <ip4_output_if_opt_src+0x1c8>)
 8015706:	681a      	ldr	r2, [r3, #0]
 8015708:	69bb      	ldr	r3, [r7, #24]
 801570a:	60da      	str	r2, [r3, #12]
 801570c:	e003      	b.n	8015716 <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	681a      	ldr	r2, [r3, #0]
 8015712:	69bb      	ldr	r3, [r7, #24]
 8015714:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015716:	69bb      	ldr	r3, [r7, #24]
 8015718:	2200      	movs	r2, #0
 801571a:	729a      	strb	r2, [r3, #10]
 801571c:	2200      	movs	r2, #0
 801571e:	72da      	strb	r2, [r3, #11]
 8015720:	e00f      	b.n	8015742 <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	895b      	ldrh	r3, [r3, #10]
 8015726:	2b13      	cmp	r3, #19
 8015728:	d802      	bhi.n	8015730 <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801572a:	f06f 0301 	mvn.w	r3, #1
 801572e:	e020      	b.n	8015772 <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015736:	69bb      	ldr	r3, [r7, #24]
 8015738:	691b      	ldr	r3, [r3, #16]
 801573a:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801573c:	f107 0310 	add.w	r3, r7, #16
 8015740:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015746:	2b00      	cmp	r3, #0
 8015748:	d00c      	beq.n	8015764 <ip4_output_if_opt_src+0x19c>
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	891a      	ldrh	r2, [r3, #8]
 801574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015752:	429a      	cmp	r2, r3
 8015754:	d906      	bls.n	8015764 <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801575a:	68f8      	ldr	r0, [r7, #12]
 801575c:	f000 fde4 	bl	8016328 <ip4_frag>
 8015760:	4603      	mov	r3, r0
 8015762:	e006      	b.n	8015772 <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015766:	695b      	ldr	r3, [r3, #20]
 8015768:	687a      	ldr	r2, [r7, #4]
 801576a:	68f9      	ldr	r1, [r7, #12]
 801576c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801576e:	4798      	blx	r3
 8015770:	4603      	mov	r3, r0
}
 8015772:	4618      	mov	r0, r3
 8015774:	3720      	adds	r7, #32
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}
 801577a:	bf00      	nop
 801577c:	08025db8 	.word	0x08025db8
 8015780:	08025dec 	.word	0x08025dec
 8015784:	08025df8 	.word	0x08025df8
 8015788:	08025e20 	.word	0x08025e20
 801578c:	20040c9c 	.word	0x20040c9c
 8015790:	080262a0 	.word	0x080262a0

08015794 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015794:	b480      	push	{r7}
 8015796:	b085      	sub	sp, #20
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80157a8:	d002      	beq.n	80157b0 <ip4_addr_isbroadcast_u32+0x1c>
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d101      	bne.n	80157b4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80157b0:	2301      	movs	r3, #1
 80157b2:	e02a      	b.n	801580a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80157ba:	f003 0302 	and.w	r3, r3, #2
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d101      	bne.n	80157c6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80157c2:	2300      	movs	r3, #0
 80157c4:	e021      	b.n	801580a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	3304      	adds	r3, #4
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	687a      	ldr	r2, [r7, #4]
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d101      	bne.n	80157d6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80157d2:	2300      	movs	r3, #0
 80157d4:	e019      	b.n	801580a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80157d6:	68fa      	ldr	r2, [r7, #12]
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	3304      	adds	r3, #4
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	405a      	eors	r2, r3
 80157e0:	683b      	ldr	r3, [r7, #0]
 80157e2:	3308      	adds	r3, #8
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	4013      	ands	r3, r2
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d10d      	bne.n	8015808 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80157ec:	683b      	ldr	r3, [r7, #0]
 80157ee:	3308      	adds	r3, #8
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	43da      	mvns	r2, r3
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	3308      	adds	r3, #8
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015800:	429a      	cmp	r2, r3
 8015802:	d101      	bne.n	8015808 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015804:	2301      	movs	r3, #1
 8015806:	e000      	b.n	801580a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015808:	2300      	movs	r3, #0
  }
}
 801580a:	4618      	mov	r0, r3
 801580c:	3714      	adds	r7, #20
 801580e:	46bd      	mov	sp, r7
 8015810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015814:	4770      	bx	lr
	...

08015818 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b082      	sub	sp, #8
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8015820:	2210      	movs	r2, #16
 8015822:	4904      	ldr	r1, [pc, #16]	; (8015834 <ip4addr_ntoa+0x1c>)
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	f000 f807 	bl	8015838 <ip4addr_ntoa_r>
 801582a:	4603      	mov	r3, r0
}
 801582c:	4618      	mov	r0, r3
 801582e:	3708      	adds	r7, #8
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}
 8015834:	20040ca4 	.word	0x20040ca4

08015838 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8015838:	b480      	push	{r7}
 801583a:	b08d      	sub	sp, #52	; 0x34
 801583c:	af00      	add	r7, sp, #0
 801583e:	60f8      	str	r0, [r7, #12]
 8015840:	60b9      	str	r1, [r7, #8]
 8015842:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8015844:	2300      	movs	r3, #0
 8015846:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8015852:	f107 0318 	add.w	r3, r7, #24
 8015856:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8015858:	2300      	movs	r3, #0
 801585a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801585e:	e058      	b.n	8015912 <ip4addr_ntoa_r+0xda>
    i = 0;
 8015860:	2300      	movs	r3, #0
 8015862:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8015866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015868:	781a      	ldrb	r2, [r3, #0]
 801586a:	4b32      	ldr	r3, [pc, #200]	; (8015934 <ip4addr_ntoa_r+0xfc>)
 801586c:	fba3 1302 	umull	r1, r3, r3, r2
 8015870:	08d9      	lsrs	r1, r3, #3
 8015872:	460b      	mov	r3, r1
 8015874:	009b      	lsls	r3, r3, #2
 8015876:	440b      	add	r3, r1
 8015878:	005b      	lsls	r3, r3, #1
 801587a:	1ad3      	subs	r3, r2, r3
 801587c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015880:	781b      	ldrb	r3, [r3, #0]
 8015882:	4a2c      	ldr	r2, [pc, #176]	; (8015934 <ip4addr_ntoa_r+0xfc>)
 8015884:	fba2 2303 	umull	r2, r3, r2, r3
 8015888:	08db      	lsrs	r3, r3, #3
 801588a:	b2da      	uxtb	r2, r3
 801588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801588e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8015890:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015894:	1c5a      	adds	r2, r3, #1
 8015896:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801589a:	4619      	mov	r1, r3
 801589c:	7ffb      	ldrb	r3, [r7, #31]
 801589e:	3330      	adds	r3, #48	; 0x30
 80158a0:	b2da      	uxtb	r2, r3
 80158a2:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80158a6:	443b      	add	r3, r7
 80158a8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80158ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d1d8      	bne.n	8015866 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80158b4:	e011      	b.n	80158da <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80158b6:	6a3b      	ldr	r3, [r7, #32]
 80158b8:	1c5a      	adds	r2, r3, #1
 80158ba:	623a      	str	r2, [r7, #32]
 80158bc:	687a      	ldr	r2, [r7, #4]
 80158be:	429a      	cmp	r2, r3
 80158c0:	dc01      	bgt.n	80158c6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 80158c2:	2300      	movs	r3, #0
 80158c4:	e030      	b.n	8015928 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80158c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80158ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158cc:	1c59      	adds	r1, r3, #1
 80158ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80158d0:	3230      	adds	r2, #48	; 0x30
 80158d2:	443a      	add	r2, r7
 80158d4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80158d8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80158da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80158de:	1e5a      	subs	r2, r3, #1
 80158e0:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d1e6      	bne.n	80158b6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80158e8:	6a3b      	ldr	r3, [r7, #32]
 80158ea:	1c5a      	adds	r2, r3, #1
 80158ec:	623a      	str	r2, [r7, #32]
 80158ee:	687a      	ldr	r2, [r7, #4]
 80158f0:	429a      	cmp	r2, r3
 80158f2:	dc01      	bgt.n	80158f8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80158f4:	2300      	movs	r3, #0
 80158f6:	e017      	b.n	8015928 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80158f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fa:	1c5a      	adds	r2, r3, #1
 80158fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80158fe:	222e      	movs	r2, #46	; 0x2e
 8015900:	701a      	strb	r2, [r3, #0]
    ap++;
 8015902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015904:	3301      	adds	r3, #1
 8015906:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8015908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801590c:	3301      	adds	r3, #1
 801590e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015916:	2b03      	cmp	r3, #3
 8015918:	d9a2      	bls.n	8015860 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591c:	3b01      	subs	r3, #1
 801591e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015922:	2200      	movs	r2, #0
 8015924:	701a      	strb	r2, [r3, #0]
  return buf;
 8015926:	68bb      	ldr	r3, [r7, #8]
}
 8015928:	4618      	mov	r0, r3
 801592a:	3734      	adds	r7, #52	; 0x34
 801592c:	46bd      	mov	sp, r7
 801592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015932:	4770      	bx	lr
 8015934:	cccccccd 	.word	0xcccccccd

08015938 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b084      	sub	sp, #16
 801593c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801593e:	2300      	movs	r3, #0
 8015940:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015942:	4b12      	ldr	r3, [pc, #72]	; (801598c <ip_reass_tmr+0x54>)
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015948:	e018      	b.n	801597c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	7fdb      	ldrb	r3, [r3, #31]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d00b      	beq.n	801596a <ip_reass_tmr+0x32>
      r->timer--;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	7fdb      	ldrb	r3, [r3, #31]
 8015956:	3b01      	subs	r3, #1
 8015958:	b2da      	uxtb	r2, r3
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	60fb      	str	r3, [r7, #12]
 8015968:	e008      	b.n	801597c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015974:	68b9      	ldr	r1, [r7, #8]
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f000 f80a 	bl	8015990 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d1e3      	bne.n	801594a <ip_reass_tmr+0x12>
    }
  }
}
 8015982:	bf00      	nop
 8015984:	bf00      	nop
 8015986:	3710      	adds	r7, #16
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}
 801598c:	20040cb4 	.word	0x20040cb4

08015990 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b088      	sub	sp, #32
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801599a:	2300      	movs	r3, #0
 801599c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801599e:	683a      	ldr	r2, [r7, #0]
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d105      	bne.n	80159b2 <ip_reass_free_complete_datagram+0x22>
 80159a6:	4b45      	ldr	r3, [pc, #276]	; (8015abc <ip_reass_free_complete_datagram+0x12c>)
 80159a8:	22ab      	movs	r2, #171	; 0xab
 80159aa:	4945      	ldr	r1, [pc, #276]	; (8015ac0 <ip_reass_free_complete_datagram+0x130>)
 80159ac:	4845      	ldr	r0, [pc, #276]	; (8015ac4 <ip_reass_free_complete_datagram+0x134>)
 80159ae:	f00c f98d 	bl	8021ccc <iprintf>
  if (prev != NULL) {
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d00a      	beq.n	80159ce <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	429a      	cmp	r2, r3
 80159c0:	d005      	beq.n	80159ce <ip_reass_free_complete_datagram+0x3e>
 80159c2:	4b3e      	ldr	r3, [pc, #248]	; (8015abc <ip_reass_free_complete_datagram+0x12c>)
 80159c4:	22ad      	movs	r2, #173	; 0xad
 80159c6:	4940      	ldr	r1, [pc, #256]	; (8015ac8 <ip_reass_free_complete_datagram+0x138>)
 80159c8:	483e      	ldr	r0, [pc, #248]	; (8015ac4 <ip_reass_free_complete_datagram+0x134>)
 80159ca:	f00c f97f 	bl	8021ccc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80159d6:	697b      	ldr	r3, [r7, #20]
 80159d8:	889b      	ldrh	r3, [r3, #4]
 80159da:	b29b      	uxth	r3, r3
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d12a      	bne.n	8015a36 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	685b      	ldr	r3, [r3, #4]
 80159e4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80159e6:	697b      	ldr	r3, [r7, #20]
 80159e8:	681a      	ldr	r2, [r3, #0]
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80159ee:	69bb      	ldr	r3, [r7, #24]
 80159f0:	6858      	ldr	r0, [r3, #4]
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	3308      	adds	r3, #8
 80159f6:	2214      	movs	r2, #20
 80159f8:	4619      	mov	r1, r3
 80159fa:	f00c f841 	bl	8021a80 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80159fe:	2101      	movs	r1, #1
 8015a00:	69b8      	ldr	r0, [r7, #24]
 8015a02:	f7fe ff71 	bl	80148e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015a06:	69b8      	ldr	r0, [r7, #24]
 8015a08:	f7f7 fbb0 	bl	800d16c <pbuf_clen>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a10:	8bfa      	ldrh	r2, [r7, #30]
 8015a12:	8a7b      	ldrh	r3, [r7, #18]
 8015a14:	4413      	add	r3, r2
 8015a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a1a:	db05      	blt.n	8015a28 <ip_reass_free_complete_datagram+0x98>
 8015a1c:	4b27      	ldr	r3, [pc, #156]	; (8015abc <ip_reass_free_complete_datagram+0x12c>)
 8015a1e:	22bc      	movs	r2, #188	; 0xbc
 8015a20:	492a      	ldr	r1, [pc, #168]	; (8015acc <ip_reass_free_complete_datagram+0x13c>)
 8015a22:	4828      	ldr	r0, [pc, #160]	; (8015ac4 <ip_reass_free_complete_datagram+0x134>)
 8015a24:	f00c f952 	bl	8021ccc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015a28:	8bfa      	ldrh	r2, [r7, #30]
 8015a2a:	8a7b      	ldrh	r3, [r7, #18]
 8015a2c:	4413      	add	r3, r2
 8015a2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015a30:	69b8      	ldr	r0, [r7, #24]
 8015a32:	f7f7 fb0d 	bl	800d050 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	685b      	ldr	r3, [r3, #4]
 8015a3a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015a3c:	e01f      	b.n	8015a7e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015a3e:	69bb      	ldr	r3, [r7, #24]
 8015a40:	685b      	ldr	r3, [r3, #4]
 8015a42:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015a44:	69bb      	ldr	r3, [r7, #24]
 8015a46:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015a48:	697b      	ldr	r3, [r7, #20]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015a4e:	68f8      	ldr	r0, [r7, #12]
 8015a50:	f7f7 fb8c 	bl	800d16c <pbuf_clen>
 8015a54:	4603      	mov	r3, r0
 8015a56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015a58:	8bfa      	ldrh	r2, [r7, #30]
 8015a5a:	8a7b      	ldrh	r3, [r7, #18]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a62:	db05      	blt.n	8015a70 <ip_reass_free_complete_datagram+0xe0>
 8015a64:	4b15      	ldr	r3, [pc, #84]	; (8015abc <ip_reass_free_complete_datagram+0x12c>)
 8015a66:	22cc      	movs	r2, #204	; 0xcc
 8015a68:	4918      	ldr	r1, [pc, #96]	; (8015acc <ip_reass_free_complete_datagram+0x13c>)
 8015a6a:	4816      	ldr	r0, [pc, #88]	; (8015ac4 <ip_reass_free_complete_datagram+0x134>)
 8015a6c:	f00c f92e 	bl	8021ccc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015a70:	8bfa      	ldrh	r2, [r7, #30]
 8015a72:	8a7b      	ldrh	r3, [r7, #18]
 8015a74:	4413      	add	r3, r2
 8015a76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015a78:	68f8      	ldr	r0, [r7, #12]
 8015a7a:	f7f7 fae9 	bl	800d050 <pbuf_free>
  while (p != NULL) {
 8015a7e:	69bb      	ldr	r3, [r7, #24]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d1dc      	bne.n	8015a3e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015a84:	6839      	ldr	r1, [r7, #0]
 8015a86:	6878      	ldr	r0, [r7, #4]
 8015a88:	f000 f8c2 	bl	8015c10 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015a8c:	4b10      	ldr	r3, [pc, #64]	; (8015ad0 <ip_reass_free_complete_datagram+0x140>)
 8015a8e:	881b      	ldrh	r3, [r3, #0]
 8015a90:	8bfa      	ldrh	r2, [r7, #30]
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d905      	bls.n	8015aa2 <ip_reass_free_complete_datagram+0x112>
 8015a96:	4b09      	ldr	r3, [pc, #36]	; (8015abc <ip_reass_free_complete_datagram+0x12c>)
 8015a98:	22d2      	movs	r2, #210	; 0xd2
 8015a9a:	490e      	ldr	r1, [pc, #56]	; (8015ad4 <ip_reass_free_complete_datagram+0x144>)
 8015a9c:	4809      	ldr	r0, [pc, #36]	; (8015ac4 <ip_reass_free_complete_datagram+0x134>)
 8015a9e:	f00c f915 	bl	8021ccc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015aa2:	4b0b      	ldr	r3, [pc, #44]	; (8015ad0 <ip_reass_free_complete_datagram+0x140>)
 8015aa4:	881a      	ldrh	r2, [r3, #0]
 8015aa6:	8bfb      	ldrh	r3, [r7, #30]
 8015aa8:	1ad3      	subs	r3, r2, r3
 8015aaa:	b29a      	uxth	r2, r3
 8015aac:	4b08      	ldr	r3, [pc, #32]	; (8015ad0 <ip_reass_free_complete_datagram+0x140>)
 8015aae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015ab0:	8bfb      	ldrh	r3, [r7, #30]
}
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	3720      	adds	r7, #32
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd80      	pop	{r7, pc}
 8015aba:	bf00      	nop
 8015abc:	08025e50 	.word	0x08025e50
 8015ac0:	08025e8c 	.word	0x08025e8c
 8015ac4:	08025e98 	.word	0x08025e98
 8015ac8:	08025ec0 	.word	0x08025ec0
 8015acc:	08025ed4 	.word	0x08025ed4
 8015ad0:	20040cb8 	.word	0x20040cb8
 8015ad4:	08025ef4 	.word	0x08025ef4

08015ad8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b08a      	sub	sp, #40	; 0x28
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015aea:	2300      	movs	r3, #0
 8015aec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015aee:	2300      	movs	r3, #0
 8015af0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015af2:	2300      	movs	r3, #0
 8015af4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015af6:	4b28      	ldr	r3, [pc, #160]	; (8015b98 <ip_reass_remove_oldest_datagram+0xc0>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015afc:	e030      	b.n	8015b60 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b00:	695a      	ldr	r2, [r3, #20]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d10c      	bne.n	8015b24 <ip_reass_remove_oldest_datagram+0x4c>
 8015b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b0c:	699a      	ldr	r2, [r3, #24]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	691b      	ldr	r3, [r3, #16]
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d106      	bne.n	8015b24 <ip_reass_remove_oldest_datagram+0x4c>
 8015b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b18:	899a      	ldrh	r2, [r3, #12]
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	889b      	ldrh	r3, [r3, #4]
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	429a      	cmp	r2, r3
 8015b22:	d014      	beq.n	8015b4e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015b24:	693b      	ldr	r3, [r7, #16]
 8015b26:	3301      	adds	r3, #1
 8015b28:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015b2a:	6a3b      	ldr	r3, [r7, #32]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d104      	bne.n	8015b3a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b32:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015b34:	69fb      	ldr	r3, [r7, #28]
 8015b36:	61bb      	str	r3, [r7, #24]
 8015b38:	e009      	b.n	8015b4e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b3c:	7fda      	ldrb	r2, [r3, #31]
 8015b3e:	6a3b      	ldr	r3, [r7, #32]
 8015b40:	7fdb      	ldrb	r3, [r3, #31]
 8015b42:	429a      	cmp	r2, r3
 8015b44:	d803      	bhi.n	8015b4e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b48:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015b4a:	69fb      	ldr	r3, [r7, #28]
 8015b4c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d001      	beq.n	8015b5a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b58:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d1cb      	bne.n	8015afe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015b66:	6a3b      	ldr	r3, [r7, #32]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d008      	beq.n	8015b7e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015b6c:	69b9      	ldr	r1, [r7, #24]
 8015b6e:	6a38      	ldr	r0, [r7, #32]
 8015b70:	f7ff ff0e 	bl	8015990 <ip_reass_free_complete_datagram>
 8015b74:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015b76:	697a      	ldr	r2, [r7, #20]
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	4413      	add	r3, r2
 8015b7c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015b7e:	697a      	ldr	r2, [r7, #20]
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	429a      	cmp	r2, r3
 8015b84:	da02      	bge.n	8015b8c <ip_reass_remove_oldest_datagram+0xb4>
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	2b01      	cmp	r3, #1
 8015b8a:	dcac      	bgt.n	8015ae6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015b8c:	697b      	ldr	r3, [r7, #20]
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	3728      	adds	r7, #40	; 0x28
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bd80      	pop	{r7, pc}
 8015b96:	bf00      	nop
 8015b98:	20040cb4 	.word	0x20040cb4

08015b9c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b084      	sub	sp, #16
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015ba6:	2004      	movs	r0, #4
 8015ba8:	f7f6 fb3e 	bl	800c228 <memp_malloc>
 8015bac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d110      	bne.n	8015bd6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015bb4:	6839      	ldr	r1, [r7, #0]
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	f7ff ff8e 	bl	8015ad8 <ip_reass_remove_oldest_datagram>
 8015bbc:	4602      	mov	r2, r0
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	4293      	cmp	r3, r2
 8015bc2:	dc03      	bgt.n	8015bcc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015bc4:	2004      	movs	r0, #4
 8015bc6:	f7f6 fb2f 	bl	800c228 <memp_malloc>
 8015bca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d101      	bne.n	8015bd6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	e016      	b.n	8015c04 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015bd6:	2220      	movs	r2, #32
 8015bd8:	2100      	movs	r1, #0
 8015bda:	68f8      	ldr	r0, [r7, #12]
 8015bdc:	f00b ff78 	bl	8021ad0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	220f      	movs	r2, #15
 8015be4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015be6:	4b09      	ldr	r3, [pc, #36]	; (8015c0c <ip_reass_enqueue_new_datagram+0x70>)
 8015be8:	681a      	ldr	r2, [r3, #0]
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015bee:	4a07      	ldr	r2, [pc, #28]	; (8015c0c <ip_reass_enqueue_new_datagram+0x70>)
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	3308      	adds	r3, #8
 8015bf8:	2214      	movs	r2, #20
 8015bfa:	6879      	ldr	r1, [r7, #4]
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f00b ff3f 	bl	8021a80 <memcpy>
  return ipr;
 8015c02:	68fb      	ldr	r3, [r7, #12]
}
 8015c04:	4618      	mov	r0, r3
 8015c06:	3710      	adds	r7, #16
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	20040cb4 	.word	0x20040cb4

08015c10 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b082      	sub	sp, #8
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015c1a:	4b10      	ldr	r3, [pc, #64]	; (8015c5c <ip_reass_dequeue_datagram+0x4c>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	687a      	ldr	r2, [r7, #4]
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d104      	bne.n	8015c2e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	4a0c      	ldr	r2, [pc, #48]	; (8015c5c <ip_reass_dequeue_datagram+0x4c>)
 8015c2a:	6013      	str	r3, [r2, #0]
 8015c2c:	e00d      	b.n	8015c4a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d106      	bne.n	8015c42 <ip_reass_dequeue_datagram+0x32>
 8015c34:	4b0a      	ldr	r3, [pc, #40]	; (8015c60 <ip_reass_dequeue_datagram+0x50>)
 8015c36:	f240 1245 	movw	r2, #325	; 0x145
 8015c3a:	490a      	ldr	r1, [pc, #40]	; (8015c64 <ip_reass_dequeue_datagram+0x54>)
 8015c3c:	480a      	ldr	r0, [pc, #40]	; (8015c68 <ip_reass_dequeue_datagram+0x58>)
 8015c3e:	f00c f845 	bl	8021ccc <iprintf>
    prev->next = ipr->next;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	681a      	ldr	r2, [r3, #0]
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015c4a:	6879      	ldr	r1, [r7, #4]
 8015c4c:	2004      	movs	r0, #4
 8015c4e:	f7f6 fb3d 	bl	800c2cc <memp_free>
}
 8015c52:	bf00      	nop
 8015c54:	3708      	adds	r7, #8
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd80      	pop	{r7, pc}
 8015c5a:	bf00      	nop
 8015c5c:	20040cb4 	.word	0x20040cb4
 8015c60:	08025e50 	.word	0x08025e50
 8015c64:	08025f18 	.word	0x08025f18
 8015c68:	08025e98 	.word	0x08025e98

08015c6c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b08c      	sub	sp, #48	; 0x30
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015c80:	68bb      	ldr	r3, [r7, #8]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015c86:	69fb      	ldr	r3, [r7, #28]
 8015c88:	885b      	ldrh	r3, [r3, #2]
 8015c8a:	b29b      	uxth	r3, r3
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	f7f5 fac9 	bl	800b224 <lwip_htons>
 8015c92:	4603      	mov	r3, r0
 8015c94:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015c96:	69fb      	ldr	r3, [r7, #28]
 8015c98:	781b      	ldrb	r3, [r3, #0]
 8015c9a:	f003 030f 	and.w	r3, r3, #15
 8015c9e:	b2db      	uxtb	r3, r3
 8015ca0:	009b      	lsls	r3, r3, #2
 8015ca2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015ca4:	7e7b      	ldrb	r3, [r7, #25]
 8015ca6:	b29b      	uxth	r3, r3
 8015ca8:	8b7a      	ldrh	r2, [r7, #26]
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d202      	bcs.n	8015cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015cb2:	e135      	b.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015cb4:	7e7b      	ldrb	r3, [r7, #25]
 8015cb6:	b29b      	uxth	r3, r3
 8015cb8:	8b7a      	ldrh	r2, [r7, #26]
 8015cba:	1ad3      	subs	r3, r2, r3
 8015cbc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	88db      	ldrh	r3, [r3, #6]
 8015cc2:	b29b      	uxth	r3, r3
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f7f5 faad 	bl	800b224 <lwip_htons>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015cd0:	b29b      	uxth	r3, r3
 8015cd2:	00db      	lsls	r3, r3, #3
 8015cd4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cde:	2200      	movs	r2, #0
 8015ce0:	701a      	strb	r2, [r3, #0]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	705a      	strb	r2, [r3, #1]
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	709a      	strb	r2, [r3, #2]
 8015cea:	2200      	movs	r2, #0
 8015cec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf0:	8afa      	ldrh	r2, [r7, #22]
 8015cf2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015cf4:	8afa      	ldrh	r2, [r7, #22]
 8015cf6:	8b7b      	ldrh	r3, [r7, #26]
 8015cf8:	4413      	add	r3, r2
 8015cfa:	b29a      	uxth	r2, r3
 8015cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cfe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d02:	88db      	ldrh	r3, [r3, #6]
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	8afa      	ldrh	r2, [r7, #22]
 8015d08:	429a      	cmp	r2, r3
 8015d0a:	d902      	bls.n	8015d12 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d10:	e106      	b.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	685b      	ldr	r3, [r3, #4]
 8015d16:	627b      	str	r3, [r7, #36]	; 0x24
 8015d18:	e068      	b.n	8015dec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d22:	889b      	ldrh	r3, [r3, #4]
 8015d24:	b29a      	uxth	r2, r3
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	889b      	ldrh	r3, [r3, #4]
 8015d2a:	b29b      	uxth	r3, r3
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	d235      	bcs.n	8015d9c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d34:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d020      	beq.n	8015d7e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d3e:	889b      	ldrh	r3, [r3, #4]
 8015d40:	b29a      	uxth	r2, r3
 8015d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d44:	88db      	ldrh	r3, [r3, #6]
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	429a      	cmp	r2, r3
 8015d4a:	d307      	bcc.n	8015d5c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4e:	88db      	ldrh	r3, [r3, #6]
 8015d50:	b29a      	uxth	r2, r3
 8015d52:	693b      	ldr	r3, [r7, #16]
 8015d54:	889b      	ldrh	r3, [r3, #4]
 8015d56:	b29b      	uxth	r3, r3
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d902      	bls.n	8015d62 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d60:	e0de      	b.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d64:	68ba      	ldr	r2, [r7, #8]
 8015d66:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d6a:	88db      	ldrh	r3, [r3, #6]
 8015d6c:	b29a      	uxth	r2, r3
 8015d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d70:	889b      	ldrh	r3, [r3, #4]
 8015d72:	b29b      	uxth	r3, r3
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d03d      	beq.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015d78:	2300      	movs	r3, #0
 8015d7a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015d7c:	e03a      	b.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d80:	88db      	ldrh	r3, [r3, #6]
 8015d82:	b29a      	uxth	r2, r3
 8015d84:	693b      	ldr	r3, [r7, #16]
 8015d86:	889b      	ldrh	r3, [r3, #4]
 8015d88:	b29b      	uxth	r3, r3
 8015d8a:	429a      	cmp	r2, r3
 8015d8c:	d902      	bls.n	8015d94 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d92:	e0c5      	b.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	68ba      	ldr	r2, [r7, #8]
 8015d98:	605a      	str	r2, [r3, #4]
      break;
 8015d9a:	e02b      	b.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9e:	889b      	ldrh	r3, [r3, #4]
 8015da0:	b29a      	uxth	r2, r3
 8015da2:	693b      	ldr	r3, [r7, #16]
 8015da4:	889b      	ldrh	r3, [r3, #4]
 8015da6:	b29b      	uxth	r3, r3
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d102      	bne.n	8015db2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015db0:	e0b6      	b.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db4:	889b      	ldrh	r3, [r3, #4]
 8015db6:	b29a      	uxth	r2, r3
 8015db8:	693b      	ldr	r3, [r7, #16]
 8015dba:	88db      	ldrh	r3, [r3, #6]
 8015dbc:	b29b      	uxth	r3, r3
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d202      	bcs.n	8015dc8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015dc6:	e0ab      	b.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d009      	beq.n	8015de2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd0:	88db      	ldrh	r3, [r3, #6]
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	693b      	ldr	r3, [r7, #16]
 8015dd6:	889b      	ldrh	r3, [r3, #4]
 8015dd8:	b29b      	uxth	r3, r3
 8015dda:	429a      	cmp	r2, r3
 8015ddc:	d001      	beq.n	8015de2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015dde:	2300      	movs	r3, #0
 8015de0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015de2:	693b      	ldr	r3, [r7, #16]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015de8:	693b      	ldr	r3, [r7, #16]
 8015dea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d193      	bne.n	8015d1a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015df2:	e000      	b.n	8015df6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015df4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d12d      	bne.n	8015e58 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d01c      	beq.n	8015e3c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e04:	88db      	ldrh	r3, [r3, #6]
 8015e06:	b29a      	uxth	r2, r3
 8015e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0a:	889b      	ldrh	r3, [r3, #4]
 8015e0c:	b29b      	uxth	r3, r3
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	d906      	bls.n	8015e20 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015e12:	4b45      	ldr	r3, [pc, #276]	; (8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e14:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015e18:	4944      	ldr	r1, [pc, #272]	; (8015f2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015e1a:	4845      	ldr	r0, [pc, #276]	; (8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e1c:	f00b ff56 	bl	8021ccc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e22:	68ba      	ldr	r2, [r7, #8]
 8015e24:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e28:	88db      	ldrh	r3, [r3, #6]
 8015e2a:	b29a      	uxth	r2, r3
 8015e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e2e:	889b      	ldrh	r3, [r3, #4]
 8015e30:	b29b      	uxth	r3, r3
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d010      	beq.n	8015e58 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015e36:	2300      	movs	r3, #0
 8015e38:	623b      	str	r3, [r7, #32]
 8015e3a:	e00d      	b.n	8015e58 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d006      	beq.n	8015e52 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015e44:	4b38      	ldr	r3, [pc, #224]	; (8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e46:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015e4a:	493a      	ldr	r1, [pc, #232]	; (8015f34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015e4c:	4838      	ldr	r0, [pc, #224]	; (8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e4e:	f00b ff3d 	bl	8021ccc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	68ba      	ldr	r2, [r7, #8]
 8015e56:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d105      	bne.n	8015e6a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	7f9b      	ldrb	r3, [r3, #30]
 8015e62:	f003 0301 	and.w	r3, r3, #1
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d059      	beq.n	8015f1e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015e6a:	6a3b      	ldr	r3, [r7, #32]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d04f      	beq.n	8015f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	685b      	ldr	r3, [r3, #4]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d006      	beq.n	8015e86 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	685b      	ldr	r3, [r3, #4]
 8015e7c:	685b      	ldr	r3, [r3, #4]
 8015e7e:	889b      	ldrh	r3, [r3, #4]
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d002      	beq.n	8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015e86:	2300      	movs	r3, #0
 8015e88:	623b      	str	r3, [r7, #32]
 8015e8a:	e041      	b.n	8015f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e8e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015e96:	e012      	b.n	8015ebe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e9a:	685b      	ldr	r3, [r3, #4]
 8015e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea0:	88db      	ldrh	r3, [r3, #6]
 8015ea2:	b29a      	uxth	r2, r3
 8015ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea6:	889b      	ldrh	r3, [r3, #4]
 8015ea8:	b29b      	uxth	r3, r3
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	d002      	beq.n	8015eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	623b      	str	r3, [r7, #32]
            break;
 8015eb2:	e007      	b.n	8015ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d1e9      	bne.n	8015e98 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015ec4:	6a3b      	ldr	r3, [r7, #32]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d022      	beq.n	8015f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	685b      	ldr	r3, [r3, #4]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d106      	bne.n	8015ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015ed2:	4b15      	ldr	r3, [pc, #84]	; (8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ed4:	f240 12df 	movw	r2, #479	; 0x1df
 8015ed8:	4917      	ldr	r1, [pc, #92]	; (8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015eda:	4815      	ldr	r0, [pc, #84]	; (8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015edc:	f00b fef6 	bl	8021ccc <iprintf>
          LWIP_ASSERT("sanity check",
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	685b      	ldr	r3, [r3, #4]
 8015ee4:	685b      	ldr	r3, [r3, #4]
 8015ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ee8:	429a      	cmp	r2, r3
 8015eea:	d106      	bne.n	8015efa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015eec:	4b0e      	ldr	r3, [pc, #56]	; (8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015eee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015ef2:	4911      	ldr	r1, [pc, #68]	; (8015f38 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015ef4:	480e      	ldr	r0, [pc, #56]	; (8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ef6:	f00b fee9 	bl	8021ccc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d006      	beq.n	8015f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015f02:	4b09      	ldr	r3, [pc, #36]	; (8015f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f04:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015f08:	490c      	ldr	r1, [pc, #48]	; (8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015f0a:	4809      	ldr	r0, [pc, #36]	; (8015f30 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f0c:	f00b fede 	bl	8021ccc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015f10:	6a3b      	ldr	r3, [r7, #32]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	bf14      	ite	ne
 8015f16:	2301      	movne	r3, #1
 8015f18:	2300      	moveq	r3, #0
 8015f1a:	b2db      	uxtb	r3, r3
 8015f1c:	e000      	b.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015f1e:	2300      	movs	r3, #0
}
 8015f20:	4618      	mov	r0, r3
 8015f22:	3730      	adds	r7, #48	; 0x30
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}
 8015f28:	08025e50 	.word	0x08025e50
 8015f2c:	08025f34 	.word	0x08025f34
 8015f30:	08025e98 	.word	0x08025e98
 8015f34:	08025f54 	.word	0x08025f54
 8015f38:	08025f8c 	.word	0x08025f8c
 8015f3c:	08025f9c 	.word	0x08025f9c

08015f40 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b08e      	sub	sp, #56	; 0x38
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f50:	781b      	ldrb	r3, [r3, #0]
 8015f52:	f003 030f 	and.w	r3, r3, #15
 8015f56:	b2db      	uxtb	r3, r3
 8015f58:	009b      	lsls	r3, r3, #2
 8015f5a:	b2db      	uxtb	r3, r3
 8015f5c:	2b14      	cmp	r3, #20
 8015f5e:	f040 8171 	bne.w	8016244 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f64:	88db      	ldrh	r3, [r3, #6]
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7f5 f95b 	bl	800b224 <lwip_htons>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f74:	b29b      	uxth	r3, r3
 8015f76:	00db      	lsls	r3, r3, #3
 8015f78:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f7c:	885b      	ldrh	r3, [r3, #2]
 8015f7e:	b29b      	uxth	r3, r3
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7f5 f94f 	bl	800b224 <lwip_htons>
 8015f86:	4603      	mov	r3, r0
 8015f88:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f8c:	781b      	ldrb	r3, [r3, #0]
 8015f8e:	f003 030f 	and.w	r3, r3, #15
 8015f92:	b2db      	uxtb	r3, r3
 8015f94:	009b      	lsls	r3, r3, #2
 8015f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015f9e:	b29b      	uxth	r3, r3
 8015fa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	f0c0 8150 	bcc.w	8016248 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015fac:	b29b      	uxth	r3, r3
 8015fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015fb0:	1ad3      	subs	r3, r2, r3
 8015fb2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f7f7 f8d9 	bl	800d16c <pbuf_clen>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015fbe:	4b8c      	ldr	r3, [pc, #560]	; (80161f0 <ip4_reass+0x2b0>)
 8015fc0:	881b      	ldrh	r3, [r3, #0]
 8015fc2:	461a      	mov	r2, r3
 8015fc4:	8c3b      	ldrh	r3, [r7, #32]
 8015fc6:	4413      	add	r3, r2
 8015fc8:	2b0a      	cmp	r3, #10
 8015fca:	dd10      	ble.n	8015fee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015fcc:	8c3b      	ldrh	r3, [r7, #32]
 8015fce:	4619      	mov	r1, r3
 8015fd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015fd2:	f7ff fd81 	bl	8015ad8 <ip_reass_remove_oldest_datagram>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	f000 8137 	beq.w	801624c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015fde:	4b84      	ldr	r3, [pc, #528]	; (80161f0 <ip4_reass+0x2b0>)
 8015fe0:	881b      	ldrh	r3, [r3, #0]
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	8c3b      	ldrh	r3, [r7, #32]
 8015fe6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015fe8:	2b0a      	cmp	r3, #10
 8015fea:	f300 812f 	bgt.w	801624c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015fee:	4b81      	ldr	r3, [pc, #516]	; (80161f4 <ip4_reass+0x2b4>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8015ff4:	e015      	b.n	8016022 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff8:	695a      	ldr	r2, [r3, #20]
 8015ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffc:	68db      	ldr	r3, [r3, #12]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d10c      	bne.n	801601c <ip4_reass+0xdc>
 8016002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016004:	699a      	ldr	r2, [r3, #24]
 8016006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016008:	691b      	ldr	r3, [r3, #16]
 801600a:	429a      	cmp	r2, r3
 801600c:	d106      	bne.n	801601c <ip4_reass+0xdc>
 801600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016010:	899a      	ldrh	r2, [r3, #12]
 8016012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016014:	889b      	ldrh	r3, [r3, #4]
 8016016:	b29b      	uxth	r3, r3
 8016018:	429a      	cmp	r2, r3
 801601a:	d006      	beq.n	801602a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	633b      	str	r3, [r7, #48]	; 0x30
 8016022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016024:	2b00      	cmp	r3, #0
 8016026:	d1e6      	bne.n	8015ff6 <ip4_reass+0xb6>
 8016028:	e000      	b.n	801602c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801602a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801602e:	2b00      	cmp	r3, #0
 8016030:	d109      	bne.n	8016046 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016032:	8c3b      	ldrh	r3, [r7, #32]
 8016034:	4619      	mov	r1, r3
 8016036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016038:	f7ff fdb0 	bl	8015b9c <ip_reass_enqueue_new_datagram>
 801603c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016040:	2b00      	cmp	r3, #0
 8016042:	d11c      	bne.n	801607e <ip4_reass+0x13e>
      goto nullreturn;
 8016044:	e105      	b.n	8016252 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016048:	88db      	ldrh	r3, [r3, #6]
 801604a:	b29b      	uxth	r3, r3
 801604c:	4618      	mov	r0, r3
 801604e:	f7f5 f8e9 	bl	800b224 <lwip_htons>
 8016052:	4603      	mov	r3, r0
 8016054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016058:	2b00      	cmp	r3, #0
 801605a:	d110      	bne.n	801607e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605e:	89db      	ldrh	r3, [r3, #14]
 8016060:	4618      	mov	r0, r3
 8016062:	f7f5 f8df 	bl	800b224 <lwip_htons>
 8016066:	4603      	mov	r3, r0
 8016068:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801606c:	2b00      	cmp	r3, #0
 801606e:	d006      	beq.n	801607e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016072:	3308      	adds	r3, #8
 8016074:	2214      	movs	r2, #20
 8016076:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016078:	4618      	mov	r0, r3
 801607a:	f00b fd01 	bl	8021a80 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016080:	88db      	ldrh	r3, [r3, #6]
 8016082:	b29b      	uxth	r3, r3
 8016084:	f003 0320 	and.w	r3, r3, #32
 8016088:	2b00      	cmp	r3, #0
 801608a:	bf0c      	ite	eq
 801608c:	2301      	moveq	r3, #1
 801608e:	2300      	movne	r3, #0
 8016090:	b2db      	uxtb	r3, r3
 8016092:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016094:	69fb      	ldr	r3, [r7, #28]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d00e      	beq.n	80160b8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801609a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801609c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801609e:	4413      	add	r3, r2
 80160a0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80160a2:	8b7a      	ldrh	r2, [r7, #26]
 80160a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80160a6:	429a      	cmp	r2, r3
 80160a8:	f0c0 80a0 	bcc.w	80161ec <ip4_reass+0x2ac>
 80160ac:	8b7b      	ldrh	r3, [r7, #26]
 80160ae:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80160b2:	4293      	cmp	r3, r2
 80160b4:	f200 809a 	bhi.w	80161ec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80160b8:	69fa      	ldr	r2, [r7, #28]
 80160ba:	6879      	ldr	r1, [r7, #4]
 80160bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160be:	f7ff fdd5 	bl	8015c6c <ip_reass_chain_frag_into_datagram_and_validate>
 80160c2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80160c4:	697b      	ldr	r3, [r7, #20]
 80160c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80160ca:	f000 809b 	beq.w	8016204 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80160ce:	4b48      	ldr	r3, [pc, #288]	; (80161f0 <ip4_reass+0x2b0>)
 80160d0:	881a      	ldrh	r2, [r3, #0]
 80160d2:	8c3b      	ldrh	r3, [r7, #32]
 80160d4:	4413      	add	r3, r2
 80160d6:	b29a      	uxth	r2, r3
 80160d8:	4b45      	ldr	r3, [pc, #276]	; (80161f0 <ip4_reass+0x2b0>)
 80160da:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80160dc:	69fb      	ldr	r3, [r7, #28]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d00d      	beq.n	80160fe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80160e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80160e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160e6:	4413      	add	r3, r2
 80160e8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80160ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ec:	8a7a      	ldrh	r2, [r7, #18]
 80160ee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80160f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160f2:	7f9b      	ldrb	r3, [r3, #30]
 80160f4:	f043 0301 	orr.w	r3, r3, #1
 80160f8:	b2da      	uxtb	r2, r3
 80160fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160fc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80160fe:	697b      	ldr	r3, [r7, #20]
 8016100:	2b01      	cmp	r3, #1
 8016102:	d171      	bne.n	80161e8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016106:	8b9b      	ldrh	r3, [r3, #28]
 8016108:	3314      	adds	r3, #20
 801610a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	685b      	ldr	r3, [r3, #4]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	685b      	ldr	r3, [r3, #4]
 801611c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016120:	3308      	adds	r3, #8
 8016122:	2214      	movs	r2, #20
 8016124:	4619      	mov	r1, r3
 8016126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016128:	f00b fcaa 	bl	8021a80 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801612c:	8a3b      	ldrh	r3, [r7, #16]
 801612e:	4618      	mov	r0, r3
 8016130:	f7f5 f878 	bl	800b224 <lwip_htons>
 8016134:	4603      	mov	r3, r0
 8016136:	461a      	mov	r2, r3
 8016138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801613a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801613e:	2200      	movs	r2, #0
 8016140:	719a      	strb	r2, [r3, #6]
 8016142:	2200      	movs	r2, #0
 8016144:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016148:	2200      	movs	r2, #0
 801614a:	729a      	strb	r2, [r3, #10]
 801614c:	2200      	movs	r2, #0
 801614e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016152:	685b      	ldr	r3, [r3, #4]
 8016154:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016156:	e00d      	b.n	8016174 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801615e:	2114      	movs	r1, #20
 8016160:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016162:	f7f6 feef 	bl	800cf44 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016166:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f7f7 f83f 	bl	800d1ec <pbuf_cat>
      r = iprh->next_pbuf;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016176:	2b00      	cmp	r3, #0
 8016178:	d1ee      	bne.n	8016158 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801617a:	4b1e      	ldr	r3, [pc, #120]	; (80161f4 <ip4_reass+0x2b4>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016180:	429a      	cmp	r2, r3
 8016182:	d102      	bne.n	801618a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016184:	2300      	movs	r3, #0
 8016186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016188:	e010      	b.n	80161ac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801618a:	4b1a      	ldr	r3, [pc, #104]	; (80161f4 <ip4_reass+0x2b4>)
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016190:	e007      	b.n	80161a2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016198:	429a      	cmp	r2, r3
 801619a:	d006      	beq.n	80161aa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80161a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d1f4      	bne.n	8016192 <ip4_reass+0x252>
 80161a8:	e000      	b.n	80161ac <ip4_reass+0x26c>
          break;
 80161aa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80161ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80161ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161b0:	f7ff fd2e 	bl	8015c10 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f7f6 ffd9 	bl	800d16c <pbuf_clen>
 80161ba:	4603      	mov	r3, r0
 80161bc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80161be:	4b0c      	ldr	r3, [pc, #48]	; (80161f0 <ip4_reass+0x2b0>)
 80161c0:	881b      	ldrh	r3, [r3, #0]
 80161c2:	8c3a      	ldrh	r2, [r7, #32]
 80161c4:	429a      	cmp	r2, r3
 80161c6:	d906      	bls.n	80161d6 <ip4_reass+0x296>
 80161c8:	4b0b      	ldr	r3, [pc, #44]	; (80161f8 <ip4_reass+0x2b8>)
 80161ca:	f240 229b 	movw	r2, #667	; 0x29b
 80161ce:	490b      	ldr	r1, [pc, #44]	; (80161fc <ip4_reass+0x2bc>)
 80161d0:	480b      	ldr	r0, [pc, #44]	; (8016200 <ip4_reass+0x2c0>)
 80161d2:	f00b fd7b 	bl	8021ccc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80161d6:	4b06      	ldr	r3, [pc, #24]	; (80161f0 <ip4_reass+0x2b0>)
 80161d8:	881a      	ldrh	r2, [r3, #0]
 80161da:	8c3b      	ldrh	r3, [r7, #32]
 80161dc:	1ad3      	subs	r3, r2, r3
 80161de:	b29a      	uxth	r2, r3
 80161e0:	4b03      	ldr	r3, [pc, #12]	; (80161f0 <ip4_reass+0x2b0>)
 80161e2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	e038      	b.n	801625a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80161e8:	2300      	movs	r3, #0
 80161ea:	e036      	b.n	801625a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80161ec:	bf00      	nop
 80161ee:	e00a      	b.n	8016206 <ip4_reass+0x2c6>
 80161f0:	20040cb8 	.word	0x20040cb8
 80161f4:	20040cb4 	.word	0x20040cb4
 80161f8:	08025e50 	.word	0x08025e50
 80161fc:	08025fc0 	.word	0x08025fc0
 8016200:	08025e98 	.word	0x08025e98
    goto nullreturn_ipr;
 8016204:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016208:	2b00      	cmp	r3, #0
 801620a:	d106      	bne.n	801621a <ip4_reass+0x2da>
 801620c:	4b15      	ldr	r3, [pc, #84]	; (8016264 <ip4_reass+0x324>)
 801620e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016212:	4915      	ldr	r1, [pc, #84]	; (8016268 <ip4_reass+0x328>)
 8016214:	4815      	ldr	r0, [pc, #84]	; (801626c <ip4_reass+0x32c>)
 8016216:	f00b fd59 	bl	8021ccc <iprintf>
  if (ipr->p == NULL) {
 801621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621c:	685b      	ldr	r3, [r3, #4]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d116      	bne.n	8016250 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016222:	4b13      	ldr	r3, [pc, #76]	; (8016270 <ip4_reass+0x330>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016228:	429a      	cmp	r2, r3
 801622a:	d006      	beq.n	801623a <ip4_reass+0x2fa>
 801622c:	4b0d      	ldr	r3, [pc, #52]	; (8016264 <ip4_reass+0x324>)
 801622e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016232:	4910      	ldr	r1, [pc, #64]	; (8016274 <ip4_reass+0x334>)
 8016234:	480d      	ldr	r0, [pc, #52]	; (801626c <ip4_reass+0x32c>)
 8016236:	f00b fd49 	bl	8021ccc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801623a:	2100      	movs	r1, #0
 801623c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801623e:	f7ff fce7 	bl	8015c10 <ip_reass_dequeue_datagram>
 8016242:	e006      	b.n	8016252 <ip4_reass+0x312>
    goto nullreturn;
 8016244:	bf00      	nop
 8016246:	e004      	b.n	8016252 <ip4_reass+0x312>
    goto nullreturn;
 8016248:	bf00      	nop
 801624a:	e002      	b.n	8016252 <ip4_reass+0x312>
      goto nullreturn;
 801624c:	bf00      	nop
 801624e:	e000      	b.n	8016252 <ip4_reass+0x312>
  }

nullreturn:
 8016250:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016252:	6878      	ldr	r0, [r7, #4]
 8016254:	f7f6 fefc 	bl	800d050 <pbuf_free>
  return NULL;
 8016258:	2300      	movs	r3, #0
}
 801625a:	4618      	mov	r0, r3
 801625c:	3738      	adds	r7, #56	; 0x38
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}
 8016262:	bf00      	nop
 8016264:	08025e50 	.word	0x08025e50
 8016268:	08025fdc 	.word	0x08025fdc
 801626c:	08025e98 	.word	0x08025e98
 8016270:	20040cb4 	.word	0x20040cb4
 8016274:	08025fe8 	.word	0x08025fe8

08016278 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801627c:	2005      	movs	r0, #5
 801627e:	f7f5 ffd3 	bl	800c228 <memp_malloc>
 8016282:	4603      	mov	r3, r0
}
 8016284:	4618      	mov	r0, r3
 8016286:	bd80      	pop	{r7, pc}

08016288 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b082      	sub	sp, #8
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d106      	bne.n	80162a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016296:	4b07      	ldr	r3, [pc, #28]	; (80162b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016298:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801629c:	4906      	ldr	r1, [pc, #24]	; (80162b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801629e:	4807      	ldr	r0, [pc, #28]	; (80162bc <ip_frag_free_pbuf_custom_ref+0x34>)
 80162a0:	f00b fd14 	bl	8021ccc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80162a4:	6879      	ldr	r1, [r7, #4]
 80162a6:	2005      	movs	r0, #5
 80162a8:	f7f6 f810 	bl	800c2cc <memp_free>
}
 80162ac:	bf00      	nop
 80162ae:	3708      	adds	r7, #8
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}
 80162b4:	08025e50 	.word	0x08025e50
 80162b8:	08026008 	.word	0x08026008
 80162bc:	08025e98 	.word	0x08025e98

080162c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80162c0:	b580      	push	{r7, lr}
 80162c2:	b084      	sub	sp, #16
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d106      	bne.n	80162e0 <ipfrag_free_pbuf_custom+0x20>
 80162d2:	4b11      	ldr	r3, [pc, #68]	; (8016318 <ipfrag_free_pbuf_custom+0x58>)
 80162d4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80162d8:	4910      	ldr	r1, [pc, #64]	; (801631c <ipfrag_free_pbuf_custom+0x5c>)
 80162da:	4811      	ldr	r0, [pc, #68]	; (8016320 <ipfrag_free_pbuf_custom+0x60>)
 80162dc:	f00b fcf6 	bl	8021ccc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80162e0:	68fa      	ldr	r2, [r7, #12]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d006      	beq.n	80162f6 <ipfrag_free_pbuf_custom+0x36>
 80162e8:	4b0b      	ldr	r3, [pc, #44]	; (8016318 <ipfrag_free_pbuf_custom+0x58>)
 80162ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 80162ee:	490d      	ldr	r1, [pc, #52]	; (8016324 <ipfrag_free_pbuf_custom+0x64>)
 80162f0:	480b      	ldr	r0, [pc, #44]	; (8016320 <ipfrag_free_pbuf_custom+0x60>)
 80162f2:	f00b fceb 	bl	8021ccc <iprintf>
  if (pcr->original != NULL) {
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	695b      	ldr	r3, [r3, #20]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d004      	beq.n	8016308 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	695b      	ldr	r3, [r3, #20]
 8016302:	4618      	mov	r0, r3
 8016304:	f7f6 fea4 	bl	800d050 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016308:	68f8      	ldr	r0, [r7, #12]
 801630a:	f7ff ffbd 	bl	8016288 <ip_frag_free_pbuf_custom_ref>
}
 801630e:	bf00      	nop
 8016310:	3710      	adds	r7, #16
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}
 8016316:	bf00      	nop
 8016318:	08025e50 	.word	0x08025e50
 801631c:	08026014 	.word	0x08026014
 8016320:	08025e98 	.word	0x08025e98
 8016324:	08026020 	.word	0x08026020

08016328 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b094      	sub	sp, #80	; 0x50
 801632c:	af02      	add	r7, sp, #8
 801632e:	60f8      	str	r0, [r7, #12]
 8016330:	60b9      	str	r1, [r7, #8]
 8016332:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016334:	2300      	movs	r3, #0
 8016336:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801633e:	3b14      	subs	r3, #20
 8016340:	2b00      	cmp	r3, #0
 8016342:	da00      	bge.n	8016346 <ip4_frag+0x1e>
 8016344:	3307      	adds	r3, #7
 8016346:	10db      	asrs	r3, r3, #3
 8016348:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801634a:	2314      	movs	r3, #20
 801634c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016356:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801635a:	781b      	ldrb	r3, [r3, #0]
 801635c:	f003 030f 	and.w	r3, r3, #15
 8016360:	b2db      	uxtb	r3, r3
 8016362:	009b      	lsls	r3, r3, #2
 8016364:	b2db      	uxtb	r3, r3
 8016366:	2b14      	cmp	r3, #20
 8016368:	d002      	beq.n	8016370 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801636a:	f06f 0305 	mvn.w	r3, #5
 801636e:	e110      	b.n	8016592 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	895b      	ldrh	r3, [r3, #10]
 8016374:	2b13      	cmp	r3, #19
 8016376:	d809      	bhi.n	801638c <ip4_frag+0x64>
 8016378:	4b88      	ldr	r3, [pc, #544]	; (801659c <ip4_frag+0x274>)
 801637a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801637e:	4988      	ldr	r1, [pc, #544]	; (80165a0 <ip4_frag+0x278>)
 8016380:	4888      	ldr	r0, [pc, #544]	; (80165a4 <ip4_frag+0x27c>)
 8016382:	f00b fca3 	bl	8021ccc <iprintf>
 8016386:	f06f 0305 	mvn.w	r3, #5
 801638a:	e102      	b.n	8016592 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801638e:	88db      	ldrh	r3, [r3, #6]
 8016390:	b29b      	uxth	r3, r3
 8016392:	4618      	mov	r0, r3
 8016394:	f7f4 ff46 	bl	800b224 <lwip_htons>
 8016398:	4603      	mov	r3, r0
 801639a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801639c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801639e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80163a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80163a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80163ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	891b      	ldrh	r3, [r3, #8]
 80163b2:	3b14      	subs	r3, #20
 80163b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80163b8:	e0e1      	b.n	801657e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80163ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80163bc:	00db      	lsls	r3, r3, #3
 80163be:	b29b      	uxth	r3, r3
 80163c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80163c4:	4293      	cmp	r3, r2
 80163c6:	bf28      	it	cs
 80163c8:	4613      	movcs	r3, r2
 80163ca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80163cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80163d0:	2114      	movs	r1, #20
 80163d2:	200e      	movs	r0, #14
 80163d4:	f7f6 fb58 	bl	800ca88 <pbuf_alloc>
 80163d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80163da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163dc:	2b00      	cmp	r3, #0
 80163de:	f000 80d5 	beq.w	801658c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80163e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163e4:	895b      	ldrh	r3, [r3, #10]
 80163e6:	2b13      	cmp	r3, #19
 80163e8:	d806      	bhi.n	80163f8 <ip4_frag+0xd0>
 80163ea:	4b6c      	ldr	r3, [pc, #432]	; (801659c <ip4_frag+0x274>)
 80163ec:	f44f 7249 	mov.w	r2, #804	; 0x324
 80163f0:	496d      	ldr	r1, [pc, #436]	; (80165a8 <ip4_frag+0x280>)
 80163f2:	486c      	ldr	r0, [pc, #432]	; (80165a4 <ip4_frag+0x27c>)
 80163f4:	f00b fc6a 	bl	8021ccc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80163f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fa:	685b      	ldr	r3, [r3, #4]
 80163fc:	2214      	movs	r2, #20
 80163fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016400:	4618      	mov	r0, r3
 8016402:	f00b fb3d 	bl	8021a80 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801640c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801640e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016412:	e064      	b.n	80164de <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	895a      	ldrh	r2, [r3, #10]
 8016418:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801641a:	1ad3      	subs	r3, r2, r3
 801641c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	895b      	ldrh	r3, [r3, #10]
 8016422:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016424:	429a      	cmp	r2, r3
 8016426:	d906      	bls.n	8016436 <ip4_frag+0x10e>
 8016428:	4b5c      	ldr	r3, [pc, #368]	; (801659c <ip4_frag+0x274>)
 801642a:	f240 322d 	movw	r2, #813	; 0x32d
 801642e:	495f      	ldr	r1, [pc, #380]	; (80165ac <ip4_frag+0x284>)
 8016430:	485c      	ldr	r0, [pc, #368]	; (80165a4 <ip4_frag+0x27c>)
 8016432:	f00b fc4b 	bl	8021ccc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016436:	8bfa      	ldrh	r2, [r7, #30]
 8016438:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801643c:	4293      	cmp	r3, r2
 801643e:	bf28      	it	cs
 8016440:	4613      	movcs	r3, r2
 8016442:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016446:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801644a:	2b00      	cmp	r3, #0
 801644c:	d105      	bne.n	801645a <ip4_frag+0x132>
        poff = 0;
 801644e:	2300      	movs	r3, #0
 8016450:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	60fb      	str	r3, [r7, #12]
        continue;
 8016458:	e041      	b.n	80164de <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801645a:	f7ff ff0d 	bl	8016278 <ip_frag_alloc_pbuf_custom_ref>
 801645e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016460:	69bb      	ldr	r3, [r7, #24]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d103      	bne.n	801646e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016466:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016468:	f7f6 fdf2 	bl	800d050 <pbuf_free>
        goto memerr;
 801646c:	e08f      	b.n	801658e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801646e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016474:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016476:	4413      	add	r3, r2
 8016478:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801647c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016480:	9201      	str	r2, [sp, #4]
 8016482:	9300      	str	r3, [sp, #0]
 8016484:	4603      	mov	r3, r0
 8016486:	2241      	movs	r2, #65	; 0x41
 8016488:	2000      	movs	r0, #0
 801648a:	f7f6 fc27 	bl	800ccdc <pbuf_alloced_custom>
 801648e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016490:	697b      	ldr	r3, [r7, #20]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d106      	bne.n	80164a4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016496:	69b8      	ldr	r0, [r7, #24]
 8016498:	f7ff fef6 	bl	8016288 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801649c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801649e:	f7f6 fdd7 	bl	800d050 <pbuf_free>
        goto memerr;
 80164a2:	e074      	b.n	801658e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80164a4:	68f8      	ldr	r0, [r7, #12]
 80164a6:	f7f6 fe79 	bl	800d19c <pbuf_ref>
      pcr->original = p;
 80164aa:	69bb      	ldr	r3, [r7, #24]
 80164ac:	68fa      	ldr	r2, [r7, #12]
 80164ae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80164b0:	69bb      	ldr	r3, [r7, #24]
 80164b2:	4a3f      	ldr	r2, [pc, #252]	; (80165b0 <ip4_frag+0x288>)
 80164b4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80164b6:	6979      	ldr	r1, [r7, #20]
 80164b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80164ba:	f7f6 fe97 	bl	800d1ec <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80164be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80164c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80164c6:	1ad3      	subs	r3, r2, r3
 80164c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80164cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d004      	beq.n	80164de <ip4_frag+0x1b6>
        poff = 0;
 80164d4:	2300      	movs	r3, #0
 80164d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80164de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d196      	bne.n	8016414 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80164e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80164e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80164ec:	4413      	add	r3, r2
 80164ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80164f0:	68bb      	ldr	r3, [r7, #8]
 80164f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164f4:	f1a3 0213 	sub.w	r2, r3, #19
 80164f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80164fc:	429a      	cmp	r2, r3
 80164fe:	bfcc      	ite	gt
 8016500:	2301      	movgt	r3, #1
 8016502:	2300      	movle	r3, #0
 8016504:	b2db      	uxtb	r3, r3
 8016506:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016508:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801650c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016510:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016512:	6a3b      	ldr	r3, [r7, #32]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d002      	beq.n	801651e <ip4_frag+0x1f6>
 8016518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801651a:	2b00      	cmp	r3, #0
 801651c:	d003      	beq.n	8016526 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801651e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016524:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016526:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016528:	4618      	mov	r0, r3
 801652a:	f7f4 fe7b 	bl	800b224 <lwip_htons>
 801652e:	4603      	mov	r3, r0
 8016530:	461a      	mov	r2, r3
 8016532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016534:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016536:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016538:	3314      	adds	r3, #20
 801653a:	b29b      	uxth	r3, r3
 801653c:	4618      	mov	r0, r3
 801653e:	f7f4 fe71 	bl	800b224 <lwip_htons>
 8016542:	4603      	mov	r3, r0
 8016544:	461a      	mov	r2, r3
 8016546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016548:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801654c:	2200      	movs	r2, #0
 801654e:	729a      	strb	r2, [r3, #10]
 8016550:	2200      	movs	r2, #0
 8016552:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	695b      	ldr	r3, [r3, #20]
 8016558:	687a      	ldr	r2, [r7, #4]
 801655a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801655c:	68b8      	ldr	r0, [r7, #8]
 801655e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016560:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016562:	f7f6 fd75 	bl	800d050 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016566:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801656a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801656c:	1ad3      	subs	r3, r2, r3
 801656e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016572:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016576:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016578:	4413      	add	r3, r2
 801657a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801657e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016582:	2b00      	cmp	r3, #0
 8016584:	f47f af19 	bne.w	80163ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016588:	2300      	movs	r3, #0
 801658a:	e002      	b.n	8016592 <ip4_frag+0x26a>
      goto memerr;
 801658c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801658e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016592:	4618      	mov	r0, r3
 8016594:	3748      	adds	r7, #72	; 0x48
 8016596:	46bd      	mov	sp, r7
 8016598:	bd80      	pop	{r7, pc}
 801659a:	bf00      	nop
 801659c:	08025e50 	.word	0x08025e50
 80165a0:	0802602c 	.word	0x0802602c
 80165a4:	08025e98 	.word	0x08025e98
 80165a8:	08026048 	.word	0x08026048
 80165ac:	08026068 	.word	0x08026068
 80165b0:	080162c1 	.word	0x080162c1

080165b4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b086      	sub	sp, #24
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
 80165bc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80165be:	230e      	movs	r3, #14
 80165c0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	895b      	ldrh	r3, [r3, #10]
 80165c6:	2b0e      	cmp	r3, #14
 80165c8:	d96e      	bls.n	80166a8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	7bdb      	ldrb	r3, [r3, #15]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d106      	bne.n	80165e0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80165d8:	3301      	adds	r3, #1
 80165da:	b2da      	uxtb	r2, r3
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	685b      	ldr	r3, [r3, #4]
 80165e4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80165e6:	693b      	ldr	r3, [r7, #16]
 80165e8:	7b1a      	ldrb	r2, [r3, #12]
 80165ea:	7b5b      	ldrb	r3, [r3, #13]
 80165ec:	021b      	lsls	r3, r3, #8
 80165ee:	4313      	orrs	r3, r2
 80165f0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80165f2:	693b      	ldr	r3, [r7, #16]
 80165f4:	781b      	ldrb	r3, [r3, #0]
 80165f6:	f003 0301 	and.w	r3, r3, #1
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d023      	beq.n	8016646 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	2b01      	cmp	r3, #1
 8016604:	d10f      	bne.n	8016626 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016606:	693b      	ldr	r3, [r7, #16]
 8016608:	785b      	ldrb	r3, [r3, #1]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d11b      	bne.n	8016646 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801660e:	693b      	ldr	r3, [r7, #16]
 8016610:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016612:	2b5e      	cmp	r3, #94	; 0x5e
 8016614:	d117      	bne.n	8016646 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	7b5b      	ldrb	r3, [r3, #13]
 801661a:	f043 0310 	orr.w	r3, r3, #16
 801661e:	b2da      	uxtb	r2, r3
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	735a      	strb	r2, [r3, #13]
 8016624:	e00f      	b.n	8016646 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016626:	693b      	ldr	r3, [r7, #16]
 8016628:	2206      	movs	r2, #6
 801662a:	4928      	ldr	r1, [pc, #160]	; (80166cc <ethernet_input+0x118>)
 801662c:	4618      	mov	r0, r3
 801662e:	f00b fa17 	bl	8021a60 <memcmp>
 8016632:	4603      	mov	r3, r0
 8016634:	2b00      	cmp	r3, #0
 8016636:	d106      	bne.n	8016646 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	7b5b      	ldrb	r3, [r3, #13]
 801663c:	f043 0308 	orr.w	r3, r3, #8
 8016640:	b2da      	uxtb	r2, r3
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016646:	89fb      	ldrh	r3, [r7, #14]
 8016648:	2b08      	cmp	r3, #8
 801664a:	d003      	beq.n	8016654 <ethernet_input+0xa0>
 801664c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016650:	d014      	beq.n	801667c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016652:	e032      	b.n	80166ba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801665a:	f003 0308 	and.w	r3, r3, #8
 801665e:	2b00      	cmp	r3, #0
 8016660:	d024      	beq.n	80166ac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016662:	8afb      	ldrh	r3, [r7, #22]
 8016664:	4619      	mov	r1, r3
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f7f6 fc6c 	bl	800cf44 <pbuf_remove_header>
 801666c:	4603      	mov	r3, r0
 801666e:	2b00      	cmp	r3, #0
 8016670:	d11e      	bne.n	80166b0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016672:	6839      	ldr	r1, [r7, #0]
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f7fe fddf 	bl	8015238 <ip4_input>
      break;
 801667a:	e013      	b.n	80166a4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016682:	f003 0308 	and.w	r3, r3, #8
 8016686:	2b00      	cmp	r3, #0
 8016688:	d014      	beq.n	80166b4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801668a:	8afb      	ldrh	r3, [r7, #22]
 801668c:	4619      	mov	r1, r3
 801668e:	6878      	ldr	r0, [r7, #4]
 8016690:	f7f6 fc58 	bl	800cf44 <pbuf_remove_header>
 8016694:	4603      	mov	r3, r0
 8016696:	2b00      	cmp	r3, #0
 8016698:	d10e      	bne.n	80166b8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801669a:	6839      	ldr	r1, [r7, #0]
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f7fd fbeb 	bl	8013e78 <etharp_input>
      break;
 80166a2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80166a4:	2300      	movs	r3, #0
 80166a6:	e00c      	b.n	80166c2 <ethernet_input+0x10e>
    goto free_and_return;
 80166a8:	bf00      	nop
 80166aa:	e006      	b.n	80166ba <ethernet_input+0x106>
        goto free_and_return;
 80166ac:	bf00      	nop
 80166ae:	e004      	b.n	80166ba <ethernet_input+0x106>
        goto free_and_return;
 80166b0:	bf00      	nop
 80166b2:	e002      	b.n	80166ba <ethernet_input+0x106>
        goto free_and_return;
 80166b4:	bf00      	nop
 80166b6:	e000      	b.n	80166ba <ethernet_input+0x106>
        goto free_and_return;
 80166b8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80166ba:	6878      	ldr	r0, [r7, #4]
 80166bc:	f7f6 fcc8 	bl	800d050 <pbuf_free>
  return ERR_OK;
 80166c0:	2300      	movs	r3, #0
}
 80166c2:	4618      	mov	r0, r3
 80166c4:	3718      	adds	r7, #24
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}
 80166ca:	bf00      	nop
 80166cc:	080262a8 	.word	0x080262a8

080166d0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b086      	sub	sp, #24
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	60f8      	str	r0, [r7, #12]
 80166d8:	60b9      	str	r1, [r7, #8]
 80166da:	607a      	str	r2, [r7, #4]
 80166dc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80166de:	8c3b      	ldrh	r3, [r7, #32]
 80166e0:	4618      	mov	r0, r3
 80166e2:	f7f4 fd9f 	bl	800b224 <lwip_htons>
 80166e6:	4603      	mov	r3, r0
 80166e8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80166ea:	210e      	movs	r1, #14
 80166ec:	68b8      	ldr	r0, [r7, #8]
 80166ee:	f7f6 fc19 	bl	800cf24 <pbuf_add_header>
 80166f2:	4603      	mov	r3, r0
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d125      	bne.n	8016744 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	685b      	ldr	r3, [r3, #4]
 80166fc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80166fe:	693b      	ldr	r3, [r7, #16]
 8016700:	8afa      	ldrh	r2, [r7, #22]
 8016702:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016704:	693b      	ldr	r3, [r7, #16]
 8016706:	2206      	movs	r2, #6
 8016708:	6839      	ldr	r1, [r7, #0]
 801670a:	4618      	mov	r0, r3
 801670c:	f00b f9b8 	bl	8021a80 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016710:	693b      	ldr	r3, [r7, #16]
 8016712:	3306      	adds	r3, #6
 8016714:	2206      	movs	r2, #6
 8016716:	6879      	ldr	r1, [r7, #4]
 8016718:	4618      	mov	r0, r3
 801671a:	f00b f9b1 	bl	8021a80 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016724:	2b06      	cmp	r3, #6
 8016726:	d006      	beq.n	8016736 <ethernet_output+0x66>
 8016728:	4b0a      	ldr	r3, [pc, #40]	; (8016754 <ethernet_output+0x84>)
 801672a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801672e:	490a      	ldr	r1, [pc, #40]	; (8016758 <ethernet_output+0x88>)
 8016730:	480a      	ldr	r0, [pc, #40]	; (801675c <ethernet_output+0x8c>)
 8016732:	f00b facb 	bl	8021ccc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	699b      	ldr	r3, [r3, #24]
 801673a:	68b9      	ldr	r1, [r7, #8]
 801673c:	68f8      	ldr	r0, [r7, #12]
 801673e:	4798      	blx	r3
 8016740:	4603      	mov	r3, r0
 8016742:	e002      	b.n	801674a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016744:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016746:	f06f 0301 	mvn.w	r3, #1
}
 801674a:	4618      	mov	r0, r3
 801674c:	3718      	adds	r7, #24
 801674e:	46bd      	mov	sp, r7
 8016750:	bd80      	pop	{r7, pc}
 8016752:	bf00      	nop
 8016754:	08026078 	.word	0x08026078
 8016758:	080260b0 	.word	0x080260b0
 801675c:	080260e4 	.word	0x080260e4

08016760 <sys_mbox_new>:
//#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b082      	sub	sp, #8
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
 8016768:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	2200      	movs	r2, #0
 801676e:	2104      	movs	r1, #4
 8016770:	4618      	mov	r0, r3
 8016772:	f7f1 fd6b 	bl	800824c <osMessageQueueNew>
 8016776:	4602      	mov	r2, r0
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d102      	bne.n	801678a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016788:	e000      	b.n	801678c <sys_mbox_new+0x2c>

  return ERR_OK;
 801678a:	2300      	movs	r3, #0
}
 801678c:	4618      	mov	r0, r3
 801678e:	3708      	adds	r7, #8
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b084      	sub	sp, #16
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
 801679c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	6818      	ldr	r0, [r3, #0]
 80167a2:	4639      	mov	r1, r7
 80167a4:	2300      	movs	r3, #0
 80167a6:	2200      	movs	r2, #0
 80167a8:	f7f1 fdd6 	bl	8008358 <osMessageQueuePut>
 80167ac:	4603      	mov	r3, r0
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d102      	bne.n	80167b8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80167b2:	2300      	movs	r3, #0
 80167b4:	73fb      	strb	r3, [r7, #15]
 80167b6:	e001      	b.n	80167bc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80167b8:	23ff      	movs	r3, #255	; 0xff
 80167ba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80167bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80167c0:	4618      	mov	r0, r3
 80167c2:	3710      	adds	r7, #16
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}

080167c8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b086      	sub	sp, #24
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	60f8      	str	r0, [r7, #12]
 80167d0:	60b9      	str	r1, [r7, #8]
 80167d2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80167d4:	f7f1 f92e 	bl	8007a34 <osKernelGetTickCount>
 80167d8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d013      	beq.n	8016808 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	6818      	ldr	r0, [r3, #0]
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	2200      	movs	r2, #0
 80167e8:	68b9      	ldr	r1, [r7, #8]
 80167ea:	f7f1 fe29 	bl	8008440 <osMessageQueueGet>
 80167ee:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80167f0:	693b      	ldr	r3, [r7, #16]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d105      	bne.n	8016802 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80167f6:	f7f1 f91d 	bl	8007a34 <osKernelGetTickCount>
 80167fa:	4602      	mov	r2, r0
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	1ad3      	subs	r3, r2, r3
 8016800:	e00f      	b.n	8016822 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016806:	e00c      	b.n	8016822 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	6818      	ldr	r0, [r3, #0]
 801680c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016810:	2200      	movs	r2, #0
 8016812:	68b9      	ldr	r1, [r7, #8]
 8016814:	f7f1 fe14 	bl	8008440 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016818:	f7f1 f90c 	bl	8007a34 <osKernelGetTickCount>
 801681c:	4602      	mov	r2, r0
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016822:	4618      	mov	r0, r3
 8016824:	3718      	adds	r7, #24
 8016826:	46bd      	mov	sp, r7
 8016828:	bd80      	pop	{r7, pc}

0801682a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801682a:	b480      	push	{r7}
 801682c:	b083      	sub	sp, #12
 801682e:	af00      	add	r7, sp, #0
 8016830:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d101      	bne.n	801683e <sys_mbox_valid+0x14>
    return 0;
 801683a:	2300      	movs	r3, #0
 801683c:	e000      	b.n	8016840 <sys_mbox_valid+0x16>
  else
    return 1;
 801683e:	2301      	movs	r3, #1
}
 8016840:	4618      	mov	r0, r3
 8016842:	370c      	adds	r7, #12
 8016844:	46bd      	mov	sp, r7
 8016846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684a:	4770      	bx	lr

0801684c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801684c:	b580      	push	{r7, lr}
 801684e:	b082      	sub	sp, #8
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
 8016854:	460b      	mov	r3, r1
 8016856:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8016858:	78fb      	ldrb	r3, [r7, #3]
 801685a:	2200      	movs	r2, #0
 801685c:	4619      	mov	r1, r3
 801685e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016862:	f7f1 fb63 	bl	8007f2c <osSemaphoreNew>
 8016866:	4602      	mov	r2, r0
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d102      	bne.n	801687a <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016878:	e009      	b.n	801688e <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801687a:	78fb      	ldrb	r3, [r7, #3]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d105      	bne.n	801688c <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	2100      	movs	r1, #0
 8016886:	4618      	mov	r0, r3
 8016888:	f7f1 fbec 	bl	8008064 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801688c:	2300      	movs	r3, #0
}
 801688e:	4618      	mov	r0, r3
 8016890:	3708      	adds	r7, #8
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}

08016896 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016896:	b580      	push	{r7, lr}
 8016898:	b084      	sub	sp, #16
 801689a:	af00      	add	r7, sp, #0
 801689c:	6078      	str	r0, [r7, #4]
 801689e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80168a0:	f7f1 f8c8 	bl	8007a34 <osKernelGetTickCount>
 80168a4:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d011      	beq.n	80168d0 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	6839      	ldr	r1, [r7, #0]
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7f1 fbd6 	bl	8008064 <osSemaphoreAcquire>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d105      	bne.n	80168ca <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80168be:	f7f1 f8b9 	bl	8007a34 <osKernelGetTickCount>
 80168c2:	4602      	mov	r2, r0
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	1ad3      	subs	r3, r2, r3
 80168c8:	e012      	b.n	80168f0 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80168ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80168ce:	e00f      	b.n	80168f0 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80168d0:	bf00      	nop
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80168da:	4618      	mov	r0, r3
 80168dc:	f7f1 fbc2 	bl	8008064 <osSemaphoreAcquire>
 80168e0:	4603      	mov	r3, r0
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d1f5      	bne.n	80168d2 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80168e6:	f7f1 f8a5 	bl	8007a34 <osKernelGetTickCount>
 80168ea:	4602      	mov	r2, r0
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3710      	adds	r7, #16
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}

080168f8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	4618      	mov	r0, r3
 8016906:	f7f1 fc13 	bl	8008130 <osSemaphoreRelease>
}
 801690a:	bf00      	nop
 801690c:	3708      	adds	r7, #8
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}

08016912 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016912:	b580      	push	{r7, lr}
 8016914:	b082      	sub	sp, #8
 8016916:	af00      	add	r7, sp, #0
 8016918:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	4618      	mov	r0, r3
 8016920:	f7f1 fc5e 	bl	80081e0 <osSemaphoreDelete>
}
 8016924:	bf00      	nop
 8016926:	3708      	adds	r7, #8
 8016928:	46bd      	mov	sp, r7
 801692a:	bd80      	pop	{r7, pc}

0801692c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801692c:	b480      	push	{r7}
 801692e:	b083      	sub	sp, #12
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d101      	bne.n	8016940 <sys_sem_valid+0x14>
    return 0;
 801693c:	2300      	movs	r3, #0
 801693e:	e000      	b.n	8016942 <sys_sem_valid+0x16>
  else
    return 1;
 8016940:	2301      	movs	r3, #1
}
 8016942:	4618      	mov	r0, r3
 8016944:	370c      	adds	r7, #12
 8016946:	46bd      	mov	sp, r7
 8016948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694c:	4770      	bx	lr
	...

08016950 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016954:	2000      	movs	r0, #0
 8016956:	f7f1 f969 	bl	8007c2c <osMutexNew>
 801695a:	4603      	mov	r3, r0
 801695c:	4a01      	ldr	r2, [pc, #4]	; (8016964 <sys_init+0x14>)
 801695e:	6013      	str	r3, [r2, #0]
#endif
}
 8016960:	bf00      	nop
 8016962:	bd80      	pop	{r7, pc}
 8016964:	20040cbc 	.word	0x20040cbc

08016968 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016968:	b580      	push	{r7, lr}
 801696a:	b082      	sub	sp, #8
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016970:	2000      	movs	r0, #0
 8016972:	f7f1 f95b 	bl	8007c2c <osMutexNew>
 8016976:	4602      	mov	r2, r0
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d102      	bne.n	801698a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016988:	e000      	b.n	801698c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801698a:	2300      	movs	r3, #0
}
 801698c:	4618      	mov	r0, r3
 801698e:	3708      	adds	r7, #8
 8016990:	46bd      	mov	sp, r7
 8016992:	bd80      	pop	{r7, pc}

08016994 <sys_mutex_free>:
/*-----------------------------------------------------------------------------------*/
/* Deallocate a mutex*/
void sys_mutex_free(sys_mutex_t *mutex)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b082      	sub	sp, #8
 8016998:	af00      	add	r7, sp, #0
 801699a:	6078      	str	r0, [r7, #4]
#if SYS_STATS
      --lwip_stats.sys.mutex.used;
#endif /* SYS_STATS */

  osMutexDelete(*mutex);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	4618      	mov	r0, r3
 80169a2:	f7f1 fa8b 	bl	8007ebc <osMutexDelete>
}
 80169a6:	bf00      	nop
 80169a8:	3708      	adds	r7, #8
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}

080169ae <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b082      	sub	sp, #8
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80169be:	4618      	mov	r0, r3
 80169c0:	f7f1 f9ce 	bl	8007d60 <osMutexAcquire>
#endif
}
 80169c4:	bf00      	nop
 80169c6:	3708      	adds	r7, #8
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}

080169cc <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b082      	sub	sp, #8
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	4618      	mov	r0, r3
 80169da:	f7f1 fa1f 	bl	8007e1c <osMutexRelease>
}
 80169de:	bf00      	nop
 80169e0:	3708      	adds	r7, #8
 80169e2:	46bd      	mov	sp, r7
 80169e4:	bd80      	pop	{r7, pc}

080169e6 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80169e6:	b580      	push	{r7, lr}
 80169e8:	b08e      	sub	sp, #56	; 0x38
 80169ea:	af00      	add	r7, sp, #0
 80169ec:	60f8      	str	r0, [r7, #12]
 80169ee:	60b9      	str	r1, [r7, #8]
 80169f0:	607a      	str	r2, [r7, #4]
 80169f2:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80169f4:	f107 0314 	add.w	r3, r7, #20
 80169f8:	2224      	movs	r2, #36	; 0x24
 80169fa:	2100      	movs	r1, #0
 80169fc:	4618      	mov	r0, r3
 80169fe:	f00b f867 	bl	8021ad0 <memset>
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	617b      	str	r3, [r7, #20]
 8016a06:	683b      	ldr	r3, [r7, #0]
 8016a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016a0e:	f107 0314 	add.w	r3, r7, #20
 8016a12:	461a      	mov	r2, r3
 8016a14:	6879      	ldr	r1, [r7, #4]
 8016a16:	68b8      	ldr	r0, [r7, #8]
 8016a18:	f7f1 f834 	bl	8007a84 <osThreadNew>
 8016a1c:	4603      	mov	r3, r0
#endif
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3738      	adds	r7, #56	; 0x38
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
	...

08016a28 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016a2c:	4b04      	ldr	r3, [pc, #16]	; (8016a40 <sys_arch_protect+0x18>)
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016a34:	4618      	mov	r0, r3
 8016a36:	f7f1 f993 	bl	8007d60 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016a3a:	2301      	movs	r3, #1
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	bd80      	pop	{r7, pc}
 8016a40:	20040cbc 	.word	0x20040cbc

08016a44 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b082      	sub	sp, #8
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016a4c:	4b04      	ldr	r3, [pc, #16]	; (8016a60 <sys_arch_unprotect+0x1c>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	4618      	mov	r0, r3
 8016a52:	f7f1 f9e3 	bl	8007e1c <osMutexRelease>
}
 8016a56:	bf00      	nop
 8016a58:	3708      	adds	r7, #8
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}
 8016a5e:	bf00      	nop
 8016a60:	20040cbc 	.word	0x20040cbc

08016a64 <rcl_get_zero_initialized_publisher>:
 8016a64:	4b01      	ldr	r3, [pc, #4]	; (8016a6c <rcl_get_zero_initialized_publisher+0x8>)
 8016a66:	6818      	ldr	r0, [r3, #0]
 8016a68:	4770      	bx	lr
 8016a6a:	bf00      	nop
 8016a6c:	080262b8 	.word	0x080262b8

08016a70 <rcl_publisher_init>:
 8016a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a74:	b089      	sub	sp, #36	; 0x24
 8016a76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016a78:	2d00      	cmp	r5, #0
 8016a7a:	d068      	beq.n	8016b4e <rcl_publisher_init+0xde>
 8016a7c:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8016a80:	4604      	mov	r4, r0
 8016a82:	460e      	mov	r6, r1
 8016a84:	4690      	mov	r8, r2
 8016a86:	4648      	mov	r0, r9
 8016a88:	461f      	mov	r7, r3
 8016a8a:	f000 f9e3 	bl	8016e54 <rcutils_allocator_is_valid>
 8016a8e:	f080 0001 	eor.w	r0, r0, #1
 8016a92:	f010 0fff 	tst.w	r0, #255	; 0xff
 8016a96:	d15a      	bne.n	8016b4e <rcl_publisher_init+0xde>
 8016a98:	2c00      	cmp	r4, #0
 8016a9a:	d058      	beq.n	8016b4e <rcl_publisher_init+0xde>
 8016a9c:	6823      	ldr	r3, [r4, #0]
 8016a9e:	b123      	cbz	r3, 8016aaa <rcl_publisher_init+0x3a>
 8016aa0:	2764      	movs	r7, #100	; 0x64
 8016aa2:	4638      	mov	r0, r7
 8016aa4:	b009      	add	sp, #36	; 0x24
 8016aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016aaa:	4630      	mov	r0, r6
 8016aac:	f007 ff40 	bl	801e930 <rcl_node_is_valid>
 8016ab0:	2800      	cmp	r0, #0
 8016ab2:	d051      	beq.n	8016b58 <rcl_publisher_init+0xe8>
 8016ab4:	f1b8 0f00 	cmp.w	r8, #0
 8016ab8:	d049      	beq.n	8016b4e <rcl_publisher_init+0xde>
 8016aba:	fab7 f387 	clz	r3, r7
 8016abe:	095b      	lsrs	r3, r3, #5
 8016ac0:	2f00      	cmp	r7, #0
 8016ac2:	d044      	beq.n	8016b4e <rcl_publisher_init+0xde>
 8016ac4:	a907      	add	r1, sp, #28
 8016ac6:	f105 0258 	add.w	r2, r5, #88	; 0x58
 8016aca:	9307      	str	r3, [sp, #28]
 8016acc:	9105      	str	r1, [sp, #20]
 8016ace:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8016ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8016ad4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016ad8:	4639      	mov	r1, r7
 8016ada:	4630      	mov	r0, r6
 8016adc:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016ae0:	f007 ff84 	bl	801e9ec <rcl_node_resolve_name>
 8016ae4:	2800      	cmp	r0, #0
 8016ae6:	d14f      	bne.n	8016b88 <rcl_publisher_init+0x118>
 8016ae8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8016aea:	20c8      	movs	r0, #200	; 0xc8
 8016aec:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8016aee:	4798      	blx	r3
 8016af0:	6020      	str	r0, [r4, #0]
 8016af2:	2800      	cmp	r0, #0
 8016af4:	d050      	beq.n	8016b98 <rcl_publisher_init+0x128>
 8016af6:	4630      	mov	r0, r6
 8016af8:	f007 ff3c 	bl	801e974 <rcl_node_get_rmw_handle>
 8016afc:	f105 0264 	add.w	r2, r5, #100	; 0x64
 8016b00:	4641      	mov	r1, r8
 8016b02:	462b      	mov	r3, r5
 8016b04:	9200      	str	r2, [sp, #0]
 8016b06:	9a07      	ldr	r2, [sp, #28]
 8016b08:	6827      	ldr	r7, [r4, #0]
 8016b0a:	f000 fa2d 	bl	8016f68 <rmw_create_publisher>
 8016b0e:	6821      	ldr	r1, [r4, #0]
 8016b10:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8016b14:	f8d1 00c4 	ldr.w	r0, [r1, #196]	; 0xc4
 8016b18:	b370      	cbz	r0, 8016b78 <rcl_publisher_init+0x108>
 8016b1a:	3170      	adds	r1, #112	; 0x70
 8016b1c:	f000 faa6 	bl	801706c <rmw_publisher_get_actual_qos>
 8016b20:	4607      	mov	r7, r0
 8016b22:	b9d8      	cbnz	r0, 8016b5c <rcl_publisher_init+0xec>
 8016b24:	6823      	ldr	r3, [r4, #0]
 8016b26:	2270      	movs	r2, #112	; 0x70
 8016b28:	f895 4048 	ldrb.w	r4, [r5, #72]	; 0x48
 8016b2c:	4629      	mov	r1, r5
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f883 40b8 	strb.w	r4, [r3, #184]	; 0xb8
 8016b34:	f00a ffa4 	bl	8021a80 <memcpy>
 8016b38:	6832      	ldr	r2, [r6, #0]
 8016b3a:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8016b3e:	9807      	ldr	r0, [sp, #28]
 8016b40:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8016b42:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8016b44:	4798      	blx	r3
 8016b46:	4638      	mov	r0, r7
 8016b48:	b009      	add	sp, #36	; 0x24
 8016b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b4e:	270b      	movs	r7, #11
 8016b50:	4638      	mov	r0, r7
 8016b52:	b009      	add	sp, #36	; 0x24
 8016b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b58:	27c8      	movs	r7, #200	; 0xc8
 8016b5a:	e7a2      	b.n	8016aa2 <rcl_publisher_init+0x32>
 8016b5c:	6821      	ldr	r1, [r4, #0]
 8016b5e:	b1c9      	cbz	r1, 8016b94 <rcl_publisher_init+0x124>
 8016b60:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 8016b64:	b143      	cbz	r3, 8016b78 <rcl_publisher_init+0x108>
 8016b66:	4630      	mov	r0, r6
 8016b68:	f007 ff04 	bl	801e974 <rcl_node_get_rmw_handle>
 8016b6c:	6823      	ldr	r3, [r4, #0]
 8016b6e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8016b72:	f000 fa7d 	bl	8017070 <rmw_destroy_publisher>
 8016b76:	6821      	ldr	r1, [r4, #0]
 8016b78:	4608      	mov	r0, r1
 8016b7a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8016b7c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8016b7e:	2701      	movs	r7, #1
 8016b80:	4798      	blx	r3
 8016b82:	2300      	movs	r3, #0
 8016b84:	6023      	str	r3, [r4, #0]
 8016b86:	e7da      	b.n	8016b3e <rcl_publisher_init+0xce>
 8016b88:	2867      	cmp	r0, #103	; 0x67
 8016b8a:	d007      	beq.n	8016b9c <rcl_publisher_init+0x12c>
 8016b8c:	2869      	cmp	r0, #105	; 0x69
 8016b8e:	d005      	beq.n	8016b9c <rcl_publisher_init+0x12c>
 8016b90:	280a      	cmp	r0, #10
 8016b92:	d001      	beq.n	8016b98 <rcl_publisher_init+0x128>
 8016b94:	2701      	movs	r7, #1
 8016b96:	e7d2      	b.n	8016b3e <rcl_publisher_init+0xce>
 8016b98:	270a      	movs	r7, #10
 8016b9a:	e7d0      	b.n	8016b3e <rcl_publisher_init+0xce>
 8016b9c:	2767      	movs	r7, #103	; 0x67
 8016b9e:	e7ce      	b.n	8016b3e <rcl_publisher_init+0xce>

08016ba0 <rcl_publisher_get_default_options>:
 8016ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ba4:	4f12      	ldr	r7, [pc, #72]	; (8016bf0 <rcl_publisher_get_default_options+0x50>)
 8016ba6:	b088      	sub	sp, #32
 8016ba8:	4606      	mov	r6, r0
 8016baa:	2250      	movs	r2, #80	; 0x50
 8016bac:	4911      	ldr	r1, [pc, #68]	; (8016bf4 <rcl_publisher_get_default_options+0x54>)
 8016bae:	4638      	mov	r0, r7
 8016bb0:	ac02      	add	r4, sp, #8
 8016bb2:	f00a ff65 	bl	8021a80 <memcpy>
 8016bb6:	a802      	add	r0, sp, #8
 8016bb8:	46e8      	mov	r8, sp
 8016bba:	f000 f93d 	bl	8016e38 <rcutils_get_default_allocator>
 8016bbe:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8016bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016bc4:	6824      	ldr	r4, [r4, #0]
 8016bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016bc8:	4640      	mov	r0, r8
 8016bca:	602c      	str	r4, [r5, #0]
 8016bcc:	f000 f97e 	bl	8016ecc <rmw_get_default_publisher_options>
 8016bd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016bd4:	2270      	movs	r2, #112	; 0x70
 8016bd6:	e898 0003 	ldmia.w	r8, {r0, r1}
 8016bda:	e883 0003 	stmia.w	r3, {r0, r1}
 8016bde:	4639      	mov	r1, r7
 8016be0:	4630      	mov	r0, r6
 8016be2:	f00a ff4d 	bl	8021a80 <memcpy>
 8016be6:	4630      	mov	r0, r6
 8016be8:	b008      	add	sp, #32
 8016bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bee:	bf00      	nop
 8016bf0:	20040cc0 	.word	0x20040cc0
 8016bf4:	080262c0 	.word	0x080262c0

08016bf8 <rcl_publish>:
 8016bf8:	b1f8      	cbz	r0, 8016c3a <rcl_publish+0x42>
 8016bfa:	6803      	ldr	r3, [r0, #0]
 8016bfc:	b570      	push	{r4, r5, r6, lr}
 8016bfe:	4604      	mov	r4, r0
 8016c00:	b1b3      	cbz	r3, 8016c30 <rcl_publish+0x38>
 8016c02:	4616      	mov	r6, r2
 8016c04:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8016c08:	b192      	cbz	r2, 8016c30 <rcl_publish+0x38>
 8016c0a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8016c0e:	460d      	mov	r5, r1
 8016c10:	f007 faaa 	bl	801e168 <rcl_context_is_valid>
 8016c14:	b160      	cbz	r0, 8016c30 <rcl_publish+0x38>
 8016c16:	6823      	ldr	r3, [r4, #0]
 8016c18:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8016c1c:	b140      	cbz	r0, 8016c30 <rcl_publish+0x38>
 8016c1e:	b155      	cbz	r5, 8016c36 <rcl_publish+0x3e>
 8016c20:	4632      	mov	r2, r6
 8016c22:	4629      	mov	r1, r5
 8016c24:	f000 f956 	bl	8016ed4 <rmw_publish>
 8016c28:	3800      	subs	r0, #0
 8016c2a:	bf18      	it	ne
 8016c2c:	2001      	movne	r0, #1
 8016c2e:	bd70      	pop	{r4, r5, r6, pc}
 8016c30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8016c34:	bd70      	pop	{r4, r5, r6, pc}
 8016c36:	200b      	movs	r0, #11
 8016c38:	bd70      	pop	{r4, r5, r6, pc}
 8016c3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8016c3e:	4770      	bx	lr

08016c40 <rclc_support_init>:
 8016c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c44:	b089      	sub	sp, #36	; 0x24
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d045      	beq.n	8016cd6 <rclc_support_init+0x96>
 8016c4a:	4606      	mov	r6, r0
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	d042      	beq.n	8016cd6 <rclc_support_init+0x96>
 8016c50:	461c      	mov	r4, r3
 8016c52:	460f      	mov	r7, r1
 8016c54:	4690      	mov	r8, r2
 8016c56:	f007 fc0d 	bl	801e474 <rcl_get_zero_initialized_init_options>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8016c60:	9307      	str	r3, [sp, #28]
 8016c62:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016c66:	a807      	add	r0, sp, #28
 8016c68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016c6c:	f007 fc04 	bl	801e478 <rcl_init_options_init>
 8016c70:	4605      	mov	r5, r0
 8016c72:	bb50      	cbnz	r0, 8016cca <rclc_support_init+0x8a>
 8016c74:	f007 fbfe 	bl	801e474 <rcl_get_zero_initialized_init_options>
 8016c78:	4631      	mov	r1, r6
 8016c7a:	6030      	str	r0, [r6, #0]
 8016c7c:	a807      	add	r0, sp, #28
 8016c7e:	f007 fc7d 	bl	801e57c <rcl_init_options_copy>
 8016c82:	4605      	mov	r5, r0
 8016c84:	b9d8      	cbnz	r0, 8016cbe <rclc_support_init+0x7e>
 8016c86:	f10d 0908 	add.w	r9, sp, #8
 8016c8a:	f106 0508 	add.w	r5, r6, #8
 8016c8e:	4648      	mov	r0, r9
 8016c90:	f007 fa5a 	bl	801e148 <rcl_get_zero_initialized_context>
 8016c94:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 8016c98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8016c9c:	462b      	mov	r3, r5
 8016c9e:	4641      	mov	r1, r8
 8016ca0:	4638      	mov	r0, r7
 8016ca2:	4632      	mov	r2, r6
 8016ca4:	f007 fade 	bl	801e264 <rcl_init>
 8016ca8:	4605      	mov	r5, r0
 8016caa:	b940      	cbnz	r0, 8016cbe <rclc_support_init+0x7e>
 8016cac:	4622      	mov	r2, r4
 8016cae:	f106 011c 	add.w	r1, r6, #28
 8016cb2:	2003      	movs	r0, #3
 8016cb4:	61b4      	str	r4, [r6, #24]
 8016cb6:	f008 f889 	bl	801edcc <rcl_clock_init>
 8016cba:	4605      	mov	r5, r0
 8016cbc:	b108      	cbz	r0, 8016cc2 <rclc_support_init+0x82>
 8016cbe:	f000 f8ed 	bl	8016e9c <rcutils_reset_error>
 8016cc2:	a807      	add	r0, sp, #28
 8016cc4:	f007 fc36 	bl	801e534 <rcl_init_options_fini>
 8016cc8:	b108      	cbz	r0, 8016cce <rclc_support_init+0x8e>
 8016cca:	f000 f8e7 	bl	8016e9c <rcutils_reset_error>
 8016cce:	4628      	mov	r0, r5
 8016cd0:	b009      	add	sp, #36	; 0x24
 8016cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cd6:	250b      	movs	r5, #11
 8016cd8:	4628      	mov	r0, r5
 8016cda:	b009      	add	sp, #36	; 0x24
 8016cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016ce0 <rclc_node_init_default>:
 8016ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ce4:	fab3 f483 	clz	r4, r3
 8016ce8:	b0a1      	sub	sp, #132	; 0x84
 8016cea:	0964      	lsrs	r4, r4, #5
 8016cec:	2a00      	cmp	r2, #0
 8016cee:	bf08      	it	eq
 8016cf0:	2401      	moveq	r4, #1
 8016cf2:	2900      	cmp	r1, #0
 8016cf4:	bf08      	it	eq
 8016cf6:	2401      	moveq	r4, #1
 8016cf8:	bb2c      	cbnz	r4, 8016d46 <rclc_node_init_default+0x66>
 8016cfa:	4605      	mov	r5, r0
 8016cfc:	b318      	cbz	r0, 8016d46 <rclc_node_init_default+0x66>
 8016cfe:	ac04      	add	r4, sp, #16
 8016d00:	4698      	mov	r8, r3
 8016d02:	4617      	mov	r7, r2
 8016d04:	460e      	mov	r6, r1
 8016d06:	4620      	mov	r0, r4
 8016d08:	f10d 0918 	add.w	r9, sp, #24
 8016d0c:	f007 fcc2 	bl	801e694 <rcl_get_zero_initialized_node>
 8016d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8016d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8016d18:	4648      	mov	r0, r9
 8016d1a:	f007 fe31 	bl	801e980 <rcl_node_get_default_options>
 8016d1e:	4620      	mov	r0, r4
 8016d20:	f007 fcb8 	bl	801e694 <rcl_get_zero_initialized_node>
 8016d24:	f8cd 9000 	str.w	r9, [sp]
 8016d28:	f108 0308 	add.w	r3, r8, #8
 8016d2c:	463a      	mov	r2, r7
 8016d2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8016d32:	e885 0003 	stmia.w	r5, {r0, r1}
 8016d36:	4631      	mov	r1, r6
 8016d38:	4628      	mov	r0, r5
 8016d3a:	f007 fcb5 	bl	801e6a8 <rcl_node_init>
 8016d3e:	b930      	cbnz	r0, 8016d4e <rclc_node_init_default+0x6e>
 8016d40:	b021      	add	sp, #132	; 0x84
 8016d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d46:	200b      	movs	r0, #11
 8016d48:	b021      	add	sp, #132	; 0x84
 8016d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d4e:	9003      	str	r0, [sp, #12]
 8016d50:	f000 f8a4 	bl	8016e9c <rcutils_reset_error>
 8016d54:	f000 f8a2 	bl	8016e9c <rcutils_reset_error>
 8016d58:	9803      	ldr	r0, [sp, #12]
 8016d5a:	b021      	add	sp, #132	; 0x84
 8016d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08016d60 <rclc_publisher_init_default>:
 8016d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d64:	fab3 f483 	clz	r4, r3
 8016d68:	b0a0      	sub	sp, #128	; 0x80
 8016d6a:	0964      	lsrs	r4, r4, #5
 8016d6c:	2a00      	cmp	r2, #0
 8016d6e:	bf08      	it	eq
 8016d70:	2401      	moveq	r4, #1
 8016d72:	2900      	cmp	r1, #0
 8016d74:	bf08      	it	eq
 8016d76:	2401      	moveq	r4, #1
 8016d78:	bb14      	cbnz	r4, 8016dc0 <rclc_publisher_init_default+0x60>
 8016d7a:	4605      	mov	r5, r0
 8016d7c:	b300      	cbz	r0, 8016dc0 <rclc_publisher_init_default+0x60>
 8016d7e:	ac04      	add	r4, sp, #16
 8016d80:	4698      	mov	r8, r3
 8016d82:	4617      	mov	r7, r2
 8016d84:	460e      	mov	r6, r1
 8016d86:	f7ff fe6d 	bl	8016a64 <rcl_get_zero_initialized_publisher>
 8016d8a:	6028      	str	r0, [r5, #0]
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	f7ff ff07 	bl	8016ba0 <rcl_publisher_get_default_options>
 8016d92:	2250      	movs	r2, #80	; 0x50
 8016d94:	490c      	ldr	r1, [pc, #48]	; (8016dc8 <rclc_publisher_init_default+0x68>)
 8016d96:	4620      	mov	r0, r4
 8016d98:	f00a fe72 	bl	8021a80 <memcpy>
 8016d9c:	4643      	mov	r3, r8
 8016d9e:	463a      	mov	r2, r7
 8016da0:	4631      	mov	r1, r6
 8016da2:	4628      	mov	r0, r5
 8016da4:	9400      	str	r4, [sp, #0]
 8016da6:	f7ff fe63 	bl	8016a70 <rcl_publisher_init>
 8016daa:	b910      	cbnz	r0, 8016db2 <rclc_publisher_init_default+0x52>
 8016dac:	b020      	add	sp, #128	; 0x80
 8016dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016db2:	9003      	str	r0, [sp, #12]
 8016db4:	f000 f872 	bl	8016e9c <rcutils_reset_error>
 8016db8:	9803      	ldr	r0, [sp, #12]
 8016dba:	b020      	add	sp, #128	; 0x80
 8016dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dc0:	200b      	movs	r0, #11
 8016dc2:	b020      	add	sp, #128	; 0x80
 8016dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dc8:	08026310 	.word	0x08026310

08016dcc <__default_zero_allocate>:
 8016dcc:	f00a bcca 	b.w	8021764 <calloc>

08016dd0 <__default_reallocate>:
 8016dd0:	f00b b876 	b.w	8021ec0 <realloc>

08016dd4 <__default_deallocate>:
 8016dd4:	f00a be3c 	b.w	8021a50 <free>

08016dd8 <__default_allocate>:
 8016dd8:	f00a be32 	b.w	8021a40 <malloc>

08016ddc <rcutils_get_zero_initialized_allocator>:
 8016ddc:	b470      	push	{r4, r5, r6}
 8016dde:	4d05      	ldr	r5, [pc, #20]	; (8016df4 <rcutils_get_zero_initialized_allocator+0x18>)
 8016de0:	4606      	mov	r6, r0
 8016de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016de4:	4634      	mov	r4, r6
 8016de6:	682d      	ldr	r5, [r5, #0]
 8016de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016dea:	4630      	mov	r0, r6
 8016dec:	6025      	str	r5, [r4, #0]
 8016dee:	bc70      	pop	{r4, r5, r6}
 8016df0:	4770      	bx	lr
 8016df2:	bf00      	nop
 8016df4:	08026360 	.word	0x08026360

08016df8 <rcutils_set_default_allocator>:
 8016df8:	b1a0      	cbz	r0, 8016e24 <rcutils_set_default_allocator+0x2c>
 8016dfa:	6802      	ldr	r2, [r0, #0]
 8016dfc:	b19a      	cbz	r2, 8016e26 <rcutils_set_default_allocator+0x2e>
 8016dfe:	6841      	ldr	r1, [r0, #4]
 8016e00:	b199      	cbz	r1, 8016e2a <rcutils_set_default_allocator+0x32>
 8016e02:	b470      	push	{r4, r5, r6}
 8016e04:	68c4      	ldr	r4, [r0, #12]
 8016e06:	b15c      	cbz	r4, 8016e20 <rcutils_set_default_allocator+0x28>
 8016e08:	6885      	ldr	r5, [r0, #8]
 8016e0a:	b185      	cbz	r5, 8016e2e <rcutils_set_default_allocator+0x36>
 8016e0c:	4b09      	ldr	r3, [pc, #36]	; (8016e34 <rcutils_set_default_allocator+0x3c>)
 8016e0e:	2600      	movs	r6, #0
 8016e10:	2001      	movs	r0, #1
 8016e12:	601a      	str	r2, [r3, #0]
 8016e14:	e9c3 1501 	strd	r1, r5, [r3, #4]
 8016e18:	e9c3 4603 	strd	r4, r6, [r3, #12]
 8016e1c:	bc70      	pop	{r4, r5, r6}
 8016e1e:	4770      	bx	lr
 8016e20:	4620      	mov	r0, r4
 8016e22:	e7fb      	b.n	8016e1c <rcutils_set_default_allocator+0x24>
 8016e24:	4770      	bx	lr
 8016e26:	4610      	mov	r0, r2
 8016e28:	4770      	bx	lr
 8016e2a:	4608      	mov	r0, r1
 8016e2c:	4770      	bx	lr
 8016e2e:	4628      	mov	r0, r5
 8016e30:	e7f4      	b.n	8016e1c <rcutils_set_default_allocator+0x24>
 8016e32:	bf00      	nop
 8016e34:	20000020 	.word	0x20000020

08016e38 <rcutils_get_default_allocator>:
 8016e38:	b470      	push	{r4, r5, r6}
 8016e3a:	4d05      	ldr	r5, [pc, #20]	; (8016e50 <rcutils_get_default_allocator+0x18>)
 8016e3c:	4606      	mov	r6, r0
 8016e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e40:	4634      	mov	r4, r6
 8016e42:	682d      	ldr	r5, [r5, #0]
 8016e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e46:	4630      	mov	r0, r6
 8016e48:	6025      	str	r5, [r4, #0]
 8016e4a:	bc70      	pop	{r4, r5, r6}
 8016e4c:	4770      	bx	lr
 8016e4e:	bf00      	nop
 8016e50:	20000020 	.word	0x20000020

08016e54 <rcutils_allocator_is_valid>:
 8016e54:	b158      	cbz	r0, 8016e6e <rcutils_allocator_is_valid+0x1a>
 8016e56:	6803      	ldr	r3, [r0, #0]
 8016e58:	b143      	cbz	r3, 8016e6c <rcutils_allocator_is_valid+0x18>
 8016e5a:	6843      	ldr	r3, [r0, #4]
 8016e5c:	b133      	cbz	r3, 8016e6c <rcutils_allocator_is_valid+0x18>
 8016e5e:	68c3      	ldr	r3, [r0, #12]
 8016e60:	b123      	cbz	r3, 8016e6c <rcutils_allocator_is_valid+0x18>
 8016e62:	6880      	ldr	r0, [r0, #8]
 8016e64:	3800      	subs	r0, #0
 8016e66:	bf18      	it	ne
 8016e68:	2001      	movne	r0, #1
 8016e6a:	4770      	bx	lr
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	4770      	bx	lr

08016e70 <rcutils_get_error_string>:
 8016e70:	4b06      	ldr	r3, [pc, #24]	; (8016e8c <rcutils_get_error_string+0x1c>)
 8016e72:	781b      	ldrb	r3, [r3, #0]
 8016e74:	b13b      	cbz	r3, 8016e86 <rcutils_get_error_string+0x16>
 8016e76:	4b06      	ldr	r3, [pc, #24]	; (8016e90 <rcutils_get_error_string+0x20>)
 8016e78:	781a      	ldrb	r2, [r3, #0]
 8016e7a:	b90a      	cbnz	r2, 8016e80 <rcutils_get_error_string+0x10>
 8016e7c:	2201      	movs	r2, #1
 8016e7e:	701a      	strb	r2, [r3, #0]
 8016e80:	4b04      	ldr	r3, [pc, #16]	; (8016e94 <rcutils_get_error_string+0x24>)
 8016e82:	7818      	ldrb	r0, [r3, #0]
 8016e84:	4770      	bx	lr
 8016e86:	4b04      	ldr	r3, [pc, #16]	; (8016e98 <rcutils_get_error_string+0x28>)
 8016e88:	7818      	ldrb	r0, [r3, #0]
 8016e8a:	4770      	bx	lr
 8016e8c:	20040d30 	.word	0x20040d30
 8016e90:	20040d31 	.word	0x20040d31
 8016e94:	20044080 	.word	0x20044080
 8016e98:	08026374 	.word	0x08026374

08016e9c <rcutils_reset_error>:
 8016e9c:	b430      	push	{r4, r5}
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	4c06      	ldr	r4, [pc, #24]	; (8016ebc <rcutils_reset_error+0x20>)
 8016ea2:	4a07      	ldr	r2, [pc, #28]	; (8016ec0 <rcutils_reset_error+0x24>)
 8016ea4:	2000      	movs	r0, #0
 8016ea6:	4d07      	ldr	r5, [pc, #28]	; (8016ec4 <rcutils_reset_error+0x28>)
 8016ea8:	2100      	movs	r1, #0
 8016eaa:	7023      	strb	r3, [r4, #0]
 8016eac:	4c06      	ldr	r4, [pc, #24]	; (8016ec8 <rcutils_reset_error+0x2c>)
 8016eae:	8013      	strh	r3, [r2, #0]
 8016eb0:	702b      	strb	r3, [r5, #0]
 8016eb2:	7023      	strb	r3, [r4, #0]
 8016eb4:	e9c2 0102 	strd	r0, r1, [r2, #8]
 8016eb8:	bc30      	pop	{r4, r5}
 8016eba:	4770      	bx	lr
 8016ebc:	20040d31 	.word	0x20040d31
 8016ec0:	20044088 	.word	0x20044088
 8016ec4:	20044080 	.word	0x20044080
 8016ec8:	20040d30 	.word	0x20040d30

08016ecc <rmw_get_default_publisher_options>:
 8016ecc:	2200      	movs	r2, #0
 8016ece:	6002      	str	r2, [r0, #0]
 8016ed0:	7102      	strb	r2, [r0, #4]
 8016ed2:	4770      	bx	lr

08016ed4 <rmw_publish>:
 8016ed4:	b180      	cbz	r0, 8016ef8 <rmw_publish+0x24>
 8016ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eda:	fab1 f681 	clz	r6, r1
 8016ede:	b08e      	sub	sp, #56	; 0x38
 8016ee0:	460d      	mov	r5, r1
 8016ee2:	0976      	lsrs	r6, r6, #5
 8016ee4:	b121      	cbz	r1, 8016ef0 <rmw_publish+0x1c>
 8016ee6:	4604      	mov	r4, r0
 8016ee8:	6800      	ldr	r0, [r0, #0]
 8016eea:	f000 f9f3 	bl	80172d4 <is_ertps_rmw_identifier_valid>
 8016eee:	b928      	cbnz	r0, 8016efc <rmw_publish+0x28>
 8016ef0:	2001      	movs	r0, #1
 8016ef2:	b00e      	add	sp, #56	; 0x38
 8016ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ef8:	2001      	movs	r0, #1
 8016efa:	4770      	bx	lr
 8016efc:	6864      	ldr	r4, [r4, #4]
 8016efe:	2c00      	cmp	r4, #0
 8016f00:	d0f6      	beq.n	8016ef0 <rmw_publish+0x1c>
 8016f02:	4f16      	ldr	r7, [pc, #88]	; (8016f5c <rmw_publish+0x88>)
 8016f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016f08:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016f0c:	a806      	add	r0, sp, #24
 8016f0e:	4639      	mov	r1, r7
 8016f10:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8016f14:	f841 3b04 	str.w	r3, [r1], #4
 8016f18:	f007 f88e 	bl	801e038 <ucdr_init_buffer>
 8016f1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016f20:	4628      	mov	r0, r5
 8016f22:	a906      	add	r1, sp, #24
 8016f24:	4798      	blx	r3
 8016f26:	2800      	cmp	r0, #0
 8016f28:	d0e2      	beq.n	8016ef0 <rmw_publish+0x1c>
 8016f2a:	a806      	add	r0, sp, #24
 8016f2c:	f007 f8b2 	bl	801e094 <ucdr_buffer_length>
 8016f30:	490b      	ldr	r1, [pc, #44]	; (8016f60 <rmw_publish+0x8c>)
 8016f32:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8016f34:	aa04      	add	r2, sp, #16
 8016f36:	1d04      	adds	r4, r0, #4
 8016f38:	4b0a      	ldr	r3, [pc, #40]	; (8016f64 <rmw_publish+0x90>)
 8016f3a:	f8d5 c000 	ldr.w	ip, [r5]
 8016f3e:	c903      	ldmia	r1, {r0, r1}
 8016f40:	e882 0003 	stmia.w	r2, {r0, r1}
 8016f44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016f46:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016f4a:	b2a3      	uxth	r3, r4
 8016f4c:	4628      	mov	r0, r5
 8016f4e:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8016f52:	463a      	mov	r2, r7
 8016f54:	2101      	movs	r1, #1
 8016f56:	47a0      	blx	r4
 8016f58:	4630      	mov	r0, r6
 8016f5a:	e7ca      	b.n	8016ef2 <rmw_publish+0x1e>
 8016f5c:	20040d34 	.word	0x20040d34
 8016f60:	08026388 	.word	0x08026388
 8016f64:	08026378 	.word	0x08026378

08016f68 <rmw_create_publisher>:
 8016f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f6c:	b085      	sub	sp, #20
 8016f6e:	2900      	cmp	r1, #0
 8016f70:	d06d      	beq.n	801704e <rmw_create_publisher+0xe6>
 8016f72:	4604      	mov	r4, r0
 8016f74:	2800      	cmp	r0, #0
 8016f76:	d06a      	beq.n	801704e <rmw_create_publisher+0xe6>
 8016f78:	6800      	ldr	r0, [r0, #0]
 8016f7a:	460e      	mov	r6, r1
 8016f7c:	4615      	mov	r5, r2
 8016f7e:	4698      	mov	r8, r3
 8016f80:	f000 f9a8 	bl	80172d4 <is_ertps_rmw_identifier_valid>
 8016f84:	f080 0001 	eor.w	r0, r0, #1
 8016f88:	f010 0fff 	tst.w	r0, #255	; 0xff
 8016f8c:	d15f      	bne.n	801704e <rmw_create_publisher+0xe6>
 8016f8e:	2d00      	cmp	r5, #0
 8016f90:	d05d      	beq.n	801704e <rmw_create_publisher+0xe6>
 8016f92:	782b      	ldrb	r3, [r5, #0]
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d05a      	beq.n	801704e <rmw_create_publisher+0xe6>
 8016f98:	fab8 f988 	clz	r9, r8
 8016f9c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8016fa0:	f1b8 0f00 	cmp.w	r8, #0
 8016fa4:	d053      	beq.n	801704e <rmw_create_publisher+0xe6>
 8016fa6:	2018      	movs	r0, #24
 8016fa8:	f008 fbc2 	bl	801f730 <rmw_allocate>
 8016fac:	f8c0 9004 	str.w	r9, [r0, #4]
 8016fb0:	4607      	mov	r7, r0
 8016fb2:	f008 fd9d 	bl	801faf0 <rmw_get_implementation_identifier>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	4628      	mov	r0, r5
 8016fba:	603b      	str	r3, [r7, #0]
 8016fbc:	f7e9 f982 	bl	80002c4 <strlen>
 8016fc0:	1c41      	adds	r1, r0, #1
 8016fc2:	4608      	mov	r0, r1
 8016fc4:	9103      	str	r1, [sp, #12]
 8016fc6:	f008 fbb3 	bl	801f730 <rmw_allocate>
 8016fca:	60b8      	str	r0, [r7, #8]
 8016fcc:	2800      	cmp	r0, #0
 8016fce:	d03e      	beq.n	801704e <rmw_create_publisher+0xe6>
 8016fd0:	9903      	ldr	r1, [sp, #12]
 8016fd2:	462b      	mov	r3, r5
 8016fd4:	4a20      	ldr	r2, [pc, #128]	; (8017058 <rmw_create_publisher+0xf0>)
 8016fd6:	f00b f839 	bl	802204c <sniprintf>
 8016fda:	4820      	ldr	r0, [pc, #128]	; (801705c <rmw_create_publisher+0xf4>)
 8016fdc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016fe0:	f008 fd52 	bl	801fa88 <get_memory>
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	d032      	beq.n	801704e <rmw_create_publisher+0xe6>
 8016fe8:	6884      	ldr	r4, [r0, #8]
 8016fea:	4641      	mov	r1, r8
 8016fec:	2250      	movs	r2, #80	; 0x50
 8016fee:	f104 0018 	add.w	r0, r4, #24
 8016ff2:	6127      	str	r7, [r4, #16]
 8016ff4:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
 8016ff8:	f00a fd42 	bl	8021a80 <memcpy>
 8016ffc:	4630      	mov	r0, r6
 8016ffe:	4918      	ldr	r1, [pc, #96]	; (8017060 <rmw_create_publisher+0xf8>)
 8017000:	f000 f976 	bl	80172f0 <get_message_typesupport_handle>
 8017004:	b318      	cbz	r0, 801704e <rmw_create_publisher+0xe6>
 8017006:	6843      	ldr	r3, [r0, #4]
 8017008:	6163      	str	r3, [r4, #20]
 801700a:	b303      	cbz	r3, 801704e <rmw_create_publisher+0xe6>
 801700c:	4628      	mov	r0, r5
 801700e:	22c8      	movs	r2, #200	; 0xc8
 8017010:	4914      	ldr	r1, [pc, #80]	; (8017064 <rmw_create_publisher+0xfc>)
 8017012:	2500      	movs	r5, #0
 8017014:	f000 f948 	bl	80172a8 <generate_topic_name>
 8017018:	22c8      	movs	r2, #200	; 0xc8
 801701a:	4913      	ldr	r1, [pc, #76]	; (8017068 <rmw_create_publisher+0x100>)
 801701c:	6960      	ldr	r0, [r4, #20]
 801701e:	f000 f909 	bl	8017234 <generate_type_name>
 8017022:	f898 3008 	ldrb.w	r3, [r8, #8]
 8017026:	f8d9 2014 	ldr.w	r2, [r9, #20]
 801702a:	3b02      	subs	r3, #2
 801702c:	6951      	ldr	r1, [r2, #20]
 801702e:	bf18      	it	ne
 8017030:	2301      	movne	r3, #1
 8017032:	6910      	ldr	r0, [r2, #16]
 8017034:	4a0b      	ldr	r2, [pc, #44]	; (8017064 <rmw_create_publisher+0xfc>)
 8017036:	e9cd 3500 	strd	r3, r5, [sp]
 801703a:	4b0b      	ldr	r3, [pc, #44]	; (8017068 <rmw_create_publisher+0x100>)
 801703c:	f001 fb76 	bl	801872c <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb>
 8017040:	66a0      	str	r0, [r4, #104]	; 0x68
 8017042:	b120      	cbz	r0, 801704e <rmw_create_publisher+0xe6>
 8017044:	4638      	mov	r0, r7
 8017046:	607c      	str	r4, [r7, #4]
 8017048:	b005      	add	sp, #20
 801704a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801704e:	2700      	movs	r7, #0
 8017050:	4638      	mov	r0, r7
 8017052:	b005      	add	sp, #20
 8017054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017058:	080263c4 	.word	0x080263c4
 801705c:	20043fb4 	.word	0x20043fb4
 8017060:	08026390 	.word	0x08026390
 8017064:	2004111c 	.word	0x2004111c
 8017068:	200411e4 	.word	0x200411e4

0801706c <rmw_publisher_get_actual_qos>:
 801706c:	2000      	movs	r0, #0
 801706e:	4770      	bx	lr

08017070 <rmw_destroy_publisher>:
 8017070:	2003      	movs	r0, #3
 8017072:	4770      	bx	lr

08017074 <rmw_ertps_init_service_memory>:
 8017074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017076:	4615      	mov	r5, r2
 8017078:	460c      	mov	r4, r1
 801707a:	4606      	mov	r6, r0
 801707c:	f7ff fc74 	bl	8016968 <sys_mutex_new>
 8017080:	b1b5      	cbz	r5, 80170b0 <rmw_ertps_init_service_memory+0x3c>
 8017082:	7c33      	ldrb	r3, [r6, #16]
 8017084:	b9a3      	cbnz	r3, 80170b0 <rmw_ertps_init_service_memory+0x3c>
 8017086:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 801708a:	2178      	movs	r1, #120	; 0x78
 801708c:	f240 1201 	movw	r2, #257	; 0x101
 8017090:	461f      	mov	r7, r3
 8017092:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8017096:	60f1      	str	r1, [r6, #12]
 8017098:	8232      	strh	r2, [r6, #16]
 801709a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801709e:	4621      	mov	r1, r4
 80170a0:	4630      	mov	r0, r6
 80170a2:	f008 fd09 	bl	801fab8 <put_memory>
 80170a6:	7327      	strb	r7, [r4, #12]
 80170a8:	60a4      	str	r4, [r4, #8]
 80170aa:	3478      	adds	r4, #120	; 0x78
 80170ac:	42a5      	cmp	r5, r4
 80170ae:	d1f6      	bne.n	801709e <rmw_ertps_init_service_memory+0x2a>
 80170b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170b2:	bf00      	nop

080170b4 <rmw_ertps_init_client_memory>:
 80170b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170b6:	4615      	mov	r5, r2
 80170b8:	460c      	mov	r4, r1
 80170ba:	4606      	mov	r6, r0
 80170bc:	f7ff fc54 	bl	8016968 <sys_mutex_new>
 80170c0:	b1b5      	cbz	r5, 80170f0 <rmw_ertps_init_client_memory+0x3c>
 80170c2:	7c33      	ldrb	r3, [r6, #16]
 80170c4:	b9a3      	cbnz	r3, 80170f0 <rmw_ertps_init_client_memory+0x3c>
 80170c6:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 80170ca:	2178      	movs	r1, #120	; 0x78
 80170cc:	f240 1201 	movw	r2, #257	; 0x101
 80170d0:	461f      	mov	r7, r3
 80170d2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80170d6:	60f1      	str	r1, [r6, #12]
 80170d8:	8232      	strh	r2, [r6, #16]
 80170da:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80170de:	4621      	mov	r1, r4
 80170e0:	4630      	mov	r0, r6
 80170e2:	f008 fce9 	bl	801fab8 <put_memory>
 80170e6:	7327      	strb	r7, [r4, #12]
 80170e8:	60a4      	str	r4, [r4, #8]
 80170ea:	3478      	adds	r4, #120	; 0x78
 80170ec:	42a5      	cmp	r5, r4
 80170ee:	d1f6      	bne.n	80170de <rmw_ertps_init_client_memory+0x2a>
 80170f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170f2:	bf00      	nop

080170f4 <rmw_ertps_init_publisher_memory>:
 80170f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f6:	4615      	mov	r5, r2
 80170f8:	460c      	mov	r4, r1
 80170fa:	4606      	mov	r6, r0
 80170fc:	f7ff fc34 	bl	8016968 <sys_mutex_new>
 8017100:	b1b5      	cbz	r5, 8017130 <rmw_ertps_init_publisher_memory+0x3c>
 8017102:	7c33      	ldrb	r3, [r6, #16]
 8017104:	b9a3      	cbnz	r3, 8017130 <rmw_ertps_init_publisher_memory+0x3c>
 8017106:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 801710a:	2170      	movs	r1, #112	; 0x70
 801710c:	f240 1201 	movw	r2, #257	; 0x101
 8017110:	461f      	mov	r7, r3
 8017112:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8017116:	60f1      	str	r1, [r6, #12]
 8017118:	8232      	strh	r2, [r6, #16]
 801711a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801711e:	4621      	mov	r1, r4
 8017120:	4630      	mov	r0, r6
 8017122:	f008 fcc9 	bl	801fab8 <put_memory>
 8017126:	7327      	strb	r7, [r4, #12]
 8017128:	60a4      	str	r4, [r4, #8]
 801712a:	3470      	adds	r4, #112	; 0x70
 801712c:	42a5      	cmp	r5, r4
 801712e:	d1f6      	bne.n	801711e <rmw_ertps_init_publisher_memory+0x2a>
 8017130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017132:	bf00      	nop

08017134 <rmw_ertps_init_subscription_memory>:
 8017134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017136:	4615      	mov	r5, r2
 8017138:	460c      	mov	r4, r1
 801713a:	4606      	mov	r6, r0
 801713c:	f7ff fc14 	bl	8016968 <sys_mutex_new>
 8017140:	b1b5      	cbz	r5, 8017170 <rmw_ertps_init_subscription_memory+0x3c>
 8017142:	7c33      	ldrb	r3, [r6, #16]
 8017144:	b9a3      	cbnz	r3, 8017170 <rmw_ertps_init_subscription_memory+0x3c>
 8017146:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 801714a:	2178      	movs	r1, #120	; 0x78
 801714c:	f240 1201 	movw	r2, #257	; 0x101
 8017150:	461f      	mov	r7, r3
 8017152:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8017156:	60f1      	str	r1, [r6, #12]
 8017158:	8232      	strh	r2, [r6, #16]
 801715a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801715e:	4621      	mov	r1, r4
 8017160:	4630      	mov	r0, r6
 8017162:	f008 fca9 	bl	801fab8 <put_memory>
 8017166:	7327      	strb	r7, [r4, #12]
 8017168:	60a4      	str	r4, [r4, #8]
 801716a:	3478      	adds	r4, #120	; 0x78
 801716c:	42a5      	cmp	r5, r4
 801716e:	d1f6      	bne.n	801715e <rmw_ertps_init_subscription_memory+0x2a>
 8017170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017172:	bf00      	nop

08017174 <rmw_ertps_init_node_memory>:
 8017174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017176:	4615      	mov	r5, r2
 8017178:	460c      	mov	r4, r1
 801717a:	4606      	mov	r6, r0
 801717c:	f7ff fbf4 	bl	8016968 <sys_mutex_new>
 8017180:	b1b5      	cbz	r5, 80171b0 <rmw_ertps_init_node_memory+0x3c>
 8017182:	7c33      	ldrb	r3, [r6, #16]
 8017184:	b9a3      	cbnz	r3, 80171b0 <rmw_ertps_init_node_memory+0x3c>
 8017186:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801718a:	2118      	movs	r1, #24
 801718c:	f240 1201 	movw	r2, #257	; 0x101
 8017190:	461f      	mov	r7, r3
 8017192:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8017196:	60f1      	str	r1, [r6, #12]
 8017198:	8232      	strh	r2, [r6, #16]
 801719a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801719e:	4621      	mov	r1, r4
 80171a0:	4630      	mov	r0, r6
 80171a2:	f008 fc89 	bl	801fab8 <put_memory>
 80171a6:	7327      	strb	r7, [r4, #12]
 80171a8:	60a4      	str	r4, [r4, #8]
 80171aa:	3418      	adds	r4, #24
 80171ac:	42a5      	cmp	r5, r4
 80171ae:	d1f6      	bne.n	801719e <rmw_ertps_init_node_memory+0x2a>
 80171b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171b2:	bf00      	nop

080171b4 <rmw_ertps_init_session_memory>:
 80171b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171b6:	4615      	mov	r5, r2
 80171b8:	460c      	mov	r4, r1
 80171ba:	4606      	mov	r6, r0
 80171bc:	f7ff fbd4 	bl	8016968 <sys_mutex_new>
 80171c0:	b1b5      	cbz	r5, 80171f0 <rmw_ertps_init_session_memory+0x3c>
 80171c2:	7c33      	ldrb	r3, [r6, #16]
 80171c4:	b9a3      	cbnz	r3, 80171f0 <rmw_ertps_init_session_memory+0x3c>
 80171c6:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80171ca:	2124      	movs	r1, #36	; 0x24
 80171cc:	f240 1201 	movw	r2, #257	; 0x101
 80171d0:	461f      	mov	r7, r3
 80171d2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80171d6:	60f1      	str	r1, [r6, #12]
 80171d8:	8232      	strh	r2, [r6, #16]
 80171da:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80171de:	4621      	mov	r1, r4
 80171e0:	4630      	mov	r0, r6
 80171e2:	f008 fc69 	bl	801fab8 <put_memory>
 80171e6:	7327      	strb	r7, [r4, #12]
 80171e8:	60a4      	str	r4, [r4, #8]
 80171ea:	3424      	adds	r4, #36	; 0x24
 80171ec:	42a5      	cmp	r5, r4
 80171ee:	d1f6      	bne.n	80171de <rmw_ertps_init_session_memory+0x2a>
 80171f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171f2:	bf00      	nop

080171f4 <rmw_ertps_init_static_input_buffer_memory>:
 80171f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171f6:	4616      	mov	r6, r2
 80171f8:	460c      	mov	r4, r1
 80171fa:	4605      	mov	r5, r0
 80171fc:	f7ff fbb4 	bl	8016968 <sys_mutex_new>
 8017200:	b1b6      	cbz	r6, 8017230 <rmw_ertps_init_static_input_buffer_memory+0x3c>
 8017202:	7c2b      	ldrb	r3, [r5, #16]
 8017204:	b9a3      	cbnz	r3, 8017230 <rmw_ertps_init_static_input_buffer_memory+0x3c>
 8017206:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801720a:	f240 1101 	movw	r1, #257	; 0x101
 801720e:	461f      	mov	r7, r3
 8017210:	606b      	str	r3, [r5, #4]
 8017212:	fb02 4606 	mla	r6, r2, r6, r4
 8017216:	8229      	strh	r1, [r5, #16]
 8017218:	e9c5 3202 	strd	r3, r2, [r5, #8]
 801721c:	4621      	mov	r1, r4
 801721e:	4628      	mov	r0, r5
 8017220:	f008 fc4a 	bl	801fab8 <put_memory>
 8017224:	60a4      	str	r4, [r4, #8]
 8017226:	7327      	strb	r7, [r4, #12]
 8017228:	f504 6486 	add.w	r4, r4, #1072	; 0x430
 801722c:	42a6      	cmp	r6, r4
 801722e:	d1f5      	bne.n	801721c <rmw_ertps_init_static_input_buffer_memory+0x28>
 8017230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017232:	bf00      	nop

08017234 <generate_type_name>:
 8017234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017236:	4607      	mov	r7, r0
 8017238:	b087      	sub	sp, #28
 801723a:	6840      	ldr	r0, [r0, #4]
 801723c:	460d      	mov	r5, r1
 801723e:	4616      	mov	r6, r2
 8017240:	f7e9 f840 	bl	80002c4 <strlen>
 8017244:	683b      	ldr	r3, [r7, #0]
 8017246:	4604      	mov	r4, r0
 8017248:	b11b      	cbz	r3, 8017252 <generate_type_name+0x1e>
 801724a:	4618      	mov	r0, r3
 801724c:	f7e9 f83a 	bl	80002c4 <strlen>
 8017250:	4603      	mov	r3, r0
 8017252:	2200      	movs	r2, #0
 8017254:	3408      	adds	r4, #8
 8017256:	702a      	strb	r2, [r5, #0]
 8017258:	441c      	add	r4, r3
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	b1ab      	cbz	r3, 801728a <generate_type_name+0x56>
 801725e:	f8df c044 	ldr.w	ip, [pc, #68]	; 80172a4 <generate_type_name+0x70>
 8017262:	46e6      	mov	lr, ip
 8017264:	6878      	ldr	r0, [r7, #4]
 8017266:	4631      	mov	r1, r6
 8017268:	4a0a      	ldr	r2, [pc, #40]	; (8017294 <generate_type_name+0x60>)
 801726a:	9004      	str	r0, [sp, #16]
 801726c:	4628      	mov	r0, r5
 801726e:	4d0a      	ldr	r5, [pc, #40]	; (8017298 <generate_type_name+0x64>)
 8017270:	9205      	str	r2, [sp, #20]
 8017272:	f8cd c00c 	str.w	ip, [sp, #12]
 8017276:	f8cd e000 	str.w	lr, [sp]
 801727a:	e9cd 5201 	strd	r5, r2, [sp, #4]
 801727e:	4a07      	ldr	r2, [pc, #28]	; (801729c <generate_type_name+0x68>)
 8017280:	f00a fee4 	bl	802204c <sniprintf>
 8017284:	4620      	mov	r0, r4
 8017286:	b007      	add	sp, #28
 8017288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801728a:	4b05      	ldr	r3, [pc, #20]	; (80172a0 <generate_type_name+0x6c>)
 801728c:	f8df c014 	ldr.w	ip, [pc, #20]	; 80172a4 <generate_type_name+0x70>
 8017290:	469e      	mov	lr, r3
 8017292:	e7e7      	b.n	8017264 <generate_type_name+0x30>
 8017294:	080263c8 	.word	0x080263c8
 8017298:	080263cc 	.word	0x080263cc
 801729c:	080263b8 	.word	0x080263b8
 80172a0:	080268fc 	.word	0x080268fc
 80172a4:	080263b4 	.word	0x080263b4

080172a8 <generate_topic_name>:
 80172a8:	b510      	push	{r4, lr}
 80172aa:	4614      	mov	r4, r2
 80172ac:	b082      	sub	sp, #8
 80172ae:	4b07      	ldr	r3, [pc, #28]	; (80172cc <generate_topic_name+0x24>)
 80172b0:	9000      	str	r0, [sp, #0]
 80172b2:	4608      	mov	r0, r1
 80172b4:	4a06      	ldr	r2, [pc, #24]	; (80172d0 <generate_topic_name+0x28>)
 80172b6:	4621      	mov	r1, r4
 80172b8:	f00a fec8 	bl	802204c <sniprintf>
 80172bc:	2800      	cmp	r0, #0
 80172be:	da02      	bge.n	80172c6 <generate_topic_name+0x1e>
 80172c0:	4284      	cmp	r4, r0
 80172c2:	bfd8      	it	le
 80172c4:	2000      	movle	r0, #0
 80172c6:	b002      	add	sp, #8
 80172c8:	bd10      	pop	{r4, pc}
 80172ca:	bf00      	nop
 80172cc:	080263d8 	.word	0x080263d8
 80172d0:	080263d0 	.word	0x080263d0

080172d4 <is_ertps_rmw_identifier_valid>:
 80172d4:	b510      	push	{r4, lr}
 80172d6:	4604      	mov	r4, r0
 80172d8:	b140      	cbz	r0, 80172ec <is_ertps_rmw_identifier_valid+0x18>
 80172da:	f008 fc09 	bl	801faf0 <rmw_get_implementation_identifier>
 80172de:	4601      	mov	r1, r0
 80172e0:	4620      	mov	r0, r4
 80172e2:	f7e8 ffe5 	bl	80002b0 <strcmp>
 80172e6:	fab0 f080 	clz	r0, r0
 80172ea:	0940      	lsrs	r0, r0, #5
 80172ec:	bd10      	pop	{r4, pc}
 80172ee:	bf00      	nop

080172f0 <get_message_typesupport_handle>:
 80172f0:	6883      	ldr	r3, [r0, #8]
 80172f2:	4718      	bx	r3

080172f4 <get_message_typesupport_handle_function>:
 80172f4:	b510      	push	{r4, lr}
 80172f6:	4604      	mov	r4, r0
 80172f8:	6800      	ldr	r0, [r0, #0]
 80172fa:	f7e8 ffd9 	bl	80002b0 <strcmp>
 80172fe:	2800      	cmp	r0, #0
 8017300:	bf0c      	ite	eq
 8017302:	4620      	moveq	r0, r4
 8017304:	2000      	movne	r0, #0
 8017306:	bd10      	pop	{r4, pc}

08017308 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8017308:	4b04      	ldr	r3, [pc, #16]	; (801731c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801730a:	681a      	ldr	r2, [r3, #0]
 801730c:	b10a      	cbz	r2, 8017312 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801730e:	4803      	ldr	r0, [pc, #12]	; (801731c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8017310:	4770      	bx	lr
 8017312:	4a03      	ldr	r2, [pc, #12]	; (8017320 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8017314:	4801      	ldr	r0, [pc, #4]	; (801731c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8017316:	6812      	ldr	r2, [r2, #0]
 8017318:	601a      	str	r2, [r3, #0]
 801731a:	4770      	bx	lr
 801731c:	2000003c 	.word	0x2000003c
 8017320:	200000b8 	.word	0x200000b8

08017324 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8017324:	4a02      	ldr	r2, [pc, #8]	; (8017330 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8017326:	4b03      	ldr	r3, [pc, #12]	; (8017334 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8017328:	6812      	ldr	r2, [r2, #0]
 801732a:	601a      	str	r2, [r3, #0]
 801732c:	4770      	bx	lr
 801732e:	bf00      	nop
 8017330:	200000b8 	.word	0x200000b8
 8017334:	2000003c 	.word	0x2000003c

08017338 <Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8017338:	f008 bd72 	b.w	801fe20 <std_msgs__msg__Int32__init>

0801733c <Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 801733c:	f008 bd74 	b.w	801fe28 <std_msgs__msg__Int32__fini>

08017340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8017340:	4b04      	ldr	r3, [pc, #16]	; (8017354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8017342:	681a      	ldr	r2, [r3, #0]
 8017344:	b10a      	cbz	r2, 801734a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8017346:	4803      	ldr	r0, [pc, #12]	; (8017354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8017348:	4770      	bx	lr
 801734a:	4a03      	ldr	r2, [pc, #12]	; (8017358 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 801734c:	4801      	ldr	r0, [pc, #4]	; (8017354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801734e:	6812      	ldr	r2, [r2, #0]
 8017350:	601a      	str	r2, [r3, #0]
 8017352:	4770      	bx	lr
 8017354:	2000007c 	.word	0x2000007c
 8017358:	200000bc 	.word	0x200000bc

0801735c <_Int32__max_serialized_size>:
 801735c:	2104      	movs	r1, #4
 801735e:	2000      	movs	r0, #0
 8017360:	b508      	push	{r3, lr}
 8017362:	f006 fe6d 	bl	801e040 <ucdr_alignment>
 8017366:	3004      	adds	r0, #4
 8017368:	bd08      	pop	{r3, pc}
 801736a:	bf00      	nop

0801736c <_Int32__cdr_deserialize>:
 801736c:	b109      	cbz	r1, 8017372 <_Int32__cdr_deserialize+0x6>
 801736e:	f006 bd85 	b.w	801de7c <ucdr_deserialize_int32_t>
 8017372:	4608      	mov	r0, r1
 8017374:	4770      	bx	lr
 8017376:	bf00      	nop

08017378 <get_serialized_size_std_msgs__msg__Int32>:
 8017378:	b130      	cbz	r0, 8017388 <get_serialized_size_std_msgs__msg__Int32+0x10>
 801737a:	4608      	mov	r0, r1
 801737c:	2104      	movs	r1, #4
 801737e:	b508      	push	{r3, lr}
 8017380:	f006 fe5e 	bl	801e040 <ucdr_alignment>
 8017384:	3004      	adds	r0, #4
 8017386:	bd08      	pop	{r3, pc}
 8017388:	4770      	bx	lr
 801738a:	bf00      	nop

0801738c <_Int32__cdr_serialize>:
 801738c:	460a      	mov	r2, r1
 801738e:	b118      	cbz	r0, 8017398 <_Int32__cdr_serialize+0xc>
 8017390:	6801      	ldr	r1, [r0, #0]
 8017392:	4610      	mov	r0, r2
 8017394:	f006 bcda 	b.w	801dd4c <ucdr_serialize_int32_t>
 8017398:	4770      	bx	lr
 801739a:	bf00      	nop

0801739c <_Int32__get_serialized_size>:
 801739c:	b130      	cbz	r0, 80173ac <_Int32__get_serialized_size+0x10>
 801739e:	2104      	movs	r1, #4
 80173a0:	2000      	movs	r0, #0
 80173a2:	b508      	push	{r3, lr}
 80173a4:	f006 fe4c 	bl	801e040 <ucdr_alignment>
 80173a8:	3004      	adds	r0, #4
 80173aa:	bd08      	pop	{r3, pc}
 80173ac:	4770      	bx	lr
 80173ae:	bf00      	nop

080173b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80173b0:	4800      	ldr	r0, [pc, #0]	; (80173b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 80173b2:	4770      	bx	lr
 80173b4:	20000088 	.word	0x20000088

080173b8 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE16registerCallbackEPFvPvRKNS_17ReaderCacheChangeEES3_>:
 80173b8:	b109      	cbz	r1, 80173be <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE16registerCallbackEPFvPvRKNS_17ReaderCacheChangeEES3_+0x6>
 80173ba:	e9c0 12c6 	strd	r1, r2, [r0, #792]	; 0x318
 80173be:	4770      	bx	lr

080173c0 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE>:
 80173c0:	4770      	bx	lr
 80173c2:	bf00      	nop

080173c4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE>:
 80173c4:	b4f0      	push	{r4, r5, r6, r7}
 80173c6:	f8d0 71e4 	ldr.w	r7, [r0, #484]	; 0x1e4
 80173ca:	2f05      	cmp	r7, #5
 80173cc:	d013      	beq.n	80173f6 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x32>
 80173ce:	f890 31e0 	ldrb.w	r3, [r0, #480]	; 0x1e0
 80173d2:	4606      	mov	r6, r0
 80173d4:	f013 0501 	ands.w	r5, r3, #1
 80173d8:	d034      	beq.n	8017444 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x80>
 80173da:	0798      	lsls	r0, r3, #30
 80173dc:	d534      	bpl.n	8017448 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x84>
 80173de:	075a      	lsls	r2, r3, #29
 80173e0:	d535      	bpl.n	801744e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x8a>
 80173e2:	071d      	lsls	r5, r3, #28
 80173e4:	d50c      	bpl.n	8017400 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x3c>
 80173e6:	06dc      	lsls	r4, r3, #27
 80173e8:	d534      	bpl.n	8017454 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x90>
 80173ea:	0698      	lsls	r0, r3, #26
 80173ec:	d535      	bpl.n	801745a <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x96>
 80173ee:	065a      	lsls	r2, r3, #25
 80173f0:	d536      	bpl.n	8017460 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x9c>
 80173f2:	09da      	lsrs	r2, r3, #7
 80173f4:	d022      	beq.n	801743c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x78>
 80173f6:	f04f 0c00 	mov.w	ip, #0
 80173fa:	bcf0      	pop	{r4, r5, r6, r7}
 80173fc:	4660      	mov	r0, ip
 80173fe:	4770      	bx	lr
 8017400:	2008      	movs	r0, #8
 8017402:	2503      	movs	r5, #3
 8017404:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8017408:	4303      	orrs	r3, r0
 801740a:	460c      	mov	r4, r1
 801740c:	3701      	adds	r7, #1
 801740e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8017412:	f886 31e0 	strb.w	r3, [r6, #480]	; 0x1e0
 8017416:	f04f 0c01 	mov.w	ip, #1
 801741a:	f505 75f4 	add.w	r5, r5, #488	; 0x1e8
 801741e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801742a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801742e:	e885 0003 	stmia.w	r5, {r0, r1}
 8017432:	4660      	mov	r0, ip
 8017434:	f8c6 71e4 	str.w	r7, [r6, #484]	; 0x1e4
 8017438:	bcf0      	pop	{r4, r5, r6, r7}
 801743a:	4770      	bx	lr
 801743c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8017440:	2507      	movs	r5, #7
 8017442:	e7df      	b.n	8017404 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 8017444:	2001      	movs	r0, #1
 8017446:	e7dd      	b.n	8017404 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 8017448:	2002      	movs	r0, #2
 801744a:	2501      	movs	r5, #1
 801744c:	e7da      	b.n	8017404 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 801744e:	2004      	movs	r0, #4
 8017450:	2502      	movs	r5, #2
 8017452:	e7d7      	b.n	8017404 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 8017454:	2010      	movs	r0, #16
 8017456:	2504      	movs	r5, #4
 8017458:	e7d4      	b.n	8017404 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 801745a:	2020      	movs	r0, #32
 801745c:	2505      	movs	r5, #5
 801745e:	e7d1      	b.n	8017404 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 8017460:	2040      	movs	r0, #64	; 0x40
 8017462:	2506      	movs	r5, #6
 8017464:	e7ce      	b.n	8017404 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 8017466:	bf00      	nop

08017468 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED1Ev>:
 8017468:	b570      	push	{r4, r5, r6, lr}
 801746a:	4b0a      	ldr	r3, [pc, #40]	; (8017494 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED1Ev+0x2c>)
 801746c:	4606      	mov	r6, r0
 801746e:	f500 64c2 	add.w	r4, r0, #1552	; 0x610
 8017472:	f200 452c 	addw	r5, r0, #1068	; 0x42c
 8017476:	6003      	str	r3, [r0, #0]
 8017478:	f104 000c 	add.w	r0, r4, #12
 801747c:	3c2c      	subs	r4, #44	; 0x2c
 801747e:	f003 f9b5 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 8017482:	42ac      	cmp	r4, r5
 8017484:	d1f8      	bne.n	8017478 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED1Ev+0x10>
 8017486:	f506 6088 	add.w	r0, r6, #1088	; 0x440
 801748a:	f003 f9af 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801748e:	4630      	mov	r0, r6
 8017490:	bd70      	pop	{r4, r5, r6, pc}
 8017492:	bf00      	nop
 8017494:	08026564 	.word	0x08026564

08017498 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEED1Ev>:
 8017498:	4b04      	ldr	r3, [pc, #16]	; (80174ac <_ZN4rtps15StatefulReaderTINS_9UdpDriverEED1Ev+0x14>)
 801749a:	b510      	push	{r4, lr}
 801749c:	4604      	mov	r4, r0
 801749e:	6003      	str	r3, [r0, #0]
 80174a0:	f500 7043 	add.w	r0, r0, #780	; 0x30c
 80174a4:	f003 f9a2 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 80174a8:	4620      	mov	r0, r4
 80174aa:	bd10      	pop	{r4, pc}
 80174ac:	08026590 	.word	0x08026590

080174b0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEED0Ev>:
 80174b0:	4b07      	ldr	r3, [pc, #28]	; (80174d0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEED0Ev+0x20>)
 80174b2:	b510      	push	{r4, lr}
 80174b4:	4604      	mov	r4, r0
 80174b6:	6003      	str	r3, [r0, #0]
 80174b8:	f500 7043 	add.w	r0, r0, #780	; 0x30c
 80174bc:	f003 f996 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 80174c0:	4620      	mov	r0, r4
 80174c2:	f44f 7149 	mov.w	r1, #804	; 0x324
 80174c6:	f009 fbdf 	bl	8020c88 <_ZdlPvj>
 80174ca:	4620      	mov	r0, r4
 80174cc:	bd10      	pop	{r4, pc}
 80174ce:	bf00      	nop
 80174d0:	08026590 	.word	0x08026590

080174d4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE21setAllChangesToUnsentEv>:
 80174d4:	b538      	push	{r3, r4, r5, lr}
 80174d6:	f200 452c 	addw	r5, r0, #1068	; 0x42c
 80174da:	4604      	mov	r4, r0
 80174dc:	4628      	mov	r0, r5
 80174de:	f7ff fa66 	bl	80169ae <sys_mutex_lock>
 80174e2:	f504 608b 	add.w	r0, r4, #1112	; 0x458
 80174e6:	f005 f925 	bl	801c734 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>
 80174ea:	f504 638a 	add.w	r3, r4, #1104	; 0x450
 80174ee:	f8d4 2430 	ldr.w	r2, [r4, #1072]	; 0x430
 80174f2:	c803      	ldmia	r0, {r0, r1}
 80174f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80174f8:	b11a      	cbz	r2, 8017502 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE21setAllChangesToUnsentEv+0x2e>
 80174fa:	4621      	mov	r1, r4
 80174fc:	4610      	mov	r0, r2
 80174fe:	f005 fc6d 	bl	801cddc <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE>
 8017502:	4628      	mov	r0, r5
 8017504:	f7ff fa62 	bl	80169cc <sys_mutex_unlock>
 8017508:	bd38      	pop	{r3, r4, r5, pc}
 801750a:	4628      	mov	r0, r5
 801750c:	f7ff fa5e 	bl	80169cc <sys_mutex_unlock>
 8017510:	f009 fbbc 	bl	8020c8c <__cxa_end_cleanup>

08017514 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE21setAllChangesToUnsentEv>:
 8017514:	b538      	push	{r3, r4, r5, lr}
 8017516:	f200 452c 	addw	r5, r0, #1068	; 0x42c
 801751a:	4604      	mov	r4, r0
 801751c:	4628      	mov	r0, r5
 801751e:	f7ff fa46 	bl	80169ae <sys_mutex_lock>
 8017522:	f504 608b 	add.w	r0, r4, #1112	; 0x458
 8017526:	f005 f905 	bl	801c734 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>
 801752a:	f504 638a 	add.w	r3, r4, #1104	; 0x450
 801752e:	f8d4 2430 	ldr.w	r2, [r4, #1072]	; 0x430
 8017532:	c803      	ldmia	r0, {r0, r1}
 8017534:	e883 0003 	stmia.w	r3, {r0, r1}
 8017538:	b11a      	cbz	r2, 8017542 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE21setAllChangesToUnsentEv+0x2e>
 801753a:	4621      	mov	r1, r4
 801753c:	4610      	mov	r0, r2
 801753e:	f005 fc4d 	bl	801cddc <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE>
 8017542:	4628      	mov	r0, r5
 8017544:	f7ff fa42 	bl	80169cc <sys_mutex_unlock>
 8017548:	bd38      	pop	{r3, r4, r5, pc}
 801754a:	4628      	mov	r0, r5
 801754c:	f7ff fa3e 	bl	80169cc <sys_mutex_unlock>
 8017550:	f009 fb9c 	bl	8020c8c <__cxa_end_cleanup>

08017554 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE>:
 8017554:	2901      	cmp	r1, #1
 8017556:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801755a:	b089      	sub	sp, #36	; 0x24
 801755c:	d13c      	bne.n	80175d8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x84>
 801755e:	f200 492c 	addw	r9, r0, #1068	; 0x42c
 8017562:	f500 688b 	add.w	r8, r0, #1112	; 0x458
 8017566:	4604      	mov	r4, r0
 8017568:	4617      	mov	r7, r2
 801756a:	4648      	mov	r0, r9
 801756c:	461e      	mov	r6, r3
 801756e:	f7ff fa1e 	bl	80169ae <sys_mutex_lock>
 8017572:	4640      	mov	r0, r8
 8017574:	f005 f8d0 	bl	801c718 <_ZNK4rtps18SimpleHistoryCache6isFullEv>
 8017578:	b178      	cbz	r0, 801759a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x46>
 801757a:	4640      	mov	r0, r8
 801757c:	f005 f8da 	bl	801c734 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>
 8017580:	f8d4 1450 	ldr.w	r1, [r4, #1104]	; 0x450
 8017584:	e9d0 2300 	ldrd	r2, r3, [r0]
 8017588:	3301      	adds	r3, #1
 801758a:	bf08      	it	eq
 801758c:	3201      	addeq	r2, #1
 801758e:	4291      	cmp	r1, r2
 8017590:	da28      	bge.n	80175e4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x90>
 8017592:	f8c4 2450 	str.w	r2, [r4, #1104]	; 0x450
 8017596:	f8c4 3454 	str.w	r3, [r4, #1108]	; 0x454
 801759a:	ab03      	add	r3, sp, #12
 801759c:	ad11      	add	r5, sp, #68	; 0x44
 801759e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80175a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80175a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80175aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80175ac:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80175b0:	4632      	mov	r2, r6
 80175b2:	4639      	mov	r1, r7
 80175b4:	4640      	mov	r0, r8
 80175b6:	f005 f8d9 	bl	801c76c <_ZN4rtps18SimpleHistoryCache9addChangeEPKhtNS_6Guid_tENS_16SequenceNumber_tE>
 80175ba:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
 80175be:	9007      	str	r0, [sp, #28]
 80175c0:	b11b      	cbz	r3, 80175ca <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x76>
 80175c2:	4621      	mov	r1, r4
 80175c4:	4618      	mov	r0, r3
 80175c6:	f005 fc09 	bl	801cddc <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE>
 80175ca:	4648      	mov	r0, r9
 80175cc:	f7ff f9fe 	bl	80169cc <sys_mutex_unlock>
 80175d0:	9807      	ldr	r0, [sp, #28]
 80175d2:	b009      	add	sp, #36	; 0x24
 80175d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175d8:	2300      	movs	r3, #0
 80175da:	9307      	str	r3, [sp, #28]
 80175dc:	9807      	ldr	r0, [sp, #28]
 80175de:	b009      	add	sp, #36	; 0x24
 80175e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175e4:	d1d9      	bne.n	801759a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x46>
 80175e6:	f8d4 1454 	ldr.w	r1, [r4, #1108]	; 0x454
 80175ea:	4299      	cmp	r1, r3
 80175ec:	d2d5      	bcs.n	801759a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x46>
 80175ee:	e7d0      	b.n	8017592 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x3e>
 80175f0:	4648      	mov	r0, r9
 80175f2:	f7ff f9eb 	bl	80169cc <sys_mutex_unlock>
 80175f6:	f009 fb49 	bl	8020c8c <__cxa_end_cleanup>
 80175fa:	bf00      	nop

080175fc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE>:
 80175fc:	2901      	cmp	r1, #1
 80175fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017602:	b087      	sub	sp, #28
 8017604:	d13c      	bne.n	8017680 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x84>
 8017606:	f200 492c 	addw	r9, r0, #1068	; 0x42c
 801760a:	f500 688b 	add.w	r8, r0, #1112	; 0x458
 801760e:	4604      	mov	r4, r0
 8017610:	4617      	mov	r7, r2
 8017612:	4648      	mov	r0, r9
 8017614:	461e      	mov	r6, r3
 8017616:	f7ff f9ca 	bl	80169ae <sys_mutex_lock>
 801761a:	4640      	mov	r0, r8
 801761c:	f005 f87c 	bl	801c718 <_ZNK4rtps18SimpleHistoryCache6isFullEv>
 8017620:	b178      	cbz	r0, 8017642 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x46>
 8017622:	4640      	mov	r0, r8
 8017624:	f005 f886 	bl	801c734 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>
 8017628:	f8d4 1450 	ldr.w	r1, [r4, #1104]	; 0x450
 801762c:	e9d0 2300 	ldrd	r2, r3, [r0]
 8017630:	3301      	adds	r3, #1
 8017632:	bf08      	it	eq
 8017634:	3201      	addeq	r2, #1
 8017636:	4291      	cmp	r1, r2
 8017638:	da27      	bge.n	801768a <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x8e>
 801763a:	f8c4 2450 	str.w	r2, [r4, #1104]	; 0x450
 801763e:	f8c4 3454 	str.w	r3, [r4, #1108]	; 0x454
 8017642:	ab03      	add	r3, sp, #12
 8017644:	ad0f      	add	r5, sp, #60	; 0x3c
 8017646:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 801764a:	e883 0003 	stmia.w	r3, {r0, r1}
 801764e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017654:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017658:	4632      	mov	r2, r6
 801765a:	4639      	mov	r1, r7
 801765c:	4640      	mov	r0, r8
 801765e:	f005 f885 	bl	801c76c <_ZN4rtps18SimpleHistoryCache9addChangeEPKhtNS_6Guid_tENS_16SequenceNumber_tE>
 8017662:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
 8017666:	4605      	mov	r5, r0
 8017668:	b11b      	cbz	r3, 8017672 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x76>
 801766a:	4621      	mov	r1, r4
 801766c:	4618      	mov	r0, r3
 801766e:	f005 fbb5 	bl	801cddc <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE>
 8017672:	4648      	mov	r0, r9
 8017674:	f7ff f9aa 	bl	80169cc <sys_mutex_unlock>
 8017678:	4628      	mov	r0, r5
 801767a:	b007      	add	sp, #28
 801767c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017680:	2500      	movs	r5, #0
 8017682:	4628      	mov	r0, r5
 8017684:	b007      	add	sp, #28
 8017686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801768a:	d1da      	bne.n	8017642 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x46>
 801768c:	f8d4 1454 	ldr.w	r1, [r4, #1108]	; 0x454
 8017690:	4299      	cmp	r1, r3
 8017692:	d2d6      	bcs.n	8017642 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x46>
 8017694:	e7d1      	b.n	801763a <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x3e>
 8017696:	4648      	mov	r0, r9
 8017698:	f7ff f998 	bl	80169cc <sys_mutex_unlock>
 801769c:	f009 faf6 	bl	8020c8c <__cxa_end_cleanup>

080176a0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED1Ev>:
 80176a0:	4911      	ldr	r1, [pc, #68]	; (80176e8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED1Ev+0x48>)
 80176a2:	2200      	movs	r2, #0
 80176a4:	f890 3651 	ldrb.w	r3, [r0, #1617]	; 0x651
 80176a8:	b570      	push	{r4, r5, r6, lr}
 80176aa:	4605      	mov	r5, r0
 80176ac:	6001      	str	r1, [r0, #0]
 80176ae:	f880 2650 	strb.w	r2, [r0, #1616]	; 0x650
 80176b2:	b13b      	cbz	r3, 80176c4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED1Ev+0x24>
 80176b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80176b8:	f7f6 f8ce 	bl	800d858 <sys_msleep>
 80176bc:	f895 3651 	ldrb.w	r3, [r5, #1617]	; 0x651
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d1f7      	bne.n	80176b4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED1Ev+0x14>
 80176c4:	f505 64c2 	add.w	r4, r5, #1552	; 0x610
 80176c8:	f205 462c 	addw	r6, r5, #1068	; 0x42c
 80176cc:	f104 000c 	add.w	r0, r4, #12
 80176d0:	3c2c      	subs	r4, #44	; 0x2c
 80176d2:	f003 f88b 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 80176d6:	42b4      	cmp	r4, r6
 80176d8:	d1f8      	bne.n	80176cc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED1Ev+0x2c>
 80176da:	f505 6088 	add.w	r0, r5, #1088	; 0x440
 80176de:	f003 f885 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 80176e2:	4628      	mov	r0, r5
 80176e4:	bd70      	pop	{r4, r5, r6, pc}
 80176e6:	bf00      	nop
 80176e8:	080265b8 	.word	0x080265b8

080176ec <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED0Ev>:
 80176ec:	b570      	push	{r4, r5, r6, lr}
 80176ee:	4b0c      	ldr	r3, [pc, #48]	; (8017720 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED0Ev+0x34>)
 80176f0:	4604      	mov	r4, r0
 80176f2:	f500 65c2 	add.w	r5, r0, #1552	; 0x610
 80176f6:	f200 462c 	addw	r6, r0, #1068	; 0x42c
 80176fa:	6003      	str	r3, [r0, #0]
 80176fc:	f105 000c 	add.w	r0, r5, #12
 8017700:	3d2c      	subs	r5, #44	; 0x2c
 8017702:	f003 f873 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 8017706:	42b5      	cmp	r5, r6
 8017708:	d1f8      	bne.n	80176fc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED0Ev+0x10>
 801770a:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 801770e:	f003 f86d 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 8017712:	4620      	mov	r0, r4
 8017714:	f44f 61c9 	mov.w	r1, #1608	; 0x648
 8017718:	f009 fab6 	bl	8020c88 <_ZdlPvj>
 801771c:	4620      	mov	r0, r4
 801771e:	bd70      	pop	{r4, r5, r6, pc}
 8017720:	08026564 	.word	0x08026564

08017724 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE>:
 8017724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017728:	f500 7848 	add.w	r8, r0, #800	; 0x320
 801772c:	4605      	mov	r5, r0
 801772e:	4689      	mov	r9, r1
 8017730:	4640      	mov	r0, r8
 8017732:	f7ff f93c 	bl	80169ae <sys_mutex_lock>
 8017736:	f895 61e0 	ldrb.w	r6, [r5, #480]	; 0x1e0
 801773a:	f8d5 71e4 	ldr.w	r7, [r5, #484]	; 0x1e4
 801773e:	07f2      	lsls	r2, r6, #31
 8017740:	d417      	bmi.n	8017772 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x4e>
 8017742:	b18f      	cbz	r7, 8017768 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x44>
 8017744:	2201      	movs	r2, #1
 8017746:	f002 0307 	and.w	r3, r2, #7
 801774a:	1c50      	adds	r0, r2, #1
 801774c:	4614      	mov	r4, r2
 801774e:	fa46 f303 	asr.w	r3, r6, r3
 8017752:	f003 0301 	and.w	r3, r3, #1
 8017756:	2a04      	cmp	r2, #4
 8017758:	bf88      	it	hi
 801775a:	f043 0301 	orrhi.w	r3, r3, #1
 801775e:	b2c2      	uxtb	r2, r0
 8017760:	2b00      	cmp	r3, #0
 8017762:	d0f0      	beq.n	8017746 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x22>
 8017764:	2c05      	cmp	r4, #5
 8017766:	d105      	bne.n	8017774 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x50>
 8017768:	4640      	mov	r0, r8
 801776a:	f7ff f92f 	bl	80169cc <sys_mutex_unlock>
 801776e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017772:	2400      	movs	r4, #0
 8017774:	f505 7bf0 	add.w	fp, r5, #480	; 0x1e0
 8017778:	f04f 0a38 	mov.w	sl, #56	; 0x38
 801777c:	2308      	movs	r3, #8
 801777e:	220c      	movs	r2, #12
 8017780:	4649      	mov	r1, r9
 8017782:	fb1a 3004 	smlabb	r0, sl, r4, r3
 8017786:	4458      	add	r0, fp
 8017788:	f00a f96a 	bl	8021a60 <memcmp>
 801778c:	b170      	cbz	r0, 80177ac <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x88>
 801778e:	b917      	cbnz	r7, 8017796 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x72>
 8017790:	e7ea      	b.n	8017768 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x44>
 8017792:	2c04      	cmp	r4, #4
 8017794:	d807      	bhi.n	80177a6 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x82>
 8017796:	3401      	adds	r4, #1
 8017798:	f004 0307 	and.w	r3, r4, #7
 801779c:	b2e4      	uxtb	r4, r4
 801779e:	fa46 f303 	asr.w	r3, r6, r3
 80177a2:	07db      	lsls	r3, r3, #31
 80177a4:	d5f5      	bpl.n	8017792 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x6e>
 80177a6:	2c05      	cmp	r4, #5
 80177a8:	d1e8      	bne.n	801777c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x58>
 80177aa:	e7dd      	b.n	8017768 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x44>
 80177ac:	f3c4 03c7 	ubfx	r3, r4, #3, #8
 80177b0:	2201      	movs	r2, #1
 80177b2:	f004 0407 	and.w	r4, r4, #7
 80177b6:	3f01      	subs	r7, #1
 80177b8:	442b      	add	r3, r5
 80177ba:	4640      	mov	r0, r8
 80177bc:	40a2      	lsls	r2, r4
 80177be:	f893 41e0 	ldrb.w	r4, [r3, #480]	; 0x1e0
 80177c2:	ea24 0402 	bic.w	r4, r4, r2
 80177c6:	f883 41e0 	strb.w	r4, [r3, #480]	; 0x1e0
 80177ca:	f8c5 71e4 	str.w	r7, [r5, #484]	; 0x1e4
 80177ce:	f7ff f8fd 	bl	80169cc <sys_mutex_unlock>
 80177d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177d6:	bf00      	nop

080177d8 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE>:
 80177d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177dc:	f500 7a48 	add.w	sl, r0, #800	; 0x320
 80177e0:	4606      	mov	r6, r0
 80177e2:	b083      	sub	sp, #12
 80177e4:	460f      	mov	r7, r1
 80177e6:	4650      	mov	r0, sl
 80177e8:	f7ff f8e1 	bl	80169ae <sys_mutex_lock>
 80177ec:	f896 91e0 	ldrb.w	r9, [r6, #480]	; 0x1e0
 80177f0:	f8d6 81e4 	ldr.w	r8, [r6, #484]	; 0x1e4
 80177f4:	f019 0f01 	tst.w	r9, #1
 80177f8:	d11a      	bne.n	8017830 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x58>
 80177fa:	f1b8 0f00 	cmp.w	r8, #0
 80177fe:	d011      	beq.n	8017824 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x4c>
 8017800:	2201      	movs	r2, #1
 8017802:	f002 0307 	and.w	r3, r2, #7
 8017806:	1c51      	adds	r1, r2, #1
 8017808:	4614      	mov	r4, r2
 801780a:	fa49 f303 	asr.w	r3, r9, r3
 801780e:	f003 0301 	and.w	r3, r3, #1
 8017812:	2a04      	cmp	r2, #4
 8017814:	bf88      	it	hi
 8017816:	f043 0301 	orrhi.w	r3, r3, #1
 801781a:	b2ca      	uxtb	r2, r1
 801781c:	2b00      	cmp	r3, #0
 801781e:	d0f0      	beq.n	8017802 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x2a>
 8017820:	2c05      	cmp	r4, #5
 8017822:	d106      	bne.n	8017832 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x5a>
 8017824:	4650      	mov	r0, sl
 8017826:	f7ff f8d1 	bl	80169cc <sys_mutex_unlock>
 801782a:	b003      	add	sp, #12
 801782c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017830:	2400      	movs	r4, #0
 8017832:	f506 73f0 	add.w	r3, r6, #480	; 0x1e0
 8017836:	f107 0b0c 	add.w	fp, r7, #12
 801783a:	9601      	str	r6, [sp, #4]
 801783c:	9300      	str	r3, [sp, #0]
 801783e:	2338      	movs	r3, #56	; 0x38
 8017840:	2208      	movs	r2, #8
 8017842:	4639      	mov	r1, r7
 8017844:	fb13 2504 	smlabb	r5, r3, r4, r2
 8017848:	9b00      	ldr	r3, [sp, #0]
 801784a:	220c      	movs	r2, #12
 801784c:	441d      	add	r5, r3
 801784e:	4628      	mov	r0, r5
 8017850:	18ae      	adds	r6, r5, r2
 8017852:	f00a f905 	bl	8021a60 <memcmp>
 8017856:	b938      	cbnz	r0, 8017868 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x90>
 8017858:	f105 020f 	add.w	r2, r5, #15
 801785c:	1b92      	subs	r2, r2, r6
 801785e:	d12c      	bne.n	80178ba <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0xe2>
 8017860:	7bea      	ldrb	r2, [r5, #15]
 8017862:	7bfb      	ldrb	r3, [r7, #15]
 8017864:	429a      	cmp	r2, r3
 8017866:	d010      	beq.n	801788a <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0xb2>
 8017868:	f1b8 0f00 	cmp.w	r8, #0
 801786c:	d102      	bne.n	8017874 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x9c>
 801786e:	e7d9      	b.n	8017824 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x4c>
 8017870:	2c04      	cmp	r4, #4
 8017872:	d807      	bhi.n	8017884 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0xac>
 8017874:	3401      	adds	r4, #1
 8017876:	f004 0307 	and.w	r3, r4, #7
 801787a:	b2e4      	uxtb	r4, r4
 801787c:	fa49 f303 	asr.w	r3, r9, r3
 8017880:	07db      	lsls	r3, r3, #31
 8017882:	d5f5      	bpl.n	8017870 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x98>
 8017884:	2c05      	cmp	r4, #5
 8017886:	d1da      	bne.n	801783e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x66>
 8017888:	e7cc      	b.n	8017824 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x4c>
 801788a:	9e01      	ldr	r6, [sp, #4]
 801788c:	f3c4 02c7 	ubfx	r2, r4, #3, #8
 8017890:	2101      	movs	r1, #1
 8017892:	f004 0407 	and.w	r4, r4, #7
 8017896:	4432      	add	r2, r6
 8017898:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801789c:	40a1      	lsls	r1, r4
 801789e:	4650      	mov	r0, sl
 80178a0:	f892 41e0 	ldrb.w	r4, [r2, #480]	; 0x1e0
 80178a4:	ea24 0401 	bic.w	r4, r4, r1
 80178a8:	f882 41e0 	strb.w	r4, [r2, #480]	; 0x1e0
 80178ac:	f8c6 31e4 	str.w	r3, [r6, #484]	; 0x1e4
 80178b0:	f7ff f88c 	bl	80169cc <sys_mutex_unlock>
 80178b4:	b003      	add	sp, #12
 80178b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178ba:	4630      	mov	r0, r6
 80178bc:	4659      	mov	r1, fp
 80178be:	f00a f8cf 	bl	8021a60 <memcmp>
 80178c2:	2800      	cmp	r0, #0
 80178c4:	d1d0      	bne.n	8017868 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x90>
 80178c6:	e7cb      	b.n	8017860 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_6Guid_tE+0x88>

080178c8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED0Ev>:
 80178c8:	4913      	ldr	r1, [pc, #76]	; (8017918 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED0Ev+0x50>)
 80178ca:	2200      	movs	r2, #0
 80178cc:	f890 3651 	ldrb.w	r3, [r0, #1617]	; 0x651
 80178d0:	b570      	push	{r4, r5, r6, lr}
 80178d2:	4604      	mov	r4, r0
 80178d4:	6001      	str	r1, [r0, #0]
 80178d6:	f880 2650 	strb.w	r2, [r0, #1616]	; 0x650
 80178da:	b13b      	cbz	r3, 80178ec <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED0Ev+0x24>
 80178dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80178e0:	f7f5 ffba 	bl	800d858 <sys_msleep>
 80178e4:	f894 3651 	ldrb.w	r3, [r4, #1617]	; 0x651
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d1f7      	bne.n	80178dc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED0Ev+0x14>
 80178ec:	f504 65c2 	add.w	r5, r4, #1552	; 0x610
 80178f0:	f204 462c 	addw	r6, r4, #1068	; 0x42c
 80178f4:	f105 000c 	add.w	r0, r5, #12
 80178f8:	3d2c      	subs	r5, #44	; 0x2c
 80178fa:	f002 ff77 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 80178fe:	42b5      	cmp	r5, r6
 8017900:	d1f8      	bne.n	80178f4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED0Ev+0x2c>
 8017902:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 8017906:	f002 ff71 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801790a:	4620      	mov	r0, r4
 801790c:	f240 6154 	movw	r1, #1620	; 0x654
 8017910:	f009 f9ba 	bl	8020c88 <_ZdlPvj>
 8017914:	4620      	mov	r0, r4
 8017916:	bd70      	pop	{r4, r5, r6, pc}
 8017918:	080265b8 	.word	0x080265b8

0801791c <_ZN4rtps14MessageFactory22addSubMessageTimeStampINS_11PBufWrapperEEEvRT_b.constprop.0>:
 801791c:	b530      	push	{r4, r5, lr}
 801791e:	4b1c      	ldr	r3, [pc, #112]	; (8017990 <_ZN4rtps14MessageFactory22addSubMessageTimeStampINS_11PBufWrapperEEEvRT_b.constprop.0+0x74>)
 8017920:	b085      	sub	sp, #20
 8017922:	2114      	movs	r1, #20
 8017924:	4604      	mov	r4, r0
 8017926:	9301      	str	r3, [sp, #4]
 8017928:	f002 ffaa 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 801792c:	b1a0      	cbz	r0, 8017958 <_ZN4rtps14MessageFactory22addSubMessageTimeStampINS_11PBufWrapperEEEvRT_b.constprop.0+0x3c>
 801792e:	2104      	movs	r1, #4
 8017930:	4620      	mov	r0, r4
 8017932:	f002 ffa5 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 8017936:	2201      	movs	r2, #1
 8017938:	a901      	add	r1, sp, #4
 801793a:	4620      	mov	r0, r4
 801793c:	f002 ff6e 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8017940:	2201      	movs	r2, #1
 8017942:	f10d 0105 	add.w	r1, sp, #5
 8017946:	4620      	mov	r0, r4
 8017948:	f002 ff68 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801794c:	2202      	movs	r2, #2
 801794e:	f10d 0106 	add.w	r1, sp, #6
 8017952:	4620      	mov	r0, r4
 8017954:	f002 ff62 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8017958:	4d0e      	ldr	r5, [pc, #56]	; (8017994 <_ZN4rtps14MessageFactory22addSubMessageTimeStampINS_11PBufWrapperEEEvRT_b.constprop.0+0x78>)
 801795a:	4620      	mov	r0, r4
 801795c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8017960:	f002 ff8e 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 8017964:	f7ef ff2a 	bl	80077bc <sys_now>
 8017968:	fb85 3500 	smull	r3, r5, r5, r0
 801796c:	17c3      	asrs	r3, r0, #31
 801796e:	2100      	movs	r1, #0
 8017970:	2204      	movs	r2, #4
 8017972:	4620      	mov	r0, r4
 8017974:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
 8017978:	9103      	str	r1, [sp, #12]
 801797a:	a902      	add	r1, sp, #8
 801797c:	9302      	str	r3, [sp, #8]
 801797e:	f002 ff4d 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8017982:	2204      	movs	r2, #4
 8017984:	a903      	add	r1, sp, #12
 8017986:	4620      	mov	r0, r4
 8017988:	f002 ff48 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801798c:	b005      	add	sp, #20
 801798e:	bd30      	pop	{r4, r5, pc}
 8017990:	00080109 	.word	0x00080109
 8017994:	10624dd3 	.word	0x10624dd3

08017998 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE>:
 8017998:	f8d0 3318 	ldr.w	r3, [r0, #792]	; 0x318
 801799c:	2b00      	cmp	r3, #0
 801799e:	f000 808e 	beq.w	8017abe <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x126>
 80179a2:	f500 7348 	add.w	r3, r0, #800	; 0x320
 80179a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179aa:	4607      	mov	r7, r0
 80179ac:	f500 79f0 	add.w	r9, r0, #480	; 0x1e0
 80179b0:	4618      	mov	r0, r3
 80179b2:	4688      	mov	r8, r1
 80179b4:	ed2d 8b02 	vpush	{d8}
 80179b8:	b083      	sub	sp, #12
 80179ba:	ee08 3a10 	vmov	s16, r3
 80179be:	f7fe fff6 	bl	80169ae <sys_mutex_lock>
 80179c2:	f897 31e0 	ldrb.w	r3, [r7, #480]	; 0x1e0
 80179c6:	f013 0401 	ands.w	r4, r3, #1
 80179ca:	9301      	str	r3, [sp, #4]
 80179cc:	d038      	beq.n	8017a40 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0xa8>
 80179ce:	2400      	movs	r4, #0
 80179d0:	f108 0314 	add.w	r3, r8, #20
 80179d4:	f108 0a08 	add.w	sl, r8, #8
 80179d8:	ee08 3a90 	vmov	s17, r3
 80179dc:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80179e0:	220c      	movs	r2, #12
 80179e2:	4651      	mov	r1, sl
 80179e4:	00ed      	lsls	r5, r5, #3
 80179e6:	f105 0608 	add.w	r6, r5, #8
 80179ea:	444e      	add	r6, r9
 80179ec:	4630      	mov	r0, r6
 80179ee:	eb06 0b02 	add.w	fp, r6, r2
 80179f2:	f00a f835 	bl	8021a60 <memcmp>
 80179f6:	b948      	cbnz	r0, 8017a0c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x74>
 80179f8:	f106 020f 	add.w	r2, r6, #15
 80179fc:	ebb2 020b 	subs.w	r2, r2, fp
 8017a00:	d155      	bne.n	8017aae <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x116>
 8017a02:	7bf2      	ldrb	r2, [r6, #15]
 8017a04:	f898 3017 	ldrb.w	r3, [r8, #23]
 8017a08:	429a      	cmp	r2, r3
 8017a0a:	d02c      	beq.n	8017a66 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0xce>
 8017a0c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8017a10:	b913      	cbnz	r3, 8017a18 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x80>
 8017a12:	e00c      	b.n	8017a2e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x96>
 8017a14:	2c04      	cmp	r4, #4
 8017a16:	d808      	bhi.n	8017a2a <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x92>
 8017a18:	3401      	adds	r4, #1
 8017a1a:	9a01      	ldr	r2, [sp, #4]
 8017a1c:	f004 0307 	and.w	r3, r4, #7
 8017a20:	b2e4      	uxtb	r4, r4
 8017a22:	fa42 f303 	asr.w	r3, r2, r3
 8017a26:	07db      	lsls	r3, r3, #31
 8017a28:	d5f4      	bpl.n	8017a14 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x7c>
 8017a2a:	2c05      	cmp	r4, #5
 8017a2c:	d1d6      	bne.n	80179dc <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x44>
 8017a2e:	ee18 0a10 	vmov	r0, s16
 8017a32:	f7fe ffcb 	bl	80169cc <sys_mutex_unlock>
 8017a36:	b003      	add	sp, #12
 8017a38:	ecbd 8b02 	vpop	{d8}
 8017a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a40:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d0f2      	beq.n	8017a2e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x96>
 8017a48:	9a01      	ldr	r2, [sp, #4]
 8017a4a:	e001      	b.n	8017a50 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0xb8>
 8017a4c:	2c04      	cmp	r4, #4
 8017a4e:	d807      	bhi.n	8017a60 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0xc8>
 8017a50:	3401      	adds	r4, #1
 8017a52:	f004 0307 	and.w	r3, r4, #7
 8017a56:	b2e4      	uxtb	r4, r4
 8017a58:	fa42 f303 	asr.w	r3, r2, r3
 8017a5c:	07d9      	lsls	r1, r3, #31
 8017a5e:	d5f5      	bpl.n	8017a4c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0xb4>
 8017a60:	2c05      	cmp	r4, #5
 8017a62:	d1b5      	bne.n	80179d0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x38>
 8017a64:	e7e3      	b.n	8017a2e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x96>
 8017a66:	3518      	adds	r5, #24
 8017a68:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8017a6c:	f859 2005 	ldr.w	r2, [r9, r5]
 8017a70:	444d      	add	r5, r9
 8017a72:	429a      	cmp	r2, r3
 8017a74:	d1ca      	bne.n	8017a0c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x74>
 8017a76:	686a      	ldr	r2, [r5, #4]
 8017a78:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	d1c5      	bne.n	8017a0c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x74>
 8017a80:	4641      	mov	r1, r8
 8017a82:	e9d7 30c6 	ldrd	r3, r0, [r7, #792]	; 0x318
 8017a86:	4798      	blx	r3
 8017a88:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8017a8c:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8017a90:	f8d4 31fc 	ldr.w	r3, [r4, #508]	; 0x1fc
 8017a94:	3301      	adds	r3, #1
 8017a96:	f8c4 31fc 	str.w	r3, [r4, #508]	; 0x1fc
 8017a9a:	b18b      	cbz	r3, 8017ac0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x128>
 8017a9c:	ee18 0a10 	vmov	r0, s16
 8017aa0:	f7fe ff94 	bl	80169cc <sys_mutex_unlock>
 8017aa4:	b003      	add	sp, #12
 8017aa6:	ecbd 8b02 	vpop	{d8}
 8017aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aae:	4658      	mov	r0, fp
 8017ab0:	ee18 1a90 	vmov	r1, s17
 8017ab4:	f009 ffd4 	bl	8021a60 <memcmp>
 8017ab8:	2800      	cmp	r0, #0
 8017aba:	d1a7      	bne.n	8017a0c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x74>
 8017abc:	e7a1      	b.n	8017a02 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x6a>
 8017abe:	4770      	bx	lr
 8017ac0:	f8d4 31f8 	ldr.w	r3, [r4, #504]	; 0x1f8
 8017ac4:	3301      	adds	r3, #1
 8017ac6:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
 8017aca:	e7e7      	b.n	8017a9c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x104>
 8017acc:	ee18 0a10 	vmov	r0, s16
 8017ad0:	f7fe ff7c 	bl	80169cc <sys_mutex_unlock>
 8017ad4:	f009 f8da 	bl	8020c8c <__cxa_end_cleanup>

08017ad8 <_ZN4rtps13UdpConnectionD1Ev>:
 8017ad8:	6803      	ldr	r3, [r0, #0]
 8017ada:	b510      	push	{r4, lr}
 8017adc:	4604      	mov	r4, r0
 8017ade:	b153      	cbz	r3, 8017af6 <_ZN4rtps13UdpConnectionD1Ev+0x1e>
 8017ae0:	4806      	ldr	r0, [pc, #24]	; (8017afc <_ZN4rtps13UdpConnectionD1Ev+0x24>)
 8017ae2:	f7fe ff64 	bl	80169ae <sys_mutex_lock>
 8017ae6:	6820      	ldr	r0, [r4, #0]
 8017ae8:	f7fb fe12 	bl	8013710 <udp_remove>
 8017aec:	2300      	movs	r3, #0
 8017aee:	4803      	ldr	r0, [pc, #12]	; (8017afc <_ZN4rtps13UdpConnectionD1Ev+0x24>)
 8017af0:	6023      	str	r3, [r4, #0]
 8017af2:	f7fe ff6b 	bl	80169cc <sys_mutex_unlock>
 8017af6:	4620      	mov	r0, r4
 8017af8:	bd10      	pop	{r4, pc}
 8017afa:	bf00      	nop
 8017afc:	20035334 	.word	0x20035334

08017b00 <_ZN4rtps6DomainC1Eh>:
 8017b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b04:	460b      	mov	r3, r1
 8017b06:	4605      	mov	r5, r0
 8017b08:	f500 76a0 	add.w	r6, r0, #320	; 0x140
 8017b0c:	4602      	mov	r2, r0
 8017b0e:	49e7      	ldr	r1, [pc, #924]	; (8017eac <_ZN4rtps6DomainC1Eh+0x3ac>)
 8017b10:	4604      	mov	r4, r0
 8017b12:	ed2d 8b02 	vpush	{d8}
 8017b16:	b08f      	sub	sp, #60	; 0x3c
 8017b18:	f805 3b04 	strb.w	r3, [r5], #4
 8017b1c:	9001      	str	r0, [sp, #4]
 8017b1e:	4628      	mov	r0, r5
 8017b20:	9502      	str	r5, [sp, #8]
 8017b22:	f005 f875 	bl	801cc10 <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_>
 8017b26:	462a      	mov	r2, r5
 8017b28:	4630      	mov	r0, r6
 8017b2a:	49e1      	ldr	r1, [pc, #900]	; (8017eb0 <_ZN4rtps6DomainC1Eh+0x3b0>)
 8017b2c:	f005 fca6 	bl	801d47c <_ZN4rtps9UdpDriverC1EPFvPvP7udp_pcbP4pbufPK8ip4_addrtES1_>
 8017b30:	f504 73e2 	add.w	r3, r4, #452	; 0x1c4
 8017b34:	ee08 6a10 	vmov	s16, r6
 8017b38:	4618      	mov	r0, r3
 8017b3a:	ee08 3a90 	vmov	s17, r3
 8017b3e:	f002 febd 	bl	801a8bc <_ZN4rtps11ParticipantC1Ev>
 8017b42:	f243 7120 	movw	r1, #14112	; 0x3720
 8017b46:	f245 6988 	movw	r9, #22152	; 0x5688
 8017b4a:	f243 731c 	movw	r3, #14108	; 0x371c
 8017b4e:	2200      	movs	r2, #0
 8017b50:	1865      	adds	r5, r4, r1
 8017b52:	44a1      	add	r9, r4
 8017b54:	52e2      	strh	r2, [r4, r3]
 8017b56:	9506      	str	r5, [sp, #24]
 8017b58:	2400      	movs	r4, #0
 8017b5a:	2720      	movs	r7, #32
 8017b5c:	22c8      	movs	r2, #200	; 0xc8
 8017b5e:	f105 0014 	add.w	r0, r5, #20
 8017b62:	4621      	mov	r1, r4
 8017b64:	606c      	str	r4, [r5, #4]
 8017b66:	60ac      	str	r4, [r5, #8]
 8017b68:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017b6c:	60ec      	str	r4, [r5, #12]
 8017b6e:	f04f 0801 	mov.w	r8, #1
 8017b72:	612c      	str	r4, [r5, #16]
 8017b74:	f009 ffac 	bl	8021ad0 <memset>
 8017b78:	4621      	mov	r1, r4
 8017b7a:	22c8      	movs	r2, #200	; 0xc8
 8017b7c:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
 8017b80:	f009 ffa6 	bl	8021ad0 <memset>
 8017b84:	f641 43f3 	movw	r3, #7411	; 0x1cf3
 8017b88:	4aca      	ldr	r2, [pc, #808]	; (8017eb4 <_ZN4rtps6DomainC1Eh+0x3b4>)
 8017b8a:	eb0d 0e07 	add.w	lr, sp, r7
 8017b8e:	940a      	str	r4, [sp, #40]	; 0x28
 8017b90:	f505 7ce2 	add.w	ip, r5, #452	; 0x1c4
 8017b94:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
 8017b98:	940b      	str	r4, [sp, #44]	; 0x2c
 8017b9a:	f8c5 41bc 	str.w	r4, [r5, #444]	; 0x1bc
 8017b9e:	e9c5 836b 	strd	r8, r3, [r5, #428]	; 0x1ac
 8017ba2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8017ba6:	e9cd 6408 	strd	r6, r4, [sp, #32]
 8017baa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017bae:	e9c5 446d 	strd	r4, r4, [r5, #436]	; 0x1b4
 8017bb2:	e9c5 8869 	strd	r8, r8, [r5, #420]	; 0x1a4
 8017bb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017bba:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017bbe:	463a      	mov	r2, r7
 8017bc0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017bc4:	4621      	mov	r1, r4
 8017bc6:	f505 700e 	add.w	r0, r5, #568	; 0x238
 8017bca:	f885 41dc 	strb.w	r4, [r5, #476]	; 0x1dc
 8017bce:	f885 41e0 	strb.w	r4, [r5, #480]	; 0x1e0
 8017bd2:	f8c5 41e4 	str.w	r4, [r5, #484]	; 0x1e4
 8017bd6:	e9c5 447a 	strd	r4, r4, [r5, #488]	; 0x1e8
 8017bda:	e9c5 447c 	strd	r4, r4, [r5, #496]	; 0x1f0
 8017bde:	e9c5 647e 	strd	r6, r4, [r5, #504]	; 0x1f8
 8017be2:	e9c5 4480 	strd	r4, r4, [r5, #512]	; 0x200
 8017be6:	e9c5 4482 	strd	r4, r4, [r5, #520]	; 0x208
 8017bea:	e9c5 6484 	strd	r6, r4, [r5, #528]	; 0x210
 8017bee:	e9c5 4486 	strd	r4, r4, [r5, #536]	; 0x218
 8017bf2:	e9c5 4488 	strd	r4, r4, [r5, #544]	; 0x220
 8017bf6:	f885 4228 	strb.w	r4, [r5, #552]	; 0x228
 8017bfa:	f885 4229 	strb.w	r4, [r5, #553]	; 0x229
 8017bfe:	f885 422a 	strb.w	r4, [r5, #554]	; 0x22a
 8017c02:	f8c5 7234 	str.w	r7, [r5, #564]	; 0x234
 8017c06:	e9c5 448b 	strd	r4, r4, [r5, #556]	; 0x22c
 8017c0a:	f009 ff61 	bl	8021ad0 <memset>
 8017c0e:	463a      	mov	r2, r7
 8017c10:	4621      	mov	r1, r4
 8017c12:	f505 702b 	add.w	r0, r5, #684	; 0x2ac
 8017c16:	f8c5 425c 	str.w	r4, [r5, #604]	; 0x25c
 8017c1a:	f8c5 4260 	str.w	r4, [r5, #608]	; 0x260
 8017c1e:	f8c5 4264 	str.w	r4, [r5, #612]	; 0x264
 8017c22:	f8c5 4298 	str.w	r4, [r5, #664]	; 0x298
 8017c26:	f885 429c 	strb.w	r4, [r5, #668]	; 0x29c
 8017c2a:	f885 429d 	strb.w	r4, [r5, #669]	; 0x29d
 8017c2e:	f885 429e 	strb.w	r4, [r5, #670]	; 0x29e
 8017c32:	f8c5 72a8 	str.w	r7, [r5, #680]	; 0x2a8
 8017c36:	e9c5 469a 	strd	r4, r6, [r5, #616]	; 0x268
 8017c3a:	e9c5 449c 	strd	r4, r4, [r5, #624]	; 0x270
 8017c3e:	e9c5 449e 	strd	r4, r4, [r5, #632]	; 0x278
 8017c42:	e9c5 46a0 	strd	r4, r6, [r5, #640]	; 0x280
 8017c46:	e9c5 44a2 	strd	r4, r4, [r5, #648]	; 0x288
 8017c4a:	e9c5 44a4 	strd	r4, r4, [r5, #656]	; 0x290
 8017c4e:	e9c5 44a8 	strd	r4, r4, [r5, #672]	; 0x2a0
 8017c52:	f009 ff3d 	bl	8021ad0 <memset>
 8017c56:	463a      	mov	r2, r7
 8017c58:	4621      	mov	r1, r4
 8017c5a:	f505 7048 	add.w	r0, r5, #800	; 0x320
 8017c5e:	f8c5 42d0 	str.w	r4, [r5, #720]	; 0x2d0
 8017c62:	f8c5 42d4 	str.w	r4, [r5, #724]	; 0x2d4
 8017c66:	f8c5 42d8 	str.w	r4, [r5, #728]	; 0x2d8
 8017c6a:	f8c5 430c 	str.w	r4, [r5, #780]	; 0x30c
 8017c6e:	f885 4310 	strb.w	r4, [r5, #784]	; 0x310
 8017c72:	f885 4311 	strb.w	r4, [r5, #785]	; 0x311
 8017c76:	f885 4312 	strb.w	r4, [r5, #786]	; 0x312
 8017c7a:	f8c5 731c 	str.w	r7, [r5, #796]	; 0x31c
 8017c7e:	e9c5 46b7 	strd	r4, r6, [r5, #732]	; 0x2dc
 8017c82:	e9c5 44b9 	strd	r4, r4, [r5, #740]	; 0x2e4
 8017c86:	e9c5 44bb 	strd	r4, r4, [r5, #748]	; 0x2ec
 8017c8a:	e9c5 46bd 	strd	r4, r6, [r5, #756]	; 0x2f4
 8017c8e:	e9c5 44bf 	strd	r4, r4, [r5, #764]	; 0x2fc
 8017c92:	e9c5 44c1 	strd	r4, r4, [r5, #772]	; 0x304
 8017c96:	e9c5 44c5 	strd	r4, r4, [r5, #788]	; 0x314
 8017c9a:	f009 ff19 	bl	8021ad0 <memset>
 8017c9e:	463a      	mov	r2, r7
 8017ca0:	4621      	mov	r1, r4
 8017ca2:	f505 7065 	add.w	r0, r5, #916	; 0x394
 8017ca6:	f8c5 4344 	str.w	r4, [r5, #836]	; 0x344
 8017caa:	f8c5 4348 	str.w	r4, [r5, #840]	; 0x348
 8017cae:	f8c5 434c 	str.w	r4, [r5, #844]	; 0x34c
 8017cb2:	f8c5 4380 	str.w	r4, [r5, #896]	; 0x380
 8017cb6:	f885 4384 	strb.w	r4, [r5, #900]	; 0x384
 8017cba:	f885 4385 	strb.w	r4, [r5, #901]	; 0x385
 8017cbe:	f885 4386 	strb.w	r4, [r5, #902]	; 0x386
 8017cc2:	f8c5 7390 	str.w	r7, [r5, #912]	; 0x390
 8017cc6:	e9c5 46d4 	strd	r4, r6, [r5, #848]	; 0x350
 8017cca:	e9c5 44d6 	strd	r4, r4, [r5, #856]	; 0x358
 8017cce:	e9c5 44d8 	strd	r4, r4, [r5, #864]	; 0x360
 8017cd2:	e9c5 46da 	strd	r4, r6, [r5, #872]	; 0x368
 8017cd6:	e9c5 44dc 	strd	r4, r4, [r5, #880]	; 0x370
 8017cda:	e9c5 44de 	strd	r4, r4, [r5, #888]	; 0x378
 8017cde:	e9c5 44e2 	strd	r4, r4, [r5, #904]	; 0x388
 8017ce2:	f009 fef5 	bl	8021ad0 <memset>
 8017ce6:	463a      	mov	r2, r7
 8017ce8:	4621      	mov	r1, r4
 8017cea:	f505 6081 	add.w	r0, r5, #1032	; 0x408
 8017cee:	f8c5 43b8 	str.w	r4, [r5, #952]	; 0x3b8
 8017cf2:	f8c5 43bc 	str.w	r4, [r5, #956]	; 0x3bc
 8017cf6:	f8c5 43c0 	str.w	r4, [r5, #960]	; 0x3c0
 8017cfa:	f8c5 43f4 	str.w	r4, [r5, #1012]	; 0x3f4
 8017cfe:	f885 43f8 	strb.w	r4, [r5, #1016]	; 0x3f8
 8017d02:	f885 43f9 	strb.w	r4, [r5, #1017]	; 0x3f9
 8017d06:	f885 43fa 	strb.w	r4, [r5, #1018]	; 0x3fa
 8017d0a:	f8c5 43fc 	str.w	r4, [r5, #1020]	; 0x3fc
 8017d0e:	f8c5 4400 	str.w	r4, [r5, #1024]	; 0x400
 8017d12:	f8c5 7404 	str.w	r7, [r5, #1028]	; 0x404
 8017d16:	e9c5 46f1 	strd	r4, r6, [r5, #964]	; 0x3c4
 8017d1a:	e9c5 44f3 	strd	r4, r4, [r5, #972]	; 0x3cc
 8017d1e:	e9c5 44f5 	strd	r4, r4, [r5, #980]	; 0x3d4
 8017d22:	e9c5 46f7 	strd	r4, r6, [r5, #988]	; 0x3dc
 8017d26:	e9c5 44f9 	strd	r4, r4, [r5, #996]	; 0x3e4
 8017d2a:	e9c5 44fb 	strd	r4, r4, [r5, #1004]	; 0x3ec
 8017d2e:	f009 fecf 	bl	8021ad0 <memset>
 8017d32:	4b61      	ldr	r3, [pc, #388]	; (8017eb8 <_ZN4rtps6DomainC1Eh+0x3b8>)
 8017d34:	4621      	mov	r1, r4
 8017d36:	222c      	movs	r2, #44	; 0x2c
 8017d38:	602b      	str	r3, [r5, #0]
 8017d3a:	f505 608b 	add.w	r0, r5, #1112	; 0x458
 8017d3e:	f885 844d 	strb.w	r8, [r5, #1101]	; 0x44d
 8017d42:	f8c5 8454 	str.w	r8, [r5, #1108]	; 0x454
 8017d46:	f8c5 4430 	str.w	r4, [r5, #1072]	; 0x430
 8017d4a:	f8c5 4440 	str.w	r4, [r5, #1088]	; 0x440
 8017d4e:	f8a5 4444 	strh.w	r4, [r5, #1092]	; 0x444
 8017d52:	f8c5 4450 	str.w	r4, [r5, #1104]	; 0x450
 8017d56:	f009 febb 	bl	8021ad0 <memset>
 8017d5a:	4621      	mov	r1, r4
 8017d5c:	222c      	movs	r2, #44	; 0x2c
 8017d5e:	f205 4084 	addw	r0, r5, #1156	; 0x484
 8017d62:	f8c5 645c 	str.w	r6, [r5, #1116]	; 0x45c
 8017d66:	f8c5 647c 	str.w	r6, [r5, #1148]	; 0x47c
 8017d6a:	f885 4458 	strb.w	r4, [r5, #1112]	; 0x458
 8017d6e:	f8a5 4468 	strh.w	r4, [r5, #1128]	; 0x468
 8017d72:	f009 fead 	bl	8021ad0 <memset>
 8017d76:	4621      	mov	r1, r4
 8017d78:	222c      	movs	r2, #44	; 0x2c
 8017d7a:	f505 6096 	add.w	r0, r5, #1200	; 0x4b0
 8017d7e:	f8c5 6488 	str.w	r6, [r5, #1160]	; 0x488
 8017d82:	f8c5 64a8 	str.w	r6, [r5, #1192]	; 0x4a8
 8017d86:	f885 4484 	strb.w	r4, [r5, #1156]	; 0x484
 8017d8a:	f8a5 4494 	strh.w	r4, [r5, #1172]	; 0x494
 8017d8e:	f009 fe9f 	bl	8021ad0 <memset>
 8017d92:	4621      	mov	r1, r4
 8017d94:	222c      	movs	r2, #44	; 0x2c
 8017d96:	f205 40dc 	addw	r0, r5, #1244	; 0x4dc
 8017d9a:	f8c5 64b4 	str.w	r6, [r5, #1204]	; 0x4b4
 8017d9e:	f8c5 64d4 	str.w	r6, [r5, #1236]	; 0x4d4
 8017da2:	f885 44b0 	strb.w	r4, [r5, #1200]	; 0x4b0
 8017da6:	f8a5 44c0 	strh.w	r4, [r5, #1216]	; 0x4c0
 8017daa:	f009 fe91 	bl	8021ad0 <memset>
 8017dae:	4621      	mov	r1, r4
 8017db0:	222c      	movs	r2, #44	; 0x2c
 8017db2:	f505 60a1 	add.w	r0, r5, #1288	; 0x508
 8017db6:	f8c5 64e0 	str.w	r6, [r5, #1248]	; 0x4e0
 8017dba:	f8c5 6500 	str.w	r6, [r5, #1280]	; 0x500
 8017dbe:	f885 44dc 	strb.w	r4, [r5, #1244]	; 0x4dc
 8017dc2:	f8a5 44ec 	strh.w	r4, [r5, #1260]	; 0x4ec
 8017dc6:	f009 fe83 	bl	8021ad0 <memset>
 8017dca:	4621      	mov	r1, r4
 8017dcc:	222c      	movs	r2, #44	; 0x2c
 8017dce:	f205 5034 	addw	r0, r5, #1332	; 0x534
 8017dd2:	f8c5 650c 	str.w	r6, [r5, #1292]	; 0x50c
 8017dd6:	f8c5 652c 	str.w	r6, [r5, #1324]	; 0x52c
 8017dda:	f885 4508 	strb.w	r4, [r5, #1288]	; 0x508
 8017dde:	f8a5 4518 	strh.w	r4, [r5, #1304]	; 0x518
 8017de2:	f009 fe75 	bl	8021ad0 <memset>
 8017de6:	f8c5 6558 	str.w	r6, [r5, #1368]	; 0x558
 8017dea:	4621      	mov	r1, r4
 8017dec:	222c      	movs	r2, #44	; 0x2c
 8017dee:	f505 60ac 	add.w	r0, r5, #1376	; 0x560
 8017df2:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
 8017df6:	f885 4534 	strb.w	r4, [r5, #1332]	; 0x534
 8017dfa:	f8a5 4544 	strh.w	r4, [r5, #1348]	; 0x544
 8017dfe:	f009 fe67 	bl	8021ad0 <memset>
 8017e02:	f8c5 6564 	str.w	r6, [r5, #1380]	; 0x564
 8017e06:	f8c5 6584 	str.w	r6, [r5, #1412]	; 0x584
 8017e0a:	4621      	mov	r1, r4
 8017e0c:	f885 4560 	strb.w	r4, [r5, #1376]	; 0x560
 8017e10:	222c      	movs	r2, #44	; 0x2c
 8017e12:	f8a5 4570 	strh.w	r4, [r5, #1392]	; 0x570
 8017e16:	f205 508c 	addw	r0, r5, #1420	; 0x58c
 8017e1a:	f009 fe59 	bl	8021ad0 <memset>
 8017e1e:	f8c5 6590 	str.w	r6, [r5, #1424]	; 0x590
 8017e22:	f8c5 65b0 	str.w	r6, [r5, #1456]	; 0x5b0
 8017e26:	4621      	mov	r1, r4
 8017e28:	f885 458c 	strb.w	r4, [r5, #1420]	; 0x58c
 8017e2c:	222c      	movs	r2, #44	; 0x2c
 8017e2e:	f8a5 459c 	strh.w	r4, [r5, #1436]	; 0x59c
 8017e32:	f505 60b7 	add.w	r0, r5, #1464	; 0x5b8
 8017e36:	f009 fe4b 	bl	8021ad0 <memset>
 8017e3a:	f8c5 65bc 	str.w	r6, [r5, #1468]	; 0x5bc
 8017e3e:	f8c5 65dc 	str.w	r6, [r5, #1500]	; 0x5dc
 8017e42:	4621      	mov	r1, r4
 8017e44:	f885 45b8 	strb.w	r4, [r5, #1464]	; 0x5b8
 8017e48:	222c      	movs	r2, #44	; 0x2c
 8017e4a:	f8a5 45c8 	strh.w	r4, [r5, #1480]	; 0x5c8
 8017e4e:	f205 50e4 	addw	r0, r5, #1508	; 0x5e4
 8017e52:	f009 fe3d 	bl	8021ad0 <memset>
 8017e56:	f8c5 65e8 	str.w	r6, [r5, #1512]	; 0x5e8
 8017e5a:	f8c5 6608 	str.w	r6, [r5, #1544]	; 0x608
 8017e5e:	f505 60c2 	add.w	r0, r5, #1552	; 0x610
 8017e62:	f885 45e4 	strb.w	r4, [r5, #1508]	; 0x5e4
 8017e66:	4621      	mov	r1, r4
 8017e68:	f8a5 45f4 	strh.w	r4, [r5, #1524]	; 0x5f4
 8017e6c:	222c      	movs	r2, #44	; 0x2c
 8017e6e:	f009 fe2f 	bl	8021ad0 <memset>
 8017e72:	f505 65c9 	add.w	r5, r5, #1608	; 0x648
 8017e76:	f845 6c34 	str.w	r6, [r5, #-52]
 8017e7a:	f845 6c14 	str.w	r6, [r5, #-20]
 8017e7e:	f805 4c38 	strb.w	r4, [r5, #-56]
 8017e82:	f825 4c28 	strh.w	r4, [r5, #-40]
 8017e86:	f825 4c0c 	strh.w	r4, [r5, #-12]
 8017e8a:	f825 4c0a 	strh.w	r4, [r5, #-10]
 8017e8e:	f845 4c08 	str.w	r4, [r5, #-8]
 8017e92:	f845 4c04 	str.w	r4, [r5, #-4]
 8017e96:	454d      	cmp	r5, r9
 8017e98:	f47f ae5e 	bne.w	8017b58 <_ZN4rtps6DomainC1Eh+0x58>
 8017e9c:	f246 58c4 	movw	r8, #26052	; 0x65c4
 8017ea0:	9b01      	ldr	r3, [sp, #4]
 8017ea2:	f8df 9018 	ldr.w	r9, [pc, #24]	; 8017ebc <_ZN4rtps6DomainC1Eh+0x3bc>
 8017ea6:	4498      	add	r8, r3
 8017ea8:	9503      	str	r5, [sp, #12]
 8017eaa:	e009      	b.n	8017ec0 <_ZN4rtps6DomainC1Eh+0x3c0>
 8017eac:	08018639 	.word	0x08018639
 8017eb0:	0801ce39 	.word	0x0801ce39
 8017eb4:	2a00a8c0 	.word	0x2a00a8c0
 8017eb8:	08026564 	.word	0x08026564
 8017ebc:	0802666c 	.word	0x0802666c
 8017ec0:	22c8      	movs	r2, #200	; 0xc8
 8017ec2:	2100      	movs	r1, #0
 8017ec4:	f105 0014 	add.w	r0, r5, #20
 8017ec8:	606c      	str	r4, [r5, #4]
 8017eca:	60ac      	str	r4, [r5, #8]
 8017ecc:	af08      	add	r7, sp, #32
 8017ece:	f505 76e2 	add.w	r6, r5, #452	; 0x1c4
 8017ed2:	e9c5 4403 	strd	r4, r4, [r5, #12]
 8017ed6:	f009 fdfb 	bl	8021ad0 <memset>
 8017eda:	22c8      	movs	r2, #200	; 0xc8
 8017edc:	2100      	movs	r1, #0
 8017ede:	f105 00dc 	add.w	r0, r5, #220	; 0xdc
 8017ee2:	f009 fdf5 	bl	8021ad0 <memset>
 8017ee6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017eea:	2301      	movs	r3, #1
 8017eec:	f641 42f3 	movw	r2, #7411	; 0x1cf3
 8017ef0:	49ee      	ldr	r1, [pc, #952]	; (80182ac <_ZN4rtps6DomainC1Eh+0x7ac>)
 8017ef2:	940c      	str	r4, [sp, #48]	; 0x30
 8017ef4:	f8c5 11c0 	str.w	r1, [r5, #448]	; 0x1c0
 8017ef8:	940d      	str	r4, [sp, #52]	; 0x34
 8017efa:	f8c5 41bc 	str.w	r4, [r5, #444]	; 0x1bc
 8017efe:	e9c5 3369 	strd	r3, r3, [r5, #420]	; 0x1a4
 8017f02:	e9c5 326b 	strd	r3, r2, [r5, #428]	; 0x1ac
 8017f06:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8017f0a:	e9cd c408 	strd	ip, r4, [sp, #32]
 8017f0e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017f10:	e9c5 446d 	strd	r4, r4, [r5, #436]	; 0x1b4
 8017f14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017f16:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017f1a:	e886 0003 	stmia.w	r6, {r0, r1}
 8017f1e:	f8c5 c208 	str.w	ip, [r5, #520]	; 0x208
 8017f22:	f885 41dc 	strb.w	r4, [r5, #476]	; 0x1dc
 8017f26:	f885 41e0 	strb.w	r4, [r5, #480]	; 0x1e0
 8017f2a:	f8c5 41e4 	str.w	r4, [r5, #484]	; 0x1e4
 8017f2e:	e9c5 4483 	strd	r4, r4, [r5, #524]	; 0x20c
 8017f32:	e9c5 4485 	strd	r4, r4, [r5, #532]	; 0x214
 8017f36:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 8017f3a:	f8c5 9000 	str.w	r9, [r5]
 8017f3e:	e9c5 c490 	strd	ip, r4, [r5, #576]	; 0x240
 8017f42:	e9c5 4492 	strd	r4, r4, [r5, #584]	; 0x248
 8017f46:	e9c5 4494 	strd	r4, r4, [r5, #592]	; 0x250
 8017f4a:	e9c5 c49e 	strd	ip, r4, [r5, #632]	; 0x278
 8017f4e:	e9c5 44a0 	strd	r4, r4, [r5, #640]	; 0x280
 8017f52:	e9c5 44a2 	strd	r4, r4, [r5, #648]	; 0x288
 8017f56:	e9c5 c4ac 	strd	ip, r4, [r5, #688]	; 0x2b0
 8017f5a:	e9c5 44ae 	strd	r4, r4, [r5, #696]	; 0x2b8
 8017f5e:	e9c5 44b0 	strd	r4, r4, [r5, #704]	; 0x2c0
 8017f62:	e9c5 c4ba 	strd	ip, r4, [r5, #744]	; 0x2e8
 8017f66:	e9c5 44bc 	strd	r4, r4, [r5, #752]	; 0x2f0
 8017f6a:	e9c5 44be 	strd	r4, r4, [r5, #760]	; 0x2f8
 8017f6e:	e9c5 44c1 	strd	r4, r4, [r5, #772]	; 0x304
 8017f72:	f505 7543 	add.w	r5, r5, #780	; 0x30c
 8017f76:	4545      	cmp	r5, r8
 8017f78:	d1a2      	bne.n	8017ec0 <_ZN4rtps6DomainC1Eh+0x3c0>
 8017f7a:	9a01      	ldr	r2, [sp, #4]
 8017f7c:	f246 51c8 	movw	r1, #26056	; 0x65c8
 8017f80:	f647 00a0 	movw	r0, #30880	; 0x78a0
 8017f84:	f246 53c4 	movw	r3, #26052	; 0x65c4
 8017f88:	1851      	adds	r1, r2, r1
 8017f8a:	2500      	movs	r5, #0
 8017f8c:	1810      	adds	r0, r2, r0
 8017f8e:	52d4      	strh	r4, [r2, r3]
 8017f90:	f8df 8318 	ldr.w	r8, [pc, #792]	; 80182ac <_ZN4rtps6DomainC1Eh+0x7ac>
 8017f94:	460c      	mov	r4, r1
 8017f96:	4681      	mov	r9, r0
 8017f98:	9105      	str	r1, [sp, #20]
 8017f9a:	9007      	str	r0, [sp, #28]
 8017f9c:	22c8      	movs	r2, #200	; 0xc8
 8017f9e:	2100      	movs	r1, #0
 8017fa0:	f104 0014 	add.w	r0, r4, #20
 8017fa4:	6065      	str	r5, [r4, #4]
 8017fa6:	60a5      	str	r5, [r4, #8]
 8017fa8:	af08      	add	r7, sp, #32
 8017faa:	f504 76e2 	add.w	r6, r4, #452	; 0x1c4
 8017fae:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8017fb2:	f009 fd8d 	bl	8021ad0 <memset>
 8017fb6:	22c8      	movs	r2, #200	; 0xc8
 8017fb8:	2100      	movs	r1, #0
 8017fba:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8017fbe:	f009 fd87 	bl	8021ad0 <memset>
 8017fc2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017fc6:	2301      	movs	r3, #1
 8017fc8:	f641 42f3 	movw	r2, #7411	; 0x1cf3
 8017fcc:	950c      	str	r5, [sp, #48]	; 0x30
 8017fce:	950d      	str	r5, [sp, #52]	; 0x34
 8017fd0:	e9c4 3369 	strd	r3, r3, [r4, #420]	; 0x1a4
 8017fd4:	e9c4 326b 	strd	r3, r2, [r4, #428]	; 0x1ac
 8017fd8:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8017fdc:	e9cd c508 	strd	ip, r5, [sp, #32]
 8017fe0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017fe2:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
 8017fe6:	e9c4 586f 	strd	r5, r8, [r4, #444]	; 0x1bc
 8017fea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8017fec:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017ff0:	4baf      	ldr	r3, [pc, #700]	; (80182b0 <_ZN4rtps6DomainC1Eh+0x7b0>)
 8017ff2:	e886 0003 	stmia.w	r6, {r0, r1}
 8017ff6:	f8c4 c208 	str.w	ip, [r4, #520]	; 0x208
 8017ffa:	f884 51dc 	strb.w	r5, [r4, #476]	; 0x1dc
 8017ffe:	f884 51e0 	strb.w	r5, [r4, #480]	; 0x1e0
 8018002:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
 8018006:	e9c4 5583 	strd	r5, r5, [r4, #524]	; 0x20c
 801800a:	e9c4 5585 	strd	r5, r5, [r4, #532]	; 0x214
 801800e:	f8c4 530c 	str.w	r5, [r4, #780]	; 0x30c
 8018012:	f8a4 5310 	strh.w	r5, [r4, #784]	; 0x310
 8018016:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
 801801a:	6023      	str	r3, [r4, #0]
 801801c:	e9c4 c590 	strd	ip, r5, [r4, #576]	; 0x240
 8018020:	e9c4 5592 	strd	r5, r5, [r4, #584]	; 0x248
 8018024:	e9c4 5594 	strd	r5, r5, [r4, #592]	; 0x250
 8018028:	e9c4 c59e 	strd	ip, r5, [r4, #632]	; 0x278
 801802c:	e9c4 55a0 	strd	r5, r5, [r4, #640]	; 0x280
 8018030:	e9c4 55a2 	strd	r5, r5, [r4, #648]	; 0x288
 8018034:	e9c4 c5ac 	strd	ip, r5, [r4, #688]	; 0x2b0
 8018038:	e9c4 55ae 	strd	r5, r5, [r4, #696]	; 0x2b8
 801803c:	e9c4 55b0 	strd	r5, r5, [r4, #704]	; 0x2c0
 8018040:	e9c4 c5ba 	strd	ip, r5, [r4, #744]	; 0x2e8
 8018044:	e9c4 55bc 	strd	r5, r5, [r4, #752]	; 0x2f0
 8018048:	e9c4 55be 	strd	r5, r5, [r4, #760]	; 0x2f8
 801804c:	e9c4 55c6 	strd	r5, r5, [r4, #792]	; 0x318
 8018050:	f504 7449 	add.w	r4, r4, #804	; 0x324
 8018054:	454c      	cmp	r4, r9
 8018056:	d1a1      	bne.n	8017f9c <_ZN4rtps6DomainC1Eh+0x49c>
 8018058:	f647 03a4 	movw	r3, #30884	; 0x78a4
 801805c:	9a01      	ldr	r2, [sp, #4]
 801805e:	f649 6b9c 	movw	fp, #40604	; 0x9e9c
 8018062:	4619      	mov	r1, r3
 8018064:	f647 03a0 	movw	r3, #30880	; 0x78a0
 8018068:	4493      	add	fp, r2
 801806a:	1854      	adds	r4, r2, r1
 801806c:	54d5      	strb	r5, [r2, r3]
 801806e:	9404      	str	r4, [sp, #16]
 8018070:	2500      	movs	r5, #0
 8018072:	2720      	movs	r7, #32
 8018074:	22c8      	movs	r2, #200	; 0xc8
 8018076:	f104 0014 	add.w	r0, r4, #20
 801807a:	4629      	mov	r1, r5
 801807c:	6065      	str	r5, [r4, #4]
 801807e:	60a5      	str	r5, [r4, #8]
 8018080:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8018084:	60e5      	str	r5, [r4, #12]
 8018086:	f04f 0801 	mov.w	r8, #1
 801808a:	6125      	str	r5, [r4, #16]
 801808c:	f504 7907 	add.w	r9, r4, #540	; 0x21c
 8018090:	f009 fd1e 	bl	8021ad0 <memset>
 8018094:	4629      	mov	r1, r5
 8018096:	22c8      	movs	r2, #200	; 0xc8
 8018098:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 801809c:	f009 fd18 	bl	8021ad0 <memset>
 80180a0:	f641 43f3 	movw	r3, #7411	; 0x1cf3
 80180a4:	4a81      	ldr	r2, [pc, #516]	; (80182ac <_ZN4rtps6DomainC1Eh+0x7ac>)
 80180a6:	eb0d 0e07 	add.w	lr, sp, r7
 80180aa:	950a      	str	r5, [sp, #40]	; 0x28
 80180ac:	f504 7ce2 	add.w	ip, r4, #452	; 0x1c4
 80180b0:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
 80180b4:	950b      	str	r5, [sp, #44]	; 0x2c
 80180b6:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
 80180ba:	e9c4 836b 	strd	r8, r3, [r4, #428]	; 0x1ac
 80180be:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 80180c2:	e9cd 6508 	strd	r6, r5, [sp, #32]
 80180c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80180ca:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
 80180ce:	e9c4 8869 	strd	r8, r8, [r4, #420]	; 0x1a4
 80180d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80180d6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80180da:	463a      	mov	r2, r7
 80180dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80180e0:	4629      	mov	r1, r5
 80180e2:	f504 700e 	add.w	r0, r4, #568	; 0x238
 80180e6:	f884 51dc 	strb.w	r5, [r4, #476]	; 0x1dc
 80180ea:	f884 51e0 	strb.w	r5, [r4, #480]	; 0x1e0
 80180ee:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
 80180f2:	e9c4 557a 	strd	r5, r5, [r4, #488]	; 0x1e8
 80180f6:	e9c4 557c 	strd	r5, r5, [r4, #496]	; 0x1f0
 80180fa:	e9c4 657e 	strd	r6, r5, [r4, #504]	; 0x1f8
 80180fe:	e9c4 5580 	strd	r5, r5, [r4, #512]	; 0x200
 8018102:	e9c4 5582 	strd	r5, r5, [r4, #520]	; 0x208
 8018106:	e9c4 6584 	strd	r6, r5, [r4, #528]	; 0x210
 801810a:	e9c4 5586 	strd	r5, r5, [r4, #536]	; 0x218
 801810e:	e9c9 5501 	strd	r5, r5, [r9, #4]
 8018112:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
 8018116:	f884 5229 	strb.w	r5, [r4, #553]	; 0x229
 801811a:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
 801811e:	f8c4 7234 	str.w	r7, [r4, #564]	; 0x234
 8018122:	e9c4 558b 	strd	r5, r5, [r4, #556]	; 0x22c
 8018126:	f009 fcd3 	bl	8021ad0 <memset>
 801812a:	463a      	mov	r2, r7
 801812c:	4629      	mov	r1, r5
 801812e:	f504 702b 	add.w	r0, r4, #684	; 0x2ac
 8018132:	f8c4 525c 	str.w	r5, [r4, #604]	; 0x25c
 8018136:	f8c4 5260 	str.w	r5, [r4, #608]	; 0x260
 801813a:	f8c4 5264 	str.w	r5, [r4, #612]	; 0x264
 801813e:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8018142:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
 8018146:	f884 529d 	strb.w	r5, [r4, #669]	; 0x29d
 801814a:	f884 529e 	strb.w	r5, [r4, #670]	; 0x29e
 801814e:	f8c4 72a8 	str.w	r7, [r4, #680]	; 0x2a8
 8018152:	e9c4 569a 	strd	r5, r6, [r4, #616]	; 0x268
 8018156:	e9c4 559c 	strd	r5, r5, [r4, #624]	; 0x270
 801815a:	e9c4 559e 	strd	r5, r5, [r4, #632]	; 0x278
 801815e:	e9c4 56a0 	strd	r5, r6, [r4, #640]	; 0x280
 8018162:	e9c4 55a2 	strd	r5, r5, [r4, #648]	; 0x288
 8018166:	e9c4 55a4 	strd	r5, r5, [r4, #656]	; 0x290
 801816a:	e9c4 55a8 	strd	r5, r5, [r4, #672]	; 0x2a0
 801816e:	f009 fcaf 	bl	8021ad0 <memset>
 8018172:	463a      	mov	r2, r7
 8018174:	4629      	mov	r1, r5
 8018176:	f504 7048 	add.w	r0, r4, #800	; 0x320
 801817a:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
 801817e:	f8c4 52d4 	str.w	r5, [r4, #724]	; 0x2d4
 8018182:	f8c4 52d8 	str.w	r5, [r4, #728]	; 0x2d8
 8018186:	f8c4 530c 	str.w	r5, [r4, #780]	; 0x30c
 801818a:	f884 5310 	strb.w	r5, [r4, #784]	; 0x310
 801818e:	f884 5311 	strb.w	r5, [r4, #785]	; 0x311
 8018192:	f884 5312 	strb.w	r5, [r4, #786]	; 0x312
 8018196:	f8c4 731c 	str.w	r7, [r4, #796]	; 0x31c
 801819a:	e9c4 56b7 	strd	r5, r6, [r4, #732]	; 0x2dc
 801819e:	e9c4 55b9 	strd	r5, r5, [r4, #740]	; 0x2e4
 80181a2:	e9c4 55bb 	strd	r5, r5, [r4, #748]	; 0x2ec
 80181a6:	e9c4 56bd 	strd	r5, r6, [r4, #756]	; 0x2f4
 80181aa:	e9c4 55bf 	strd	r5, r5, [r4, #764]	; 0x2fc
 80181ae:	e9c4 55c1 	strd	r5, r5, [r4, #772]	; 0x304
 80181b2:	e9c4 55c5 	strd	r5, r5, [r4, #788]	; 0x314
 80181b6:	f009 fc8b 	bl	8021ad0 <memset>
 80181ba:	463a      	mov	r2, r7
 80181bc:	4629      	mov	r1, r5
 80181be:	f504 7065 	add.w	r0, r4, #916	; 0x394
 80181c2:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
 80181c6:	f8c4 5348 	str.w	r5, [r4, #840]	; 0x348
 80181ca:	f8c4 534c 	str.w	r5, [r4, #844]	; 0x34c
 80181ce:	f8c4 5380 	str.w	r5, [r4, #896]	; 0x380
 80181d2:	f884 5384 	strb.w	r5, [r4, #900]	; 0x384
 80181d6:	f884 5385 	strb.w	r5, [r4, #901]	; 0x385
 80181da:	f884 5386 	strb.w	r5, [r4, #902]	; 0x386
 80181de:	f8c4 7390 	str.w	r7, [r4, #912]	; 0x390
 80181e2:	e9c4 56d4 	strd	r5, r6, [r4, #848]	; 0x350
 80181e6:	e9c4 55d6 	strd	r5, r5, [r4, #856]	; 0x358
 80181ea:	e9c4 55d8 	strd	r5, r5, [r4, #864]	; 0x360
 80181ee:	e9c4 56da 	strd	r5, r6, [r4, #872]	; 0x368
 80181f2:	e9c4 55dc 	strd	r5, r5, [r4, #880]	; 0x370
 80181f6:	e9c4 55de 	strd	r5, r5, [r4, #888]	; 0x378
 80181fa:	e9c4 55e2 	strd	r5, r5, [r4, #904]	; 0x388
 80181fe:	f009 fc67 	bl	8021ad0 <memset>
 8018202:	463a      	mov	r2, r7
 8018204:	4629      	mov	r1, r5
 8018206:	f504 6081 	add.w	r0, r4, #1032	; 0x408
 801820a:	f8c4 53b8 	str.w	r5, [r4, #952]	; 0x3b8
 801820e:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
 8018212:	f8c4 53c0 	str.w	r5, [r4, #960]	; 0x3c0
 8018216:	f8c4 53f4 	str.w	r5, [r4, #1012]	; 0x3f4
 801821a:	f884 53f8 	strb.w	r5, [r4, #1016]	; 0x3f8
 801821e:	f884 53f9 	strb.w	r5, [r4, #1017]	; 0x3f9
 8018222:	f884 53fa 	strb.w	r5, [r4, #1018]	; 0x3fa
 8018226:	f8c4 53fc 	str.w	r5, [r4, #1020]	; 0x3fc
 801822a:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
 801822e:	f8c4 7404 	str.w	r7, [r4, #1028]	; 0x404
 8018232:	e9c4 56f1 	strd	r5, r6, [r4, #964]	; 0x3c4
 8018236:	e9c4 55f3 	strd	r5, r5, [r4, #972]	; 0x3cc
 801823a:	e9c4 55f5 	strd	r5, r5, [r4, #980]	; 0x3d4
 801823e:	e9c4 56f7 	strd	r5, r6, [r4, #988]	; 0x3dc
 8018242:	e9c4 55f9 	strd	r5, r5, [r4, #996]	; 0x3e4
 8018246:	e9c4 55fb 	strd	r5, r5, [r4, #1004]	; 0x3ec
 801824a:	f009 fc41 	bl	8021ad0 <memset>
 801824e:	4b19      	ldr	r3, [pc, #100]	; (80182b4 <_ZN4rtps6DomainC1Eh+0x7b4>)
 8018250:	4629      	mov	r1, r5
 8018252:	222c      	movs	r2, #44	; 0x2c
 8018254:	6023      	str	r3, [r4, #0]
 8018256:	f504 608b 	add.w	r0, r4, #1112	; 0x458
 801825a:	f884 844d 	strb.w	r8, [r4, #1101]	; 0x44d
 801825e:	f8c4 8454 	str.w	r8, [r4, #1108]	; 0x454
 8018262:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
 8018266:	f8c4 5440 	str.w	r5, [r4, #1088]	; 0x440
 801826a:	f8a4 5444 	strh.w	r5, [r4, #1092]	; 0x444
 801826e:	f8c4 5450 	str.w	r5, [r4, #1104]	; 0x450
 8018272:	f009 fc2d 	bl	8021ad0 <memset>
 8018276:	4629      	mov	r1, r5
 8018278:	222c      	movs	r2, #44	; 0x2c
 801827a:	f204 4084 	addw	r0, r4, #1156	; 0x484
 801827e:	f8c4 645c 	str.w	r6, [r4, #1116]	; 0x45c
 8018282:	f8c4 647c 	str.w	r6, [r4, #1148]	; 0x47c
 8018286:	f884 5458 	strb.w	r5, [r4, #1112]	; 0x458
 801828a:	f8a4 5468 	strh.w	r5, [r4, #1128]	; 0x468
 801828e:	f009 fc1f 	bl	8021ad0 <memset>
 8018292:	4629      	mov	r1, r5
 8018294:	222c      	movs	r2, #44	; 0x2c
 8018296:	f504 6096 	add.w	r0, r4, #1200	; 0x4b0
 801829a:	f8c4 6488 	str.w	r6, [r4, #1160]	; 0x488
 801829e:	f8c4 64a8 	str.w	r6, [r4, #1192]	; 0x4a8
 80182a2:	f884 5484 	strb.w	r5, [r4, #1156]	; 0x484
 80182a6:	f8a4 5494 	strh.w	r5, [r4, #1172]	; 0x494
 80182aa:	e005      	b.n	80182b8 <_ZN4rtps6DomainC1Eh+0x7b8>
 80182ac:	2a00a8c0 	.word	0x2a00a8c0
 80182b0:	08026590 	.word	0x08026590
 80182b4:	080265b8 	.word	0x080265b8
 80182b8:	f009 fc0a 	bl	8021ad0 <memset>
 80182bc:	4629      	mov	r1, r5
 80182be:	222c      	movs	r2, #44	; 0x2c
 80182c0:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 80182c4:	f8c4 64b4 	str.w	r6, [r4, #1204]	; 0x4b4
 80182c8:	f8c4 64d4 	str.w	r6, [r4, #1236]	; 0x4d4
 80182cc:	f884 54b0 	strb.w	r5, [r4, #1200]	; 0x4b0
 80182d0:	f8a4 54c0 	strh.w	r5, [r4, #1216]	; 0x4c0
 80182d4:	f009 fbfc 	bl	8021ad0 <memset>
 80182d8:	4629      	mov	r1, r5
 80182da:	222c      	movs	r2, #44	; 0x2c
 80182dc:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
 80182e0:	f8c4 64e0 	str.w	r6, [r4, #1248]	; 0x4e0
 80182e4:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
 80182e8:	f884 54dc 	strb.w	r5, [r4, #1244]	; 0x4dc
 80182ec:	f8a4 54ec 	strh.w	r5, [r4, #1260]	; 0x4ec
 80182f0:	f009 fbee 	bl	8021ad0 <memset>
 80182f4:	4629      	mov	r1, r5
 80182f6:	222c      	movs	r2, #44	; 0x2c
 80182f8:	f204 5034 	addw	r0, r4, #1332	; 0x534
 80182fc:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
 8018300:	f8c4 652c 	str.w	r6, [r4, #1324]	; 0x52c
 8018304:	f884 5508 	strb.w	r5, [r4, #1288]	; 0x508
 8018308:	f8a4 5518 	strh.w	r5, [r4, #1304]	; 0x518
 801830c:	f009 fbe0 	bl	8021ad0 <memset>
 8018310:	f8c4 6558 	str.w	r6, [r4, #1368]	; 0x558
 8018314:	4629      	mov	r1, r5
 8018316:	222c      	movs	r2, #44	; 0x2c
 8018318:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
 801831c:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
 8018320:	f884 5534 	strb.w	r5, [r4, #1332]	; 0x534
 8018324:	f8a4 5544 	strh.w	r5, [r4, #1348]	; 0x544
 8018328:	f009 fbd2 	bl	8021ad0 <memset>
 801832c:	f8c4 6564 	str.w	r6, [r4, #1380]	; 0x564
 8018330:	f8c4 6584 	str.w	r6, [r4, #1412]	; 0x584
 8018334:	4629      	mov	r1, r5
 8018336:	f884 5560 	strb.w	r5, [r4, #1376]	; 0x560
 801833a:	222c      	movs	r2, #44	; 0x2c
 801833c:	f8a4 5570 	strh.w	r5, [r4, #1392]	; 0x570
 8018340:	f204 508c 	addw	r0, r4, #1420	; 0x58c
 8018344:	f009 fbc4 	bl	8021ad0 <memset>
 8018348:	f8c4 6590 	str.w	r6, [r4, #1424]	; 0x590
 801834c:	f8c4 65b0 	str.w	r6, [r4, #1456]	; 0x5b0
 8018350:	4629      	mov	r1, r5
 8018352:	f884 558c 	strb.w	r5, [r4, #1420]	; 0x58c
 8018356:	222c      	movs	r2, #44	; 0x2c
 8018358:	f8a4 559c 	strh.w	r5, [r4, #1436]	; 0x59c
 801835c:	f504 60b7 	add.w	r0, r4, #1464	; 0x5b8
 8018360:	f009 fbb6 	bl	8021ad0 <memset>
 8018364:	f8c4 65bc 	str.w	r6, [r4, #1468]	; 0x5bc
 8018368:	f8c4 65dc 	str.w	r6, [r4, #1500]	; 0x5dc
 801836c:	4629      	mov	r1, r5
 801836e:	f884 55b8 	strb.w	r5, [r4, #1464]	; 0x5b8
 8018372:	222c      	movs	r2, #44	; 0x2c
 8018374:	f8a4 55c8 	strh.w	r5, [r4, #1480]	; 0x5c8
 8018378:	f204 50e4 	addw	r0, r4, #1508	; 0x5e4
 801837c:	f009 fba8 	bl	8021ad0 <memset>
 8018380:	f8c4 65e8 	str.w	r6, [r4, #1512]	; 0x5e8
 8018384:	f8c4 6608 	str.w	r6, [r4, #1544]	; 0x608
 8018388:	f504 60c2 	add.w	r0, r4, #1552	; 0x610
 801838c:	f884 55e4 	strb.w	r5, [r4, #1508]	; 0x5e4
 8018390:	4629      	mov	r1, r5
 8018392:	f8a4 55f4 	strh.w	r5, [r4, #1524]	; 0x5f4
 8018396:	222c      	movs	r2, #44	; 0x2c
 8018398:	f009 fb9a 	bl	8021ad0 <memset>
 801839c:	f204 6454 	addw	r4, r4, #1620	; 0x654
 80183a0:	f844 8c08 	str.w	r8, [r4, #-8]
 80183a4:	f804 8c04 	strb.w	r8, [r4, #-4]
 80183a8:	f844 6c40 	str.w	r6, [r4, #-64]
 80183ac:	f844 6c20 	str.w	r6, [r4, #-32]
 80183b0:	f804 5c44 	strb.w	r5, [r4, #-68]
 80183b4:	f824 5c34 	strh.w	r5, [r4, #-52]
 80183b8:	f824 5c18 	strh.w	r5, [r4, #-24]
 80183bc:	f824 5c16 	strh.w	r5, [r4, #-22]
 80183c0:	f844 5c14 	str.w	r5, [r4, #-20]
 80183c4:	f844 5c10 	str.w	r5, [r4, #-16]
 80183c8:	f804 5c03 	strb.w	r5, [r4, #-3]
 80183cc:	455c      	cmp	r4, fp
 80183ce:	f47f ae4f 	bne.w	8018070 <_ZN4rtps6DomainC1Eh+0x570>
 80183d2:	9c01      	ldr	r4, [sp, #4]
 80183d4:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 80183d8:	f649 629c 	movw	r2, #40604	; 0x9e9c
 80183dc:	7823      	ldrb	r3, [r4, #0]
 80183de:	52a5      	strh	r5, [r4, r2]
 80183e0:	ebc3 1043 	rsb	r0, r3, r3, lsl #5
 80183e4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80183e8:	ee18 0a10 	vmov	r0, s16
 80183ec:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80183f0:	b289      	uxth	r1, r1
 80183f2:	f005 f853 	bl	801d49c <_ZN4rtps9UdpDriver19createUdpConnectionEt>
 80183f6:	7823      	ldrb	r3, [r4, #0]
 80183f8:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 80183fc:	ee18 0a10 	vmov	r0, s16
 8018400:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8018404:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018408:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 801840c:	b289      	uxth	r1, r1
 801840e:	f005 f845 	bl	801d49c <_ZN4rtps9UdpDriver19createUdpConnectionEt>
 8018412:	4921      	ldr	r1, [pc, #132]	; (8018498 <_ZN4rtps6DomainC1Eh+0x998>)
 8018414:	ee18 0a10 	vmov	r0, s16
 8018418:	f005 f8c2 	bl	801d5a0 <_ZNK4rtps9UdpDriver18joinMultiCastGroupE8ip4_addr>
 801841c:	9801      	ldr	r0, [sp, #4]
 801841e:	b00f      	add	sp, #60	; 0x3c
 8018420:	ecbd 8b02 	vpop	{d8}
 8018424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018428:	9802      	ldr	r0, [sp, #8]
 801842a:	f004 fc47 	bl	801ccbc <_ZN4rtps10ThreadPoolD1Ev>
 801842e:	f008 fc2d 	bl	8020c8c <__cxa_end_cleanup>
 8018432:	9b04      	ldr	r3, [sp, #16]
 8018434:	459b      	cmp	fp, r3
 8018436:	d118      	bne.n	801846a <_ZN4rtps6DomainC1Eh+0x96a>
 8018438:	9c07      	ldr	r4, [sp, #28]
 801843a:	9b05      	ldr	r3, [sp, #20]
 801843c:	429c      	cmp	r4, r3
 801843e:	d11a      	bne.n	8018476 <_ZN4rtps6DomainC1Eh+0x976>
 8018440:	9c03      	ldr	r4, [sp, #12]
 8018442:	9b06      	ldr	r3, [sp, #24]
 8018444:	429c      	cmp	r4, r3
 8018446:	d11f      	bne.n	8018488 <_ZN4rtps6DomainC1Eh+0x988>
 8018448:	ee18 0a90 	vmov	r0, s17
 801844c:	f002 fd72 	bl	801af34 <_ZN4rtps11ParticipantD1Ev>
 8018450:	9b01      	ldr	r3, [sp, #4]
 8018452:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8018456:	ee18 3a10 	vmov	r3, s16
 801845a:	429c      	cmp	r4, r3
 801845c:	d0e4      	beq.n	8018428 <_ZN4rtps6DomainC1Eh+0x928>
 801845e:	3c08      	subs	r4, #8
 8018460:	4620      	mov	r0, r4
 8018462:	f7ff fb39 	bl	8017ad8 <_ZN4rtps13UdpConnectionD1Ev>
 8018466:	e7f6      	b.n	8018456 <_ZN4rtps6DomainC1Eh+0x956>
 8018468:	e7f2      	b.n	8018450 <_ZN4rtps6DomainC1Eh+0x950>
 801846a:	f2ab 6b54 	subw	fp, fp, #1620	; 0x654
 801846e:	4658      	mov	r0, fp
 8018470:	f7ff f916 	bl	80176a0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED1Ev>
 8018474:	e7dd      	b.n	8018432 <_ZN4rtps6DomainC1Eh+0x932>
 8018476:	f5a4 7449 	sub.w	r4, r4, #804	; 0x324
 801847a:	4b08      	ldr	r3, [pc, #32]	; (801849c <_ZN4rtps6DomainC1Eh+0x99c>)
 801847c:	f504 7043 	add.w	r0, r4, #780	; 0x30c
 8018480:	6023      	str	r3, [r4, #0]
 8018482:	f002 f9b3 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 8018486:	e7d8      	b.n	801843a <_ZN4rtps6DomainC1Eh+0x93a>
 8018488:	f5a4 64c9 	sub.w	r4, r4, #1608	; 0x648
 801848c:	6823      	ldr	r3, [r4, #0]
 801848e:	4620      	mov	r0, r4
 8018490:	69db      	ldr	r3, [r3, #28]
 8018492:	4798      	blx	r3
 8018494:	e7d5      	b.n	8018442 <_ZN4rtps6DomainC1Eh+0x942>
 8018496:	bf00      	nop
 8018498:	0100ffef 	.word	0x0100ffef
 801849c:	08026590 	.word	0x08026590

080184a0 <_ZN4rtps6Domain12completeInitEv>:
 80184a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184a4:	4680      	mov	r8, r0
 80184a6:	3004      	adds	r0, #4
 80184a8:	f004 fc64 	bl	801cd74 <_ZN4rtps10ThreadPool12startThreadsEv>
 80184ac:	f243 731d 	movw	r3, #14109	; 0x371d
 80184b0:	f649 629d 	movw	r2, #40605	; 0x9e9d
 80184b4:	f918 3003 	ldrsb.w	r3, [r8, r3]
 80184b8:	f808 0002 	strb.w	r0, [r8, r2]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	dd16      	ble.n	80184ee <_ZN4rtps6Domain12completeInitEv+0x4e>
 80184c0:	f243 761d 	movw	r6, #14109	; 0x371d
 80184c4:	f508 75e2 	add.w	r5, r8, #452	; 0x1c4
 80184c8:	2400      	movs	r4, #0
 80184ca:	f243 5758 	movw	r7, #13656	; 0x3558
 80184ce:	4446      	add	r6, r8
 80184d0:	4628      	mov	r0, r5
 80184d2:	3401      	adds	r4, #1
 80184d4:	f003 f9ba 	bl	801b84c <_ZN4rtps11Participant12getSPDPAgentEv>
 80184d8:	443d      	add	r5, r7
 80184da:	f003 fe11 	bl	801c100 <_ZN4rtps9SPDPAgent5startEv>
 80184de:	f996 3000 	ldrsb.w	r3, [r6]
 80184e2:	42a3      	cmp	r3, r4
 80184e4:	dcf4      	bgt.n	80184d0 <_ZN4rtps6Domain12completeInitEv+0x30>
 80184e6:	f649 639d 	movw	r3, #40605	; 0x9e9d
 80184ea:	f818 0003 	ldrb.w	r0, [r8, r3]
 80184ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184f2:	bf00      	nop

080184f4 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE>:
 80184f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184f8:	4a4e      	ldr	r2, [pc, #312]	; (8018634 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x140>)
 80184fa:	460d      	mov	r5, r1
 80184fc:	8909      	ldrh	r1, [r1, #8]
 80184fe:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
 8018502:	7806      	ldrb	r6, [r0, #0]
 8018504:	440a      	add	r2, r1
 8018506:	68eb      	ldr	r3, [r5, #12]
 8018508:	fb04 2406 	mla	r4, r4, r6, r2
 801850c:	bb1c      	cbnz	r4, 8018556 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x62>
 801850e:	f243 721d 	movw	r2, #14109	; 0x371d
 8018512:	f243 711c 	movw	r1, #14108	; 0x371c
 8018516:	5682      	ldrsb	r2, [r0, r2]
 8018518:	5c41      	ldrb	r1, [r0, r1]
 801851a:	1a52      	subs	r2, r2, r1
 801851c:	2a00      	cmp	r2, #0
 801851e:	dd18      	ble.n	8018552 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x5e>
 8018520:	f243 771d 	movw	r7, #14109	; 0x371d
 8018524:	f243 761c 	movw	r6, #14108	; 0x371c
 8018528:	f500 79e2 	add.w	r9, r0, #452	; 0x1c4
 801852c:	f243 5858 	movw	r8, #13656	; 0x3558
 8018530:	4407      	add	r7, r0
 8018532:	4406      	add	r6, r0
 8018534:	e000      	b.n	8018538 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x44>
 8018536:	68eb      	ldr	r3, [r5, #12]
 8018538:	895a      	ldrh	r2, [r3, #10]
 801853a:	4648      	mov	r0, r9
 801853c:	6859      	ldr	r1, [r3, #4]
 801853e:	3401      	adds	r4, #1
 8018540:	f003 fa14 	bl	801b96c <_ZN4rtps11Participant10newMessageEPKht>
 8018544:	f997 3000 	ldrsb.w	r3, [r7]
 8018548:	7832      	ldrb	r2, [r6, #0]
 801854a:	44c1      	add	r9, r8
 801854c:	1a9b      	subs	r3, r3, r2
 801854e:	42a3      	cmp	r3, r4
 8018550:	dcf1      	bgt.n	8018536 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x42>
 8018552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018556:	3c01      	subs	r4, #1
 8018558:	2c08      	cmp	r4, #8
 801855a:	d838      	bhi.n	80185ce <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0xda>
 801855c:	f243 731d 	movw	r3, #14109	; 0x371d
 8018560:	f243 721c 	movw	r2, #14108	; 0x371c
 8018564:	56c3      	ldrsb	r3, [r0, r3]
 8018566:	5c82      	ldrb	r2, [r0, r2]
 8018568:	1a9b      	subs	r3, r3, r2
 801856a:	2b00      	cmp	r3, #0
 801856c:	ddf1      	ble.n	8018552 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x5e>
 801856e:	f243 771d 	movw	r7, #14109	; 0x371d
 8018572:	f243 761c 	movw	r6, #14108	; 0x371c
 8018576:	f500 74e2 	add.w	r4, r0, #452	; 0x1c4
 801857a:	f04f 0800 	mov.w	r8, #0
 801857e:	4407      	add	r7, r0
 8018580:	4406      	add	r6, r0
 8018582:	f243 5958 	movw	r9, #13656	; 0x3558
 8018586:	6869      	ldr	r1, [r5, #4]
 8018588:	4620      	mov	r0, r4
 801858a:	f002 fffd 	bl	801b588 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr>
 801858e:	b970      	cbnz	r0, 80185ae <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0xba>
 8018590:	f997 3000 	ldrsb.w	r3, [r7]
 8018594:	f108 0801 	add.w	r8, r8, #1
 8018598:	7832      	ldrb	r2, [r6, #0]
 801859a:	444c      	add	r4, r9
 801859c:	1a9b      	subs	r3, r3, r2
 801859e:	4543      	cmp	r3, r8
 80185a0:	ddd7      	ble.n	8018552 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x5e>
 80185a2:	6869      	ldr	r1, [r5, #4]
 80185a4:	4620      	mov	r0, r4
 80185a6:	f002 ffef 	bl	801b588 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr>
 80185aa:	2800      	cmp	r0, #0
 80185ac:	d0f0      	beq.n	8018590 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x9c>
 80185ae:	68eb      	ldr	r3, [r5, #12]
 80185b0:	4620      	mov	r0, r4
 80185b2:	f108 0801 	add.w	r8, r8, #1
 80185b6:	444c      	add	r4, r9
 80185b8:	895a      	ldrh	r2, [r3, #10]
 80185ba:	6859      	ldr	r1, [r3, #4]
 80185bc:	f003 f9d6 	bl	801b96c <_ZN4rtps11Participant10newMessageEPKht>
 80185c0:	f997 3000 	ldrsb.w	r3, [r7]
 80185c4:	7832      	ldrb	r2, [r6, #0]
 80185c6:	1a9b      	subs	r3, r3, r2
 80185c8:	4598      	cmp	r8, r3
 80185ca:	dbdc      	blt.n	8018586 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x92>
 80185cc:	e7c1      	b.n	8018552 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x5e>
 80185ce:	24fa      	movs	r4, #250	; 0xfa
 80185d0:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 80185d4:	fb14 2606 	smlabb	r6, r4, r6, r2
 80185d8:	07cc      	lsls	r4, r1, #31
 80185da:	f04f 0402 	mov.w	r4, #2
 80185de:	eba1 0206 	sub.w	r2, r1, r6
 80185e2:	bf54      	ite	pl
 80185e4:	250a      	movpl	r5, #10
 80185e6:	250b      	movmi	r5, #11
 80185e8:	b2d2      	uxtb	r2, r2
 80185ea:	1b52      	subs	r2, r2, r5
 80185ec:	b252      	sxtb	r2, r2
 80185ee:	2a00      	cmp	r2, #0
 80185f0:	bfb8      	it	lt
 80185f2:	3201      	addlt	r2, #1
 80185f4:	1052      	asrs	r2, r2, #1
 80185f6:	fb14 6402 	smlabb	r4, r4, r2, r6
 80185fa:	442c      	add	r4, r5
 80185fc:	428c      	cmp	r4, r1
 80185fe:	d1a8      	bne.n	8018552 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x5e>
 8018600:	1c51      	adds	r1, r2, #1
 8018602:	d0a6      	beq.n	8018552 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x5e>
 8018604:	f243 711d 	movw	r1, #14109	; 0x371d
 8018608:	5641      	ldrsb	r1, [r0, r1]
 801860a:	4291      	cmp	r1, r2
 801860c:	dda1      	ble.n	8018552 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x5e>
 801860e:	f243 711c 	movw	r1, #14108	; 0x371c
 8018612:	5c44      	ldrb	r4, [r0, r1]
 8018614:	4294      	cmp	r4, r2
 8018616:	dc9c      	bgt.n	8018552 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE+0x5e>
 8018618:	1b14      	subs	r4, r2, r4
 801861a:	f243 5558 	movw	r5, #13656	; 0x3558
 801861e:	f500 70e2 	add.w	r0, r0, #452	; 0x1c4
 8018622:	895a      	ldrh	r2, [r3, #10]
 8018624:	6859      	ldr	r1, [r3, #4]
 8018626:	fb05 0004 	mla	r0, r5, r4, r0
 801862a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801862e:	f003 b99d 	b.w	801b96c <_ZN4rtps11Participant10newMessageEPKht>
 8018632:	bf00      	nop
 8018634:	ffffe318 	.word	0xffffe318

08018638 <_ZN4rtps6Domain14receiveJumppadEPvRKNS_10PacketInfoE>:
 8018638:	f7ff bf5c 	b.w	80184f4 <_ZN4rtps6Domain15receiveCallbackERKNS_10PacketInfoE>

0801863c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b>:
 801863c:	b084      	sub	sp, #16
 801863e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018642:	b082      	sub	sp, #8
 8018644:	4604      	mov	r4, r0
 8018646:	f200 402c 	addw	r0, r0, #1068	; 0x42c
 801864a:	ad09      	add	r5, sp, #36	; 0x24
 801864c:	f89d 71fc 	ldrb.w	r7, [sp, #508]	; 0x1fc
 8018650:	f89d 6208 	ldrb.w	r6, [sp, #520]	; 0x208
 8018654:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8018658:	f7fe f986 	bl	8016968 <sys_mutex_new>
 801865c:	bb90      	cbnz	r0, 80186c4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0x88>
 801865e:	9b81      	ldr	r3, [sp, #516]	; 0x204
 8018660:	4629      	mov	r1, r5
 8018662:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8018666:	1d20      	adds	r0, r4, #4
 8018668:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
 801866c:	f104 0510 	add.w	r5, r4, #16
 8018670:	f009 fa06 	bl	8021a80 <memcpy>
 8018674:	f04f 0803 	mov.w	r8, #3
 8018678:	9980      	ldr	r1, [sp, #512]	; 0x200
 801867a:	4628      	mov	r0, r5
 801867c:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
 801867e:	4642      	mov	r2, r8
 8018680:	f8c4 1430 	str.w	r1, [r4, #1072]	; 0x430
 8018684:	f884 744d 	strb.w	r7, [r4, #1101]	; 0x44d
 8018688:	4922      	ldr	r1, [pc, #136]	; (8018714 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xd8>)
 801868a:	f884 644c 	strb.w	r6, [r4, #1100]	; 0x44c
 801868e:	f8a4 3434 	strh.w	r3, [r4, #1076]	; 0x434
 8018692:	f009 f9e5 	bl	8021a60 <memcmp>
 8018696:	b9d8      	cbnz	r0, 80186d0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0x94>
 8018698:	7ce3      	ldrb	r3, [r4, #19]
 801869a:	2bc2      	cmp	r3, #194	; 0xc2
 801869c:	d12d      	bne.n	80186fa <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xbe>
 801869e:	2013      	movs	r0, #19
 80186a0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80186a4:	4622      	mov	r2, r4
 80186a6:	491c      	ldr	r1, [pc, #112]	; (8018718 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xdc>)
 80186a8:	9000      	str	r0, [sp, #0]
 80186aa:	481c      	ldr	r0, [pc, #112]	; (801871c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xe0>)
 80186ac:	f7fe f99b 	bl	80169e6 <sys_thread_new>
 80186b0:	f8c4 0648 	str.w	r0, [r4, #1608]	; 0x648
 80186b4:	2001      	movs	r0, #1
 80186b6:	f884 01dc 	strb.w	r0, [r4, #476]	; 0x1dc
 80186ba:	b002      	add	sp, #8
 80186bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186c0:	b004      	add	sp, #16
 80186c2:	4770      	bx	lr
 80186c4:	2000      	movs	r0, #0
 80186c6:	b002      	add	sp, #8
 80186c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186cc:	b004      	add	sp, #16
 80186ce:	4770      	bx	lr
 80186d0:	4642      	mov	r2, r8
 80186d2:	4628      	mov	r0, r5
 80186d4:	4912      	ldr	r1, [pc, #72]	; (8018720 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xe4>)
 80186d6:	f009 f9c3 	bl	8021a60 <memcmp>
 80186da:	b970      	cbnz	r0, 80186fa <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xbe>
 80186dc:	7ce3      	ldrb	r3, [r4, #19]
 80186de:	2bc2      	cmp	r3, #194	; 0xc2
 80186e0:	d10b      	bne.n	80186fa <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xbe>
 80186e2:	2013      	movs	r0, #19
 80186e4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80186e8:	4622      	mov	r2, r4
 80186ea:	490b      	ldr	r1, [pc, #44]	; (8018718 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xdc>)
 80186ec:	9000      	str	r0, [sp, #0]
 80186ee:	480d      	ldr	r0, [pc, #52]	; (8018724 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xe8>)
 80186f0:	f7fe f979 	bl	80169e6 <sys_thread_new>
 80186f4:	f8c4 0648 	str.w	r0, [r4, #1608]	; 0x648
 80186f8:	e7dc      	b.n	80186b4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0x78>
 80186fa:	2013      	movs	r0, #19
 80186fc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8018700:	4622      	mov	r2, r4
 8018702:	4905      	ldr	r1, [pc, #20]	; (8018718 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xdc>)
 8018704:	9000      	str	r0, [sp, #0]
 8018706:	4808      	ldr	r0, [pc, #32]	; (8018728 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0xec>)
 8018708:	f7fe f96d 	bl	80169e6 <sys_thread_new>
 801870c:	f8c4 0648 	str.w	r0, [r4, #1608]	; 0x648
 8018710:	e7d0      	b.n	80186b4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b+0x78>
 8018712:	bf00      	nop
 8018714:	08026600 	.word	0x08026600
 8018718:	08019579 	.word	0x08019579
 801871c:	0802652c 	.word	0x0802652c
 8018720:	08026608 	.word	0x08026608
 8018724:	08026544 	.word	0x08026544
 8018728:	08026538 	.word	0x08026538

0801872c <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb>:
 801872c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018730:	f2ad 5dac 	subw	sp, sp, #1452	; 0x5ac
 8018734:	4699      	mov	r9, r3
 8018736:	4606      	mov	r6, r0
 8018738:	460f      	mov	r7, r1
 801873a:	f89d 35d4 	ldrb.w	r3, [sp, #1492]	; 0x5d4
 801873e:	4690      	mov	r8, r2
 8018740:	f89d b5d0 	ldrb.w	fp, [sp, #1488]	; 0x5d0
 8018744:	9379      	str	r3, [sp, #484]	; 0x1e4
 8018746:	f1bb 0f00 	cmp.w	fp, #0
 801874a:	f000 80dc 	beq.w	8018906 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb+0x1da>
 801874e:	f649 639c 	movw	r3, #40604	; 0x9e9c
 8018752:	5cc3      	ldrb	r3, [r0, r3]
 8018754:	2b05      	cmp	r3, #5
 8018756:	f200 80dc 	bhi.w	8018912 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb+0x1e6>
 801875a:	4638      	mov	r0, r7
 801875c:	f002 fc68 	bl	801b030 <_ZN4rtps11Participant13isWritersFullEv>
 8018760:	4604      	mov	r4, r0
 8018762:	2800      	cmp	r0, #0
 8018764:	f040 80d5 	bne.w	8018912 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb+0x1e6>
 8018768:	ad7e      	add	r5, sp, #504	; 0x1f8
 801876a:	7833      	ldrb	r3, [r6, #0]
 801876c:	22c8      	movs	r2, #200	; 0xc8
 801876e:	4621      	mov	r1, r4
 8018770:	a882      	add	r0, sp, #520	; 0x208
 8018772:	937a      	str	r3, [sp, #488]	; 0x1e8
 8018774:	f04f 0a01 	mov.w	sl, #1
 8018778:	e9c5 4400 	strd	r4, r4, [r5]
 801877c:	e9c5 4402 	strd	r4, r4, [r5, #8]
 8018780:	f009 f9a6 	bl	8021ad0 <memset>
 8018784:	22c8      	movs	r2, #200	; 0xc8
 8018786:	4621      	mov	r1, r4
 8018788:	a8b4      	add	r0, sp, #720	; 0x2d0
 801878a:	f009 f9a1 	bl	8021ad0 <memset>
 801878e:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8018790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018794:	f50d 7e74 	add.w	lr, sp, #976	; 0x3d0
 8018798:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801879c:	94f6      	str	r4, [sp, #984]	; 0x3d8
 801879e:	94f7      	str	r4, [sp, #988]	; 0x3dc
 80187a0:	f50d 7c6e 	add.w	ip, sp, #952	; 0x3b8
 80187a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80187a8:	f8c5 41b8 	str.w	r4, [r5, #440]	; 0x1b8
 80187ac:	f8c5 a1a8 	str.w	sl, [r5, #424]	; 0x1a8
 80187b0:	e9cd 24f4 	strd	r2, r4, [sp, #976]	; 0x3d0
 80187b4:	f641 42f3 	movw	r2, #7411	; 0x1cf3
 80187b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80187bc:	4a6f      	ldr	r2, [pc, #444]	; (801897c <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb+0x250>)
 80187be:	b29b      	uxth	r3, r3
 80187c0:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
 80187c4:	e9cd 44f8 	strd	r4, r4, [sp, #992]	; 0x3e0
 80187c8:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
 80187cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80187d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187d4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80187d8:	e9c5 446c 	strd	r4, r4, [r5, #432]	; 0x1b0
 80187dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80187e0:	e9c5 aa68 	strd	sl, sl, [r5, #416]	; 0x1a0
 80187e4:	4640      	mov	r0, r8
 80187e6:	f7e7 fd6d 	bl	80002c4 <strlen>
 80187ea:	28c8      	cmp	r0, #200	; 0xc8
 80187ec:	907a      	str	r0, [sp, #488]	; 0x1e8
 80187ee:	f200 8090 	bhi.w	8018912 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb+0x1e6>
 80187f2:	4648      	mov	r0, r9
 80187f4:	f7e7 fd66 	bl	80002c4 <strlen>
 80187f8:	28c8      	cmp	r0, #200	; 0xc8
 80187fa:	907b      	str	r0, [sp, #492]	; 0x1ec
 80187fc:	f200 8089 	bhi.w	8018912 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb+0x1e6>
 8018800:	9a7a      	ldr	r2, [sp, #488]	; 0x1e8
 8018802:	4641      	mov	r1, r8
 8018804:	a8b4      	add	r0, sp, #720	; 0x2d0
 8018806:	4452      	add	r2, sl
 8018808:	f009 f93a 	bl	8021a80 <memcpy>
 801880c:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 801880e:	4649      	mov	r1, r9
 8018810:	a882      	add	r0, sp, #520	; 0x208
 8018812:	eb03 020a 	add.w	r2, r3, sl
 8018816:	f009 f933 	bl	8021a80 <memcpy>
 801881a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801881e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8018822:	4638      	mov	r0, r7
 8018824:	f002 fba2 	bl	801af6c <_ZN4rtps11Participant20getNextUserEntityKeyEv>
 8018828:	7833      	ldrb	r3, [r6, #0]
 801882a:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801882e:	f997 800c 	ldrsb.w	r8, [r7, #12]
 8018832:	ebc3 1c43 	rsb	ip, r3, r3, lsl #5
 8018836:	f88d 01f4 	strb.w	r0, [sp, #500]	; 0x1f4
 801883a:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801883e:	f88d 11f5 	strb.w	r1, [sp, #501]	; 0x1f5
 8018842:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8018846:	f641 41f3 	movw	r1, #7411	; 0x1cf3
 801884a:	f88d 01f6 	strb.w	r0, [sp, #502]	; 0x1f6
 801884e:	4498      	add	r8, r3
 8018850:	4a4b      	ldr	r2, [pc, #300]	; (8018980 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb+0x254>)
 8018852:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
 8018854:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8018858:	6811      	ldr	r1, [r2, #0]
 801885a:	0c18      	lsrs	r0, r3, #16
 801885c:	2203      	movs	r2, #3
 801885e:	fa1f f888 	uxth.w	r8, r8
 8018862:	f8c5 a1a8 	str.w	sl, [r5, #424]	; 0x1a8
 8018866:	f8c5 41b8 	str.w	r4, [r5, #440]	; 0x1b8
 801886a:	f8c5 a1a4 	str.w	sl, [r5, #420]	; 0x1a4
 801886e:	f88d 0206 	strb.w	r0, [sp, #518]	; 0x206
 8018872:	f8ad 3204 	strh.w	r3, [sp, #516]	; 0x204
 8018876:	f8c5 81ac 	str.w	r8, [r5, #428]	; 0x1ac
 801887a:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
 801887e:	73ea      	strb	r2, [r5, #15]
 8018880:	e9c5 446c 	strd	r4, r4, [r5, #432]	; 0x1b0
 8018884:	f1bb 0f00 	cmp.w	fp, #0
 8018888:	d149      	bne.n	801891e <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb+0x1f2>
 801888a:	f246 53c4 	movw	r3, #26052	; 0x65c4
 801888e:	4629      	mov	r1, r5
 8018890:	f8c5 a1a0 	str.w	sl, [r5, #416]	; 0x1a0
 8018894:	f44f 65c9 	mov.w	r5, #1608	; 0x648
 8018898:	f816 9003 	ldrb.w	r9, [r6, r3]
 801889c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80188a0:	a8f4      	add	r0, sp, #976	; 0x3d0
 80188a2:	f109 0401 	add.w	r4, r9, #1
 80188a6:	fb05 f509 	mul.w	r5, r5, r9
 80188aa:	54f4      	strb	r4, [r6, r3]
 80188ac:	f243 7420 	movw	r4, #14112	; 0x3720
 80188b0:	f009 f8e6 	bl	8021a80 <memcpy>
 80188b4:	f205 402c 	addw	r0, r5, #1068	; 0x42c
 80188b8:	4434      	add	r4, r6
 80188ba:	4420      	add	r0, r4
 80188bc:	442c      	add	r4, r5
 80188be:	f7fe f853 	bl	8016968 <sys_mutex_new>
 80188c2:	b9b8      	cbnz	r0, 80188f4 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb+0x1c8>
 80188c4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80188c8:	a9f4      	add	r1, sp, #976	; 0x3d0
 80188ca:	1d20      	adds	r0, r4, #4
 80188cc:	f8cd 857c 	str.w	r8, [sp, #1404]	; 0x57c
 80188d0:	f009 f8d6 	bl	8021a80 <memcpy>
 80188d4:	1d33      	adds	r3, r6, #4
 80188d6:	9a79      	ldr	r2, [sp, #484]	; 0x1e4
 80188d8:	f506 76a0 	add.w	r6, r6, #320	; 0x140
 80188dc:	f8a4 8434 	strh.w	r8, [r4, #1076]	; 0x434
 80188e0:	f884 a44d 	strb.w	sl, [r4, #1101]	; 0x44d
 80188e4:	f884 244c 	strb.w	r2, [r4, #1100]	; 0x44c
 80188e8:	f884 a1dc 	strb.w	sl, [r4, #476]	; 0x1dc
 80188ec:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
 80188f0:	f8c4 6448 	str.w	r6, [r4, #1096]	; 0x448
 80188f4:	4638      	mov	r0, r7
 80188f6:	4621      	mov	r1, r4
 80188f8:	f002 fb7c 	bl	801aff4 <_ZN4rtps11Participant9addWriterEPNS_6WriterE>
 80188fc:	4620      	mov	r0, r4
 80188fe:	f20d 5dac 	addw	sp, sp, #1452	; 0x5ac
 8018902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018906:	f246 53c4 	movw	r3, #26052	; 0x65c4
 801890a:	5cc3      	ldrb	r3, [r0, r3]
 801890c:	2b04      	cmp	r3, #4
 801890e:	f67f af24 	bls.w	801875a <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_bb+0x2e>
 8018912:	2400      	movs	r4, #0
 8018914:	4620      	mov	r0, r4
 8018916:	f20d 5dac 	addw	sp, sp, #1452	; 0x5ac
 801891a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801891e:	9879      	ldr	r0, [sp, #484]	; 0x1e4
 8018920:	f649 629c 	movw	r2, #40604	; 0x9e9c
 8018924:	f647 03a4 	movw	r3, #30884	; 0x78a4
 8018928:	a981      	add	r1, sp, #516	; 0x204
 801892a:	9076      	str	r0, [sp, #472]	; 0x1d8
 801892c:	f240 6054 	movw	r0, #1620	; 0x654
 8018930:	5cb4      	ldrb	r4, [r6, r2]
 8018932:	4433      	add	r3, r6
 8018934:	f8cd a1cc 	str.w	sl, [sp, #460]	; 0x1cc
 8018938:	eb04 0c0a 	add.w	ip, r4, sl
 801893c:	fb00 3404 	mla	r4, r0, r4, r3
 8018940:	2002      	movs	r0, #2
 8018942:	f506 73a0 	add.w	r3, r6, #320	; 0x140
 8018946:	f806 c002 	strb.w	ip, [r6, r2]
 801894a:	3604      	adds	r6, #4
 801894c:	f8c5 01a0 	str.w	r0, [r5, #416]	; 0x1a0
 8018950:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8018954:	4668      	mov	r0, sp
 8018956:	e9cd 6374 	strd	r6, r3, [sp, #464]	; 0x1d0
 801895a:	f009 f891 	bl	8021a80 <memcpy>
 801895e:	4620      	mov	r0, r4
 8018960:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8018964:	f7ff fe6a 	bl	801863c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b>
 8018968:	4621      	mov	r1, r4
 801896a:	4638      	mov	r0, r7
 801896c:	f002 fb42 	bl	801aff4 <_ZN4rtps11Participant9addWriterEPNS_6WriterE>
 8018970:	4620      	mov	r0, r4
 8018972:	f20d 5dac 	addw	sp, sp, #1452	; 0x5ac
 8018976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801897a:	bf00      	nop
 801897c:	2a00a8c0 	.word	0x2a00a8c0
 8018980:	20018d44 	.word	0x20018d44

08018984 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv>:
 8018984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018988:	f890 61e0 	ldrb.w	r6, [r0, #480]	; 0x1e0
 801898c:	b087      	sub	sp, #28
 801898e:	4680      	mov	r8, r0
 8018990:	f500 7af0 	add.w	sl, r0, #480	; 0x1e0
 8018994:	f016 0301 	ands.w	r3, r6, #1
 8018998:	f8d0 91e4 	ldr.w	r9, [r0, #484]	; 0x1e4
 801899c:	9303      	str	r3, [sp, #12]
 801899e:	d117      	bne.n	80189d0 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x4c>
 80189a0:	f1b9 0f00 	cmp.w	r9, #0
 80189a4:	d011      	beq.n	80189ca <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x46>
 80189a6:	2201      	movs	r2, #1
 80189a8:	f002 0307 	and.w	r3, r2, #7
 80189ac:	1c51      	adds	r1, r2, #1
 80189ae:	4615      	mov	r5, r2
 80189b0:	fa46 f303 	asr.w	r3, r6, r3
 80189b4:	f003 0301 	and.w	r3, r3, #1
 80189b8:	2a04      	cmp	r2, #4
 80189ba:	bf88      	it	hi
 80189bc:	f043 0301 	orrhi.w	r3, r3, #1
 80189c0:	b2ca      	uxtb	r2, r1
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d0f0      	beq.n	80189a8 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x24>
 80189c6:	2d05      	cmp	r5, #5
 80189c8:	d103      	bne.n	80189d2 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x4e>
 80189ca:	b007      	add	sp, #28
 80189cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189d0:	2500      	movs	r5, #0
 80189d2:	f04f 0b74 	mov.w	fp, #116	; 0x74
 80189d6:	464b      	mov	r3, r9
 80189d8:	fb0b 8205 	mla	r2, fp, r5, r8
 80189dc:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
 80189e0:	3101      	adds	r1, #1
 80189e2:	d116      	bne.n	8018a12 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x8e>
 80189e4:	2100      	movs	r1, #0
 80189e6:	f8a2 1228 	strh.w	r1, [r2, #552]	; 0x228
 80189ea:	b913      	cbnz	r3, 80189f2 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x6e>
 80189ec:	e7ed      	b.n	80189ca <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x46>
 80189ee:	2d04      	cmp	r5, #4
 80189f0:	d807      	bhi.n	8018a02 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x7e>
 80189f2:	3501      	adds	r5, #1
 80189f4:	f005 0207 	and.w	r2, r5, #7
 80189f8:	b2ed      	uxtb	r5, r5
 80189fa:	fa46 f202 	asr.w	r2, r6, r2
 80189fe:	07d2      	lsls	r2, r2, #31
 8018a00:	d5f5      	bpl.n	80189ee <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x6a>
 8018a02:	2d05      	cmp	r5, #5
 8018a04:	d0e1      	beq.n	80189ca <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x46>
 8018a06:	fb0b 8205 	mla	r2, fp, r5, r8
 8018a0a:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
 8018a0e:	3101      	adds	r1, #1
 8018a10:	d0e8      	beq.n	80189e4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x60>
 8018a12:	9a03      	ldr	r2, [sp, #12]
 8018a14:	2a00      	cmp	r2, #0
 8018a16:	d174      	bne.n	8018b02 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x17e>
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d06f      	beq.n	8018afc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x178>
 8018a1c:	4614      	mov	r4, r2
 8018a1e:	e001      	b.n	8018a24 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xa0>
 8018a20:	2c04      	cmp	r4, #4
 8018a22:	d807      	bhi.n	8018a34 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xb0>
 8018a24:	3401      	adds	r4, #1
 8018a26:	f004 0207 	and.w	r2, r4, #7
 8018a2a:	b2e4      	uxtb	r4, r4
 8018a2c:	fa46 f202 	asr.w	r2, r6, r2
 8018a30:	07d0      	lsls	r0, r2, #31
 8018a32:	d5f5      	bpl.n	8018a20 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x9c>
 8018a34:	2c05      	cmp	r4, #5
 8018a36:	d061      	beq.n	8018afc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x178>
 8018a38:	b229      	sxth	r1, r5
 8018a3a:	fb0b 8205 	mla	r2, fp, r5, r8
 8018a3e:	f04f 0e00 	mov.w	lr, #0
 8018a42:	9202      	str	r2, [sp, #8]
 8018a44:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8018a48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018a4c:	0089      	lsls	r1, r1, #2
 8018a4e:	f101 0218 	add.w	r2, r1, #24
 8018a52:	f101 0930 	add.w	r9, r1, #48	; 0x30
 8018a56:	3114      	adds	r1, #20
 8018a58:	4452      	add	r2, sl
 8018a5a:	44d1      	add	r9, sl
 8018a5c:	9201      	str	r2, [sp, #4]
 8018a5e:	eb0a 0201 	add.w	r2, sl, r1
 8018a62:	9204      	str	r2, [sp, #16]
 8018a64:	fb0b 8704 	mla	r7, fp, r4, r8
 8018a68:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8018a6c:	2a01      	cmp	r2, #1
 8018a6e:	d011      	beq.n	8018a94 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x110>
 8018a70:	b913      	cbnz	r3, 8018a78 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xf4>
 8018a72:	e03f      	b.n	8018af4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x170>
 8018a74:	2c04      	cmp	r4, #4
 8018a76:	d807      	bhi.n	8018a88 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x104>
 8018a78:	3401      	adds	r4, #1
 8018a7a:	f004 0207 	and.w	r2, r4, #7
 8018a7e:	b2e4      	uxtb	r4, r4
 8018a80:	fa46 f202 	asr.w	r2, r6, r2
 8018a84:	07d1      	lsls	r1, r2, #31
 8018a86:	d5f5      	bpl.n	8018a74 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xf0>
 8018a88:	2c05      	cmp	r4, #5
 8018a8a:	d1eb      	bne.n	8018a64 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xe0>
 8018a8c:	f1be 0f00 	cmp.w	lr, #0
 8018a90:	d1af      	bne.n	80189f2 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x6e>
 8018a92:	e033      	b.n	8018afc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x178>
 8018a94:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8018a98:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8018a9c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8018aa0:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
 8018aa4:	0080      	lsls	r0, r0, #2
 8018aa6:	f8d1 c044 	ldr.w	ip, [r1, #68]	; 0x44
 8018aaa:	4562      	cmp	r2, ip
 8018aac:	d1e0      	bne.n	8018a70 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xec>
 8018aae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8018ab0:	9901      	ldr	r1, [sp, #4]
 8018ab2:	6949      	ldr	r1, [r1, #20]
 8018ab4:	4291      	cmp	r1, r2
 8018ab6:	d0db      	beq.n	8018a70 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xec>
 8018ab8:	f897 2229 	ldrb.w	r2, [r7, #553]	; 0x229
 8018abc:	bb52      	cbnz	r2, 8018b14 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x190>
 8018abe:	9305      	str	r3, [sp, #20]
 8018ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018ac4:	f240 1101 	movw	r1, #257	; 0x101
 8018ac8:	3014      	adds	r0, #20
 8018aca:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8018ace:	2203      	movs	r2, #3
 8018ad0:	9b02      	ldr	r3, [sp, #8]
 8018ad2:	4450      	add	r0, sl
 8018ad4:	f8a3 1228 	strh.w	r1, [r3, #552]	; 0x228
 8018ad8:	9904      	ldr	r1, [sp, #16]
 8018ada:	f008 ffc1 	bl	8021a60 <memcmp>
 8018ade:	9b05      	ldr	r3, [sp, #20]
 8018ae0:	b188      	cbz	r0, 8018b06 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x182>
 8018ae2:	9a02      	ldr	r2, [sp, #8]
 8018ae4:	f04f 0101 	mov.w	r1, #1
 8018ae8:	f04f 0e01 	mov.w	lr, #1
 8018aec:	f882 122a 	strb.w	r1, [r2, #554]	; 0x22a
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d1c1      	bne.n	8018a78 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xf4>
 8018af4:	f1be 0f00 	cmp.w	lr, #0
 8018af8:	f47f af67 	bne.w	80189ca <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x46>
 8018afc:	fb0b 8205 	mla	r2, fp, r5, r8
 8018b00:	e770      	b.n	80189e4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x60>
 8018b02:	2400      	movs	r4, #0
 8018b04:	e798      	b.n	8018a38 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xb4>
 8018b06:	9a02      	ldr	r2, [sp, #8]
 8018b08:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
 8018b0c:	f892 21f7 	ldrb.w	r2, [r2, #503]	; 0x1f7
 8018b10:	4291      	cmp	r1, r2
 8018b12:	d1e6      	bne.n	8018ae2 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x15e>
 8018b14:	f04f 0e01 	mov.w	lr, #1
 8018b18:	e7aa      	b.n	8018a70 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xec>
 8018b1a:	bf00      	nop

08018b1c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE>:
 8018b1c:	b570      	push	{r4, r5, r6, lr}
 8018b1e:	f8d0 51e4 	ldr.w	r5, [r0, #484]	; 0x1e4
 8018b22:	4604      	mov	r4, r0
 8018b24:	2d05      	cmp	r5, #5
 8018b26:	d012      	beq.n	8018b4e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x32>
 8018b28:	f890 31e0 	ldrb.w	r3, [r0, #480]	; 0x1e0
 8018b2c:	f013 0001 	ands.w	r0, r3, #1
 8018b30:	d02d      	beq.n	8018b8e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x72>
 8018b32:	079e      	lsls	r6, r3, #30
 8018b34:	d52d      	bpl.n	8018b92 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x76>
 8018b36:	0758      	lsls	r0, r3, #29
 8018b38:	d52e      	bpl.n	8018b98 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x7c>
 8018b3a:	071a      	lsls	r2, r3, #28
 8018b3c:	d512      	bpl.n	8018b64 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x48>
 8018b3e:	06de      	lsls	r6, r3, #27
 8018b40:	d52d      	bpl.n	8018b9e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x82>
 8018b42:	0698      	lsls	r0, r3, #26
 8018b44:	d52e      	bpl.n	8018ba4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x88>
 8018b46:	065a      	lsls	r2, r3, #25
 8018b48:	d52f      	bpl.n	8018baa <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x8e>
 8018b4a:	09da      	lsrs	r2, r3, #7
 8018b4c:	d01b      	beq.n	8018b86 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x6a>
 8018b4e:	2600      	movs	r6, #0
 8018b50:	f894 344c 	ldrb.w	r3, [r4, #1100]	; 0x44c
 8018b54:	b10b      	cbz	r3, 8018b5a <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x3e>
 8018b56:	4630      	mov	r0, r6
 8018b58:	bd70      	pop	{r4, r5, r6, pc}
 8018b5a:	4620      	mov	r0, r4
 8018b5c:	f7ff ff12 	bl	8018984 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv>
 8018b60:	4630      	mov	r0, r6
 8018b62:	bd70      	pop	{r4, r5, r6, pc}
 8018b64:	2608      	movs	r6, #8
 8018b66:	2003      	movs	r0, #3
 8018b68:	2274      	movs	r2, #116	; 0x74
 8018b6a:	4333      	orrs	r3, r6
 8018b6c:	2601      	movs	r6, #1
 8018b6e:	fb02 4000 	mla	r0, r2, r0, r4
 8018b72:	4435      	add	r5, r6
 8018b74:	f884 31e0 	strb.w	r3, [r4, #480]	; 0x1e0
 8018b78:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 8018b7c:	f008 ff80 	bl	8021a80 <memcpy>
 8018b80:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
 8018b84:	e7e4      	b.n	8018b50 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x34>
 8018b86:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8018b8a:	2007      	movs	r0, #7
 8018b8c:	e7ec      	b.n	8018b68 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 8018b8e:	2601      	movs	r6, #1
 8018b90:	e7ea      	b.n	8018b68 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 8018b92:	2602      	movs	r6, #2
 8018b94:	2001      	movs	r0, #1
 8018b96:	e7e7      	b.n	8018b68 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 8018b98:	2604      	movs	r6, #4
 8018b9a:	2002      	movs	r0, #2
 8018b9c:	e7e4      	b.n	8018b68 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 8018b9e:	2610      	movs	r6, #16
 8018ba0:	2004      	movs	r0, #4
 8018ba2:	e7e1      	b.n	8018b68 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 8018ba4:	2620      	movs	r6, #32
 8018ba6:	2005      	movs	r0, #5
 8018ba8:	e7de      	b.n	8018b68 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 8018baa:	2640      	movs	r6, #64	; 0x40
 8018bac:	2006      	movs	r0, #6
 8018bae:	e7db      	b.n	8018b68 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>

08018bb0 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE>:
 8018bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb4:	f245 6388 	movw	r3, #22152	; 0x5688
 8018bb8:	f246 54c5 	movw	r4, #26053	; 0x65c5
 8018bbc:	f246 57c4 	movw	r7, #26052	; 0x65c4
 8018bc0:	f44f 7c43 	mov.w	ip, #780	; 0x30c
 8018bc4:	5d05      	ldrb	r5, [r0, r4]
 8018bc6:	4682      	mov	sl, r0
 8018bc8:	5dc6      	ldrb	r6, [r0, r7]
 8018bca:	4403      	add	r3, r0
 8018bcc:	f105 0801 	add.w	r8, r5, #1
 8018bd0:	f2ad 7dc4 	subw	sp, sp, #1988	; 0x7c4
 8018bd4:	fb0c 3505 	mla	r5, ip, r5, r3
 8018bd8:	f106 0b01 	add.w	fp, r6, #1
 8018bdc:	4653      	mov	r3, sl
 8018bde:	468e      	mov	lr, r1
 8018be0:	f800 b007 	strb.w	fp, [r0, r7]
 8018be4:	22c8      	movs	r2, #200	; 0xc8
 8018be6:	f80a 8004 	strb.w	r8, [sl, r4]
 8018bea:	2100      	movs	r1, #0
 8018bec:	f813 7b04 	ldrb.w	r7, [r3], #4
 8018bf0:	f50d 64bd 	add.w	r4, sp, #1512	; 0x5e8
 8018bf4:	9078      	str	r0, [sp, #480]	; 0x1e0
 8018bf6:	a892      	add	r0, sp, #584	; 0x248
 8018bf8:	957f      	str	r5, [sp, #508]	; 0x1fc
 8018bfa:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8018bfe:	f8cd e1e4 	str.w	lr, [sp, #484]	; 0x1e4
 8018c02:	46a0      	mov	r8, r4
 8018c04:	937d      	str	r3, [sp, #500]	; 0x1f4
 8018c06:	f44f 69c9 	mov.w	r9, #1608	; 0x648
 8018c0a:	967a      	str	r6, [sp, #488]	; 0x1e8
 8018c0c:	f008 ff60 	bl	8021ad0 <memset>
 8018c10:	22c8      	movs	r2, #200	; 0xc8
 8018c12:	2100      	movs	r1, #0
 8018c14:	a8c4      	add	r0, sp, #784	; 0x310
 8018c16:	fb09 f906 	mul.w	r9, r9, r6
 8018c1a:	f008 ff59 	bl	8021ad0 <memset>
 8018c1e:	f04f 0c00 	mov.w	ip, #0
 8018c22:	ebc7 1347 	rsb	r3, r7, r7, lsl #5
 8018c26:	f50d 7e7e 	add.w	lr, sp, #1016	; 0x3f8
 8018c2a:	f8c4 c008 	str.w	ip, [r4, #8]
 8018c2e:	ad8e      	add	r5, sp, #568	; 0x238
 8018c30:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8018c34:	f641 47e8 	movw	r7, #7400	; 0x1ce8
 8018c38:	f8c4 c004 	str.w	ip, [r4, #4]
 8018c3c:	f04f 0a01 	mov.w	sl, #1
 8018c40:	f8cd c5f4 	str.w	ip, [sp, #1524]	; 0x5f4
 8018c44:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8018c48:	f8cd c5f8 	str.w	ip, [sp, #1528]	; 0x5f8
 8018c4c:	f8cd c5fc 	str.w	ip, [sp, #1532]	; 0x5fc
 8018c50:	b2bf      	uxth	r7, r7
 8018c52:	f8c4 b000 	str.w	fp, [r4]
 8018c56:	f885 c010 	strb.w	ip, [r5, #16]
 8018c5a:	f885 c0d8 	strb.w	ip, [r5, #216]	; 0xd8
 8018c5e:	f8c5 71ac 	str.w	r7, [r5, #428]	; 0x1ac
 8018c62:	f8c5 a1a8 	str.w	sl, [r5, #424]	; 0x1a8
 8018c66:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8018c6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018c6e:	4ad8      	ldr	r2, [pc, #864]	; (8018fd0 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x420>)
 8018c70:	4bd8      	ldr	r3, [pc, #864]	; (8018fd4 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x424>)
 8018c72:	6816      	ldr	r6, [r2, #0]
 8018c74:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
 8018c76:	e898 0003 	ldmia.w	r8, {r0, r1}
 8018c7a:	f243 7820 	movw	r8, #14112	; 0x3720
 8018c7e:	4490      	add	r8, r2
 8018c80:	9a79      	ldr	r2, [sp, #484]	; 0x1e4
 8018c82:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8018c88:	e9c5 aa68 	strd	sl, sl, [r5, #416]	; 0x1a0
 8018c8c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8018c90:	60ee      	str	r6, [r5, #12]
 8018c92:	eb08 0609 	add.w	r6, r8, r9
 8018c96:	f8c5 c1b0 	str.w	ip, [r5, #432]	; 0x1b0
 8018c9a:	4629      	mov	r1, r5
 8018c9c:	967c      	str	r6, [sp, #496]	; 0x1f0
 8018c9e:	4620      	mov	r0, r4
 8018ca0:	9e78      	ldr	r6, [sp, #480]	; 0x1e0
 8018ca2:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8018ca6:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
 8018caa:	e9c5 cc6d 	strd	ip, ip, [r5, #436]	; 0x1b4
 8018cae:	e9c5 bc70 	strd	fp, ip, [r5, #448]	; 0x1c0
 8018cb2:	f506 7ca0 	add.w	ip, r6, #320	; 0x140
 8018cb6:	f8cd c1ec 	str.w	ip, [sp, #492]	; 0x1ec
 8018cba:	f008 fee1 	bl	8021a80 <memcpy>
 8018cbe:	f209 402c 	addw	r0, r9, #1068	; 0x42c
 8018cc2:	4440      	add	r0, r8
 8018cc4:	f7fd fe50 	bl	8016968 <sys_mutex_new>
 8018cc8:	bb38      	cbnz	r0, 8018d1a <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x16a>
 8018cca:	4605      	mov	r5, r0
 8018ccc:	9e7c      	ldr	r6, [sp, #496]	; 0x1f0
 8018cce:	4bc1      	ldr	r3, [pc, #772]	; (8018fd4 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x424>)
 8018cd0:	4621      	mov	r1, r4
 8018cd2:	7420      	strb	r0, [r4, #16]
 8018cd4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8018cd8:	1d30      	adds	r0, r6, #4
 8018cda:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
 8018cde:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
 8018ce2:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
 8018ce6:	e9c4 3b6f 	strd	r3, fp, [r4, #444]	; 0x1bc
 8018cea:	e9c4 aa68 	strd	sl, sl, [r4, #416]	; 0x1a0
 8018cee:	e9c4 a76a 	strd	sl, r7, [r4, #424]	; 0x1a8
 8018cf2:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
 8018cf6:	f008 fec3 	bl	8021a80 <memcpy>
 8018cfa:	987d      	ldr	r0, [sp, #500]	; 0x1f4
 8018cfc:	4631      	mov	r1, r6
 8018cfe:	f8a6 7434 	strh.w	r7, [r6, #1076]	; 0x434
 8018d02:	f8c6 0430 	str.w	r0, [r6, #1072]	; 0x430
 8018d06:	2302      	movs	r3, #2
 8018d08:	9e7b      	ldr	r6, [sp, #492]	; 0x1ec
 8018d0a:	f881 544c 	strb.w	r5, [r1, #1100]	; 0x44c
 8018d0e:	f8c1 6448 	str.w	r6, [r1, #1096]	; 0x448
 8018d12:	f881 a1dc 	strb.w	sl, [r1, #476]	; 0x1dc
 8018d16:	f881 344d 	strb.w	r3, [r1, #1101]	; 0x44d
 8018d1a:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 8018d1c:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8018d20:	997a      	ldr	r1, [sp, #488]	; 0x1e8
 8018d22:	f50d 6782 	add.w	r7, sp, #1040	; 0x410
 8018d26:	f893 e000 	ldrb.w	lr, [r3]
 8018d2a:	f641 43e8 	movw	r3, #7400	; 0x1ce8
 8018d2e:	fb02 f201 	mul.w	r2, r2, r1
 8018d32:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 8018fe0 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x430>
 8018d36:	ebce 104e 	rsb	r0, lr, lr, lsl #5
 8018d3a:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
 8018d3e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8018d42:	f04f 0920 	mov.w	r9, #32
 8018d46:	eb0e 0e80 	add.w	lr, lr, r0, lsl #2
 8018d4a:	f858 0002 	ldr.w	r0, [r8, r2]
 8018d4e:	4442      	add	r2, r8
 8018d50:	0c0d      	lsrs	r5, r1, #16
 8018d52:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8018d56:	6806      	ldr	r6, [r0, #0]
 8018d58:	927e      	str	r2, [sp, #504]	; 0x1f8
 8018d5a:	fa1f fb8e 	uxth.w	fp, lr
 8018d5e:	f8ad 141c 	strh.w	r1, [sp, #1052]	; 0x41c
 8018d62:	f88d 541e 	strb.w	r5, [sp, #1054]	; 0x41e
 8018d66:	2500      	movs	r5, #0
 8018d68:	445b      	add	r3, fp
 8018d6a:	f887 c00f 	strb.w	ip, [r7, #15]
 8018d6e:	6225      	str	r5, [r4, #32]
 8018d70:	f04f 0c01 	mov.w	ip, #1
 8018d74:	b29b      	uxth	r3, r3
 8018d76:	9680      	str	r6, [sp, #512]	; 0x200
 8018d78:	6163      	str	r3, [r4, #20]
 8018d7a:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 8018d7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018d80:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8018d84:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018d88:	e9c4 5506 	strd	r5, r5, [r4, #24]
 8018d8c:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
 8018d90:	f8cd 561c 	str.w	r5, [sp, #1564]	; 0x61c
 8018d94:	f8cd 5620 	str.w	r5, [sp, #1568]	; 0x620
 8018d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018d9c:	488d      	ldr	r0, [pc, #564]	; (8018fd4 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x424>)
 8018d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018da2:	464a      	mov	r2, r9
 8018da4:	f8c4 c010 	str.w	ip, [r4, #16]
 8018da8:	6260      	str	r0, [r4, #36]	; 0x24
 8018daa:	4629      	mov	r1, r5
 8018dac:	62a3      	str	r3, [r4, #40]	; 0x28
 8018dae:	f50d 60c7 	add.w	r0, sp, #1592	; 0x638
 8018db2:	f8cd 5624 	str.w	r5, [sp, #1572]	; 0x624
 8018db6:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
 8018dba:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
 8018dbe:	f8c4 904c 	str.w	r9, [r4, #76]	; 0x4c
 8018dc2:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 8018dc6:	f008 fe83 	bl	8021ad0 <memset>
 8018dca:	4a83      	ldr	r2, [pc, #524]	; (8018fd8 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x428>)
 8018dcc:	6725      	str	r5, [r4, #112]	; 0x70
 8018dce:	4296      	cmp	r6, r2
 8018dd0:	f040 81f5 	bne.w	80191be <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x60e>
 8018dd4:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 8018dd6:	f8d3 51e4 	ldr.w	r5, [r3, #484]	; 0x1e4
 8018dda:	2d05      	cmp	r5, #5
 8018ddc:	d01b      	beq.n	8018e16 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x266>
 8018dde:	9a7e      	ldr	r2, [sp, #504]	; 0x1f8
 8018de0:	f892 11e0 	ldrb.w	r1, [r2, #480]	; 0x1e0
 8018de4:	f011 0001 	ands.w	r0, r1, #1
 8018de8:	f000 81ee 	beq.w	80191c8 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x618>
 8018dec:	078a      	lsls	r2, r1, #30
 8018dee:	f140 820a 	bpl.w	8019206 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x656>
 8018df2:	074b      	lsls	r3, r1, #29
 8018df4:	f140 820b 	bpl.w	801920e <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x65e>
 8018df8:	070e      	lsls	r6, r1, #28
 8018dfa:	f140 820c 	bpl.w	8019216 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x666>
 8018dfe:	06c8      	lsls	r0, r1, #27
 8018e00:	f140 820d 	bpl.w	801921e <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x66e>
 8018e04:	068a      	lsls	r2, r1, #26
 8018e06:	f140 820e 	bpl.w	8019226 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x676>
 8018e0a:	064b      	lsls	r3, r1, #25
 8018e0c:	f140 820d 	bpl.w	801922a <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x67a>
 8018e10:	09cb      	lsrs	r3, r1, #7
 8018e12:	f000 81f4 	beq.w	80191fe <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x64e>
 8018e16:	f44f 63c9 	mov.w	r3, #1608	; 0x648
 8018e1a:	9a7a      	ldr	r2, [sp, #488]	; 0x1e8
 8018e1c:	fb03 8802 	mla	r8, r3, r2, r8
 8018e20:	f898 344c 	ldrb.w	r3, [r8, #1100]	; 0x44c
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	f000 81bd 	beq.w	80191a4 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x5f4>
 8018e2a:	2100      	movs	r1, #0
 8018e2c:	22c8      	movs	r2, #200	; 0xc8
 8018e2e:	f50d 6084 	add.w	r0, sp, #1056	; 0x420
 8018e32:	f50d 7805 	add.w	r8, sp, #532	; 0x214
 8018e36:	460d      	mov	r5, r1
 8018e38:	f008 fe4a 	bl	8021ad0 <memset>
 8018e3c:	22c8      	movs	r2, #200	; 0xc8
 8018e3e:	f50d 609d 	add.w	r0, sp, #1256	; 0x4e8
 8018e42:	4629      	mov	r1, r5
 8018e44:	f04f 09c7 	mov.w	r9, #199	; 0xc7
 8018e48:	f008 fe42 	bl	8021ad0 <memset>
 8018e4c:	f641 43f3 	movw	r3, #7411	; 0x1cf3
 8018e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e54:	60a5      	str	r5, [r4, #8]
 8018e56:	445b      	add	r3, fp
 8018e58:	f8cd 55f4 	str.w	r5, [sp, #1524]	; 0x5f4
 8018e5c:	f8cd 55f8 	str.w	r5, [sp, #1528]	; 0x5f8
 8018e60:	46a6      	mov	lr, r4
 8018e62:	b29b      	uxth	r3, r3
 8018e64:	f8cd 55fc 	str.w	r5, [sp, #1532]	; 0x5fc
 8018e68:	6022      	str	r2, [r4, #0]
 8018e6a:	f50d 6cba 	add.w	ip, sp, #1488	; 0x5d0
 8018e6e:	4a5b      	ldr	r2, [pc, #364]	; (8018fdc <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x42c>)
 8018e70:	f246 5bc8 	movw	fp, #26056	; 0x65c8
 8018e74:	6065      	str	r5, [r4, #4]
 8018e76:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8018e7a:	9e78      	ldr	r6, [sp, #480]	; 0x1e0
 8018e7c:	e9c7 356b 	strd	r3, r5, [r7, #428]	; 0x1ac
 8018e80:	2301      	movs	r3, #1
 8018e82:	44b3      	add	fp, r6
 8018e84:	e9c7 3368 	strd	r3, r3, [r7, #416]	; 0x1a0
 8018e88:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8018e8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018e90:	e9c7 556d 	strd	r5, r5, [r7, #436]	; 0x1b4
 8018e94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e98:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018e9c:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
 8018e9e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018ea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018ea6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8018eaa:	f8da 300c 	ldr.w	r3, [sl, #12]
 8018eae:	f44f 7a49 	mov.w	sl, #804	; 0x324
 8018eb2:	f887 900f 	strb.w	r9, [r7, #15]
 8018eb6:	f240 6954 	movw	r9, #1620	; 0x654
 8018eba:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8018ebe:	f8ad 341c 	strh.w	r3, [sp, #1052]	; 0x41c
 8018ec2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8018ec6:	4639      	mov	r1, r7
 8018ec8:	987f      	ldr	r0, [sp, #508]	; 0x1fc
 8018eca:	f88d c41e 	strb.w	ip, [sp, #1054]	; 0x41e
 8018ece:	f003 fe57 	bl	801cb80 <_ZN4rtps15StatelessReader4initERKNS_9TopicDataE>
 8018ed2:	f647 01a0 	movw	r1, #30880	; 0x78a0
 8018ed6:	f649 629c 	movw	r2, #40604	; 0x9e9c
 8018eda:	4633      	mov	r3, r6
 8018edc:	f816 e001 	ldrb.w	lr, [r6, r1]
 8018ee0:	5cb7      	ldrb	r7, [r6, r2]
 8018ee2:	f647 06a4 	movw	r6, #30884	; 0x78a4
 8018ee6:	f10e 0802 	add.w	r8, lr, #2
 8018eea:	18f0      	adds	r0, r6, r3
 8018eec:	f107 0c01 	add.w	ip, r7, #1
 8018ef0:	f803 8001 	strb.w	r8, [r3, r1]
 8018ef4:	4629      	mov	r1, r5
 8018ef6:	907a      	str	r0, [sp, #488]	; 0x1e8
 8018ef8:	f10e 0001 	add.w	r0, lr, #1
 8018efc:	fb0a f80e 	mul.w	r8, sl, lr
 8018f00:	fa5f fc8c 	uxtb.w	ip, ip
 8018f04:	4606      	mov	r6, r0
 8018f06:	1cb8      	adds	r0, r7, #2
 8018f08:	b2f6      	uxtb	r6, r6
 8018f0a:	5498      	strb	r0, [r3, r2]
 8018f0c:	22c8      	movs	r2, #200	; 0xc8
 8018f0e:	f50d 60bf 	add.w	r0, sp, #1528	; 0x5f8
 8018f12:	fb0a fa06 	mul.w	sl, sl, r6
 8018f16:	9683      	str	r6, [sp, #524]	; 0x20c
 8018f18:	781e      	ldrb	r6, [r3, #0]
 8018f1a:	9b7a      	ldr	r3, [sp, #488]	; 0x1e8
 8018f1c:	9678      	str	r6, [sp, #480]	; 0x1e0
 8018f1e:	fb09 360c 	mla	r6, r9, ip, r3
 8018f22:	fb09 3907 	mla	r9, r9, r7, r3
 8018f26:	f50d 67f5 	add.w	r7, sp, #1960	; 0x7a8
 8018f2a:	9681      	str	r6, [sp, #516]	; 0x204
 8018f2c:	eb0b 0608 	add.w	r6, fp, r8
 8018f30:	9680      	str	r6, [sp, #512]	; 0x200
 8018f32:	f008 fdcd 	bl	8021ad0 <memset>
 8018f36:	4629      	mov	r1, r5
 8018f38:	22c8      	movs	r2, #200	; 0xc8
 8018f3a:	f50d 60d8 	add.w	r0, sp, #1728	; 0x6c0
 8018f3e:	f008 fdc7 	bl	8021ad0 <memset>
 8018f42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018f46:	f50d 7c08 	add.w	ip, sp, #544	; 0x220
 8018f4a:	958a      	str	r5, [sp, #552]	; 0x228
 8018f4c:	958b      	str	r5, [sp, #556]	; 0x22c
 8018f4e:	f508 7e48 	add.w	lr, r8, #800	; 0x320
 8018f52:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
 8018f56:	f8cd 579c 	str.w	r5, [sp, #1948]	; 0x79c
 8018f5a:	f8cd 57a0 	str.w	r5, [sp, #1952]	; 0x7a0
 8018f5e:	f8cd 57a4 	str.w	r5, [sp, #1956]	; 0x7a4
 8018f62:	9e78      	ldr	r6, [sp, #480]	; 0x1e0
 8018f64:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8018fe4 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x434>
 8018f68:	e9cd 1588 	strd	r1, r5, [sp, #544]	; 0x220
 8018f6c:	e9cd 558c 	strd	r5, r5, [sp, #560]	; 0x230
 8018f70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018f74:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018f76:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8018f7a:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8018fe8 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x438>
 8018f7e:	ebc6 1546 	rsb	r5, r6, r6, lsl #5
 8018f82:	f641 43f2 	movw	r3, #7410	; 0x1cf2
 8018f86:	f89c 2000 	ldrb.w	r2, [ip]
 8018f8a:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8018f8e:	9278      	str	r2, [sp, #480]	; 0x1e0
 8018f90:	9a79      	ldr	r2, [sp, #484]	; 0x1e4
 8018f92:	e887 0003 	stmia.w	r7, {r0, r1}
 8018f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8018f98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018f9c:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8018fa0:	eb0b 000e 	add.w	r0, fp, lr
 8018fa4:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8018fa8:	9a79      	ldr	r2, [sp, #484]	; 0x1e4
 8018faa:	917a      	str	r1, [sp, #488]	; 0x1e8
 8018fac:	f992 100c 	ldrsb.w	r1, [r2, #12]
 8018fb0:	f89c 5003 	ldrb.w	r5, [ip, #3]
 8018fb4:	440e      	add	r6, r1
 8018fb6:	f8d8 2000 	ldr.w	r2, [r8]
 8018fba:	957e      	str	r5, [sp, #504]	; 0x1f8
 8018fbc:	eb0b 050a 	add.w	r5, fp, sl
 8018fc0:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8018fc4:	60e2      	str	r2, [r4, #12]
 8018fc6:	9582      	str	r5, [sp, #520]	; 0x208
 8018fc8:	b2b6      	uxth	r6, r6
 8018fca:	f7fd fccd 	bl	8016968 <sys_mutex_new>
 8018fce:	e00d      	b.n	8018fec <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x43c>
 8018fd0:	080265f8 	.word	0x080265f8
 8018fd4:	0100ffef 	.word	0x0100ffef
 8018fd8:	08018b1d 	.word	0x08018b1d
 8018fdc:	2a00a8c0 	.word	0x2a00a8c0
 8018fe0:	0802610c 	.word	0x0802610c
 8018fe4:	080265fc 	.word	0x080265fc
 8018fe8:	20018d44 	.word	0x20018d44
 8018fec:	bb88      	cbnz	r0, 8019052 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x4a2>
 8018fee:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
 8018ff0:	4603      	mov	r3, r0
 8018ff2:	997a      	ldr	r1, [sp, #488]	; 0x1e8
 8018ff4:	f04f 0c02 	mov.w	ip, #2
 8018ff8:	f362 0307 	bfi	r3, r2, #0, #8
 8018ffc:	2201      	movs	r2, #1
 8018ffe:	9d80      	ldr	r5, [sp, #512]	; 0x200
 8019000:	f367 230f 	bfi	r3, r7, #8, #8
 8019004:	7420      	strb	r0, [r4, #16]
 8019006:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
 801900a:	f361 4317 	bfi	r3, r1, #16, #8
 801900e:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 8019010:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
 8019014:	f361 631f 	bfi	r3, r1, #24, #8
 8019018:	f8c4 c1a0 	str.w	ip, [r4, #416]	; 0x1a0
 801901c:	4621      	mov	r1, r4
 801901e:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
 8019022:	e9c4 2269 	strd	r2, r2, [r4, #420]	; 0x1a4
 8019026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801902a:	e9c4 606b 	strd	r6, r0, [r4, #428]	; 0x1ac
 801902e:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
 8019032:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
 8019036:	1d28      	adds	r0, r5, #4
 8019038:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801903c:	f008 fd20 	bl	8021a80 <memcpy>
 8019040:	997b      	ldr	r1, [sp, #492]	; 0x1ec
 8019042:	f04f 0201 	mov.w	r2, #1
 8019046:	f8a5 6300 	strh.w	r6, [r5, #768]	; 0x300
 801904a:	f8c5 1314 	str.w	r1, [r5, #788]	; 0x314
 801904e:	f885 21dc 	strb.w	r2, [r5, #476]	; 0x1dc
 8019052:	4b78      	ldr	r3, [pc, #480]	; (8019234 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x684>)
 8019054:	f50a 7a48 	add.w	sl, sl, #800	; 0x320
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	eb0b 000a 	add.w	r0, fp, sl
 801905e:	60e3      	str	r3, [r4, #12]
 8019060:	f7fd fc82 	bl	8016968 <sys_mutex_new>
 8019064:	bba0      	cbnz	r0, 80190d0 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x520>
 8019066:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 8019068:	4601      	mov	r1, r0
 801906a:	9d7a      	ldr	r5, [sp, #488]	; 0x1e8
 801906c:	f44f 7849 	mov.w	r8, #804	; 0x324
 8019070:	f363 0107 	bfi	r1, r3, #0, #8
 8019074:	9b83      	ldr	r3, [sp, #524]	; 0x20c
 8019076:	2202      	movs	r2, #2
 8019078:	f04f 0a01 	mov.w	sl, #1
 801907c:	f367 210f 	bfi	r1, r7, #8, #8
 8019080:	fb08 b803 	mla	r8, r8, r3, fp
 8019084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019088:	7420      	strb	r0, [r4, #16]
 801908a:	f365 4117 	bfi	r1, r5, #16, #8
 801908e:	9d7e      	ldr	r5, [sp, #504]	; 0x1f8
 8019090:	f884 00d8 	strb.w	r0, [r4, #216]	; 0xd8
 8019094:	f365 611f 	bfi	r1, r5, #24, #8
 8019098:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
 801909c:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
 80190a0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80190a4:	f8c4 11bc 	str.w	r1, [r4, #444]	; 0x1bc
 80190a8:	4621      	mov	r1, r4
 80190aa:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
 80190ae:	e9c4 606b 	strd	r6, r0, [r4, #428]	; 0x1ac
 80190b2:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
 80190b6:	e9c4 aa69 	strd	sl, sl, [r4, #420]	; 0x1a4
 80190ba:	f108 0004 	add.w	r0, r8, #4
 80190be:	f008 fcdf 	bl	8021a80 <memcpy>
 80190c2:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 80190c4:	f8a8 6300 	strh.w	r6, [r8, #768]	; 0x300
 80190c8:	f8c8 3314 	str.w	r3, [r8, #788]	; 0x314
 80190cc:	f888 a1dc 	strb.w	sl, [r8, #476]	; 0x1dc
 80190d0:	4b59      	ldr	r3, [pc, #356]	; (8019238 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x688>)
 80190d2:	f04f 0800 	mov.w	r8, #0
 80190d6:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
 80190da:	2501      	movs	r5, #1
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	4640      	mov	r0, r8
 80190e0:	997a      	ldr	r1, [sp, #488]	; 0x1e8
 80190e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80190e6:	9383      	str	r3, [sp, #524]	; 0x20c
 80190e8:	9b7b      	ldr	r3, [sp, #492]	; 0x1ec
 80190ea:	9a7d      	ldr	r2, [sp, #500]	; 0x1f4
 80190ec:	9375      	str	r3, [sp, #468]	; 0x1d4
 80190ee:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 80190f0:	9274      	str	r2, [sp, #464]	; 0x1d0
 80190f2:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80190f6:	f363 0007 	bfi	r0, r3, #0, #8
 80190fa:	2302      	movs	r3, #2
 80190fc:	f884 8010 	strb.w	r8, [r4, #16]
 8019100:	f367 200f 	bfi	r0, r7, #8, #8
 8019104:	9f83      	ldr	r7, [sp, #524]	; 0x20c
 8019106:	f884 80d8 	strb.w	r8, [r4, #216]	; 0xd8
 801910a:	f361 4017 	bfi	r0, r1, #16, #8
 801910e:	997e      	ldr	r1, [sp, #504]	; 0x1f8
 8019110:	f8c4 81b0 	str.w	r8, [r4, #432]	; 0x1b0
 8019114:	f361 601f 	bfi	r0, r1, #24, #8
 8019118:	f8c4 81b4 	str.w	r8, [r4, #436]	; 0x1b4
 801911c:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
 8019120:	f20d 51f4 	addw	r1, sp, #1524	; 0x5f4
 8019124:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
 8019128:	f8cd 81d8 	str.w	r8, [sp, #472]	; 0x1d8
 801912c:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
 8019130:	4668      	mov	r0, sp
 8019132:	f8c4 51a8 	str.w	r5, [r4, #424]	; 0x1a8
 8019136:	60e7      	str	r7, [r4, #12]
 8019138:	e9c4 3568 	strd	r3, r5, [r4, #416]	; 0x1a0
 801913c:	9573      	str	r5, [sp, #460]	; 0x1cc
 801913e:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
 8019142:	f008 fc9d 	bl	8021a80 <memcpy>
 8019146:	4648      	mov	r0, r9
 8019148:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801914c:	f7ff fa76 	bl	801863c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b>
 8019150:	9573      	str	r5, [sp, #460]	; 0x1cc
 8019152:	4b3a      	ldr	r3, [pc, #232]	; (801923c <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x68c>)
 8019154:	f20d 51f4 	addw	r1, sp, #1524	; 0x5f4
 8019158:	9d7b      	ldr	r5, [sp, #492]	; 0x1ec
 801915a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	4668      	mov	r0, sp
 8019162:	9575      	str	r5, [sp, #468]	; 0x1d4
 8019164:	9d7d      	ldr	r5, [sp, #500]	; 0x1f4
 8019166:	f8cd 81d8 	str.w	r8, [sp, #472]	; 0x1d8
 801916a:	9574      	str	r5, [sp, #464]	; 0x1d0
 801916c:	60e3      	str	r3, [r4, #12]
 801916e:	f008 fc87 	bl	8021a80 <memcpy>
 8019172:	9d81      	ldr	r5, [sp, #516]	; 0x204
 8019174:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8019178:	4628      	mov	r0, r5
 801917a:	f7ff fa5f 	bl	801863c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_b>
 801917e:	9b7c      	ldr	r3, [sp, #496]	; 0x1f0
 8019180:	9879      	ldr	r0, [sp, #484]	; 0x1e4
 8019182:	a988      	add	r1, sp, #544	; 0x220
 8019184:	9388      	str	r3, [sp, #544]	; 0x220
 8019186:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
 8019188:	f8cd 9228 	str.w	r9, [sp, #552]	; 0x228
 801918c:	9389      	str	r3, [sp, #548]	; 0x224
 801918e:	9b80      	ldr	r3, [sp, #512]	; 0x200
 8019190:	958c      	str	r5, [sp, #560]	; 0x230
 8019192:	938b      	str	r3, [sp, #556]	; 0x22c
 8019194:	9b82      	ldr	r3, [sp, #520]	; 0x208
 8019196:	938d      	str	r3, [sp, #564]	; 0x234
 8019198:	f002 fb5c 	bl	801b854 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE>
 801919c:	f20d 7dc4 	addw	sp, sp, #1988	; 0x7c4
 80191a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191a4:	987c      	ldr	r0, [sp, #496]	; 0x1f0
 80191a6:	f7ff fbed 	bl	8018984 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv>
 80191aa:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 80191ac:	781b      	ldrb	r3, [r3, #0]
 80191ae:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80191b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80191b6:	005b      	lsls	r3, r3, #1
 80191b8:	fa1f fb83 	uxth.w	fp, r3
 80191bc:	e635      	b.n	8018e2a <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x27a>
 80191be:	4621      	mov	r1, r4
 80191c0:	987c      	ldr	r0, [sp, #496]	; 0x1f0
 80191c2:	9b80      	ldr	r3, [sp, #512]	; 0x200
 80191c4:	4798      	blx	r3
 80191c6:	e7f0      	b.n	80191aa <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x5fa>
 80191c8:	f04f 0901 	mov.w	r9, #1
 80191cc:	ea49 0901 	orr.w	r9, r9, r1
 80191d0:	f44f 63c9 	mov.w	r3, #1608	; 0x648
 80191d4:	997a      	ldr	r1, [sp, #488]	; 0x1e8
 80191d6:	2274      	movs	r2, #116	; 0x74
 80191d8:	3501      	adds	r5, #1
 80191da:	fb03 f301 	mul.w	r3, r3, r1
 80191de:	4621      	mov	r1, r4
 80191e0:	fb02 3000 	mla	r0, r2, r0, r3
 80191e4:	4443      	add	r3, r8
 80191e6:	4440      	add	r0, r8
 80191e8:	f883 91e0 	strb.w	r9, [r3, #480]	; 0x1e0
 80191ec:	937e      	str	r3, [sp, #504]	; 0x1f8
 80191ee:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 80191f2:	f008 fc45 	bl	8021a80 <memcpy>
 80191f6:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
 80191f8:	f8c3 51e4 	str.w	r5, [r3, #484]	; 0x1e4
 80191fc:	e60b      	b.n	8018e16 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x266>
 80191fe:	f06f 097f 	mvn.w	r9, #127	; 0x7f
 8019202:	2007      	movs	r0, #7
 8019204:	e7e2      	b.n	80191cc <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x61c>
 8019206:	2001      	movs	r0, #1
 8019208:	f04f 0902 	mov.w	r9, #2
 801920c:	e7de      	b.n	80191cc <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x61c>
 801920e:	f04f 0904 	mov.w	r9, #4
 8019212:	2002      	movs	r0, #2
 8019214:	e7da      	b.n	80191cc <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x61c>
 8019216:	f04f 0908 	mov.w	r9, #8
 801921a:	2003      	movs	r0, #3
 801921c:	e7d6      	b.n	80191cc <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x61c>
 801921e:	f04f 0910 	mov.w	r9, #16
 8019222:	2004      	movs	r0, #4
 8019224:	e7d2      	b.n	80191cc <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x61c>
 8019226:	2005      	movs	r0, #5
 8019228:	e7d0      	b.n	80191cc <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x61c>
 801922a:	f04f 0940 	mov.w	r9, #64	; 0x40
 801922e:	2006      	movs	r0, #6
 8019230:	e7cc      	b.n	80191cc <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x61c>
 8019232:	bf00      	nop
 8019234:	08026604 	.word	0x08026604
 8019238:	08026600 	.word	0x08026600
 801923c:	08026608 	.word	0x08026608

08019240 <_ZN4rtps6Domain17createParticipantEv>:
 8019240:	f243 721d 	movw	r2, #14109	; 0x371d
 8019244:	f243 731c 	movw	r3, #14108	; 0x371c
 8019248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801924c:	5c87      	ldrb	r7, [r0, r2]
 801924e:	b085      	sub	sp, #20
 8019250:	5cc3      	ldrb	r3, [r0, r3]
 8019252:	42bb      	cmp	r3, r7
 8019254:	d159      	bne.n	801930a <_ZN4rtps6Domain17createParticipantEv+0xca>
 8019256:	f649 639d 	movw	r3, #40605	; 0x9e9d
 801925a:	4604      	mov	r4, r0
 801925c:	5cc3      	ldrb	r3, [r0, r3]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d153      	bne.n	801930a <_ZN4rtps6Domain17createParticipantEv+0xca>
 8019262:	4b2c      	ldr	r3, [pc, #176]	; (8019314 <_ZN4rtps6Domain17createParticipantEv+0xd4>)
 8019264:	ad01      	add	r5, sp, #4
 8019266:	f500 76e2 	add.w	r6, r0, #452	; 0x1c4
 801926a:	f10d 0810 	add.w	r8, sp, #16
 801926e:	46a9      	mov	r9, r5
 8019270:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019274:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8019278:	f7f0 fb62 	bl	8009940 <xTaskGetTickCount>
 801927c:	f008 fdb4 	bl	8021de8 <srand>
 8019280:	f008 fde0 	bl	8021e44 <rand>
 8019284:	4243      	negs	r3, r0
 8019286:	b2c0      	uxtb	r0, r0
 8019288:	b2db      	uxtb	r3, r3
 801928a:	bf58      	it	pl
 801928c:	4258      	negpl	r0, r3
 801928e:	f809 0b01 	strb.w	r0, [r9], #1
 8019292:	45c1      	cmp	r9, r8
 8019294:	d1f4      	bne.n	8019280 <_ZN4rtps6Domain17createParticipantEv+0x40>
 8019296:	f243 781d 	movw	r8, #14109	; 0x371d
 801929a:	4629      	mov	r1, r5
 801929c:	7823      	ldrb	r3, [r4, #0]
 801929e:	4630      	mov	r0, r6
 80192a0:	f914 2008 	ldrsb.w	r2, [r4, r8]
 80192a4:	f504 75a0 	add.w	r5, r4, #320	; 0x140
 80192a8:	f88d 700f 	strb.w	r7, [sp, #15]
 80192ac:	f001 fe50 	bl	801af50 <_ZN4rtps11Participant5reuseERKNS_12GuidPrefix_tEah>
 80192b0:	7823      	ldrb	r3, [r4, #0]
 80192b2:	f641 41f3 	movw	r1, #7411	; 0x1cf3
 80192b6:	f994 21d0 	ldrsb.w	r2, [r4, #464]	; 0x1d0
 80192ba:	ebc3 1043 	rsb	r0, r3, r3, lsl #5
 80192be:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80192c2:	4628      	mov	r0, r5
 80192c4:	4413      	add	r3, r2
 80192c6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80192ca:	b289      	uxth	r1, r1
 80192cc:	f004 f8e6 	bl	801d49c <_ZN4rtps9UdpDriver19createUdpConnectionEt>
 80192d0:	7823      	ldrb	r3, [r4, #0]
 80192d2:	4628      	mov	r0, r5
 80192d4:	f994 21d0 	ldrsb.w	r2, [r4, #464]	; 0x1d0
 80192d8:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
 80192dc:	f641 41f2 	movw	r1, #7410	; 0x1cf2
 80192e0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80192e4:	4413      	add	r3, r2
 80192e6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80192ea:	b289      	uxth	r1, r1
 80192ec:	f004 f8d6 	bl	801d49c <_ZN4rtps9UdpDriver19createUdpConnectionEt>
 80192f0:	4620      	mov	r0, r4
 80192f2:	4631      	mov	r1, r6
 80192f4:	f7ff fc5c 	bl	8018bb0 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE>
 80192f8:	f814 3008 	ldrb.w	r3, [r4, r8]
 80192fc:	4630      	mov	r0, r6
 80192fe:	3301      	adds	r3, #1
 8019300:	f804 3008 	strb.w	r3, [r4, r8]
 8019304:	b005      	add	sp, #20
 8019306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801930a:	2600      	movs	r6, #0
 801930c:	4630      	mov	r0, r6
 801930e:	b005      	add	sp, #20
 8019310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019314:	0802610c 	.word	0x0802610c

08019318 <_ZN4rtps14MessageFactory9addHeaderINS_11PBufWrapperEEEvRT_RKNS_12GuidPrefix_tE>:
 8019318:	b570      	push	{r4, r5, r6, lr}
 801931a:	4d18      	ldr	r5, [pc, #96]	; (801937c <_ZN4rtps14MessageFactory9addHeaderINS_11PBufWrapperEEEvRT_RKNS_12GuidPrefix_tE+0x64>)
 801931c:	b086      	sub	sp, #24
 801931e:	460a      	mov	r2, r1
 8019320:	4e17      	ldr	r6, [pc, #92]	; (8019380 <_ZN4rtps14MessageFactory9addHeaderINS_11PBufWrapperEEEvRT_RKNS_12GuidPrefix_tE+0x68>)
 8019322:	682d      	ldr	r5, [r5, #0]
 8019324:	4604      	mov	r4, r0
 8019326:	ab03      	add	r3, sp, #12
 8019328:	6808      	ldr	r0, [r1, #0]
 801932a:	9501      	str	r5, [sp, #4]
 801932c:	4d15      	ldr	r5, [pc, #84]	; (8019384 <_ZN4rtps14MessageFactory9addHeaderINS_11PBufWrapperEEEvRT_RKNS_12GuidPrefix_tE+0x6c>)
 801932e:	6849      	ldr	r1, [r1, #4]
 8019330:	6892      	ldr	r2, [r2, #8]
 8019332:	8836      	ldrh	r6, [r6, #0]
 8019334:	882d      	ldrh	r5, [r5, #0]
 8019336:	f8ad 6008 	strh.w	r6, [sp, #8]
 801933a:	f8ad 500a 	strh.w	r5, [sp, #10]
 801933e:	c307      	stmia	r3!, {r0, r1, r2}
 8019340:	4620      	mov	r0, r4
 8019342:	2114      	movs	r1, #20
 8019344:	f001 fa9c 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 8019348:	b1a8      	cbz	r0, 8019376 <_ZN4rtps14MessageFactory9addHeaderINS_11PBufWrapperEEEvRT_RKNS_12GuidPrefix_tE+0x5e>
 801934a:	2204      	movs	r2, #4
 801934c:	4620      	mov	r0, r4
 801934e:	eb0d 0102 	add.w	r1, sp, r2
 8019352:	f001 fa63 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019356:	2202      	movs	r2, #2
 8019358:	a902      	add	r1, sp, #8
 801935a:	4620      	mov	r0, r4
 801935c:	f001 fa5e 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019360:	2202      	movs	r2, #2
 8019362:	f10d 010a 	add.w	r1, sp, #10
 8019366:	4620      	mov	r0, r4
 8019368:	f001 fa58 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801936c:	a903      	add	r1, sp, #12
 801936e:	4620      	mov	r0, r4
 8019370:	220c      	movs	r2, #12
 8019372:	f001 fa53 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019376:	b006      	add	sp, #24
 8019378:	bd70      	pop	{r4, r5, r6, pc}
 801937a:	bf00      	nop
 801937c:	080265dc 	.word	0x080265dc
 8019380:	080265f4 	.word	0x080265f4
 8019384:	080265e0 	.word	0x080265e0

08019388 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv>:
 8019388:	f8d0 31e4 	ldr.w	r3, [r0, #484]	; 0x1e4
 801938c:	2b00      	cmp	r3, #0
 801938e:	f000 80e6 	beq.w	801955e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1d6>
 8019392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019396:	f890 61e0 	ldrb.w	r6, [r0, #480]	; 0x1e0
 801939a:	b093      	sub	sp, #76	; 0x4c
 801939c:	4605      	mov	r5, r0
 801939e:	f016 0401 	ands.w	r4, r6, #1
 80193a2:	f000 80ca 	beq.w	801953a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1b2>
 80193a6:	2400      	movs	r4, #0
 80193a8:	f105 0b04 	add.w	fp, r5, #4
 80193ac:	f04f 0a00 	mov.w	sl, #0
 80193b0:	f205 492c 	addw	r9, r5, #1068	; 0x42c
 80193b4:	f8b5 3434 	ldrh.w	r3, [r5, #1076]	; 0x434
 80193b8:	4659      	mov	r1, fp
 80193ba:	a808      	add	r0, sp, #32
 80193bc:	f8cd a020 	str.w	sl, [sp, #32]
 80193c0:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
 80193c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80193c8:	f7ff ffa6 	bl	8019318 <_ZN4rtps14MessageFactory9addHeaderINS_11PBufWrapperEEEvRT_RKNS_12GuidPrefix_tE>
 80193cc:	4648      	mov	r0, r9
 80193ce:	f7fd faee 	bl	80169ae <sys_mutex_lock>
 80193d2:	f505 678b 	add.w	r7, r5, #1112	; 0x458
 80193d6:	4638      	mov	r0, r7
 80193d8:	f003 f9ac 	bl	801c734 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>
 80193dc:	4603      	mov	r3, r0
 80193de:	4638      	mov	r0, r7
 80193e0:	e9d3 8700 	ldrd	r8, r7, [r3]
 80193e4:	f003 f9b6 	bl	801c754 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMaxEv>
 80193e8:	4603      	mov	r3, r0
 80193ea:	4648      	mov	r0, r9
 80193ec:	681a      	ldr	r2, [r3, #0]
 80193ee:	685b      	ldr	r3, [r3, #4]
 80193f0:	9200      	str	r2, [sp, #0]
 80193f2:	9301      	str	r3, [sp, #4]
 80193f4:	f7fd faea 	bl	80169cc <sys_mutex_unlock>
 80193f8:	9b01      	ldr	r3, [sp, #4]
 80193fa:	b91f      	cbnz	r7, 8019404 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x7c>
 80193fc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8019400:	f000 80a7 	beq.w	8019552 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1ca>
 8019404:	b91b      	cbnz	r3, 801940e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x86>
 8019406:	9a00      	ldr	r2, [sp, #0]
 8019408:	3201      	adds	r2, #1
 801940a:	f000 80a2 	beq.w	8019552 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1ca>
 801940e:	4a59      	ldr	r2, [pc, #356]	; (8019574 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1ec>)
 8019410:	2074      	movs	r0, #116	; 0x74
 8019412:	2120      	movs	r1, #32
 8019414:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8019418:	fb00 5004 	mla	r0, r0, r4, r5
 801941c:	920a      	str	r2, [sp, #40]	; 0x28
 801941e:	9a00      	ldr	r2, [sp, #0]
 8019420:	970e      	str	r7, [sp, #56]	; 0x38
 8019422:	f8d0 71f4 	ldr.w	r7, [r0, #500]	; 0x1f4
 8019426:	eb0d 0001 	add.w	r0, sp, r1
 801942a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801942e:	9704      	str	r7, [sp, #16]
 8019430:	970b      	str	r7, [sp, #44]	; 0x2c
 8019432:	f8cd c00c 	str.w	ip, [sp, #12]
 8019436:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 801943a:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
 801943e:	f8d5 364c 	ldr.w	r3, [r5, #1612]	; 0x64c
 8019442:	9311      	str	r3, [sp, #68]	; 0x44
 8019444:	f001 fa1c 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 8019448:	2800      	cmp	r0, #0
 801944a:	d048      	beq.n	80194de <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x156>
 801944c:	2114      	movs	r1, #20
 801944e:	a808      	add	r0, sp, #32
 8019450:	f001 fa16 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 8019454:	b1a0      	cbz	r0, 8019480 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0xf8>
 8019456:	2104      	movs	r1, #4
 8019458:	a808      	add	r0, sp, #32
 801945a:	f001 fa11 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 801945e:	2201      	movs	r2, #1
 8019460:	a90a      	add	r1, sp, #40	; 0x28
 8019462:	a808      	add	r0, sp, #32
 8019464:	f001 f9da 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019468:	2201      	movs	r2, #1
 801946a:	f10d 0129 	add.w	r1, sp, #41	; 0x29
 801946e:	a808      	add	r0, sp, #32
 8019470:	f001 f9d4 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019474:	2202      	movs	r2, #2
 8019476:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 801947a:	a808      	add	r0, sp, #32
 801947c:	f001 f9ce 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019480:	2203      	movs	r2, #3
 8019482:	a90b      	add	r1, sp, #44	; 0x2c
 8019484:	a808      	add	r0, sp, #32
 8019486:	f001 f9c9 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801948a:	2201      	movs	r2, #1
 801948c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8019490:	a808      	add	r0, sp, #32
 8019492:	f001 f9c3 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019496:	2203      	movs	r2, #3
 8019498:	a90c      	add	r1, sp, #48	; 0x30
 801949a:	a808      	add	r0, sp, #32
 801949c:	f001 f9be 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 80194a0:	2201      	movs	r2, #1
 80194a2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80194a6:	a808      	add	r0, sp, #32
 80194a8:	f001 f9b8 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 80194ac:	2204      	movs	r2, #4
 80194ae:	a90d      	add	r1, sp, #52	; 0x34
 80194b0:	a808      	add	r0, sp, #32
 80194b2:	f001 f9b3 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 80194b6:	2204      	movs	r2, #4
 80194b8:	a90e      	add	r1, sp, #56	; 0x38
 80194ba:	a808      	add	r0, sp, #32
 80194bc:	f001 f9ae 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 80194c0:	2204      	movs	r2, #4
 80194c2:	a90f      	add	r1, sp, #60	; 0x3c
 80194c4:	a808      	add	r0, sp, #32
 80194c6:	f001 f9a9 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 80194ca:	2204      	movs	r2, #4
 80194cc:	a910      	add	r1, sp, #64	; 0x40
 80194ce:	a808      	add	r0, sp, #32
 80194d0:	f001 f9a4 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 80194d4:	2204      	movs	r2, #4
 80194d6:	a911      	add	r1, sp, #68	; 0x44
 80194d8:	a808      	add	r0, sp, #32
 80194da:	f001 f99f 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 80194de:	2374      	movs	r3, #116	; 0x74
 80194e0:	a905      	add	r1, sp, #20
 80194e2:	f8d5 0448 	ldr.w	r0, [r5, #1096]	; 0x448
 80194e6:	fb03 5204 	mla	r2, r3, r4, r5
 80194ea:	4613      	mov	r3, r2
 80194ec:	f8d2 220c 	ldr.w	r2, [r2, #524]	; 0x20c
 80194f0:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80194f4:	9206      	str	r2, [sp, #24]
 80194f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80194fa:	f004 f86d 	bl	801d5d8 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>
 80194fe:	a808      	add	r0, sp, #32
 8019500:	f001 f974 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 8019504:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 8019508:	b913      	cbnz	r3, 8019510 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x188>
 801950a:	e00c      	b.n	8019526 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x19e>
 801950c:	2c04      	cmp	r4, #4
 801950e:	d807      	bhi.n	8019520 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x198>
 8019510:	3401      	adds	r4, #1
 8019512:	f004 0307 	and.w	r3, r4, #7
 8019516:	b2e4      	uxtb	r4, r4
 8019518:	fa46 f303 	asr.w	r3, r6, r3
 801951c:	07db      	lsls	r3, r3, #31
 801951e:	d5f5      	bpl.n	801950c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x184>
 8019520:	2c05      	cmp	r4, #5
 8019522:	f47f af47 	bne.w	80193b4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x2c>
 8019526:	f8d5 364c 	ldr.w	r3, [r5, #1612]	; 0x64c
 801952a:	3301      	adds	r3, #1
 801952c:	f8c5 364c 	str.w	r3, [r5, #1612]	; 0x64c
 8019530:	b013      	add	sp, #76	; 0x4c
 8019532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019536:	2c04      	cmp	r4, #4
 8019538:	d807      	bhi.n	801954a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1c2>
 801953a:	3401      	adds	r4, #1
 801953c:	f004 0307 	and.w	r3, r4, #7
 8019540:	b2e4      	uxtb	r4, r4
 8019542:	fa46 f303 	asr.w	r3, r6, r3
 8019546:	07da      	lsls	r2, r3, #31
 8019548:	d5f5      	bpl.n	8019536 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1ae>
 801954a:	2c05      	cmp	r4, #5
 801954c:	f47f af2c 	bne.w	80193a8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x20>
 8019550:	e7e9      	b.n	8019526 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x19e>
 8019552:	a808      	add	r0, sp, #32
 8019554:	f001 f94a 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 8019558:	b013      	add	sp, #76	; 0x4c
 801955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801955e:	4770      	bx	lr
 8019560:	e002      	b.n	8019568 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1e0>
 8019562:	4648      	mov	r0, r9
 8019564:	f7fd fa32 	bl	80169cc <sys_mutex_unlock>
 8019568:	a808      	add	r0, sp, #32
 801956a:	f001 f93f 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801956e:	f007 fb8d 	bl	8020c8c <__cxa_end_cleanup>
 8019572:	bf00      	nop
 8019574:	001c0107 	.word	0x001c0107

08019578 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17hbFunctionJumppadEPv>:
 8019578:	2201      	movs	r2, #1
 801957a:	f890 3650 	ldrb.w	r3, [r0, #1616]	; 0x650
 801957e:	b510      	push	{r4, lr}
 8019580:	4604      	mov	r4, r0
 8019582:	f880 2651 	strb.w	r2, [r0, #1617]	; 0x651
 8019586:	b153      	cbz	r3, 801959e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17hbFunctionJumppadEPv+0x26>
 8019588:	4620      	mov	r0, r4
 801958a:	f7ff fefd 	bl	8019388 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv>
 801958e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8019592:	f7f0 f8b3 	bl	80096fc <vTaskDelay>
 8019596:	f894 3650 	ldrb.w	r3, [r4, #1616]	; 0x650
 801959a:	2b00      	cmp	r3, #0
 801959c:	d1f4      	bne.n	8019588 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17hbFunctionJumppadEPv+0x10>
 801959e:	2300      	movs	r3, #0
 80195a0:	f884 3651 	strb.w	r3, [r4, #1617]	; 0x651
 80195a4:	bd10      	pop	{r4, pc}
 80195a6:	bf00      	nop

080195a8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv>:
 80195a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195ac:	f890 61e0 	ldrb.w	r6, [r0, #480]	; 0x1e0
 80195b0:	b087      	sub	sp, #28
 80195b2:	4680      	mov	r8, r0
 80195b4:	f500 7af0 	add.w	sl, r0, #480	; 0x1e0
 80195b8:	f016 0301 	ands.w	r3, r6, #1
 80195bc:	f8d0 91e4 	ldr.w	r9, [r0, #484]	; 0x1e4
 80195c0:	9303      	str	r3, [sp, #12]
 80195c2:	d117      	bne.n	80195f4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x4c>
 80195c4:	f1b9 0f00 	cmp.w	r9, #0
 80195c8:	d011      	beq.n	80195ee <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x46>
 80195ca:	2201      	movs	r2, #1
 80195cc:	f002 0307 	and.w	r3, r2, #7
 80195d0:	1c51      	adds	r1, r2, #1
 80195d2:	4615      	mov	r5, r2
 80195d4:	fa46 f303 	asr.w	r3, r6, r3
 80195d8:	f003 0301 	and.w	r3, r3, #1
 80195dc:	2a04      	cmp	r2, #4
 80195de:	bf88      	it	hi
 80195e0:	f043 0301 	orrhi.w	r3, r3, #1
 80195e4:	b2ca      	uxtb	r2, r1
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d0f0      	beq.n	80195cc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x24>
 80195ea:	2d05      	cmp	r5, #5
 80195ec:	d103      	bne.n	80195f6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x4e>
 80195ee:	b007      	add	sp, #28
 80195f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195f4:	2500      	movs	r5, #0
 80195f6:	f04f 0b74 	mov.w	fp, #116	; 0x74
 80195fa:	464b      	mov	r3, r9
 80195fc:	fb0b 8205 	mla	r2, fp, r5, r8
 8019600:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
 8019604:	3101      	adds	r1, #1
 8019606:	d116      	bne.n	8019636 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x8e>
 8019608:	2100      	movs	r1, #0
 801960a:	f8a2 1228 	strh.w	r1, [r2, #552]	; 0x228
 801960e:	b913      	cbnz	r3, 8019616 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x6e>
 8019610:	e7ed      	b.n	80195ee <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x46>
 8019612:	2d04      	cmp	r5, #4
 8019614:	d807      	bhi.n	8019626 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x7e>
 8019616:	3501      	adds	r5, #1
 8019618:	f005 0207 	and.w	r2, r5, #7
 801961c:	b2ed      	uxtb	r5, r5
 801961e:	fa46 f202 	asr.w	r2, r6, r2
 8019622:	07d2      	lsls	r2, r2, #31
 8019624:	d5f5      	bpl.n	8019612 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x6a>
 8019626:	2d05      	cmp	r5, #5
 8019628:	d0e1      	beq.n	80195ee <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x46>
 801962a:	fb0b 8205 	mla	r2, fp, r5, r8
 801962e:	f8d2 1210 	ldr.w	r1, [r2, #528]	; 0x210
 8019632:	3101      	adds	r1, #1
 8019634:	d0e8      	beq.n	8019608 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x60>
 8019636:	9a03      	ldr	r2, [sp, #12]
 8019638:	2a00      	cmp	r2, #0
 801963a:	d174      	bne.n	8019726 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x17e>
 801963c:	2b00      	cmp	r3, #0
 801963e:	d06f      	beq.n	8019720 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x178>
 8019640:	4614      	mov	r4, r2
 8019642:	e001      	b.n	8019648 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xa0>
 8019644:	2c04      	cmp	r4, #4
 8019646:	d807      	bhi.n	8019658 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xb0>
 8019648:	3401      	adds	r4, #1
 801964a:	f004 0207 	and.w	r2, r4, #7
 801964e:	b2e4      	uxtb	r4, r4
 8019650:	fa46 f202 	asr.w	r2, r6, r2
 8019654:	07d0      	lsls	r0, r2, #31
 8019656:	d5f5      	bpl.n	8019644 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x9c>
 8019658:	2c05      	cmp	r4, #5
 801965a:	d061      	beq.n	8019720 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x178>
 801965c:	b229      	sxth	r1, r5
 801965e:	fb0b 8205 	mla	r2, fp, r5, r8
 8019662:	f04f 0e00 	mov.w	lr, #0
 8019666:	9202      	str	r2, [sp, #8]
 8019668:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 801966c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019670:	0089      	lsls	r1, r1, #2
 8019672:	f101 0218 	add.w	r2, r1, #24
 8019676:	f101 0930 	add.w	r9, r1, #48	; 0x30
 801967a:	3114      	adds	r1, #20
 801967c:	4452      	add	r2, sl
 801967e:	44d1      	add	r9, sl
 8019680:	9201      	str	r2, [sp, #4]
 8019682:	eb0a 0201 	add.w	r2, sl, r1
 8019686:	9204      	str	r2, [sp, #16]
 8019688:	fb0b 8704 	mla	r7, fp, r4, r8
 801968c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8019690:	2a01      	cmp	r2, #1
 8019692:	d011      	beq.n	80196b8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x110>
 8019694:	b913      	cbnz	r3, 801969c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xf4>
 8019696:	e03f      	b.n	8019718 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x170>
 8019698:	2c04      	cmp	r4, #4
 801969a:	d807      	bhi.n	80196ac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x104>
 801969c:	3401      	adds	r4, #1
 801969e:	f004 0207 	and.w	r2, r4, #7
 80196a2:	b2e4      	uxtb	r4, r4
 80196a4:	fa46 f202 	asr.w	r2, r6, r2
 80196a8:	07d1      	lsls	r1, r2, #31
 80196aa:	d5f5      	bpl.n	8019698 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xf0>
 80196ac:	2c05      	cmp	r4, #5
 80196ae:	d1eb      	bne.n	8019688 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xe0>
 80196b0:	f1be 0f00 	cmp.w	lr, #0
 80196b4:	d1af      	bne.n	8019616 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x6e>
 80196b6:	e033      	b.n	8019720 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x178>
 80196b8:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 80196bc:	f8d9 2014 	ldr.w	r2, [r9, #20]
 80196c0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80196c4:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
 80196c8:	0080      	lsls	r0, r0, #2
 80196ca:	f8d1 c044 	ldr.w	ip, [r1, #68]	; 0x44
 80196ce:	4562      	cmp	r2, ip
 80196d0:	d1e0      	bne.n	8019694 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xec>
 80196d2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80196d4:	9901      	ldr	r1, [sp, #4]
 80196d6:	6949      	ldr	r1, [r1, #20]
 80196d8:	4291      	cmp	r1, r2
 80196da:	d0db      	beq.n	8019694 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xec>
 80196dc:	f897 2229 	ldrb.w	r2, [r7, #553]	; 0x229
 80196e0:	bb52      	cbnz	r2, 8019738 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x190>
 80196e2:	9305      	str	r3, [sp, #20]
 80196e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80196e8:	f240 1101 	movw	r1, #257	; 0x101
 80196ec:	3014      	adds	r0, #20
 80196ee:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 80196f2:	2203      	movs	r2, #3
 80196f4:	9b02      	ldr	r3, [sp, #8]
 80196f6:	4450      	add	r0, sl
 80196f8:	f8a3 1228 	strh.w	r1, [r3, #552]	; 0x228
 80196fc:	9904      	ldr	r1, [sp, #16]
 80196fe:	f008 f9af 	bl	8021a60 <memcmp>
 8019702:	9b05      	ldr	r3, [sp, #20]
 8019704:	b188      	cbz	r0, 801972a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x182>
 8019706:	9a02      	ldr	r2, [sp, #8]
 8019708:	f04f 0101 	mov.w	r1, #1
 801970c:	f04f 0e01 	mov.w	lr, #1
 8019710:	f882 122a 	strb.w	r1, [r2, #554]	; 0x22a
 8019714:	2b00      	cmp	r3, #0
 8019716:	d1c1      	bne.n	801969c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xf4>
 8019718:	f1be 0f00 	cmp.w	lr, #0
 801971c:	f47f af67 	bne.w	80195ee <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x46>
 8019720:	fb0b 8205 	mla	r2, fp, r5, r8
 8019724:	e770      	b.n	8019608 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x60>
 8019726:	2400      	movs	r4, #0
 8019728:	e798      	b.n	801965c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xb4>
 801972a:	9a02      	ldr	r2, [sp, #8]
 801972c:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
 8019730:	f892 21f7 	ldrb.w	r2, [r2, #503]	; 0x1f7
 8019734:	4291      	cmp	r1, r2
 8019736:	d1e6      	bne.n	8019706 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0x15e>
 8019738:	f04f 0e01 	mov.w	lr, #1
 801973c:	e7aa      	b.n	8019694 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv+0xec>
 801973e:	bf00      	nop

08019740 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE>:
 8019740:	b570      	push	{r4, r5, r6, lr}
 8019742:	f8d0 51e4 	ldr.w	r5, [r0, #484]	; 0x1e4
 8019746:	4604      	mov	r4, r0
 8019748:	2d05      	cmp	r5, #5
 801974a:	d012      	beq.n	8019772 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x32>
 801974c:	f890 31e0 	ldrb.w	r3, [r0, #480]	; 0x1e0
 8019750:	f013 0001 	ands.w	r0, r3, #1
 8019754:	d02d      	beq.n	80197b2 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x72>
 8019756:	079e      	lsls	r6, r3, #30
 8019758:	d52d      	bpl.n	80197b6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x76>
 801975a:	0758      	lsls	r0, r3, #29
 801975c:	d52e      	bpl.n	80197bc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x7c>
 801975e:	071a      	lsls	r2, r3, #28
 8019760:	d512      	bpl.n	8019788 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x48>
 8019762:	06de      	lsls	r6, r3, #27
 8019764:	d52d      	bpl.n	80197c2 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x82>
 8019766:	0698      	lsls	r0, r3, #26
 8019768:	d52e      	bpl.n	80197c8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x88>
 801976a:	065a      	lsls	r2, r3, #25
 801976c:	d52f      	bpl.n	80197ce <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x8e>
 801976e:	09da      	lsrs	r2, r3, #7
 8019770:	d01b      	beq.n	80197aa <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x6a>
 8019772:	2600      	movs	r6, #0
 8019774:	f894 344c 	ldrb.w	r3, [r4, #1100]	; 0x44c
 8019778:	b10b      	cbz	r3, 801977e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x3e>
 801977a:	4630      	mov	r0, r6
 801977c:	bd70      	pop	{r4, r5, r6, pc}
 801977e:	4620      	mov	r0, r4
 8019780:	f7ff ff12 	bl	80195a8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv>
 8019784:	4630      	mov	r0, r6
 8019786:	bd70      	pop	{r4, r5, r6, pc}
 8019788:	2608      	movs	r6, #8
 801978a:	2003      	movs	r0, #3
 801978c:	2274      	movs	r2, #116	; 0x74
 801978e:	4333      	orrs	r3, r6
 8019790:	2601      	movs	r6, #1
 8019792:	fb02 4000 	mla	r0, r2, r0, r4
 8019796:	4435      	add	r5, r6
 8019798:	f884 31e0 	strb.w	r3, [r4, #480]	; 0x1e0
 801979c:	f500 70f4 	add.w	r0, r0, #488	; 0x1e8
 80197a0:	f008 f96e 	bl	8021a80 <memcpy>
 80197a4:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
 80197a8:	e7e4      	b.n	8019774 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x34>
 80197aa:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 80197ae:	2007      	movs	r0, #7
 80197b0:	e7ec      	b.n	801978c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 80197b2:	2601      	movs	r6, #1
 80197b4:	e7ea      	b.n	801978c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 80197b6:	2602      	movs	r6, #2
 80197b8:	2001      	movs	r0, #1
 80197ba:	e7e7      	b.n	801978c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 80197bc:	2604      	movs	r6, #4
 80197be:	2002      	movs	r0, #2
 80197c0:	e7e4      	b.n	801978c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 80197c2:	2610      	movs	r6, #16
 80197c4:	2004      	movs	r0, #4
 80197c6:	e7e1      	b.n	801978c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 80197c8:	2620      	movs	r6, #32
 80197ca:	2005      	movs	r0, #5
 80197cc:	e7de      	b.n	801978c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>
 80197ce:	2640      	movs	r6, #64	; 0x40
 80197d0:	2006      	movs	r0, #6
 80197d2:	e7db      	b.n	801978c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x4c>

080197d4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv>:
 80197d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197d6:	f890 61e0 	ldrb.w	r6, [r0, #480]	; 0x1e0
 80197da:	f8d0 71e4 	ldr.w	r7, [r0, #484]	; 0x1e4
 80197de:	f016 0201 	ands.w	r2, r6, #1
 80197e2:	d110      	bne.n	8019806 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x32>
 80197e4:	b927      	cbnz	r7, 80197f0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x1c>
 80197e6:	f7ff fedf 	bl	80195a8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17manageSendOptionsEv>
 80197ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197ec:	2a04      	cmp	r2, #4
 80197ee:	d807      	bhi.n	8019800 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x2c>
 80197f0:	3201      	adds	r2, #1
 80197f2:	f002 0307 	and.w	r3, r2, #7
 80197f6:	b2d2      	uxtb	r2, r2
 80197f8:	fa46 f303 	asr.w	r3, r6, r3
 80197fc:	07db      	lsls	r3, r3, #31
 80197fe:	d5f5      	bpl.n	80197ec <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x18>
 8019800:	2a05      	cmp	r2, #5
 8019802:	d101      	bne.n	8019808 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x34>
 8019804:	e7ef      	b.n	80197e6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x12>
 8019806:	2200      	movs	r2, #0
 8019808:	f04f 0c74 	mov.w	ip, #116	; 0x74
 801980c:	2500      	movs	r5, #0
 801980e:	fb0c 0302 	mla	r3, ip, r2, r0
 8019812:	f8a3 5228 	strh.w	r5, [r3, #552]	; 0x228
 8019816:	f883 522a 	strb.w	r5, [r3, #554]	; 0x22a
 801981a:	2f00      	cmp	r7, #0
 801981c:	d0e3      	beq.n	80197e6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x12>
 801981e:	3201      	adds	r2, #1
 8019820:	b2d1      	uxtb	r1, r2
 8019822:	f001 0307 	and.w	r3, r1, #7
 8019826:	1c4c      	adds	r4, r1, #1
 8019828:	460a      	mov	r2, r1
 801982a:	fa46 f303 	asr.w	r3, r6, r3
 801982e:	f003 0301 	and.w	r3, r3, #1
 8019832:	2904      	cmp	r1, #4
 8019834:	bf88      	it	hi
 8019836:	f043 0301 	orrhi.w	r3, r3, #1
 801983a:	b2e1      	uxtb	r1, r4
 801983c:	2b00      	cmp	r3, #0
 801983e:	d0f0      	beq.n	8019822 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x4e>
 8019840:	2a05      	cmp	r2, #5
 8019842:	d1e4      	bne.n	801980e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x3a>
 8019844:	e7cf      	b.n	80197e6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x12>
 8019846:	bf00      	nop

08019848 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE>:
 8019848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801984c:	f200 482c 	addw	r8, r0, #1068	; 0x42c
 8019850:	4605      	mov	r5, r0
 8019852:	4689      	mov	r9, r1
 8019854:	4640      	mov	r0, r8
 8019856:	f7fd f8aa 	bl	80169ae <sys_mutex_lock>
 801985a:	f895 61e0 	ldrb.w	r6, [r5, #480]	; 0x1e0
 801985e:	f8d5 71e4 	ldr.w	r7, [r5, #484]	; 0x1e4
 8019862:	07f2      	lsls	r2, r6, #31
 8019864:	d41a      	bmi.n	801989c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x54>
 8019866:	b18f      	cbz	r7, 801988c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x44>
 8019868:	2201      	movs	r2, #1
 801986a:	f002 0307 	and.w	r3, r2, #7
 801986e:	1c50      	adds	r0, r2, #1
 8019870:	4614      	mov	r4, r2
 8019872:	fa46 f303 	asr.w	r3, r6, r3
 8019876:	f003 0301 	and.w	r3, r3, #1
 801987a:	2a04      	cmp	r2, #4
 801987c:	bf88      	it	hi
 801987e:	f043 0301 	orrhi.w	r3, r3, #1
 8019882:	b2c2      	uxtb	r2, r0
 8019884:	2b00      	cmp	r3, #0
 8019886:	d0f0      	beq.n	801986a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x22>
 8019888:	2c05      	cmp	r4, #5
 801988a:	d108      	bne.n	801989e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x56>
 801988c:	4628      	mov	r0, r5
 801988e:	f7ff ffa1 	bl	80197d4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv>
 8019892:	4640      	mov	r0, r8
 8019894:	f7fd f89a 	bl	80169cc <sys_mutex_unlock>
 8019898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801989c:	2400      	movs	r4, #0
 801989e:	f505 7bf0 	add.w	fp, r5, #480	; 0x1e0
 80198a2:	f04f 0a74 	mov.w	sl, #116	; 0x74
 80198a6:	2308      	movs	r3, #8
 80198a8:	220c      	movs	r2, #12
 80198aa:	4649      	mov	r1, r9
 80198ac:	fb1a 3004 	smlabb	r0, sl, r4, r3
 80198b0:	4458      	add	r0, fp
 80198b2:	f008 f8d5 	bl	8021a60 <memcmp>
 80198b6:	b170      	cbz	r0, 80198d6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x8e>
 80198b8:	b917      	cbnz	r7, 80198c0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x78>
 80198ba:	e7e7      	b.n	801988c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x44>
 80198bc:	2c04      	cmp	r4, #4
 80198be:	d807      	bhi.n	80198d0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x88>
 80198c0:	3401      	adds	r4, #1
 80198c2:	f004 0307 	and.w	r3, r4, #7
 80198c6:	b2e4      	uxtb	r4, r4
 80198c8:	fa46 f303 	asr.w	r3, r6, r3
 80198cc:	07db      	lsls	r3, r3, #31
 80198ce:	d5f5      	bpl.n	80198bc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x74>
 80198d0:	2c05      	cmp	r4, #5
 80198d2:	d1e8      	bne.n	80198a6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x5e>
 80198d4:	e7da      	b.n	801988c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x44>
 80198d6:	f3c4 03c7 	ubfx	r3, r4, #3, #8
 80198da:	2201      	movs	r2, #1
 80198dc:	f004 0407 	and.w	r4, r4, #7
 80198e0:	3f01      	subs	r7, #1
 80198e2:	442b      	add	r3, r5
 80198e4:	4628      	mov	r0, r5
 80198e6:	40a2      	lsls	r2, r4
 80198e8:	f893 41e0 	ldrb.w	r4, [r3, #480]	; 0x1e0
 80198ec:	ea24 0402 	bic.w	r4, r4, r2
 80198f0:	f883 41e0 	strb.w	r4, [r3, #480]	; 0x1e0
 80198f4:	f8c5 71e4 	str.w	r7, [r5, #484]	; 0x1e4
 80198f8:	f7ff ff6c 	bl	80197d4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv>
 80198fc:	4640      	mov	r0, r8
 80198fe:	f7fd f865 	bl	80169cc <sys_mutex_unlock>
 8019902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019906:	bf00      	nop

08019908 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE>:
 8019908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801990c:	f200 4a2c 	addw	sl, r0, #1068	; 0x42c
 8019910:	4605      	mov	r5, r0
 8019912:	b083      	sub	sp, #12
 8019914:	460f      	mov	r7, r1
 8019916:	4650      	mov	r0, sl
 8019918:	f7fd f849 	bl	80169ae <sys_mutex_lock>
 801991c:	f895 91e0 	ldrb.w	r9, [r5, #480]	; 0x1e0
 8019920:	f8d5 81e4 	ldr.w	r8, [r5, #484]	; 0x1e4
 8019924:	f019 0f01 	tst.w	r9, #1
 8019928:	d11d      	bne.n	8019966 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x5e>
 801992a:	f1b8 0f00 	cmp.w	r8, #0
 801992e:	d011      	beq.n	8019954 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x4c>
 8019930:	2201      	movs	r2, #1
 8019932:	f002 0307 	and.w	r3, r2, #7
 8019936:	1c51      	adds	r1, r2, #1
 8019938:	4614      	mov	r4, r2
 801993a:	fa49 f303 	asr.w	r3, r9, r3
 801993e:	f003 0301 	and.w	r3, r3, #1
 8019942:	2a04      	cmp	r2, #4
 8019944:	bf88      	it	hi
 8019946:	f043 0301 	orrhi.w	r3, r3, #1
 801994a:	b2ca      	uxtb	r2, r1
 801994c:	2b00      	cmp	r3, #0
 801994e:	d0f0      	beq.n	8019932 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x2a>
 8019950:	2c05      	cmp	r4, #5
 8019952:	d109      	bne.n	8019968 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x60>
 8019954:	4628      	mov	r0, r5
 8019956:	f7ff ff3d 	bl	80197d4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE16resetSendOptionsEv>
 801995a:	4650      	mov	r0, sl
 801995c:	f7fd f836 	bl	80169cc <sys_mutex_unlock>
 8019960:	b003      	add	sp, #12
 8019962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019966:	2400      	movs	r4, #0
 8019968:	f505 73f0 	add.w	r3, r5, #480	; 0x1e0
 801996c:	f107 0b0c 	add.w	fp, r7, #12
 8019970:	f8cd 9004 	str.w	r9, [sp, #4]
 8019974:	9300      	str	r3, [sp, #0]
 8019976:	2374      	movs	r3, #116	; 0x74
 8019978:	2208      	movs	r2, #8
 801997a:	4639      	mov	r1, r7
 801997c:	fb13 2604 	smlabb	r6, r3, r4, r2
 8019980:	9b00      	ldr	r3, [sp, #0]
 8019982:	220c      	movs	r2, #12
 8019984:	441e      	add	r6, r3
 8019986:	4630      	mov	r0, r6
 8019988:	eb06 0902 	add.w	r9, r6, r2
 801998c:	f008 f868 	bl	8021a60 <memcmp>
 8019990:	b940      	cbnz	r0, 80199a4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x9c>
 8019992:	f106 020f 	add.w	r2, r6, #15
 8019996:	ebb2 0209 	subs.w	r2, r2, r9
 801999a:	d127      	bne.n	80199ec <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0xe4>
 801999c:	7bf2      	ldrb	r2, [r6, #15]
 801999e:	7bfb      	ldrb	r3, [r7, #15]
 80199a0:	429a      	cmp	r2, r3
 80199a2:	d011      	beq.n	80199c8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0xc0>
 80199a4:	f1b8 0f00 	cmp.w	r8, #0
 80199a8:	d102      	bne.n	80199b0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0xa8>
 80199aa:	e7d3      	b.n	8019954 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x4c>
 80199ac:	2c04      	cmp	r4, #4
 80199ae:	d808      	bhi.n	80199c2 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0xba>
 80199b0:	3401      	adds	r4, #1
 80199b2:	9a01      	ldr	r2, [sp, #4]
 80199b4:	f004 0307 	and.w	r3, r4, #7
 80199b8:	b2e4      	uxtb	r4, r4
 80199ba:	fa42 f303 	asr.w	r3, r2, r3
 80199be:	07db      	lsls	r3, r3, #31
 80199c0:	d5f4      	bpl.n	80199ac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0xa4>
 80199c2:	2c05      	cmp	r4, #5
 80199c4:	d1d7      	bne.n	8019976 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x6e>
 80199c6:	e7c5      	b.n	8019954 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x4c>
 80199c8:	f3c4 02c7 	ubfx	r2, r4, #3, #8
 80199cc:	2101      	movs	r1, #1
 80199ce:	f004 0407 	and.w	r4, r4, #7
 80199d2:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80199d6:	442a      	add	r2, r5
 80199d8:	40a1      	lsls	r1, r4
 80199da:	f892 41e0 	ldrb.w	r4, [r2, #480]	; 0x1e0
 80199de:	ea24 0401 	bic.w	r4, r4, r1
 80199e2:	f882 41e0 	strb.w	r4, [r2, #480]	; 0x1e0
 80199e6:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
 80199ea:	e7b3      	b.n	8019954 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x4c>
 80199ec:	4648      	mov	r0, r9
 80199ee:	4659      	mov	r1, fp
 80199f0:	f008 f836 	bl	8021a60 <memcmp>
 80199f4:	2800      	cmp	r0, #0
 80199f6:	d1d5      	bne.n	80199a4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x9c>
 80199f8:	e7d0      	b.n	801999c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x94>
 80199fa:	bf00      	nop

080199fc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv>:
 80199fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199fe:	f890 61e0 	ldrb.w	r6, [r0, #480]	; 0x1e0
 8019a02:	f8d0 71e4 	ldr.w	r7, [r0, #484]	; 0x1e4
 8019a06:	f016 0201 	ands.w	r2, r6, #1
 8019a0a:	d110      	bne.n	8019a2e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x32>
 8019a0c:	b927      	cbnz	r7, 8019a18 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x1c>
 8019a0e:	f7fe ffb9 	bl	8018984 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE17manageSendOptionsEv>
 8019a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a14:	2a04      	cmp	r2, #4
 8019a16:	d807      	bhi.n	8019a28 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x2c>
 8019a18:	3201      	adds	r2, #1
 8019a1a:	f002 0307 	and.w	r3, r2, #7
 8019a1e:	b2d2      	uxtb	r2, r2
 8019a20:	fa46 f303 	asr.w	r3, r6, r3
 8019a24:	07db      	lsls	r3, r3, #31
 8019a26:	d5f5      	bpl.n	8019a14 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x18>
 8019a28:	2a05      	cmp	r2, #5
 8019a2a:	d101      	bne.n	8019a30 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x34>
 8019a2c:	e7ef      	b.n	8019a0e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x12>
 8019a2e:	2200      	movs	r2, #0
 8019a30:	f04f 0c74 	mov.w	ip, #116	; 0x74
 8019a34:	2500      	movs	r5, #0
 8019a36:	fb0c 0302 	mla	r3, ip, r2, r0
 8019a3a:	f8a3 5228 	strh.w	r5, [r3, #552]	; 0x228
 8019a3e:	f883 522a 	strb.w	r5, [r3, #554]	; 0x22a
 8019a42:	2f00      	cmp	r7, #0
 8019a44:	d0e3      	beq.n	8019a0e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x12>
 8019a46:	3201      	adds	r2, #1
 8019a48:	b2d1      	uxtb	r1, r2
 8019a4a:	f001 0307 	and.w	r3, r1, #7
 8019a4e:	1c4c      	adds	r4, r1, #1
 8019a50:	460a      	mov	r2, r1
 8019a52:	fa46 f303 	asr.w	r3, r6, r3
 8019a56:	f003 0301 	and.w	r3, r3, #1
 8019a5a:	2904      	cmp	r1, #4
 8019a5c:	bf88      	it	hi
 8019a5e:	f043 0301 	orrhi.w	r3, r3, #1
 8019a62:	b2e1      	uxtb	r1, r4
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d0f0      	beq.n	8019a4a <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x4e>
 8019a68:	2a05      	cmp	r2, #5
 8019a6a:	d1e4      	bne.n	8019a36 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x3a>
 8019a6c:	e7cf      	b.n	8019a0e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv+0x12>
 8019a6e:	bf00      	nop

08019a70 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE>:
 8019a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a74:	f200 482c 	addw	r8, r0, #1068	; 0x42c
 8019a78:	4605      	mov	r5, r0
 8019a7a:	4689      	mov	r9, r1
 8019a7c:	4640      	mov	r0, r8
 8019a7e:	f7fc ff96 	bl	80169ae <sys_mutex_lock>
 8019a82:	f895 61e0 	ldrb.w	r6, [r5, #480]	; 0x1e0
 8019a86:	f8d5 71e4 	ldr.w	r7, [r5, #484]	; 0x1e4
 8019a8a:	07f2      	lsls	r2, r6, #31
 8019a8c:	d41a      	bmi.n	8019ac4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x54>
 8019a8e:	b18f      	cbz	r7, 8019ab4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x44>
 8019a90:	2201      	movs	r2, #1
 8019a92:	f002 0307 	and.w	r3, r2, #7
 8019a96:	1c50      	adds	r0, r2, #1
 8019a98:	4614      	mov	r4, r2
 8019a9a:	fa46 f303 	asr.w	r3, r6, r3
 8019a9e:	f003 0301 	and.w	r3, r3, #1
 8019aa2:	2a04      	cmp	r2, #4
 8019aa4:	bf88      	it	hi
 8019aa6:	f043 0301 	orrhi.w	r3, r3, #1
 8019aaa:	b2c2      	uxtb	r2, r0
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d0f0      	beq.n	8019a92 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x22>
 8019ab0:	2c05      	cmp	r4, #5
 8019ab2:	d108      	bne.n	8019ac6 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x56>
 8019ab4:	4628      	mov	r0, r5
 8019ab6:	f7ff ffa1 	bl	80199fc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv>
 8019aba:	4640      	mov	r0, r8
 8019abc:	f7fc ff86 	bl	80169cc <sys_mutex_unlock>
 8019ac0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ac4:	2400      	movs	r4, #0
 8019ac6:	f505 7bf0 	add.w	fp, r5, #480	; 0x1e0
 8019aca:	f04f 0a74 	mov.w	sl, #116	; 0x74
 8019ace:	2308      	movs	r3, #8
 8019ad0:	220c      	movs	r2, #12
 8019ad2:	4649      	mov	r1, r9
 8019ad4:	fb1a 3004 	smlabb	r0, sl, r4, r3
 8019ad8:	4458      	add	r0, fp
 8019ada:	f007 ffc1 	bl	8021a60 <memcmp>
 8019ade:	b170      	cbz	r0, 8019afe <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x8e>
 8019ae0:	b917      	cbnz	r7, 8019ae8 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x78>
 8019ae2:	e7e7      	b.n	8019ab4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x44>
 8019ae4:	2c04      	cmp	r4, #4
 8019ae6:	d807      	bhi.n	8019af8 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x88>
 8019ae8:	3401      	adds	r4, #1
 8019aea:	f004 0307 	and.w	r3, r4, #7
 8019aee:	b2e4      	uxtb	r4, r4
 8019af0:	fa46 f303 	asr.w	r3, r6, r3
 8019af4:	07db      	lsls	r3, r3, #31
 8019af6:	d5f5      	bpl.n	8019ae4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x74>
 8019af8:	2c05      	cmp	r4, #5
 8019afa:	d1e8      	bne.n	8019ace <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x5e>
 8019afc:	e7da      	b.n	8019ab4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE25removeReaderOfParticipantERKNS_12GuidPrefix_tE+0x44>
 8019afe:	f3c4 03c7 	ubfx	r3, r4, #3, #8
 8019b02:	2201      	movs	r2, #1
 8019b04:	f004 0407 	and.w	r4, r4, #7
 8019b08:	3f01      	subs	r7, #1
 8019b0a:	442b      	add	r3, r5
 8019b0c:	4628      	mov	r0, r5
 8019b0e:	40a2      	lsls	r2, r4
 8019b10:	f893 41e0 	ldrb.w	r4, [r3, #480]	; 0x1e0
 8019b14:	ea24 0402 	bic.w	r4, r4, r2
 8019b18:	f883 41e0 	strb.w	r4, [r3, #480]	; 0x1e0
 8019b1c:	f8c5 71e4 	str.w	r7, [r5, #484]	; 0x1e4
 8019b20:	f7ff ff6c 	bl	80199fc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv>
 8019b24:	4640      	mov	r0, r8
 8019b26:	f7fc ff51 	bl	80169cc <sys_mutex_unlock>
 8019b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b2e:	bf00      	nop

08019b30 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE>:
 8019b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b34:	f200 4a2c 	addw	sl, r0, #1068	; 0x42c
 8019b38:	4605      	mov	r5, r0
 8019b3a:	b083      	sub	sp, #12
 8019b3c:	460f      	mov	r7, r1
 8019b3e:	4650      	mov	r0, sl
 8019b40:	f7fc ff35 	bl	80169ae <sys_mutex_lock>
 8019b44:	f895 91e0 	ldrb.w	r9, [r5, #480]	; 0x1e0
 8019b48:	f8d5 81e4 	ldr.w	r8, [r5, #484]	; 0x1e4
 8019b4c:	f019 0f01 	tst.w	r9, #1
 8019b50:	d11d      	bne.n	8019b8e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x5e>
 8019b52:	f1b8 0f00 	cmp.w	r8, #0
 8019b56:	d011      	beq.n	8019b7c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x4c>
 8019b58:	2201      	movs	r2, #1
 8019b5a:	f002 0307 	and.w	r3, r2, #7
 8019b5e:	1c51      	adds	r1, r2, #1
 8019b60:	4614      	mov	r4, r2
 8019b62:	fa49 f303 	asr.w	r3, r9, r3
 8019b66:	f003 0301 	and.w	r3, r3, #1
 8019b6a:	2a04      	cmp	r2, #4
 8019b6c:	bf88      	it	hi
 8019b6e:	f043 0301 	orrhi.w	r3, r3, #1
 8019b72:	b2ca      	uxtb	r2, r1
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d0f0      	beq.n	8019b5a <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x2a>
 8019b78:	2c05      	cmp	r4, #5
 8019b7a:	d109      	bne.n	8019b90 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x60>
 8019b7c:	4628      	mov	r0, r5
 8019b7e:	f7ff ff3d 	bl	80199fc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE16resetSendOptionsEv>
 8019b82:	4650      	mov	r0, sl
 8019b84:	f7fc ff22 	bl	80169cc <sys_mutex_unlock>
 8019b88:	b003      	add	sp, #12
 8019b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b8e:	2400      	movs	r4, #0
 8019b90:	f505 73f0 	add.w	r3, r5, #480	; 0x1e0
 8019b94:	f107 0b0c 	add.w	fp, r7, #12
 8019b98:	f8cd 9004 	str.w	r9, [sp, #4]
 8019b9c:	9300      	str	r3, [sp, #0]
 8019b9e:	2374      	movs	r3, #116	; 0x74
 8019ba0:	2208      	movs	r2, #8
 8019ba2:	4639      	mov	r1, r7
 8019ba4:	fb13 2604 	smlabb	r6, r3, r4, r2
 8019ba8:	9b00      	ldr	r3, [sp, #0]
 8019baa:	220c      	movs	r2, #12
 8019bac:	441e      	add	r6, r3
 8019bae:	4630      	mov	r0, r6
 8019bb0:	eb06 0902 	add.w	r9, r6, r2
 8019bb4:	f007 ff54 	bl	8021a60 <memcmp>
 8019bb8:	b940      	cbnz	r0, 8019bcc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x9c>
 8019bba:	f106 020f 	add.w	r2, r6, #15
 8019bbe:	ebb2 0209 	subs.w	r2, r2, r9
 8019bc2:	d127      	bne.n	8019c14 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0xe4>
 8019bc4:	7bf2      	ldrb	r2, [r6, #15]
 8019bc6:	7bfb      	ldrb	r3, [r7, #15]
 8019bc8:	429a      	cmp	r2, r3
 8019bca:	d011      	beq.n	8019bf0 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0xc0>
 8019bcc:	f1b8 0f00 	cmp.w	r8, #0
 8019bd0:	d102      	bne.n	8019bd8 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0xa8>
 8019bd2:	e7d3      	b.n	8019b7c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x4c>
 8019bd4:	2c04      	cmp	r4, #4
 8019bd6:	d808      	bhi.n	8019bea <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0xba>
 8019bd8:	3401      	adds	r4, #1
 8019bda:	9a01      	ldr	r2, [sp, #4]
 8019bdc:	f004 0307 	and.w	r3, r4, #7
 8019be0:	b2e4      	uxtb	r4, r4
 8019be2:	fa42 f303 	asr.w	r3, r2, r3
 8019be6:	07db      	lsls	r3, r3, #31
 8019be8:	d5f4      	bpl.n	8019bd4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0xa4>
 8019bea:	2c05      	cmp	r4, #5
 8019bec:	d1d7      	bne.n	8019b9e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x6e>
 8019bee:	e7c5      	b.n	8019b7c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x4c>
 8019bf0:	f3c4 02c7 	ubfx	r2, r4, #3, #8
 8019bf4:	2101      	movs	r1, #1
 8019bf6:	f004 0407 	and.w	r4, r4, #7
 8019bfa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8019bfe:	442a      	add	r2, r5
 8019c00:	40a1      	lsls	r1, r4
 8019c02:	f892 41e0 	ldrb.w	r4, [r2, #480]	; 0x1e0
 8019c06:	ea24 0401 	bic.w	r4, r4, r1
 8019c0a:	f882 41e0 	strb.w	r4, [r2, #480]	; 0x1e0
 8019c0e:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
 8019c12:	e7b3      	b.n	8019b7c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x4c>
 8019c14:	4648      	mov	r0, r9
 8019c16:	4659      	mov	r1, fp
 8019c18:	f007 ff22 	bl	8021a60 <memcmp>
 8019c1c:	2800      	cmp	r0, #0
 8019c1e:	d1d5      	bne.n	8019bcc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x9c>
 8019c20:	e7d0      	b.n	8019bc4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_6Guid_tE+0x94>
 8019c22:	bf00      	nop

08019c24 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_>:
 8019c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019c28:	460e      	mov	r6, r1
 8019c2a:	b091      	sub	sp, #68	; 0x44
 8019c2c:	2100      	movs	r1, #0
 8019c2e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8019c32:	f240 1c15 	movw	ip, #277	; 0x115
 8019c36:	4604      	mov	r4, r0
 8019c38:	4630      	mov	r0, r6
 8019c3a:	4615      	mov	r5, r2
 8019c3c:	461f      	mov	r7, r3
 8019c3e:	f8ad c00c 	strh.w	ip, [sp, #12]
 8019c42:	e9cd 110a 	strd	r1, r1, [sp, #40]	; 0x28
 8019c46:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
 8019c4a:	e9cd e10e 	strd	lr, r1, [sp, #56]	; 0x38
 8019c4e:	f000 fddb 	bl	801a808 <_ZNK4rtps11PBufWrapper9spaceUsedEv>
 8019c52:	3014      	adds	r0, #20
 8019c54:	f8ad 000e 	strh.w	r0, [sp, #14]
 8019c58:	b12d      	cbz	r5, 8019c66 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x42>
 8019c5a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8019c5e:	f043 0302 	orr.w	r3, r3, #2
 8019c62:	f88d 300d 	strb.w	r3, [sp, #13]
 8019c66:	4630      	mov	r0, r6
 8019c68:	f000 fdc8 	bl	801a7fc <_ZNK4rtps11PBufWrapper7isValidEv>
 8019c6c:	b128      	cbz	r0, 8019c7a <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x56>
 8019c6e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8019c72:	f043 0304 	orr.w	r3, r3, #4
 8019c76:	f88d 300d 	strb.w	r3, [sp, #13]
 8019c7a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 8019ef0 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x2cc>
 8019c7e:	220c      	movs	r2, #12
 8019c80:	a81a      	add	r0, sp, #104	; 0x68
 8019c82:	4641      	mov	r1, r8
 8019c84:	f007 feec 	bl	8021a60 <memcmp>
 8019c88:	2800      	cmp	r0, #0
 8019c8a:	d07b      	beq.n	8019d84 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x160>
 8019c8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019c8e:	3301      	adds	r3, #1
 8019c90:	f000 8093 	beq.w	8019dba <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x196>
 8019c94:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019c96:	f10d 091c 	add.w	r9, sp, #28
 8019c9a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8019c9e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019ca2:	f043 0302 	orr.w	r3, r3, #2
 8019ca6:	e889 0003 	stmia.w	r9, {r0, r1}
 8019caa:	6810      	ldr	r0, [r2, #0]
 8019cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8019cb0:	f88d 300d 	strb.w	r3, [sp, #13]
 8019cb4:	2118      	movs	r1, #24
 8019cb6:	9005      	str	r0, [sp, #20]
 8019cb8:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019cba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019cbe:	6800      	ldr	r0, [r0, #0]
 8019cc0:	3320      	adds	r3, #32
 8019cc2:	9204      	str	r2, [sp, #16]
 8019cc4:	9006      	str	r0, [sp, #24]
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019ccc:	f000 fdd8 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 8019cd0:	4605      	mov	r5, r0
 8019cd2:	2800      	cmp	r0, #0
 8019cd4:	f040 808a 	bne.w	8019dec <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x1c8>
 8019cd8:	220c      	movs	r2, #12
 8019cda:	4985      	ldr	r1, [pc, #532]	; (8019ef0 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x2cc>)
 8019cdc:	a81a      	add	r0, sp, #104	; 0x68
 8019cde:	f007 febf 	bl	8021a60 <memcmp>
 8019ce2:	2800      	cmp	r0, #0
 8019ce4:	f000 80de 	beq.w	8019ea4 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x280>
 8019ce8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019cea:	3301      	adds	r3, #1
 8019cec:	f000 80f5 	beq.w	8019eda <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x2b6>
 8019cf0:	2120      	movs	r1, #32
 8019cf2:	4620      	mov	r0, r4
 8019cf4:	f000 fdc4 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 8019cf8:	2202      	movs	r2, #2
 8019cfa:	f248 030f 	movw	r3, #32783	; 0x800f
 8019cfe:	4620      	mov	r0, r4
 8019d00:	eb0d 0102 	add.w	r1, sp, r2
 8019d04:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019d08:	f000 fd88 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019d0c:	2318      	movs	r3, #24
 8019d0e:	a901      	add	r1, sp, #4
 8019d10:	2202      	movs	r2, #2
 8019d12:	4620      	mov	r0, r4
 8019d14:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019d18:	f000 fd80 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019d1c:	a91a      	add	r1, sp, #104	; 0x68
 8019d1e:	220c      	movs	r2, #12
 8019d20:	4620      	mov	r0, r4
 8019d22:	f000 fd7b 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019d26:	2203      	movs	r2, #3
 8019d28:	a91d      	add	r1, sp, #116	; 0x74
 8019d2a:	4620      	mov	r0, r4
 8019d2c:	f000 fd76 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019d30:	2201      	movs	r2, #1
 8019d32:	f10d 0177 	add.w	r1, sp, #119	; 0x77
 8019d36:	4620      	mov	r0, r4
 8019d38:	f000 fd70 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019d3c:	2204      	movs	r2, #4
 8019d3e:	a91e      	add	r1, sp, #120	; 0x78
 8019d40:	4620      	mov	r0, r4
 8019d42:	f000 fd6b 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019d46:	2204      	movs	r2, #4
 8019d48:	a91f      	add	r1, sp, #124	; 0x7c
 8019d4a:	4620      	mov	r0, r4
 8019d4c:	f000 fd66 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019d50:	2301      	movs	r3, #1
 8019d52:	f10d 0102 	add.w	r1, sp, #2
 8019d56:	2202      	movs	r2, #2
 8019d58:	4620      	mov	r0, r4
 8019d5a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019d5e:	f000 fd5d 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019d62:	2300      	movs	r3, #0
 8019d64:	a901      	add	r1, sp, #4
 8019d66:	2202      	movs	r2, #2
 8019d68:	4620      	mov	r0, r4
 8019d6a:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019d6e:	f000 fd55 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019d72:	4630      	mov	r0, r6
 8019d74:	f000 fd42 	bl	801a7fc <_ZNK4rtps11PBufWrapper7isValidEv>
 8019d78:	2800      	cmp	r0, #0
 8019d7a:	f040 8085 	bne.w	8019e88 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x264>
 8019d7e:	b011      	add	sp, #68	; 0x44
 8019d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d84:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8019d88:	f898 300c 	ldrb.w	r3, [r8, #12]
 8019d8c:	429a      	cmp	r2, r3
 8019d8e:	f47f af7d 	bne.w	8019c8c <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x68>
 8019d92:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8019d96:	f898 300d 	ldrb.w	r3, [r8, #13]
 8019d9a:	429a      	cmp	r2, r3
 8019d9c:	f47f af76 	bne.w	8019c8c <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x68>
 8019da0:	f89d 2076 	ldrb.w	r2, [sp, #118]	; 0x76
 8019da4:	f898 300e 	ldrb.w	r3, [r8, #14]
 8019da8:	429a      	cmp	r2, r3
 8019daa:	f47f af6f 	bne.w	8019c8c <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x68>
 8019dae:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	f47f af6a 	bne.w	8019c8c <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x68>
 8019db8:	e003      	b.n	8019dc2 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x19e>
 8019dba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	f47f af69 	bne.w	8019c94 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x70>
 8019dc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8019dc6:	f10d 091c 	add.w	r9, sp, #28
 8019dca:	e897 0003 	ldmia.w	r7, {r0, r1}
 8019dce:	9304      	str	r3, [sp, #16]
 8019dd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019dd2:	e889 0003 	stmia.w	r9, {r0, r1}
 8019dd6:	6818      	ldr	r0, [r3, #0]
 8019dd8:	2118      	movs	r1, #24
 8019dda:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019ddc:	9005      	str	r0, [sp, #20]
 8019dde:	6818      	ldr	r0, [r3, #0]
 8019de0:	9006      	str	r0, [sp, #24]
 8019de2:	4620      	mov	r0, r4
 8019de4:	f000 fd4c 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 8019de8:	2800      	cmp	r0, #0
 8019dea:	d044      	beq.n	8019e76 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x252>
 8019dec:	2114      	movs	r1, #20
 8019dee:	4620      	mov	r0, r4
 8019df0:	f000 fd46 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 8019df4:	b1a0      	cbz	r0, 8019e20 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x1fc>
 8019df6:	2104      	movs	r1, #4
 8019df8:	4620      	mov	r0, r4
 8019dfa:	f000 fd41 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 8019dfe:	2201      	movs	r2, #1
 8019e00:	a903      	add	r1, sp, #12
 8019e02:	4620      	mov	r0, r4
 8019e04:	f000 fd0a 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e08:	2201      	movs	r2, #1
 8019e0a:	f10d 010d 	add.w	r1, sp, #13
 8019e0e:	4620      	mov	r0, r4
 8019e10:	f000 fd04 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e14:	2202      	movs	r2, #2
 8019e16:	f10d 010e 	add.w	r1, sp, #14
 8019e1a:	4620      	mov	r0, r4
 8019e1c:	f000 fcfe 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e20:	2202      	movs	r2, #2
 8019e22:	a904      	add	r1, sp, #16
 8019e24:	4620      	mov	r0, r4
 8019e26:	f000 fcf9 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e2a:	2202      	movs	r2, #2
 8019e2c:	f10d 0112 	add.w	r1, sp, #18
 8019e30:	4620      	mov	r0, r4
 8019e32:	f000 fcf3 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e36:	2203      	movs	r2, #3
 8019e38:	a905      	add	r1, sp, #20
 8019e3a:	4620      	mov	r0, r4
 8019e3c:	f000 fcee 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e40:	2201      	movs	r2, #1
 8019e42:	f10d 0117 	add.w	r1, sp, #23
 8019e46:	4620      	mov	r0, r4
 8019e48:	f000 fce8 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e4c:	2203      	movs	r2, #3
 8019e4e:	a906      	add	r1, sp, #24
 8019e50:	4620      	mov	r0, r4
 8019e52:	f000 fce3 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e56:	2201      	movs	r2, #1
 8019e58:	f10d 011b 	add.w	r1, sp, #27
 8019e5c:	4620      	mov	r0, r4
 8019e5e:	f000 fcdd 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e62:	4649      	mov	r1, r9
 8019e64:	2204      	movs	r2, #4
 8019e66:	4620      	mov	r0, r4
 8019e68:	f000 fcd8 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e6c:	2204      	movs	r2, #4
 8019e6e:	a908      	add	r1, sp, #32
 8019e70:	4620      	mov	r0, r4
 8019e72:	f000 fcd3 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 8019e76:	2d00      	cmp	r5, #0
 8019e78:	f47f af2e 	bne.w	8019cd8 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0xb4>
 8019e7c:	4630      	mov	r0, r6
 8019e7e:	f000 fcbd 	bl	801a7fc <_ZNK4rtps11PBufWrapper7isValidEv>
 8019e82:	2800      	cmp	r0, #0
 8019e84:	f43f af7b 	beq.w	8019d7e <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x15a>
 8019e88:	4631      	mov	r1, r6
 8019e8a:	a801      	add	r0, sp, #4
 8019e8c:	f000 fc8c 	bl	801a7a8 <_ZN4rtps11PBufWrapperC1ERKS0_>
 8019e90:	a901      	add	r1, sp, #4
 8019e92:	4620      	mov	r0, r4
 8019e94:	f000 fcdc 	bl	801a850 <_ZN4rtps11PBufWrapper6appendEOS0_>
 8019e98:	a801      	add	r0, sp, #4
 8019e9a:	f000 fca7 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 8019e9e:	b011      	add	sp, #68	; 0x44
 8019ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ea4:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 8019ea8:	f898 300c 	ldrb.w	r3, [r8, #12]
 8019eac:	429a      	cmp	r2, r3
 8019eae:	f47f af1b 	bne.w	8019ce8 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0xc4>
 8019eb2:	f89d 2075 	ldrb.w	r2, [sp, #117]	; 0x75
 8019eb6:	f898 300d 	ldrb.w	r3, [r8, #13]
 8019eba:	429a      	cmp	r2, r3
 8019ebc:	f47f af14 	bne.w	8019ce8 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0xc4>
 8019ec0:	f898 300e 	ldrb.w	r3, [r8, #14]
 8019ec4:	f89d 2076 	ldrb.w	r2, [sp, #118]	; 0x76
 8019ec8:	429a      	cmp	r2, r3
 8019eca:	f47f af0d 	bne.w	8019ce8 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0xc4>
 8019ece:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	f47f af08 	bne.w	8019ce8 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0xc4>
 8019ed8:	e74b      	b.n	8019d72 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x14e>
 8019eda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	f47f af07 	bne.w	8019cf0 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0xcc>
 8019ee2:	e746      	b.n	8019d72 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_+0x14e>
 8019ee4:	a801      	add	r0, sp, #4
 8019ee6:	f000 fc81 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 8019eea:	f006 fecf 	bl	8020c8c <__cxa_end_cleanup>
 8019eee:	bf00      	nop
 8019ef0:	080265e4 	.word	0x080265e4

08019ef4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv>:
 8019ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ef8:	f890 81e0 	ldrb.w	r8, [r0, #480]	; 0x1e0
 8019efc:	b08f      	sub	sp, #60	; 0x3c
 8019efe:	4604      	mov	r4, r0
 8019f00:	f8d0 31e4 	ldr.w	r3, [r0, #484]	; 0x1e4
 8019f04:	f018 0501 	ands.w	r5, r8, #1
 8019f08:	d11b      	bne.n	8019f42 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x4e>
 8019f0a:	b97b      	cbnz	r3, 8019f2c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x38>
 8019f0c:	f8d4 3454 	ldr.w	r3, [r4, #1108]	; 0x454
 8019f10:	3301      	adds	r3, #1
 8019f12:	f8c4 3454 	str.w	r3, [r4, #1108]	; 0x454
 8019f16:	b923      	cbnz	r3, 8019f22 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x2e>
 8019f18:	f8d4 3450 	ldr.w	r3, [r4, #1104]	; 0x450
 8019f1c:	3301      	adds	r3, #1
 8019f1e:	f8c4 3450 	str.w	r3, [r4, #1104]	; 0x450
 8019f22:	b00f      	add	sp, #60	; 0x3c
 8019f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f28:	2d04      	cmp	r5, #4
 8019f2a:	d807      	bhi.n	8019f3c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x48>
 8019f2c:	3501      	adds	r5, #1
 8019f2e:	f005 0307 	and.w	r3, r5, #7
 8019f32:	b2ed      	uxtb	r5, r5
 8019f34:	fa48 f303 	asr.w	r3, r8, r3
 8019f38:	07db      	lsls	r3, r3, #31
 8019f3a:	d5f5      	bpl.n	8019f28 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x34>
 8019f3c:	2d05      	cmp	r5, #5
 8019f3e:	d101      	bne.n	8019f44 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x50>
 8019f40:	e7e4      	b.n	8019f0c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x18>
 8019f42:	2500      	movs	r5, #0
 8019f44:	2674      	movs	r6, #116	; 0x74
 8019f46:	2700      	movs	r7, #0
 8019f48:	f104 0904 	add.w	r9, r4, #4
 8019f4c:	fb06 4305 	mla	r3, r6, r5, r4
 8019f50:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 8019f54:	b932      	cbnz	r2, 8019f64 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x70>
 8019f56:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8019f5a:	b11b      	cbz	r3, 8019f64 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x70>
 8019f5c:	f894 344c 	ldrb.w	r3, [r4, #1100]	; 0x44c
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d066      	beq.n	801a032 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x13e>
 8019f64:	f8b4 3434 	ldrh.w	r3, [r4, #1076]	; 0x434
 8019f68:	4649      	mov	r1, r9
 8019f6a:	a80c      	add	r0, sp, #48	; 0x30
 8019f6c:	970c      	str	r7, [sp, #48]	; 0x30
 8019f6e:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
 8019f72:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019f76:	f7ff f9cf 	bl	8019318 <_ZN4rtps14MessageFactory9addHeaderINS_11PBufWrapperEEEvRT_RKNS_12GuidPrefix_tE>
 8019f7a:	a80c      	add	r0, sp, #48	; 0x30
 8019f7c:	f7fd fcce 	bl	801791c <_ZN4rtps14MessageFactory22addSubMessageTimeStampINS_11PBufWrapperEEEvRT_b.constprop.0>
 8019f80:	f204 4a2c 	addw	sl, r4, #1068	; 0x42c
 8019f84:	4650      	mov	r0, sl
 8019f86:	f7fc fd12 	bl	80169ae <sys_mutex_lock>
 8019f8a:	f8d4 2454 	ldr.w	r2, [r4, #1108]	; 0x454
 8019f8e:	f504 608b 	add.w	r0, r4, #1112	; 0x458
 8019f92:	f8d4 1450 	ldr.w	r1, [r4, #1104]	; 0x450
 8019f96:	f002 fc77 	bl	801c888 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE>
 8019f9a:	4684      	mov	ip, r0
 8019f9c:	2800      	cmp	r0, #0
 8019f9e:	d073      	beq.n	801a088 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x194>
 8019fa0:	fb06 4305 	mla	r3, r6, r5, r4
 8019fa4:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 8019fa8:	2a00      	cmp	r2, #0
 8019faa:	d05c      	beq.n	801a066 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x172>
 8019fac:	f894 244c 	ldrb.w	r2, [r4, #1100]	; 0x44c
 8019fb0:	2a00      	cmp	r2, #0
 8019fb2:	d158      	bne.n	801a066 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x172>
 8019fb4:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d054      	beq.n	801a066 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x172>
 8019fbc:	9208      	str	r2, [sp, #32]
 8019fbe:	aa06      	add	r2, sp, #24
 8019fc0:	f10c 0314 	add.w	r3, ip, #20
 8019fc4:	f10d 0e08 	add.w	lr, sp, #8
 8019fc8:	f10d 0b20 	add.w	fp, sp, #32
 8019fcc:	e9dc 0109 	ldrd	r0, r1, [ip, #36]	; 0x24
 8019fd0:	e882 0003 	stmia.w	r2, {r0, r1}
 8019fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019fd6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8019fda:	f104 0210 	add.w	r2, r4, #16
 8019fde:	f10c 0304 	add.w	r3, ip, #4
 8019fe2:	f10c 010c 	add.w	r1, ip, #12
 8019fe6:	a80c      	add	r0, sp, #48	; 0x30
 8019fe8:	9200      	str	r2, [sp, #0]
 8019fea:	2200      	movs	r2, #0
 8019fec:	f8cd b004 	str.w	fp, [sp, #4]
 8019ff0:	f7ff fe18 	bl	8019c24 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_>
 8019ff4:	4650      	mov	r0, sl
 8019ff6:	f7fc fce9 	bl	80169cc <sys_mutex_unlock>
 8019ffa:	fb06 4305 	mla	r3, r6, r5, r4
 8019ffe:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 801a002:	2a00      	cmp	r2, #0
 801a004:	d035      	beq.n	801a072 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x17e>
 801a006:	f894 244c 	ldrb.w	r2, [r4, #1100]	; 0x44c
 801a00a:	bb92      	cbnz	r2, 801a072 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x17e>
 801a00c:	2130      	movs	r1, #48	; 0x30
 801a00e:	f8b3 2214 	ldrh.w	r2, [r3, #532]	; 0x214
 801a012:	fb16 1305 	smlabb	r3, r6, r5, r1
 801a016:	4423      	add	r3, r4
 801a018:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 801a01c:	a909      	add	r1, sp, #36	; 0x24
 801a01e:	f8d4 0448 	ldr.w	r0, [r4, #1096]	; 0x448
 801a022:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a026:	930a      	str	r3, [sp, #40]	; 0x28
 801a028:	f003 fad6 	bl	801d5d8 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>
 801a02c:	a80c      	add	r0, sp, #48	; 0x30
 801a02e:	f000 fbdd 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801a032:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 801a036:	2b00      	cmp	r3, #0
 801a038:	f43f af68 	beq.w	8019f0c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x18>
 801a03c:	3501      	adds	r5, #1
 801a03e:	b2ea      	uxtb	r2, r5
 801a040:	f002 0307 	and.w	r3, r2, #7
 801a044:	1c51      	adds	r1, r2, #1
 801a046:	4615      	mov	r5, r2
 801a048:	fa48 f303 	asr.w	r3, r8, r3
 801a04c:	f003 0301 	and.w	r3, r3, #1
 801a050:	2a04      	cmp	r2, #4
 801a052:	bf88      	it	hi
 801a054:	f043 0301 	orrhi.w	r3, r3, #1
 801a058:	b2ca      	uxtb	r2, r1
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d0f0      	beq.n	801a040 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x14c>
 801a05e:	2d05      	cmp	r5, #5
 801a060:	f47f af74 	bne.w	8019f4c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x58>
 801a064:	e752      	b.n	8019f0c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x18>
 801a066:	fb06 4305 	mla	r3, r6, r5, r4
 801a06a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 801a06e:	9308      	str	r3, [sp, #32]
 801a070:	e7a5      	b.n	8019fbe <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0xca>
 801a072:	2318      	movs	r3, #24
 801a074:	fb06 4205 	mla	r2, r6, r5, r4
 801a078:	fb16 3305 	smlabb	r3, r6, r5, r3
 801a07c:	f8b2 21fc 	ldrh.w	r2, [r2, #508]	; 0x1fc
 801a080:	4423      	add	r3, r4
 801a082:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 801a086:	e7c9      	b.n	801a01c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x128>
 801a088:	4650      	mov	r0, sl
 801a08a:	f7fc fc9f 	bl	80169cc <sys_mutex_unlock>
 801a08e:	a80c      	add	r0, sp, #48	; 0x30
 801a090:	f000 fbac 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801a094:	b00f      	add	sp, #60	; 0x3c
 801a096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a09a:	4650      	mov	r0, sl
 801a09c:	f7fc fc96 	bl	80169cc <sys_mutex_unlock>
 801a0a0:	a80c      	add	r0, sp, #48	; 0x30
 801a0a2:	f000 fba3 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801a0a6:	f006 fdf1 	bl	8020c8c <__cxa_end_cleanup>
 801a0aa:	e7f9      	b.n	801a0a0 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x1ac>

0801a0ac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE>:
 801a0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0b0:	4605      	mov	r5, r0
 801a0b2:	b08e      	sub	sp, #56	; 0x38
 801a0b4:	2300      	movs	r3, #0
 801a0b6:	460e      	mov	r6, r1
 801a0b8:	f8b5 7434 	ldrh.w	r7, [r5, #1076]	; 0x434
 801a0bc:	a80c      	add	r0, sp, #48	; 0x30
 801a0be:	1d29      	adds	r1, r5, #4
 801a0c0:	4614      	mov	r4, r2
 801a0c2:	930c      	str	r3, [sp, #48]	; 0x30
 801a0c4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801a0c8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801a0cc:	f7ff f924 	bl	8019318 <_ZN4rtps14MessageFactory9addHeaderINS_11PBufWrapperEEEvRT_RKNS_12GuidPrefix_tE>
 801a0d0:	a80c      	add	r0, sp, #48	; 0x30
 801a0d2:	f7fd fc23 	bl	801791c <_ZN4rtps14MessageFactory22addSubMessageTimeStampINS_11PBufWrapperEEEvRT_b.constprop.0>
 801a0d6:	f205 482c 	addw	r8, r5, #1068	; 0x42c
 801a0da:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801a0dc:	6973      	ldr	r3, [r6, #20]
 801a0de:	4640      	mov	r0, r8
 801a0e0:	920a      	str	r2, [sp, #40]	; 0x28
 801a0e2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801a0e6:	f7fc fc62 	bl	80169ae <sys_mutex_lock>
 801a0ea:	f505 608b 	add.w	r0, r5, #1112	; 0x458
 801a0ee:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a0f2:	f002 fbc9 	bl	801c888 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE>
 801a0f6:	4604      	mov	r4, r0
 801a0f8:	b338      	cbz	r0, 801a14a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0x9e>
 801a0fa:	aa06      	add	r2, sp, #24
 801a0fc:	f104 0314 	add.w	r3, r4, #20
 801a100:	360c      	adds	r6, #12
 801a102:	af02      	add	r7, sp, #8
 801a104:	f105 0c10 	add.w	ip, r5, #16
 801a108:	e9d0 0109 	ldrd	r0, r1, [r0, #36]	; 0x24
 801a10c:	e882 0003 	stmia.w	r2, {r0, r1}
 801a110:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a112:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801a116:	1d23      	adds	r3, r4, #4
 801a118:	f104 010c 	add.w	r1, r4, #12
 801a11c:	2200      	movs	r2, #0
 801a11e:	a80c      	add	r0, sp, #48	; 0x30
 801a120:	9601      	str	r6, [sp, #4]
 801a122:	f8cd c000 	str.w	ip, [sp]
 801a126:	f7ff fd7d 	bl	8019c24 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_>
 801a12a:	4640      	mov	r0, r8
 801a12c:	f7fc fc4e 	bl	80169cc <sys_mutex_unlock>
 801a130:	f8d5 0448 	ldr.w	r0, [r5, #1096]	; 0x448
 801a134:	a909      	add	r1, sp, #36	; 0x24
 801a136:	f003 fa4f 	bl	801d5d8 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>
 801a13a:	2401      	movs	r4, #1
 801a13c:	a80c      	add	r0, sp, #48	; 0x30
 801a13e:	f000 fb55 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801a142:	4620      	mov	r0, r4
 801a144:	b00e      	add	sp, #56	; 0x38
 801a146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a14a:	4640      	mov	r0, r8
 801a14c:	f7fc fc3e 	bl	80169cc <sys_mutex_unlock>
 801a150:	e7f4      	b.n	801a13c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0x90>
 801a152:	e002      	b.n	801a15a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0xae>
 801a154:	4640      	mov	r0, r8
 801a156:	f7fc fc39 	bl	80169cc <sys_mutex_unlock>
 801a15a:	a80c      	add	r0, sp, #48	; 0x30
 801a15c:	f000 fb46 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801a160:	f006 fd94 	bl	8020c8c <__cxa_end_cleanup>

0801a164 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE>:
 801a164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a168:	ed2d 8b02 	vpush	{d8}
 801a16c:	f890 b1e0 	ldrb.w	fp, [r0, #480]	; 0x1e0
 801a170:	b08b      	sub	sp, #44	; 0x2c
 801a172:	4606      	mov	r6, r0
 801a174:	460f      	mov	r7, r1
 801a176:	f01b 0401 	ands.w	r4, fp, #1
 801a17a:	ee08 2a10 	vmov	s16, r2
 801a17e:	d114      	bne.n	801a1aa <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x46>
 801a180:	f8d0 21e4 	ldr.w	r2, [r0, #484]	; 0x1e4
 801a184:	b932      	cbnz	r2, 801a194 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x30>
 801a186:	b00b      	add	sp, #44	; 0x2c
 801a188:	ecbd 8b02 	vpop	{d8}
 801a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a190:	2c04      	cmp	r4, #4
 801a192:	d807      	bhi.n	801a1a4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x40>
 801a194:	3401      	adds	r4, #1
 801a196:	f004 0307 	and.w	r3, r4, #7
 801a19a:	b2e4      	uxtb	r4, r4
 801a19c:	fa4b f303 	asr.w	r3, fp, r3
 801a1a0:	07d9      	lsls	r1, r3, #31
 801a1a2:	d5f5      	bpl.n	801a190 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x2c>
 801a1a4:	2c05      	cmp	r4, #5
 801a1a6:	d101      	bne.n	801a1ac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x48>
 801a1a8:	e7ed      	b.n	801a186 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x22>
 801a1aa:	2400      	movs	r4, #0
 801a1ac:	1d3b      	adds	r3, r7, #4
 801a1ae:	46b9      	mov	r9, r7
 801a1b0:	f506 7af0 	add.w	sl, r6, #480	; 0x1e0
 801a1b4:	461f      	mov	r7, r3
 801a1b6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801a1ba:	220c      	movs	r2, #12
 801a1bc:	ee18 1a10 	vmov	r1, s16
 801a1c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a1c4:	009d      	lsls	r5, r3, #2
 801a1c6:	f105 0808 	add.w	r8, r5, #8
 801a1ca:	44d0      	add	r8, sl
 801a1cc:	4640      	mov	r0, r8
 801a1ce:	f007 fc47 	bl	8021a60 <memcmp>
 801a1d2:	b988      	cbnz	r0, 801a1f8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x94>
 801a1d4:	f105 0314 	add.w	r3, r5, #20
 801a1d8:	2203      	movs	r2, #3
 801a1da:	4639      	mov	r1, r7
 801a1dc:	eb0a 0003 	add.w	r0, sl, r3
 801a1e0:	f007 fc3e 	bl	8021a60 <memcmp>
 801a1e4:	b940      	cbnz	r0, 801a1f8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x94>
 801a1e6:	2374      	movs	r3, #116	; 0x74
 801a1e8:	f899 2007 	ldrb.w	r2, [r9, #7]
 801a1ec:	fb03 6304 	mla	r3, r3, r4, r6
 801a1f0:	f893 11f7 	ldrb.w	r1, [r3, #503]	; 0x1f7
 801a1f4:	4291      	cmp	r1, r2
 801a1f6:	d013      	beq.n	801a220 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0xbc>
 801a1f8:	f8d6 31e4 	ldr.w	r3, [r6, #484]	; 0x1e4
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d0c2      	beq.n	801a186 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x22>
 801a200:	4623      	mov	r3, r4
 801a202:	e001      	b.n	801a208 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0xa4>
 801a204:	2b04      	cmp	r3, #4
 801a206:	d807      	bhi.n	801a218 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0xb4>
 801a208:	3301      	adds	r3, #1
 801a20a:	f003 0207 	and.w	r2, r3, #7
 801a20e:	b2db      	uxtb	r3, r3
 801a210:	fa4b f202 	asr.w	r2, fp, r2
 801a214:	07d2      	lsls	r2, r2, #31
 801a216:	d5f5      	bpl.n	801a204 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0xa0>
 801a218:	2b05      	cmp	r3, #5
 801a21a:	461c      	mov	r4, r3
 801a21c:	d1cb      	bne.n	801a1b6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x52>
 801a21e:	e7b2      	b.n	801a186 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x22>
 801a220:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 801a224:	464f      	mov	r7, r9
 801a226:	2114      	movs	r1, #20
 801a228:	4605      	mov	r5, r0
 801a22a:	4699      	mov	r9, r3
 801a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a22e:	eb0d 0001 	add.w	r0, sp, r1
 801a232:	9200      	str	r2, [sp, #0]
 801a234:	4a2d      	ldr	r2, [pc, #180]	; (801a2ec <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x188>)
 801a236:	f007 ff09 	bl	802204c <sniprintf>
 801a23a:	2813      	cmp	r0, #19
 801a23c:	dc4f      	bgt.n	801a2de <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x17a>
 801a23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a240:	f8d9 2258 	ldr.w	r2, [r9, #600]	; 0x258
 801a244:	4293      	cmp	r3, r2
 801a246:	dd9e      	ble.n	801a186 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x22>
 801a248:	f8c9 3258 	str.w	r3, [r9, #600]	; 0x258
 801a24c:	ac03      	add	r4, sp, #12
 801a24e:	697a      	ldr	r2, [r7, #20]
 801a250:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
 801a254:	e884 0003 	stmia.w	r4, {r0, r1}
 801a258:	b1c2      	cbz	r2, 801a28c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x128>
 801a25a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 801a25e:	2d1f      	cmp	r5, #31
 801a260:	d804      	bhi.n	801a26c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x108>
 801a262:	fa29 f305 	lsr.w	r3, r9, r5
 801a266:	69b8      	ldr	r0, [r7, #24]
 801a268:	4203      	tst	r3, r0
 801a26a:	d005      	beq.n	801a278 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x114>
 801a26c:	4622      	mov	r2, r4
 801a26e:	4641      	mov	r1, r8
 801a270:	4630      	mov	r0, r6
 801a272:	f7ff ff1b 	bl	801a0ac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE>
 801a276:	697a      	ldr	r2, [r7, #20]
 801a278:	9b04      	ldr	r3, [sp, #16]
 801a27a:	3501      	adds	r5, #1
 801a27c:	3301      	adds	r3, #1
 801a27e:	9304      	str	r3, [sp, #16]
 801a280:	b913      	cbnz	r3, 801a288 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x124>
 801a282:	9b03      	ldr	r3, [sp, #12]
 801a284:	3301      	adds	r3, #1
 801a286:	9303      	str	r3, [sp, #12]
 801a288:	4295      	cmp	r5, r2
 801a28a:	d3e8      	bcc.n	801a25e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0xfa>
 801a28c:	f206 452c 	addw	r5, r6, #1068	; 0x42c
 801a290:	4628      	mov	r0, r5
 801a292:	f7fc fb8c 	bl	80169ae <sys_mutex_lock>
 801a296:	f506 608b 	add.w	r0, r6, #1112	; 0x458
 801a29a:	f002 fa5b 	bl	801c754 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMaxEv>
 801a29e:	4603      	mov	r3, r0
 801a2a0:	4628      	mov	r0, r5
 801a2a2:	e9d3 5700 	ldrd	r5, r7, [r3]
 801a2a6:	f7fc fb91 	bl	80169cc <sys_mutex_unlock>
 801a2aa:	9b03      	ldr	r3, [sp, #12]
 801a2ac:	429d      	cmp	r5, r3
 801a2ae:	d010      	beq.n	801a2d2 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x16e>
 801a2b0:	f77f af69 	ble.w	801a186 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x22>
 801a2b4:	4622      	mov	r2, r4
 801a2b6:	4641      	mov	r1, r8
 801a2b8:	4630      	mov	r0, r6
 801a2ba:	f7ff fef7 	bl	801a0ac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE>
 801a2be:	9b04      	ldr	r3, [sp, #16]
 801a2c0:	3301      	adds	r3, #1
 801a2c2:	9304      	str	r3, [sp, #16]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d1f0      	bne.n	801a2aa <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x146>
 801a2c8:	9b03      	ldr	r3, [sp, #12]
 801a2ca:	3301      	adds	r3, #1
 801a2cc:	429d      	cmp	r5, r3
 801a2ce:	9303      	str	r3, [sp, #12]
 801a2d0:	d1ee      	bne.n	801a2b0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x14c>
 801a2d2:	9b04      	ldr	r3, [sp, #16]
 801a2d4:	42bb      	cmp	r3, r7
 801a2d6:	d0ed      	beq.n	801a2b4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x150>
 801a2d8:	f4bf af55 	bcs.w	801a186 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x22>
 801a2dc:	e7ea      	b.n	801a2b4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x150>
 801a2de:	e7fe      	b.n	801a2de <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x17a>
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	f7fc fb73 	bl	80169cc <sys_mutex_unlock>
 801a2e6:	f006 fcd1 	bl	8020c8c <__cxa_end_cleanup>
 801a2ea:	bf00      	nop
 801a2ec:	08026550 	.word	0x08026550

0801a2f0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE>:
 801a2f0:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 801a2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2f6:	460d      	mov	r5, r1
 801a2f8:	b08f      	sub	sp, #60	; 0x3c
 801a2fa:	4606      	mov	r6, r0
 801a2fc:	4614      	mov	r4, r2
 801a2fe:	b91b      	cbnz	r3, 801a308 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0x18>
 801a300:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
 801a304:	2800      	cmp	r0, #0
 801a306:	d14e      	bne.n	801a3a6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0xb6>
 801a308:	2300      	movs	r3, #0
 801a30a:	f8b6 2434 	ldrh.w	r2, [r6, #1076]	; 0x434
 801a30e:	1d31      	adds	r1, r6, #4
 801a310:	a80c      	add	r0, sp, #48	; 0x30
 801a312:	930c      	str	r3, [sp, #48]	; 0x30
 801a314:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801a318:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801a31c:	f7fe fffc 	bl	8019318 <_ZN4rtps14MessageFactory9addHeaderINS_11PBufWrapperEEEvRT_RKNS_12GuidPrefix_tE>
 801a320:	a80c      	add	r0, sp, #48	; 0x30
 801a322:	f7fd fafb 	bl	801791c <_ZN4rtps14MessageFactory22addSubMessageTimeStampINS_11PBufWrapperEEEvRT_b.constprop.0>
 801a326:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d13d      	bne.n	801a3aa <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0xba>
 801a32e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a330:	8aaa      	ldrh	r2, [r5, #20]
 801a332:	f206 472c 	addw	r7, r6, #1068	; 0x42c
 801a336:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a33a:	930a      	str	r3, [sp, #40]	; 0x28
 801a33c:	4638      	mov	r0, r7
 801a33e:	f7fc fb36 	bl	80169ae <sys_mutex_lock>
 801a342:	f506 608b 	add.w	r0, r6, #1112	; 0x458
 801a346:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a34a:	f002 fa9d 	bl	801c888 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE>
 801a34e:	4604      	mov	r4, r0
 801a350:	b388      	cbz	r0, 801a3b6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0xc6>
 801a352:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 801a356:	b35b      	cbz	r3, 801a3b0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0xc0>
 801a358:	2300      	movs	r3, #0
 801a35a:	9308      	str	r3, [sp, #32]
 801a35c:	aa06      	add	r2, sp, #24
 801a35e:	f104 0314 	add.w	r3, r4, #20
 801a362:	ad02      	add	r5, sp, #8
 801a364:	f10d 0c20 	add.w	ip, sp, #32
 801a368:	e9d4 0109 	ldrd	r0, r1, [r4, #36]	; 0x24
 801a36c:	e882 0003 	stmia.w	r2, {r0, r1}
 801a370:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a372:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801a376:	f106 0210 	add.w	r2, r6, #16
 801a37a:	1d23      	adds	r3, r4, #4
 801a37c:	f104 010c 	add.w	r1, r4, #12
 801a380:	a80c      	add	r0, sp, #48	; 0x30
 801a382:	9200      	str	r2, [sp, #0]
 801a384:	2200      	movs	r2, #0
 801a386:	f8cd c004 	str.w	ip, [sp, #4]
 801a38a:	f7ff fc4b 	bl	8019c24 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_NS_6Guid_tES7_>
 801a38e:	4638      	mov	r0, r7
 801a390:	f7fc fb1c 	bl	80169cc <sys_mutex_unlock>
 801a394:	f8d6 0448 	ldr.w	r0, [r6, #1096]	; 0x448
 801a398:	a909      	add	r1, sp, #36	; 0x24
 801a39a:	f003 f91d 	bl	801d5d8 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>
 801a39e:	a80c      	add	r0, sp, #48	; 0x30
 801a3a0:	f000 fa24 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801a3a4:	2001      	movs	r0, #1
 801a3a6:	b00f      	add	sp, #60	; 0x3c
 801a3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a3aa:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801a3ac:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 801a3ae:	e7c0      	b.n	801a332 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0x42>
 801a3b0:	68eb      	ldr	r3, [r5, #12]
 801a3b2:	9308      	str	r3, [sp, #32]
 801a3b4:	e7d2      	b.n	801a35c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0x6c>
 801a3b6:	4638      	mov	r0, r7
 801a3b8:	f7fc fb08 	bl	80169cc <sys_mutex_unlock>
 801a3bc:	a80c      	add	r0, sp, #48	; 0x30
 801a3be:	f000 fa15 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801a3c2:	4620      	mov	r0, r4
 801a3c4:	e7ef      	b.n	801a3a6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0xb6>
 801a3c6:	4638      	mov	r0, r7
 801a3c8:	f7fc fb00 	bl	80169cc <sys_mutex_unlock>
 801a3cc:	a80c      	add	r0, sp, #48	; 0x30
 801a3ce:	f000 fa0d 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801a3d2:	f006 fc5b 	bl	8020c8c <__cxa_end_cleanup>
 801a3d6:	e7f9      	b.n	801a3cc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0xdc>

0801a3d8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv>:
 801a3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3dc:	f890 61e0 	ldrb.w	r6, [r0, #480]	; 0x1e0
 801a3e0:	4605      	mov	r5, r0
 801a3e2:	f016 0401 	ands.w	r4, r6, #1
 801a3e6:	d11c      	bne.n	801a422 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x4a>
 801a3e8:	f8d0 31e4 	ldr.w	r3, [r0, #484]	; 0x1e4
 801a3ec:	b973      	cbnz	r3, 801a40c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x34>
 801a3ee:	f8d5 3454 	ldr.w	r3, [r5, #1108]	; 0x454
 801a3f2:	3301      	adds	r3, #1
 801a3f4:	f8c5 3454 	str.w	r3, [r5, #1108]	; 0x454
 801a3f8:	b923      	cbnz	r3, 801a404 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x2c>
 801a3fa:	f8d5 3450 	ldr.w	r3, [r5, #1104]	; 0x450
 801a3fe:	3301      	adds	r3, #1
 801a400:	f8c5 3450 	str.w	r3, [r5, #1104]	; 0x450
 801a404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a408:	2c04      	cmp	r4, #4
 801a40a:	d807      	bhi.n	801a41c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x44>
 801a40c:	3401      	adds	r4, #1
 801a40e:	f004 0307 	and.w	r3, r4, #7
 801a412:	b2e4      	uxtb	r4, r4
 801a414:	fa46 f303 	asr.w	r3, r6, r3
 801a418:	07db      	lsls	r3, r3, #31
 801a41a:	d5f5      	bpl.n	801a408 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x30>
 801a41c:	2c05      	cmp	r4, #5
 801a41e:	d101      	bne.n	801a424 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x4c>
 801a420:	e7e5      	b.n	801a3ee <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x16>
 801a422:	2400      	movs	r4, #0
 801a424:	f04f 0874 	mov.w	r8, #116	; 0x74
 801a428:	2708      	movs	r7, #8
 801a42a:	f505 79f0 	add.w	r9, r5, #480	; 0x1e0
 801a42e:	f505 6a8a 	add.w	sl, r5, #1104	; 0x450
 801a432:	fb18 7104 	smlabb	r1, r8, r4, r7
 801a436:	f895 344c 	ldrb.w	r3, [r5, #1100]	; 0x44c
 801a43a:	4652      	mov	r2, sl
 801a43c:	4628      	mov	r0, r5
 801a43e:	4449      	add	r1, r9
 801a440:	bb0b      	cbnz	r3, 801a486 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0xae>
 801a442:	f7ff ff55 	bl	801a2f0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19sendDataWRMulticastERKNS_11ReaderProxyERKNS_16SequenceNumber_tE>
 801a446:	f8d5 31e4 	ldr.w	r3, [r5, #484]	; 0x1e4
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	d0cf      	beq.n	801a3ee <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x16>
 801a44e:	3401      	adds	r4, #1
 801a450:	b2e2      	uxtb	r2, r4
 801a452:	f002 0307 	and.w	r3, r2, #7
 801a456:	1c51      	adds	r1, r2, #1
 801a458:	4614      	mov	r4, r2
 801a45a:	fa46 f303 	asr.w	r3, r6, r3
 801a45e:	f003 0301 	and.w	r3, r3, #1
 801a462:	2a04      	cmp	r2, #4
 801a464:	bf88      	it	hi
 801a466:	f043 0301 	orrhi.w	r3, r3, #1
 801a46a:	b2ca      	uxtb	r2, r1
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d0f0      	beq.n	801a452 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x7a>
 801a470:	2c05      	cmp	r4, #5
 801a472:	d0bc      	beq.n	801a3ee <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x16>
 801a474:	fb18 7104 	smlabb	r1, r8, r4, r7
 801a478:	f895 344c 	ldrb.w	r3, [r5, #1100]	; 0x44c
 801a47c:	4652      	mov	r2, sl
 801a47e:	4628      	mov	r0, r5
 801a480:	4449      	add	r1, r9
 801a482:	2b00      	cmp	r3, #0
 801a484:	d0dd      	beq.n	801a442 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x6a>
 801a486:	f7ff fe11 	bl	801a0ac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE>
 801a48a:	e7dc      	b.n	801a446 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x6e>

0801a48c <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE>:
 801a48c:	b570      	push	{r4, r5, r6, lr}
 801a48e:	460d      	mov	r5, r1
 801a490:	6949      	ldr	r1, [r1, #20]
 801a492:	4604      	mov	r4, r0
 801a494:	b151      	cbz	r1, 801a4ac <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0x20>
 801a496:	0949      	lsrs	r1, r1, #5
 801a498:	4620      	mov	r0, r4
 801a49a:	0089      	lsls	r1, r1, #2
 801a49c:	3120      	adds	r1, #32
 801a49e:	b289      	uxth	r1, r1
 801a4a0:	f000 f9ee 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 801a4a4:	4606      	mov	r6, r0
 801a4a6:	b940      	cbnz	r0, 801a4ba <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0x2e>
 801a4a8:	4630      	mov	r0, r6
 801a4aa:	bd70      	pop	{r4, r5, r6, pc}
 801a4ac:	211c      	movs	r1, #28
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	f000 f9e6 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 801a4b4:	4606      	mov	r6, r0
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	d0f6      	beq.n	801a4a8 <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0x1c>
 801a4ba:	2114      	movs	r1, #20
 801a4bc:	4620      	mov	r0, r4
 801a4be:	f000 f9df 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 801a4c2:	b190      	cbz	r0, 801a4ea <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0x5e>
 801a4c4:	2104      	movs	r1, #4
 801a4c6:	4620      	mov	r0, r4
 801a4c8:	f000 f9da 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 801a4cc:	2201      	movs	r2, #1
 801a4ce:	4629      	mov	r1, r5
 801a4d0:	4620      	mov	r0, r4
 801a4d2:	f000 f9a3 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a4d6:	2201      	movs	r2, #1
 801a4d8:	4620      	mov	r0, r4
 801a4da:	18a9      	adds	r1, r5, r2
 801a4dc:	f000 f99e 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a4e0:	2202      	movs	r2, #2
 801a4e2:	4620      	mov	r0, r4
 801a4e4:	18a9      	adds	r1, r5, r2
 801a4e6:	f000 f999 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a4ea:	2203      	movs	r2, #3
 801a4ec:	1d29      	adds	r1, r5, #4
 801a4ee:	4620      	mov	r0, r4
 801a4f0:	f000 f994 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a4f4:	2201      	movs	r2, #1
 801a4f6:	1de9      	adds	r1, r5, #7
 801a4f8:	4620      	mov	r0, r4
 801a4fa:	f000 f98f 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a4fe:	2203      	movs	r2, #3
 801a500:	f105 0108 	add.w	r1, r5, #8
 801a504:	4620      	mov	r0, r4
 801a506:	f000 f989 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a50a:	2201      	movs	r2, #1
 801a50c:	f105 010b 	add.w	r1, r5, #11
 801a510:	4620      	mov	r0, r4
 801a512:	f000 f983 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a516:	2204      	movs	r2, #4
 801a518:	f105 010c 	add.w	r1, r5, #12
 801a51c:	4620      	mov	r0, r4
 801a51e:	f000 f97d 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a522:	2204      	movs	r2, #4
 801a524:	f105 0110 	add.w	r1, r5, #16
 801a528:	4620      	mov	r0, r4
 801a52a:	f000 f977 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a52e:	2204      	movs	r2, #4
 801a530:	f105 0114 	add.w	r1, r5, #20
 801a534:	4620      	mov	r0, r4
 801a536:	f000 f971 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a53a:	696a      	ldr	r2, [r5, #20]
 801a53c:	b93a      	cbnz	r2, 801a54e <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0xc2>
 801a53e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801a542:	4620      	mov	r0, r4
 801a544:	2204      	movs	r2, #4
 801a546:	f000 f969 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a54a:	4630      	mov	r0, r6
 801a54c:	bd70      	pop	{r4, r5, r6, pc}
 801a54e:	0952      	lsrs	r2, r2, #5
 801a550:	f105 0118 	add.w	r1, r5, #24
 801a554:	4620      	mov	r0, r4
 801a556:	3201      	adds	r2, #1
 801a558:	0092      	lsls	r2, r2, #2
 801a55a:	b292      	uxth	r2, r2
 801a55c:	f000 f95e 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801a560:	e7ed      	b.n	801a53e <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0xb2>
 801a562:	bf00      	nop

0801a564 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE>:
 801a564:	f500 7348 	add.w	r3, r0, #800	; 0x320
 801a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a56c:	4606      	mov	r6, r0
 801a56e:	4618      	mov	r0, r3
 801a570:	4691      	mov	r9, r2
 801a572:	ed2d 8b02 	vpush	{d8}
 801a576:	b0af      	sub	sp, #188	; 0xbc
 801a578:	ee08 3a10 	vmov	s16, r3
 801a57c:	9101      	str	r1, [sp, #4]
 801a57e:	f7fc fa16 	bl	80169ae <sys_mutex_lock>
 801a582:	f896 81e0 	ldrb.w	r8, [r6, #480]	; 0x1e0
 801a586:	2300      	movs	r3, #0
 801a588:	f8b6 2300 	ldrh.w	r2, [r6, #768]	; 0x300
 801a58c:	f018 0401 	ands.w	r4, r8, #1
 801a590:	9307      	str	r3, [sp, #28]
 801a592:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a596:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a59a:	d11e      	bne.n	801a5da <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x76>
 801a59c:	f8d6 31e4 	ldr.w	r3, [r6, #484]	; 0x1e4
 801a5a0:	b983      	cbnz	r3, 801a5c4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x60>
 801a5a2:	2400      	movs	r4, #0
 801a5a4:	af07      	add	r7, sp, #28
 801a5a6:	4638      	mov	r0, r7
 801a5a8:	f000 f920 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801a5ac:	ee18 0a10 	vmov	r0, s16
 801a5b0:	f7fc fa0c 	bl	80169cc <sys_mutex_unlock>
 801a5b4:	4620      	mov	r0, r4
 801a5b6:	b02f      	add	sp, #188	; 0xbc
 801a5b8:	ecbd 8b02 	vpop	{d8}
 801a5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5c0:	2c04      	cmp	r4, #4
 801a5c2:	d807      	bhi.n	801a5d4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x70>
 801a5c4:	3401      	adds	r4, #1
 801a5c6:	f004 0307 	and.w	r3, r4, #7
 801a5ca:	b2e4      	uxtb	r4, r4
 801a5cc:	fa48 f303 	asr.w	r3, r8, r3
 801a5d0:	07db      	lsls	r3, r3, #31
 801a5d2:	d5f5      	bpl.n	801a5c0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x5c>
 801a5d4:	2c05      	cmp	r4, #5
 801a5d6:	d101      	bne.n	801a5dc <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x78>
 801a5d8:	e7e3      	b.n	801a5a2 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x3e>
 801a5da:	461c      	mov	r4, r3
 801a5dc:	9b01      	ldr	r3, [sp, #4]
 801a5de:	f506 77f0 	add.w	r7, r6, #480	; 0x1e0
 801a5e2:	f103 0b08 	add.w	fp, r3, #8
 801a5e6:	b220      	sxth	r0, r4
 801a5e8:	220c      	movs	r2, #12
 801a5ea:	4649      	mov	r1, r9
 801a5ec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 801a5f0:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
 801a5f4:	f10a 0508 	add.w	r5, sl, #8
 801a5f8:	443d      	add	r5, r7
 801a5fa:	4628      	mov	r0, r5
 801a5fc:	f007 fa30 	bl	8021a60 <memcmp>
 801a600:	b990      	cbnz	r0, 801a628 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0xc4>
 801a602:	f10a 0014 	add.w	r0, sl, #20
 801a606:	2203      	movs	r2, #3
 801a608:	4659      	mov	r1, fp
 801a60a:	4438      	add	r0, r7
 801a60c:	f007 fa28 	bl	8021a60 <memcmp>
 801a610:	b950      	cbnz	r0, 801a628 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0xc4>
 801a612:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801a616:	9a01      	ldr	r2, [sp, #4]
 801a618:	00e1      	lsls	r1, r4, #3
 801a61a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 801a61e:	7ad2      	ldrb	r2, [r2, #11]
 801a620:	f893 c1f7 	ldrb.w	ip, [r3, #503]	; 0x1f7
 801a624:	4594      	cmp	ip, r2
 801a626:	d017      	beq.n	801a658 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0xf4>
 801a628:	f8d6 31e4 	ldr.w	r3, [r6, #484]	; 0x1e4
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d0b8      	beq.n	801a5a2 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x3e>
 801a630:	3401      	adds	r4, #1
 801a632:	b2e2      	uxtb	r2, r4
 801a634:	f002 0307 	and.w	r3, r2, #7
 801a638:	1c51      	adds	r1, r2, #1
 801a63a:	4614      	mov	r4, r2
 801a63c:	fa48 f303 	asr.w	r3, r8, r3
 801a640:	f003 0301 	and.w	r3, r3, #1
 801a644:	2a04      	cmp	r2, #4
 801a646:	bf88      	it	hi
 801a648:	f043 0301 	orrhi.w	r3, r3, #1
 801a64c:	b2ca      	uxtb	r2, r1
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d0f0      	beq.n	801a634 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0xd0>
 801a652:	2c05      	cmp	r4, #5
 801a654:	d1c7      	bne.n	801a5e6 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x82>
 801a656:	e7a4      	b.n	801a5a2 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x3e>
 801a658:	9a01      	ldr	r2, [sp, #4]
 801a65a:	468a      	mov	sl, r1
 801a65c:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 801a660:	69d2      	ldr	r2, [r2, #28]
 801a662:	428a      	cmp	r2, r1
 801a664:	dd9d      	ble.n	801a5a2 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x3e>
 801a666:	af07      	add	r7, sp, #28
 801a668:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 801a66c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801a670:	1d31      	adds	r1, r6, #4
 801a672:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801a674:	4638      	mov	r0, r7
 801a676:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a67a:	9305      	str	r3, [sp, #20]
 801a67c:	f7fe fe4c 	bl	8019318 <_ZN4rtps14MessageFactory9addHeaderINS_11PBufWrapperEEEvRT_RKNS_12GuidPrefix_tE>
 801a680:	ab09      	add	r3, sp, #36	; 0x24
 801a682:	222c      	movs	r2, #44	; 0x2c
 801a684:	2100      	movs	r1, #0
 801a686:	4618      	mov	r0, r3
 801a688:	f007 fa22 	bl	8021ad0 <memset>
 801a68c:	9a01      	ldr	r2, [sp, #4]
 801a68e:	4603      	mov	r3, r0
 801a690:	6951      	ldr	r1, [r2, #20]
 801a692:	692a      	ldr	r2, [r5, #16]
 801a694:	4291      	cmp	r1, r2
 801a696:	da4c      	bge.n	801a732 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x1ce>
 801a698:	ebaa 0404 	sub.w	r4, sl, r4
 801a69c:	2200      	movs	r2, #0
 801a69e:	469e      	mov	lr, r3
 801a6a0:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 801a6a4:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801a6a8:	f8d5 b018 	ldr.w	fp, [r5, #24]
 801a6ac:	4690      	mov	r8, r2
 801a6ae:	920b      	str	r2, [sp, #44]	; 0x2c
 801a6b0:	f8d4 11fc 	ldr.w	r1, [r4, #508]	; 0x1fc
 801a6b4:	4665      	mov	r5, ip
 801a6b6:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
 801a6ba:	f10b 0901 	add.w	r9, fp, #1
 801a6be:	920c      	str	r2, [sp, #48]	; 0x30
 801a6c0:	f8c4 9200 	str.w	r9, [r4, #512]	; 0x200
 801a6c4:	f44f 7483 	mov.w	r4, #262	; 0x106
 801a6c8:	46c1      	mov	r9, r8
 801a6ca:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a6d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a6d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a6d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a6da:	9b01      	ldr	r3, [sp, #4]
 801a6dc:	6899      	ldr	r1, [r3, #8]
 801a6de:	685a      	ldr	r2, [r3, #4]
 801a6e0:	2318      	movs	r3, #24
 801a6e2:	f8ad 407c 	strh.w	r4, [sp, #124]	; 0x7c
 801a6e6:	ac22      	add	r4, sp, #136	; 0x88
 801a6e8:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
 801a6ec:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801a6f0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801a6f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801a6f8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801a6fc:	e9cd 9816 	strd	r9, r8, [sp, #88]	; 0x58
 801a700:	e9cd 2120 	strd	r2, r1, [sp, #128]	; 0x80
 801a704:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a70a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a70e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a710:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801a714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801a718:	a91f      	add	r1, sp, #124	; 0x7c
 801a71a:	4638      	mov	r0, r7
 801a71c:	f8cd b0b4 	str.w	fp, [sp, #180]	; 0xb4
 801a720:	f7ff feb4 	bl	801a48c <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE>
 801a724:	f8d6 0314 	ldr.w	r0, [r6, #788]	; 0x314
 801a728:	a904      	add	r1, sp, #16
 801a72a:	f002 ff55 	bl	801d5d8 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>
 801a72e:	2401      	movs	r4, #1
 801a730:	e739      	b.n	801a5a6 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x42>
 801a732:	d026      	beq.n	801a782 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x21e>
 801a734:	ebaa 0404 	sub.w	r4, sl, r4
 801a738:	2201      	movs	r2, #1
 801a73a:	f8d5 b018 	ldr.w	fp, [r5, #24]
 801a73e:	469e      	mov	lr, r3
 801a740:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 801a744:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 801a748:	f10d 0c50 	add.w	ip, sp, #80	; 0x50
 801a74c:	eb0b 0a02 	add.w	sl, fp, r2
 801a750:	f8d4 11fc 	ldr.w	r1, [r4, #508]	; 0x1fc
 801a754:	4691      	mov	r9, r2
 801a756:	f8d4 01f8 	ldr.w	r0, [r4, #504]	; 0x1f8
 801a75a:	4665      	mov	r5, ip
 801a75c:	f8c4 a200 	str.w	sl, [r4, #512]	; 0x200
 801a760:	f44f 7483 	mov.w	r4, #262	; 0x106
 801a764:	e9cd 280b 	strd	r2, r8, [sp, #44]	; 0x2c
 801a768:	e883 0003 	stmia.w	r3, {r0, r1}
 801a76c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a772:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a776:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a778:	9a01      	ldr	r2, [sp, #4]
 801a77a:	231c      	movs	r3, #28
 801a77c:	6891      	ldr	r1, [r2, #8]
 801a77e:	6852      	ldr	r2, [r2, #4]
 801a780:	e7af      	b.n	801a6e2 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x17e>
 801a782:	9a01      	ldr	r2, [sp, #4]
 801a784:	6991      	ldr	r1, [r2, #24]
 801a786:	696a      	ldr	r2, [r5, #20]
 801a788:	4291      	cmp	r1, r2
 801a78a:	d385      	bcc.n	801a698 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x134>
 801a78c:	e7d2      	b.n	801a734 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x1d0>
 801a78e:	4638      	mov	r0, r7
 801a790:	f000 f82c 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801a794:	ee18 0a10 	vmov	r0, s16
 801a798:	f7fc f918 	bl	80169cc <sys_mutex_unlock>
 801a79c:	f006 fa76 	bl	8020c8c <__cxa_end_cleanup>

0801a7a0 <_ZN4rtps11PBufWrapperC1EP4pbuf>:
 801a7a0:	2200      	movs	r2, #0
 801a7a2:	6001      	str	r1, [r0, #0]
 801a7a4:	8082      	strh	r2, [r0, #4]
 801a7a6:	4770      	bx	lr

0801a7a8 <_ZN4rtps11PBufWrapperC1ERKS0_>:
 801a7a8:	b538      	push	{r3, r4, r5, lr}
 801a7aa:	2200      	movs	r2, #0
 801a7ac:	4604      	mov	r4, r0
 801a7ae:	888b      	ldrh	r3, [r1, #4]
 801a7b0:	6808      	ldr	r0, [r1, #0]
 801a7b2:	6022      	str	r2, [r4, #0]
 801a7b4:	80a3      	strh	r3, [r4, #4]
 801a7b6:	b118      	cbz	r0, 801a7c0 <_ZN4rtps11PBufWrapperC1ERKS0_+0x18>
 801a7b8:	460d      	mov	r5, r1
 801a7ba:	f7f2 fcef 	bl	800d19c <pbuf_ref>
 801a7be:	6828      	ldr	r0, [r5, #0]
 801a7c0:	6020      	str	r0, [r4, #0]
 801a7c2:	4620      	mov	r0, r4
 801a7c4:	bd38      	pop	{r3, r4, r5, pc}
 801a7c6:	bf00      	nop

0801a7c8 <_ZN4rtps11PBufWrapperaSEOS0_>:
 801a7c8:	b538      	push	{r3, r4, r5, lr}
 801a7ca:	4604      	mov	r4, r0
 801a7cc:	888b      	ldrh	r3, [r1, #4]
 801a7ce:	6800      	ldr	r0, [r0, #0]
 801a7d0:	460d      	mov	r5, r1
 801a7d2:	80a3      	strh	r3, [r4, #4]
 801a7d4:	b118      	cbz	r0, 801a7de <_ZN4rtps11PBufWrapperaSEOS0_+0x16>
 801a7d6:	f7f2 fc3b 	bl	800d050 <pbuf_free>
 801a7da:	2300      	movs	r3, #0
 801a7dc:	6023      	str	r3, [r4, #0]
 801a7de:	682b      	ldr	r3, [r5, #0]
 801a7e0:	b113      	cbz	r3, 801a7e8 <_ZN4rtps11PBufWrapperaSEOS0_+0x20>
 801a7e2:	2200      	movs	r2, #0
 801a7e4:	6023      	str	r3, [r4, #0]
 801a7e6:	602a      	str	r2, [r5, #0]
 801a7e8:	4620      	mov	r0, r4
 801a7ea:	bd38      	pop	{r3, r4, r5, pc}

0801a7ec <_ZN4rtps11PBufWrapperD1Ev>:
 801a7ec:	b510      	push	{r4, lr}
 801a7ee:	4604      	mov	r4, r0
 801a7f0:	6800      	ldr	r0, [r0, #0]
 801a7f2:	b108      	cbz	r0, 801a7f8 <_ZN4rtps11PBufWrapperD1Ev+0xc>
 801a7f4:	f7f2 fc2c 	bl	800d050 <pbuf_free>
 801a7f8:	4620      	mov	r0, r4
 801a7fa:	bd10      	pop	{r4, pc}

0801a7fc <_ZNK4rtps11PBufWrapper7isValidEv>:
 801a7fc:	6800      	ldr	r0, [r0, #0]
 801a7fe:	3800      	subs	r0, #0
 801a800:	bf18      	it	ne
 801a802:	2001      	movne	r0, #1
 801a804:	4770      	bx	lr
 801a806:	bf00      	nop

0801a808 <_ZNK4rtps11PBufWrapper9spaceUsedEv>:
 801a808:	6803      	ldr	r3, [r0, #0]
 801a80a:	b123      	cbz	r3, 801a816 <_ZNK4rtps11PBufWrapper9spaceUsedEv+0xe>
 801a80c:	891b      	ldrh	r3, [r3, #8]
 801a80e:	8880      	ldrh	r0, [r0, #4]
 801a810:	1a18      	subs	r0, r3, r0
 801a812:	b280      	uxth	r0, r0
 801a814:	4770      	bx	lr
 801a816:	4618      	mov	r0, r3
 801a818:	4770      	bx	lr
 801a81a:	bf00      	nop

0801a81c <_ZN4rtps11PBufWrapper6appendEPKht>:
 801a81c:	b1a9      	cbz	r1, 801a84a <_ZN4rtps11PBufWrapper6appendEPKht+0x2e>
 801a81e:	b538      	push	{r3, r4, r5, lr}
 801a820:	4604      	mov	r4, r0
 801a822:	6800      	ldr	r0, [r0, #0]
 801a824:	4615      	mov	r5, r2
 801a826:	b170      	cbz	r0, 801a846 <_ZN4rtps11PBufWrapper6appendEPKht+0x2a>
 801a828:	8903      	ldrh	r3, [r0, #8]
 801a82a:	88a2      	ldrh	r2, [r4, #4]
 801a82c:	1a9b      	subs	r3, r3, r2
 801a82e:	b29b      	uxth	r3, r3
 801a830:	462a      	mov	r2, r5
 801a832:	f7f2 ff53 	bl	800d6dc <pbuf_take_at>
 801a836:	b920      	cbnz	r0, 801a842 <_ZN4rtps11PBufWrapper6appendEPKht+0x26>
 801a838:	88a2      	ldrh	r2, [r4, #4]
 801a83a:	2001      	movs	r0, #1
 801a83c:	1b52      	subs	r2, r2, r5
 801a83e:	80a2      	strh	r2, [r4, #4]
 801a840:	bd38      	pop	{r3, r4, r5, pc}
 801a842:	2000      	movs	r0, #0
 801a844:	bd38      	pop	{r3, r4, r5, pc}
 801a846:	4603      	mov	r3, r0
 801a848:	e7f2      	b.n	801a830 <_ZN4rtps11PBufWrapper6appendEPKht+0x14>
 801a84a:	2000      	movs	r0, #0
 801a84c:	4770      	bx	lr
 801a84e:	bf00      	nop

0801a850 <_ZN4rtps11PBufWrapper6appendEOS0_>:
 801a850:	4288      	cmp	r0, r1
 801a852:	d014      	beq.n	801a87e <_ZN4rtps11PBufWrapper6appendEOS0_+0x2e>
 801a854:	4603      	mov	r3, r0
 801a856:	6800      	ldr	r0, [r0, #0]
 801a858:	b510      	push	{r4, lr}
 801a85a:	460c      	mov	r4, r1
 801a85c:	b138      	cbz	r0, 801a86e <_ZN4rtps11PBufWrapper6appendEOS0_+0x1e>
 801a85e:	888a      	ldrh	r2, [r1, #4]
 801a860:	6809      	ldr	r1, [r1, #0]
 801a862:	809a      	strh	r2, [r3, #4]
 801a864:	f7f2 fcc2 	bl	800d1ec <pbuf_cat>
 801a868:	2300      	movs	r3, #0
 801a86a:	6023      	str	r3, [r4, #0]
 801a86c:	bd10      	pop	{r4, pc}
 801a86e:	8889      	ldrh	r1, [r1, #4]
 801a870:	6822      	ldr	r2, [r4, #0]
 801a872:	8099      	strh	r1, [r3, #4]
 801a874:	2a00      	cmp	r2, #0
 801a876:	d0f9      	beq.n	801a86c <_ZN4rtps11PBufWrapper6appendEOS0_+0x1c>
 801a878:	601a      	str	r2, [r3, #0]
 801a87a:	6020      	str	r0, [r4, #0]
 801a87c:	bd10      	pop	{r4, pc}
 801a87e:	4770      	bx	lr

0801a880 <_ZN4rtps11PBufWrapper7reserveEt>:
 801a880:	b538      	push	{r3, r4, r5, lr}
 801a882:	8883      	ldrh	r3, [r0, #4]
 801a884:	1ac9      	subs	r1, r1, r3
 801a886:	2900      	cmp	r1, #0
 801a888:	dd13      	ble.n	801a8b2 <_ZN4rtps11PBufWrapper7reserveEt+0x32>
 801a88a:	b28c      	uxth	r4, r1
 801a88c:	4605      	mov	r5, r0
 801a88e:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801a892:	2036      	movs	r0, #54	; 0x36
 801a894:	4621      	mov	r1, r4
 801a896:	f7f2 f8f7 	bl	800ca88 <pbuf_alloc>
 801a89a:	b148      	cbz	r0, 801a8b0 <_ZN4rtps11PBufWrapper7reserveEt+0x30>
 801a89c:	88a9      	ldrh	r1, [r5, #4]
 801a89e:	682b      	ldr	r3, [r5, #0]
 801a8a0:	440c      	add	r4, r1
 801a8a2:	80ac      	strh	r4, [r5, #4]
 801a8a4:	b13b      	cbz	r3, 801a8b6 <_ZN4rtps11PBufWrapper7reserveEt+0x36>
 801a8a6:	4601      	mov	r1, r0
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f7f2 fc9f 	bl	800d1ec <pbuf_cat>
 801a8ae:	2001      	movs	r0, #1
 801a8b0:	bd38      	pop	{r3, r4, r5, pc}
 801a8b2:	2001      	movs	r0, #1
 801a8b4:	bd38      	pop	{r3, r4, r5, pc}
 801a8b6:	6028      	str	r0, [r5, #0]
 801a8b8:	2001      	movs	r0, #1
 801a8ba:	bd38      	pop	{r3, r4, r5, pc}

0801a8bc <_ZN4rtps11ParticipantC1Ev>:
 801a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8c0:	23ff      	movs	r3, #255	; 0xff
 801a8c2:	4605      	mov	r5, r0
 801a8c4:	f04f 0800 	mov.w	r8, #0
 801a8c8:	b083      	sub	sp, #12
 801a8ca:	7303      	strb	r3, [r0, #12]
 801a8cc:	4601      	mov	r1, r0
 801a8ce:	f8c0 8000 	str.w	r8, [r0]
 801a8d2:	3010      	adds	r0, #16
 801a8d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a8d8:	4644      	mov	r4, r8
 801a8da:	f105 0698 	add.w	r6, r5, #152	; 0x98
 801a8de:	e9c5 8801 	strd	r8, r8, [r5, #4]
 801a8e2:	f005 faa3 	bl	801fe2c <_ZN4rtps15MessageReceiverC1EPNS_11ParticipantE>
 801a8e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801a8ea:	4641      	mov	r1, r8
 801a8ec:	222c      	movs	r2, #44	; 0x2c
 801a8ee:	62ab      	str	r3, [r5, #40]	; 0x28
 801a8f0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 801a8f4:	f007 f8ec 	bl	8021ad0 <memset>
 801a8f8:	222c      	movs	r2, #44	; 0x2c
 801a8fa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 801a8fe:	4641      	mov	r1, r8
 801a900:	f885 8058 	strb.w	r8, [r5, #88]	; 0x58
 801a904:	f007 f8e4 	bl	8021ad0 <memset>
 801a908:	4b06      	ldr	r3, [pc, #24]	; (801a924 <_ZN4rtps11ParticipantC1Ev+0x68>)
 801a90a:	f605 22d4 	addw	r2, r5, #2772	; 0xad4
 801a90e:	f885 8088 	strb.w	r8, [r5, #136]	; 0x88
 801a912:	881b      	ldrh	r3, [r3, #0]
 801a914:	9201      	str	r2, [sp, #4]
 801a916:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a91a:	f885 8090 	strb.w	r8, [r5, #144]	; 0x90
 801a91e:	f8c5 8094 	str.w	r8, [r5, #148]	; 0x94
 801a922:	e001      	b.n	801a928 <_ZN4rtps11ParticipantC1Ev+0x6c>
 801a924:	0802660c 	.word	0x0802660c
 801a928:	4633      	mov	r3, r6
 801a92a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a92e:	f04f 0b01 	mov.w	fp, #1
 801a932:	f04f 0a64 	mov.w	sl, #100	; 0x64
 801a936:	f823 2b02 	strh.w	r2, [r3], #2
 801a93a:	f04f 0800 	mov.w	r8, #0
 801a93e:	f8c6 4002 	str.w	r4, [r6, #2]
 801a942:	605c      	str	r4, [r3, #4]
 801a944:	609c      	str	r4, [r3, #8]
 801a946:	60dc      	str	r4, [r3, #12]
 801a948:	8274      	strh	r4, [r6, #18]
 801a94a:	7534      	strb	r4, [r6, #20]
 801a94c:	e9c6 7407 	strd	r7, r4, [r6, #28]
 801a950:	e9c6 4409 	strd	r4, r4, [r6, #36]	; 0x24
 801a954:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
 801a958:	e9c6 740d 	strd	r7, r4, [r6, #52]	; 0x34
 801a95c:	e9c6 440f 	strd	r4, r4, [r6, #60]	; 0x3c
 801a960:	e9c6 4411 	strd	r4, r4, [r6, #68]	; 0x44
 801a964:	e9c6 7413 	strd	r7, r4, [r6, #76]	; 0x4c
 801a968:	e9c6 4415 	strd	r4, r4, [r6, #84]	; 0x54
 801a96c:	e9c6 4417 	strd	r4, r4, [r6, #92]	; 0x5c
 801a970:	e9c6 7419 	strd	r7, r4, [r6, #100]	; 0x64
 801a974:	e9c6 441b 	strd	r4, r4, [r6, #108]	; 0x6c
 801a978:	e9c6 441d 	strd	r4, r4, [r6, #116]	; 0x74
 801a97c:	e9c6 741f 	strd	r7, r4, [r6, #124]	; 0x7c
 801a980:	e9c6 4421 	strd	r4, r4, [r6, #132]	; 0x84
 801a984:	e9c6 4423 	strd	r4, r4, [r6, #140]	; 0x8c
 801a988:	e9c6 7425 	strd	r7, r4, [r6, #148]	; 0x94
 801a98c:	e9c6 4427 	strd	r4, r4, [r6, #156]	; 0x9c
 801a990:	e9c6 4429 	strd	r4, r4, [r6, #164]	; 0xa4
 801a994:	e9c6 742b 	strd	r7, r4, [r6, #172]	; 0xac
 801a998:	e9c6 442d 	strd	r4, r4, [r6, #180]	; 0xb4
 801a99c:	e9c6 442f 	strd	r4, r4, [r6, #188]	; 0xbc
 801a9a0:	e9c6 7431 	strd	r7, r4, [r6, #196]	; 0xc4
 801a9a4:	e9c6 4433 	strd	r4, r4, [r6, #204]	; 0xcc
 801a9a8:	e9c6 4435 	strd	r4, r4, [r6, #212]	; 0xd4
 801a9ac:	e9c6 7437 	strd	r7, r4, [r6, #220]	; 0xdc
 801a9b0:	e9c6 4439 	strd	r4, r4, [r6, #228]	; 0xe4
 801a9b4:	e9c6 443b 	strd	r4, r4, [r6, #236]	; 0xec
 801a9b8:	e9c6 743d 	strd	r7, r4, [r6, #244]	; 0xf4
 801a9bc:	e9c6 443f 	strd	r4, r4, [r6, #252]	; 0xfc
 801a9c0:	e9c6 4441 	strd	r4, r4, [r6, #260]	; 0x104
 801a9c4:	e9c6 7443 	strd	r7, r4, [r6, #268]	; 0x10c
 801a9c8:	e9c6 4445 	strd	r4, r4, [r6, #276]	; 0x114
 801a9cc:	e9c6 4447 	strd	r4, r4, [r6, #284]	; 0x11c
 801a9d0:	e9c6 7449 	strd	r7, r4, [r6, #292]	; 0x124
 801a9d4:	e9c6 444b 	strd	r4, r4, [r6, #300]	; 0x12c
 801a9d8:	e9c6 444d 	strd	r4, r4, [r6, #308]	; 0x134
 801a9dc:	e9c6 744f 	strd	r7, r4, [r6, #316]	; 0x13c
 801a9e0:	e9c6 4451 	strd	r4, r4, [r6, #324]	; 0x144
 801a9e4:	e9c6 4453 	strd	r4, r4, [r6, #332]	; 0x14c
 801a9e8:	e9c6 7455 	strd	r7, r4, [r6, #340]	; 0x154
 801a9ec:	e9c6 4457 	strd	r4, r4, [r6, #348]	; 0x15c
 801a9f0:	e9c6 4459 	strd	r4, r4, [r6, #356]	; 0x164
 801a9f4:	e9c6 745b 	strd	r7, r4, [r6, #364]	; 0x16c
 801a9f8:	e9c6 445d 	strd	r4, r4, [r6, #372]	; 0x174
 801a9fc:	e9c6 445f 	strd	r4, r4, [r6, #380]	; 0x17c
 801aa00:	e9c6 7461 	strd	r7, r4, [r6, #388]	; 0x184
 801aa04:	e9c6 4463 	strd	r4, r4, [r6, #396]	; 0x18c
 801aa08:	e9c6 4465 	strd	r4, r4, [r6, #404]	; 0x194
 801aa0c:	e9c6 7467 	strd	r7, r4, [r6, #412]	; 0x19c
 801aa10:	e9c6 4469 	strd	r4, r4, [r6, #420]	; 0x1a4
 801aa14:	e9c6 446b 	strd	r4, r4, [r6, #428]	; 0x1ac
 801aa18:	e9c6 746d 	strd	r7, r4, [r6, #436]	; 0x1b4
 801aa1c:	e9c6 446f 	strd	r4, r4, [r6, #444]	; 0x1bc
 801aa20:	e9c6 4471 	strd	r4, r4, [r6, #452]	; 0x1c4
 801aa24:	e9c6 7473 	strd	r7, r4, [r6, #460]	; 0x1cc
 801aa28:	e9c6 4475 	strd	r4, r4, [r6, #468]	; 0x1d4
 801aa2c:	e9c6 4477 	strd	r4, r4, [r6, #476]	; 0x1dc
 801aa30:	e9c6 7479 	strd	r7, r4, [r6, #484]	; 0x1e4
 801aa34:	e9c6 447b 	strd	r4, r4, [r6, #492]	; 0x1ec
 801aa38:	e9c6 447d 	strd	r4, r4, [r6, #500]	; 0x1f4
 801aa3c:	e9c6 4481 	strd	r4, r4, [r6, #516]	; 0x204
 801aa40:	e9c6 ba7f 	strd	fp, sl, [r6, #508]	; 0x1fc
 801aa44:	f7ee ff7c 	bl	8009940 <xTaskGetTickCount>
 801aa48:	f506 7603 	add.w	r6, r6, #524	; 0x20c
 801aa4c:	9b01      	ldr	r3, [sp, #4]
 801aa4e:	f846 0c04 	str.w	r0, [r6, #-4]
 801aa52:	42b3      	cmp	r3, r6
 801aa54:	f47f af68 	bne.w	801a928 <_ZN4rtps11ParticipantC1Ev+0x6c>
 801aa58:	f505 5980 	add.w	r9, r5, #4096	; 0x1000
 801aa5c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801aa60:	2100      	movs	r1, #0
 801aa62:	f605 20f1 	addw	r0, r5, #2801	; 0xaf1
 801aa66:	f8c5 4ad4 	str.w	r4, [r5, #2772]	; 0xad4
 801aa6a:	f241 061c 	movw	r6, #4124	; 0x101c
 801aa6e:	f8c5 4ad8 	str.w	r4, [r5, #2776]	; 0xad8
 801aa72:	f8c5 4adc 	str.w	r4, [r5, #2780]	; 0xadc
 801aa76:	f8c5 4ae0 	str.w	r4, [r5, #2784]	; 0xae0
 801aa7a:	f8c5 4ae4 	str.w	r4, [r5, #2788]	; 0xae4
 801aa7e:	f8c5 4ae8 	str.w	r4, [r5, #2792]	; 0xae8
 801aa82:	f8c5 4aec 	str.w	r4, [r5, #2796]	; 0xaec
 801aa86:	f885 4af0 	strb.w	r4, [r5, #2800]	; 0xaf0
 801aa8a:	f007 f821 	bl	8021ad0 <memset>
 801aa8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801aa92:	2100      	movs	r1, #0
 801aa94:	f605 4081 	addw	r0, r5, #3201	; 0xc81
 801aa98:	f007 f81a 	bl	8021ad0 <memset>
 801aa9c:	464b      	mov	r3, r9
 801aa9e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801aaa2:	f241 0e10 	movw	lr, #4112	; 0x1010
 801aaa6:	f241 0c14 	movw	ip, #4116	; 0x1014
 801aaaa:	f241 0018 	movw	r0, #4120	; 0x1018
 801aaae:	f8a5 1e14 	strh.w	r1, [r5, #3604]	; 0xe14
 801aab2:	f8c5 7e30 	str.w	r7, [r5, #3632]	; 0xe30
 801aab6:	f8c5 7e48 	str.w	r7, [r5, #3656]	; 0xe48
 801aaba:	f8c5 7e60 	str.w	r7, [r5, #3680]	; 0xe60
 801aabe:	f8c5 7e78 	str.w	r7, [r5, #3704]	; 0xe78
 801aac2:	f8c5 4e16 	str.w	r4, [r5, #3606]	; 0xe16
 801aac6:	f8c5 4e1a 	str.w	r4, [r5, #3610]	; 0xe1a
 801aaca:	f8c5 4e1e 	str.w	r4, [r5, #3614]	; 0xe1e
 801aace:	f8c5 4e22 	str.w	r4, [r5, #3618]	; 0xe22
 801aad2:	f8a5 4e26 	strh.w	r4, [r5, #3622]	; 0xe26
 801aad6:	f885 8e28 	strb.w	r8, [r5, #3624]	; 0xe28
 801aada:	f8c5 4e34 	str.w	r4, [r5, #3636]	; 0xe34
 801aade:	f8c5 4e38 	str.w	r4, [r5, #3640]	; 0xe38
 801aae2:	f8c5 4e3c 	str.w	r4, [r5, #3644]	; 0xe3c
 801aae6:	f8c5 4e40 	str.w	r4, [r5, #3648]	; 0xe40
 801aaea:	f8c5 4e44 	str.w	r4, [r5, #3652]	; 0xe44
 801aaee:	f8c5 4e4c 	str.w	r4, [r5, #3660]	; 0xe4c
 801aaf2:	f8c5 4e50 	str.w	r4, [r5, #3664]	; 0xe50
 801aaf6:	f8c5 4e54 	str.w	r4, [r5, #3668]	; 0xe54
 801aafa:	f8c5 4e58 	str.w	r4, [r5, #3672]	; 0xe58
 801aafe:	f8c5 4e5c 	str.w	r4, [r5, #3676]	; 0xe5c
 801ab02:	f8c5 4e64 	str.w	r4, [r5, #3684]	; 0xe64
 801ab06:	f8c5 4e68 	str.w	r4, [r5, #3688]	; 0xe68
 801ab0a:	f8c5 4e6c 	str.w	r4, [r5, #3692]	; 0xe6c
 801ab0e:	f8c5 4e70 	str.w	r4, [r5, #3696]	; 0xe70
 801ab12:	f8c5 4e74 	str.w	r4, [r5, #3700]	; 0xe74
 801ab16:	f8c5 4e7c 	str.w	r4, [r5, #3708]	; 0xe7c
 801ab1a:	f8c5 4e80 	str.w	r4, [r5, #3712]	; 0xe80
 801ab1e:	f8c5 4e84 	str.w	r4, [r5, #3716]	; 0xe84
 801ab22:	f8c5 4e88 	str.w	r4, [r5, #3720]	; 0xe88
 801ab26:	f8c5 4e8c 	str.w	r4, [r5, #3724]	; 0xe8c
 801ab2a:	f8c5 7e90 	str.w	r7, [r5, #3728]	; 0xe90
 801ab2e:	f8c5 7ea8 	str.w	r7, [r5, #3752]	; 0xea8
 801ab32:	f8c5 7ec0 	str.w	r7, [r5, #3776]	; 0xec0
 801ab36:	f8c5 7ed8 	str.w	r7, [r5, #3800]	; 0xed8
 801ab3a:	f8c5 7ef0 	str.w	r7, [r5, #3824]	; 0xef0
 801ab3e:	f8c5 7f08 	str.w	r7, [r5, #3848]	; 0xf08
 801ab42:	f8c5 4e94 	str.w	r4, [r5, #3732]	; 0xe94
 801ab46:	f8c5 4e98 	str.w	r4, [r5, #3736]	; 0xe98
 801ab4a:	f8c5 4e9c 	str.w	r4, [r5, #3740]	; 0xe9c
 801ab4e:	f8c5 4ea0 	str.w	r4, [r5, #3744]	; 0xea0
 801ab52:	f8c5 4ea4 	str.w	r4, [r5, #3748]	; 0xea4
 801ab56:	f8c5 4eac 	str.w	r4, [r5, #3756]	; 0xeac
 801ab5a:	f8c5 4eb0 	str.w	r4, [r5, #3760]	; 0xeb0
 801ab5e:	f8c5 4eb4 	str.w	r4, [r5, #3764]	; 0xeb4
 801ab62:	f8c5 4eb8 	str.w	r4, [r5, #3768]	; 0xeb8
 801ab66:	f8c5 4ebc 	str.w	r4, [r5, #3772]	; 0xebc
 801ab6a:	f8c5 4ec4 	str.w	r4, [r5, #3780]	; 0xec4
 801ab6e:	f8c5 4ec8 	str.w	r4, [r5, #3784]	; 0xec8
 801ab72:	f8c5 4ecc 	str.w	r4, [r5, #3788]	; 0xecc
 801ab76:	f8c5 4ed0 	str.w	r4, [r5, #3792]	; 0xed0
 801ab7a:	f8c5 4ed4 	str.w	r4, [r5, #3796]	; 0xed4
 801ab7e:	f8c5 4edc 	str.w	r4, [r5, #3804]	; 0xedc
 801ab82:	f8c5 4ee0 	str.w	r4, [r5, #3808]	; 0xee0
 801ab86:	f8c5 4ee4 	str.w	r4, [r5, #3812]	; 0xee4
 801ab8a:	f8c5 4ee8 	str.w	r4, [r5, #3816]	; 0xee8
 801ab8e:	f8c5 4eec 	str.w	r4, [r5, #3820]	; 0xeec
 801ab92:	f8c5 4ef4 	str.w	r4, [r5, #3828]	; 0xef4
 801ab96:	f8c5 4ef8 	str.w	r4, [r5, #3832]	; 0xef8
 801ab9a:	f8c5 4efc 	str.w	r4, [r5, #3836]	; 0xefc
 801ab9e:	f8c5 4f00 	str.w	r4, [r5, #3840]	; 0xf00
 801aba2:	f8c5 4f04 	str.w	r4, [r5, #3844]	; 0xf04
 801aba6:	f8c5 4f0c 	str.w	r4, [r5, #3852]	; 0xf0c
 801abaa:	f8c5 4f10 	str.w	r4, [r5, #3856]	; 0xf10
 801abae:	f8c5 4f14 	str.w	r4, [r5, #3860]	; 0xf14
 801abb2:	f8c5 7f20 	str.w	r7, [r5, #3872]	; 0xf20
 801abb6:	f8c5 7f38 	str.w	r7, [r5, #3896]	; 0xf38
 801abba:	f8c5 7f50 	str.w	r7, [r5, #3920]	; 0xf50
 801abbe:	f8c5 7f68 	str.w	r7, [r5, #3944]	; 0xf68
 801abc2:	f8c5 7f80 	str.w	r7, [r5, #3968]	; 0xf80
 801abc6:	f8c5 4f18 	str.w	r4, [r5, #3864]	; 0xf18
 801abca:	f8c5 4f1c 	str.w	r4, [r5, #3868]	; 0xf1c
 801abce:	f8c5 4f24 	str.w	r4, [r5, #3876]	; 0xf24
 801abd2:	f8c5 4f28 	str.w	r4, [r5, #3880]	; 0xf28
 801abd6:	f8c5 4f2c 	str.w	r4, [r5, #3884]	; 0xf2c
 801abda:	f8c5 4f30 	str.w	r4, [r5, #3888]	; 0xf30
 801abde:	f8c5 4f34 	str.w	r4, [r5, #3892]	; 0xf34
 801abe2:	f8c5 4f3c 	str.w	r4, [r5, #3900]	; 0xf3c
 801abe6:	f8c5 4f40 	str.w	r4, [r5, #3904]	; 0xf40
 801abea:	f8c5 4f44 	str.w	r4, [r5, #3908]	; 0xf44
 801abee:	f8c5 4f48 	str.w	r4, [r5, #3912]	; 0xf48
 801abf2:	f8c5 4f4c 	str.w	r4, [r5, #3916]	; 0xf4c
 801abf6:	f8c5 4f54 	str.w	r4, [r5, #3924]	; 0xf54
 801abfa:	f8c5 4f58 	str.w	r4, [r5, #3928]	; 0xf58
 801abfe:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
 801ac02:	f8c5 4f60 	str.w	r4, [r5, #3936]	; 0xf60
 801ac06:	f8c5 4f64 	str.w	r4, [r5, #3940]	; 0xf64
 801ac0a:	f8c5 4f6c 	str.w	r4, [r5, #3948]	; 0xf6c
 801ac0e:	f8c5 4f70 	str.w	r4, [r5, #3952]	; 0xf70
 801ac12:	f8c5 4f74 	str.w	r4, [r5, #3956]	; 0xf74
 801ac16:	f8c5 4f78 	str.w	r4, [r5, #3960]	; 0xf78
 801ac1a:	f8c5 4f7c 	str.w	r4, [r5, #3964]	; 0xf7c
 801ac1e:	f8c5 4f84 	str.w	r4, [r5, #3972]	; 0xf84
 801ac22:	f8c5 4f88 	str.w	r4, [r5, #3976]	; 0xf88
 801ac26:	f8c5 4f8c 	str.w	r4, [r5, #3980]	; 0xf8c
 801ac2a:	f8c5 4f90 	str.w	r4, [r5, #3984]	; 0xf90
 801ac2e:	f8c5 4f94 	str.w	r4, [r5, #3988]	; 0xf94
 801ac32:	f8c5 7f98 	str.w	r7, [r5, #3992]	; 0xf98
 801ac36:	f8c5 7fb0 	str.w	r7, [r5, #4016]	; 0xfb0
 801ac3a:	f8c5 7fc8 	str.w	r7, [r5, #4040]	; 0xfc8
 801ac3e:	f8c5 7fe0 	str.w	r7, [r5, #4064]	; 0xfe0
 801ac42:	f8c5 7ff8 	str.w	r7, [r5, #4088]	; 0xff8
 801ac46:	f8c5 4f9c 	str.w	r4, [r5, #3996]	; 0xf9c
 801ac4a:	f8c5 4fa0 	str.w	r4, [r5, #4000]	; 0xfa0
 801ac4e:	f8c5 4fa4 	str.w	r4, [r5, #4004]	; 0xfa4
 801ac52:	f8c5 4fa8 	str.w	r4, [r5, #4008]	; 0xfa8
 801ac56:	f8c5 4fac 	str.w	r4, [r5, #4012]	; 0xfac
 801ac5a:	f8c5 4fb4 	str.w	r4, [r5, #4020]	; 0xfb4
 801ac5e:	f8c5 4fb8 	str.w	r4, [r5, #4024]	; 0xfb8
 801ac62:	f8c5 4fbc 	str.w	r4, [r5, #4028]	; 0xfbc
 801ac66:	f8c5 4fc0 	str.w	r4, [r5, #4032]	; 0xfc0
 801ac6a:	f8c5 4fc4 	str.w	r4, [r5, #4036]	; 0xfc4
 801ac6e:	f8c5 4fcc 	str.w	r4, [r5, #4044]	; 0xfcc
 801ac72:	f8c5 4fd0 	str.w	r4, [r5, #4048]	; 0xfd0
 801ac76:	f8c5 4fd4 	str.w	r4, [r5, #4052]	; 0xfd4
 801ac7a:	f8c5 4fd8 	str.w	r4, [r5, #4056]	; 0xfd8
 801ac7e:	f8c5 4fdc 	str.w	r4, [r5, #4060]	; 0xfdc
 801ac82:	f8c5 4fe4 	str.w	r4, [r5, #4068]	; 0xfe4
 801ac86:	f8c5 4fe8 	str.w	r4, [r5, #4072]	; 0xfe8
 801ac8a:	f8c5 4fec 	str.w	r4, [r5, #4076]	; 0xfec
 801ac8e:	f8c5 4ff0 	str.w	r4, [r5, #4080]	; 0xff0
 801ac92:	f8c5 4ff4 	str.w	r4, [r5, #4084]	; 0xff4
 801ac96:	f8c5 4ffc 	str.w	r4, [r5, #4092]	; 0xffc
 801ac9a:	f843 4b04 	str.w	r4, [r3], #4
 801ac9e:	f8c9 4004 	str.w	r4, [r9, #4]
 801aca2:	f241 29ac 	movw	r9, #4780	; 0x12ac
 801aca6:	e9c3 4401 	strd	r4, r4, [r3, #4]
 801acaa:	f845 b00e 	str.w	fp, [r5, lr]
 801acae:	f845 a00c 	str.w	sl, [r5, ip]
 801acb2:	502c      	str	r4, [r5, r0]
 801acb4:	51ac      	str	r4, [r5, r6]
 801acb6:	f7ee fe43 	bl	8009940 <xTaskGetTickCount>
 801acba:	2220      	movs	r2, #32
 801acbc:	51a8      	str	r0, [r5, r6]
 801acbe:	2100      	movs	r1, #0
 801acc0:	f505 5081 	add.w	r0, r5, #4128	; 0x1020
 801acc4:	f006 ff04 	bl	8021ad0 <memset>
 801acc8:	f243 2618 	movw	r6, #12824	; 0x3218
 801accc:	f241 2cc4 	movw	ip, #4804	; 0x12c4
 801acd0:	f505 5382 	add.w	r3, r5, #4160	; 0x1040
 801acd4:	f241 22d8 	movw	r2, #4824	; 0x12d8
 801acd8:	eb05 0009 	add.w	r0, r5, r9
 801acdc:	f883 8000 	strb.w	r8, [r3]
 801ace0:	eb05 070c 	add.w	r7, r5, ip
 801ace4:	f241 0e48 	movw	lr, #4168	; 0x1048
 801ace8:	442a      	add	r2, r5
 801acea:	442e      	add	r6, r5
 801acec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801acf0:	2300      	movs	r3, #0
 801acf2:	f845 4009 	str.w	r4, [r5, r9]
 801acf6:	f805 800e 	strb.w	r8, [r5, lr]
 801acfa:	6144      	str	r4, [r0, #20]
 801acfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ad00:	e9c0 4403 	strd	r4, r4, [r0, #12]
 801ad04:	f845 400c 	str.w	r4, [r5, ip]
 801ad08:	f887 800c 	strb.w	r8, [r7, #12]
 801ad0c:	613c      	str	r4, [r7, #16]
 801ad0e:	e9c7 4401 	strd	r4, r4, [r7, #4]
 801ad12:	f102 0044 	add.w	r0, r2, #68	; 0x44
 801ad16:	e9c2 1308 	strd	r1, r3, [r2, #32]
 801ad1a:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
 801ad1e:	e9c2 330c 	strd	r3, r3, [r2, #48]	; 0x30
 801ad22:	e9c2 130e 	strd	r1, r3, [r2, #56]	; 0x38
 801ad26:	e9c2 3310 	strd	r3, r3, [r2, #64]	; 0x40
 801ad2a:	3250      	adds	r2, #80	; 0x50
 801ad2c:	4296      	cmp	r6, r2
 801ad2e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801ad32:	d1ee      	bne.n	801ad12 <_ZN4rtps11ParticipantC1Ev+0x456>
 801ad34:	f241 044c 	movw	r4, #4172	; 0x104c
 801ad38:	f242 10cc 	movw	r0, #8652	; 0x21cc
 801ad3c:	f243 2a44 	movw	sl, #12868	; 0x3244
 801ad40:	f243 295c 	movw	r9, #12892	; 0x325c
 801ad44:	442c      	add	r4, r5
 801ad46:	f243 2294 	movw	r2, #12948	; 0x3294
 801ad4a:	f243 28ac 	movw	r8, #12972	; 0x32ac
 801ad4e:	f243 2ee4 	movw	lr, #13028	; 0x32e4
 801ad52:	5023      	str	r3, [r4, r0]
 801ad54:	f243 201c 	movw	r0, #12828	; 0x321c
 801ad58:	f243 2cfc 	movw	ip, #13052	; 0x32fc
 801ad5c:	f243 374c 	movw	r7, #13132	; 0x334c
 801ad60:	522b      	strh	r3, [r5, r0]
 801ad62:	4428      	add	r0, r5
 801ad64:	f243 3684 	movw	r6, #13188	; 0x3384
 801ad68:	6043      	str	r3, [r0, #4]
 801ad6a:	f243 309c 	movw	r0, #13212	; 0x339c
 801ad6e:	f845 100a 	str.w	r1, [r5, sl]
 801ad72:	44aa      	add	sl, r5
 801ad74:	e9ca 3301 	strd	r3, r3, [sl, #4]
 801ad78:	e9ca 3303 	strd	r3, r3, [sl, #12]
 801ad7c:	f8ca 3014 	str.w	r3, [sl, #20]
 801ad80:	f243 3ad4 	movw	sl, #13268	; 0x33d4
 801ad84:	f845 1009 	str.w	r1, [r5, r9]
 801ad88:	44a9      	add	r9, r5
 801ad8a:	e9c9 3301 	strd	r3, r3, [r9, #4]
 801ad8e:	e9c9 3303 	strd	r3, r3, [r9, #12]
 801ad92:	f8c9 3014 	str.w	r3, [r9, #20]
 801ad96:	f243 39ec 	movw	r9, #13292	; 0x33ec
 801ad9a:	50a9      	str	r1, [r5, r2]
 801ad9c:	442a      	add	r2, r5
 801ad9e:	e9c2 3301 	strd	r3, r3, [r2, #4]
 801ada2:	e9c2 3303 	strd	r3, r3, [r2, #12]
 801ada6:	6153      	str	r3, [r2, #20]
 801ada8:	f243 4224 	movw	r2, #13348	; 0x3424
 801adac:	f845 1008 	str.w	r1, [r5, r8]
 801adb0:	44a8      	add	r8, r5
 801adb2:	e9c8 3301 	strd	r3, r3, [r8, #4]
 801adb6:	e9c8 3303 	strd	r3, r3, [r8, #12]
 801adba:	f8c8 3014 	str.w	r3, [r8, #20]
 801adbe:	f243 483c 	movw	r8, #13372	; 0x343c
 801adc2:	f845 100e 	str.w	r1, [r5, lr]
 801adc6:	44ae      	add	lr, r5
 801adc8:	e9ce 3301 	strd	r3, r3, [lr, #4]
 801adcc:	e9ce 3303 	strd	r3, r3, [lr, #12]
 801add0:	f8ce 3014 	str.w	r3, [lr, #20]
 801add4:	f243 4e8c 	movw	lr, #13452	; 0x348c
 801add8:	f845 100c 	str.w	r1, [r5, ip]
 801addc:	44ac      	add	ip, r5
 801adde:	e9cc 3301 	strd	r3, r3, [ip, #4]
 801ade2:	e9cc 3303 	strd	r3, r3, [ip, #12]
 801ade6:	f8cc 3014 	str.w	r3, [ip, #20]
 801adea:	f243 3c34 	movw	ip, #13108	; 0x3334
 801adee:	f845 100c 	str.w	r1, [r5, ip]
 801adf2:	44ac      	add	ip, r5
 801adf4:	e9cc 3301 	strd	r3, r3, [ip, #4]
 801adf8:	f505 5c4d 	add.w	ip, r5, #13120	; 0x3340
 801adfc:	e9cc 3300 	strd	r3, r3, [ip]
 801ae00:	f8cc 3008 	str.w	r3, [ip, #8]
 801ae04:	f243 4cc4 	movw	ip, #13508	; 0x34c4
 801ae08:	51e9      	str	r1, [r5, r7]
 801ae0a:	442f      	add	r7, r5
 801ae0c:	e9c7 3301 	strd	r3, r3, [r7, #4]
 801ae10:	e9c7 3303 	strd	r3, r3, [r7, #12]
 801ae14:	617b      	str	r3, [r7, #20]
 801ae16:	f243 47dc 	movw	r7, #13532	; 0x34dc
 801ae1a:	51a9      	str	r1, [r5, r6]
 801ae1c:	442e      	add	r6, r5
 801ae1e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801ae22:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801ae26:	6173      	str	r3, [r6, #20]
 801ae28:	f243 5614 	movw	r6, #13588	; 0x3514
 801ae2c:	5029      	str	r1, [r5, r0]
 801ae2e:	4428      	add	r0, r5
 801ae30:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801ae34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ae38:	6143      	str	r3, [r0, #20]
 801ae3a:	f243 502c 	movw	r0, #13612	; 0x352c
 801ae3e:	f845 100a 	str.w	r1, [r5, sl]
 801ae42:	44aa      	add	sl, r5
 801ae44:	e9ca 3301 	strd	r3, r3, [sl, #4]
 801ae48:	e9ca 3303 	strd	r3, r3, [sl, #12]
 801ae4c:	f8ca 3014 	str.w	r3, [sl, #20]
 801ae50:	f845 1009 	str.w	r1, [r5, r9]
 801ae54:	44a9      	add	r9, r5
 801ae56:	e9c9 3301 	strd	r3, r3, [r9, #4]
 801ae5a:	e9c9 3303 	strd	r3, r3, [r9, #12]
 801ae5e:	f8c9 3014 	str.w	r3, [r9, #20]
 801ae62:	f243 4974 	movw	r9, #13428	; 0x3474
 801ae66:	50a9      	str	r1, [r5, r2]
 801ae68:	442a      	add	r2, r5
 801ae6a:	e9c2 3301 	strd	r3, r3, [r2, #4]
 801ae6e:	e9c2 3303 	strd	r3, r3, [r2, #12]
 801ae72:	6153      	str	r3, [r2, #20]
 801ae74:	eb05 0208 	add.w	r2, r5, r8
 801ae78:	f845 1008 	str.w	r1, [r5, r8]
 801ae7c:	eb05 080e 	add.w	r8, r5, lr
 801ae80:	6153      	str	r3, [r2, #20]
 801ae82:	e9c2 3301 	strd	r3, r3, [r2, #4]
 801ae86:	e9c2 3303 	strd	r3, r3, [r2, #12]
 801ae8a:	eb05 0209 	add.w	r2, r5, r9
 801ae8e:	f845 1009 	str.w	r1, [r5, r9]
 801ae92:	e9c2 3301 	strd	r3, r3, [r2, #4]
 801ae96:	f505 5252 	add.w	r2, r5, #13440	; 0x3480
 801ae9a:	e9c2 3300 	strd	r3, r3, [r2]
 801ae9e:	6093      	str	r3, [r2, #8]
 801aea0:	19ea      	adds	r2, r5, r7
 801aea2:	f845 100e 	str.w	r1, [r5, lr]
 801aea6:	eb05 0e0c 	add.w	lr, r5, ip
 801aeaa:	f8c8 3004 	str.w	r3, [r8, #4]
 801aeae:	e9c8 3302 	strd	r3, r3, [r8, #8]
 801aeb2:	e9c8 3304 	strd	r3, r3, [r8, #16]
 801aeb6:	eb05 0806 	add.w	r8, r5, r6
 801aeba:	f845 100c 	str.w	r1, [r5, ip]
 801aebe:	f8ce 3004 	str.w	r3, [lr, #4]
 801aec2:	eb05 0c00 	add.w	ip, r5, r0
 801aec6:	e9ce 3302 	strd	r3, r3, [lr, #8]
 801aeca:	e9ce 3304 	strd	r3, r3, [lr, #16]
 801aece:	51e9      	str	r1, [r5, r7]
 801aed0:	f242 47f8 	movw	r7, #9464	; 0x24f8
 801aed4:	6153      	str	r3, [r2, #20]
 801aed6:	e9c2 3301 	strd	r3, r3, [r2, #4]
 801aeda:	e9c2 3303 	strd	r3, r3, [r2, #12]
 801aede:	51a9      	str	r1, [r5, r6]
 801aee0:	f242 5208 	movw	r2, #9480	; 0x2508
 801aee4:	f8c8 300c 	str.w	r3, [r8, #12]
 801aee8:	f242 46fc 	movw	r6, #9468	; 0x24fc
 801aeec:	e9c8 3301 	strd	r3, r3, [r8, #4]
 801aef0:	e9c8 3304 	strd	r3, r3, [r8, #16]
 801aef4:	5029      	str	r1, [r5, r0]
 801aef6:	f504 5014 	add.w	r0, r4, #9472	; 0x2500
 801aefa:	f242 5104 	movw	r1, #9476	; 0x2504
 801aefe:	f8cc 3004 	str.w	r3, [ip, #4]
 801af02:	e9cc 3302 	strd	r3, r3, [ip, #8]
 801af06:	e9cc 3304 	strd	r3, r3, [ip, #16]
 801af0a:	51e3      	str	r3, [r4, r7]
 801af0c:	51a3      	str	r3, [r4, r6]
 801af0e:	6003      	str	r3, [r0, #0]
 801af10:	f105 008c 	add.w	r0, r5, #140	; 0x8c
 801af14:	5063      	str	r3, [r4, r1]
 801af16:	50a3      	str	r3, [r4, r2]
 801af18:	f7fb fd26 	bl	8016968 <sys_mutex_new>
 801af1c:	b918      	cbnz	r0, 801af26 <_ZN4rtps11ParticipantC1Ev+0x66a>
 801af1e:	4628      	mov	r0, r5
 801af20:	b003      	add	sp, #12
 801af22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af26:	e7fe      	b.n	801af26 <_ZN4rtps11ParticipantC1Ev+0x66a>
 801af28:	9801      	ldr	r0, [sp, #4]
 801af2a:	f001 f8db 	bl	801c0e4 <_ZN4rtps9SPDPAgentD1Ev>
 801af2e:	f005 fead 	bl	8020c8c <__cxa_end_cleanup>
 801af32:	bf00      	nop

0801af34 <_ZN4rtps11ParticipantD1Ev>:
 801af34:	b510      	push	{r4, lr}
 801af36:	4604      	mov	r4, r0
 801af38:	b082      	sub	sp, #8
 801af3a:	f600 20d4 	addw	r0, r0, #2772	; 0xad4
 801af3e:	9001      	str	r0, [sp, #4]
 801af40:	f001 f8f4 	bl	801c12c <_ZN4rtps9SPDPAgent4stopEv>
 801af44:	9801      	ldr	r0, [sp, #4]
 801af46:	f001 f8cd 	bl	801c0e4 <_ZN4rtps9SPDPAgentD1Ev>
 801af4a:	4620      	mov	r0, r4
 801af4c:	b002      	add	sp, #8
 801af4e:	bd10      	pop	{r4, pc}

0801af50 <_ZN4rtps11Participant5reuseERKNS_12GuidPrefix_tEah>:
 801af50:	b470      	push	{r4, r5, r6}
 801af52:	4616      	mov	r6, r2
 801af54:	460a      	mov	r2, r1
 801af56:	4604      	mov	r4, r0
 801af58:	4605      	mov	r5, r0
 801af5a:	6892      	ldr	r2, [r2, #8]
 801af5c:	6808      	ldr	r0, [r1, #0]
 801af5e:	6849      	ldr	r1, [r1, #4]
 801af60:	c507      	stmia	r5!, {r0, r1, r2}
 801af62:	7326      	strb	r6, [r4, #12]
 801af64:	7363      	strb	r3, [r4, #13]
 801af66:	bc70      	pop	{r4, r5, r6}
 801af68:	4770      	bx	lr
 801af6a:	bf00      	nop

0801af6c <_ZN4rtps11Participant20getNextUserEntityKeyEv>:
 801af6c:	4602      	mov	r2, r0
 801af6e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 801af72:	b082      	sub	sp, #8
 801af74:	f832 1f29 	ldrh.w	r1, [r2, #41]!
 801af78:	3301      	adds	r3, #1
 801af7a:	7892      	ldrb	r2, [r2, #2]
 801af7c:	b2db      	uxtb	r3, r3
 801af7e:	f8ad 1000 	strh.w	r1, [sp]
 801af82:	f88d 2002 	strb.w	r2, [sp, #2]
 801af86:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
 801af8a:	b95b      	cbnz	r3, 801afa4 <_ZN4rtps11Participant20getNextUserEntityKeyEv+0x38>
 801af8c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 801af90:	3301      	adds	r3, #1
 801af92:	b2db      	uxtb	r3, r3
 801af94:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 801af98:	b923      	cbnz	r3, 801afa4 <_ZN4rtps11Participant20getNextUserEntityKeyEv+0x38>
 801af9a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 801af9e:	3301      	adds	r3, #1
 801afa0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801afa4:	9b00      	ldr	r3, [sp, #0]
 801afa6:	2000      	movs	r0, #0
 801afa8:	b2d9      	uxtb	r1, r3
 801afaa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801afae:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801afb2:	f361 0007 	bfi	r0, r1, #0, #8
 801afb6:	f362 200f 	bfi	r0, r2, #8, #8
 801afba:	f363 4017 	bfi	r0, r3, #16, #8
 801afbe:	b002      	add	sp, #8
 801afc0:	4770      	bx	lr
 801afc2:	bf00      	nop

0801afc4 <_ZN4rtps11Participant37registerOnNewPublisherMatchedCallbackEPFvPvES1_>:
 801afc4:	b510      	push	{r4, lr}
 801afc6:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
 801afca:	b12c      	cbz	r4, 801afd8 <_ZN4rtps11Participant37registerOnNewPublisherMatchedCallbackEPFvPvES1_+0x14>
 801afcc:	4603      	mov	r3, r0
 801afce:	f241 004c 	movw	r0, #4172	; 0x104c
 801afd2:	4418      	add	r0, r3
 801afd4:	f000 fcf8 	bl	801b9c8 <_ZN4rtps9SEDPAgent37registerOnNewPublisherMatchedCallbackEPFvPvES1_>
 801afd8:	4620      	mov	r0, r4
 801afda:	bd10      	pop	{r4, pc}

0801afdc <_ZN4rtps11Participant38registerOnNewSubscriberMatchedCallbackEPFvPvES1_>:
 801afdc:	b510      	push	{r4, lr}
 801afde:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
 801afe2:	b12c      	cbz	r4, 801aff0 <_ZN4rtps11Participant38registerOnNewSubscriberMatchedCallbackEPFvPvES1_+0x14>
 801afe4:	4603      	mov	r3, r0
 801afe6:	f241 004c 	movw	r0, #4172	; 0x104c
 801afea:	4418      	add	r0, r3
 801afec:	f000 fcf6 	bl	801b9dc <_ZN4rtps9SEDPAgent38registerOnNewSubscriberMatchedCallbackEPFvPvES1_>
 801aff0:	4620      	mov	r0, r4
 801aff2:	bd10      	pop	{r4, pc}

0801aff4 <_ZN4rtps11Participant9addWriterEPNS_6WriterE>:
 801aff4:	b538      	push	{r3, r4, r5, lr}
 801aff6:	460c      	mov	r4, r1
 801aff8:	b169      	cbz	r1, 801b016 <_ZN4rtps11Participant9addWriterEPNS_6WriterE+0x22>
 801affa:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 801affe:	4603      	mov	r3, r0
 801b000:	2a0b      	cmp	r2, #11
 801b002:	d011      	beq.n	801b028 <_ZN4rtps11Participant9addWriterEPNS_6WriterE+0x34>
 801b004:	1c55      	adds	r5, r2, #1
 801b006:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b00a:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
 801b00e:	f883 5058 	strb.w	r5, [r3, #88]	; 0x58
 801b012:	62d1      	str	r1, [r2, #44]	; 0x2c
 801b014:	b908      	cbnz	r0, 801b01a <_ZN4rtps11Participant9addWriterEPNS_6WriterE+0x26>
 801b016:	4620      	mov	r0, r4
 801b018:	bd38      	pop	{r3, r4, r5, pc}
 801b01a:	f241 004c 	movw	r0, #4172	; 0x104c
 801b01e:	4418      	add	r0, r3
 801b020:	f000 ff7c 	bl	801bf1c <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE>
 801b024:	4620      	mov	r0, r4
 801b026:	bd38      	pop	{r3, r4, r5, pc}
 801b028:	2400      	movs	r4, #0
 801b02a:	4620      	mov	r0, r4
 801b02c:	bd38      	pop	{r3, r4, r5, pc}
 801b02e:	bf00      	nop

0801b030 <_ZN4rtps11Participant13isWritersFullEv>:
 801b030:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
 801b034:	f1a0 000b 	sub.w	r0, r0, #11
 801b038:	fab0 f080 	clz	r0, r0
 801b03c:	0940      	lsrs	r0, r0, #5
 801b03e:	4770      	bx	lr

0801b040 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE>:
 801b040:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b042:	b083      	sub	sp, #12
 801b044:	9101      	str	r1, [sp, #4]
 801b046:	f890 4058 	ldrb.w	r4, [r0, #88]	; 0x58
 801b04a:	b1cc      	cbz	r4, 801b080 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x40>
 801b04c:	3c01      	subs	r4, #1
 801b04e:	f100 072c 	add.w	r7, r0, #44	; 0x2c
 801b052:	f100 0528 	add.w	r5, r0, #40	; 0x28
 801b056:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801b05a:	b2e4      	uxtb	r4, r4
 801b05c:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 801b060:	e001      	b.n	801b066 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x26>
 801b062:	42bd      	cmp	r5, r7
 801b064:	d00f      	beq.n	801b086 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x46>
 801b066:	f855 4f04 	ldr.w	r4, [r5, #4]!
 801b06a:	2203      	movs	r2, #3
 801b06c:	a901      	add	r1, sp, #4
 801b06e:	f104 0010 	add.w	r0, r4, #16
 801b072:	f006 fcf5 	bl	8021a60 <memcmp>
 801b076:	2800      	cmp	r0, #0
 801b078:	d1f3      	bne.n	801b062 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x22>
 801b07a:	7ce3      	ldrb	r3, [r4, #19]
 801b07c:	42b3      	cmp	r3, r6
 801b07e:	d1f0      	bne.n	801b062 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x22>
 801b080:	4620      	mov	r0, r4
 801b082:	b003      	add	sp, #12
 801b084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b086:	2400      	movs	r4, #0
 801b088:	4620      	mov	r0, r4
 801b08a:	b003      	add	sp, #12
 801b08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b08e:	bf00      	nop

0801b090 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE>:
 801b090:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b092:	b083      	sub	sp, #12
 801b094:	9101      	str	r1, [sp, #4]
 801b096:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
 801b09a:	b1cc      	cbz	r4, 801b0d0 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x40>
 801b09c:	3c01      	subs	r4, #1
 801b09e:	f100 075c 	add.w	r7, r0, #92	; 0x5c
 801b0a2:	f100 0558 	add.w	r5, r0, #88	; 0x58
 801b0a6:	f89d 6007 	ldrb.w	r6, [sp, #7]
 801b0aa:	b2e4      	uxtb	r4, r4
 801b0ac:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 801b0b0:	e001      	b.n	801b0b6 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x26>
 801b0b2:	42bd      	cmp	r5, r7
 801b0b4:	d00f      	beq.n	801b0d6 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x46>
 801b0b6:	f855 4f04 	ldr.w	r4, [r5, #4]!
 801b0ba:	2203      	movs	r2, #3
 801b0bc:	a901      	add	r1, sp, #4
 801b0be:	f104 0010 	add.w	r0, r4, #16
 801b0c2:	f006 fccd 	bl	8021a60 <memcmp>
 801b0c6:	2800      	cmp	r0, #0
 801b0c8:	d1f3      	bne.n	801b0b2 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x22>
 801b0ca:	7ce3      	ldrb	r3, [r4, #19]
 801b0cc:	42b3      	cmp	r3, r6
 801b0ce:	d1f0      	bne.n	801b0b2 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x22>
 801b0d0:	4620      	mov	r0, r4
 801b0d2:	b003      	add	sp, #12
 801b0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0d6:	2400      	movs	r4, #0
 801b0d8:	4620      	mov	r0, r4
 801b0da:	b003      	add	sp, #12
 801b0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0de:	bf00      	nop

0801b0e0 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE>:
 801b0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0e4:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801b0e8:	b083      	sub	sp, #12
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d050      	beq.n	801b190 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0xb0>
 801b0ee:	3b01      	subs	r3, #1
 801b0f0:	f100 025c 	add.w	r2, r0, #92	; 0x5c
 801b0f4:	4689      	mov	r9, r1
 801b0f6:	f100 0858 	add.w	r8, r0, #88	; 0x58
 801b0fa:	b2db      	uxtb	r3, r3
 801b0fc:	f101 0b0c 	add.w	fp, r1, #12
 801b100:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b104:	9301      	str	r3, [sp, #4]
 801b106:	f858 7f04 	ldr.w	r7, [r8, #4]!
 801b10a:	f897 61e0 	ldrb.w	r6, [r7, #480]	; 0x1e0
 801b10e:	f016 0401 	ands.w	r4, r6, #1
 801b112:	d149      	bne.n	801b1a8 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0xc8>
 801b114:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801b118:	b913      	cbnz	r3, 801b120 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x40>
 801b11a:	e036      	b.n	801b18a <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0xaa>
 801b11c:	2c04      	cmp	r4, #4
 801b11e:	d807      	bhi.n	801b130 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x50>
 801b120:	3401      	adds	r4, #1
 801b122:	f004 0307 	and.w	r3, r4, #7
 801b126:	b2e4      	uxtb	r4, r4
 801b128:	fa46 f303 	asr.w	r3, r6, r3
 801b12c:	07da      	lsls	r2, r3, #31
 801b12e:	d5f5      	bpl.n	801b11c <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x3c>
 801b130:	2c05      	cmp	r4, #5
 801b132:	d02a      	beq.n	801b18a <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0xaa>
 801b134:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801b138:	9300      	str	r3, [sp, #0]
 801b13a:	2338      	movs	r3, #56	; 0x38
 801b13c:	2208      	movs	r2, #8
 801b13e:	4649      	mov	r1, r9
 801b140:	fb13 2504 	smlabb	r5, r3, r4, r2
 801b144:	9b00      	ldr	r3, [sp, #0]
 801b146:	220c      	movs	r2, #12
 801b148:	441d      	add	r5, r3
 801b14a:	4628      	mov	r0, r5
 801b14c:	eb05 0a02 	add.w	sl, r5, r2
 801b150:	f006 fc86 	bl	8021a60 <memcmp>
 801b154:	b948      	cbnz	r0, 801b16a <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x8a>
 801b156:	f105 020f 	add.w	r2, r5, #15
 801b15a:	ebb2 020a 	subs.w	r2, r2, sl
 801b15e:	d11c      	bne.n	801b19a <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0xba>
 801b160:	7bea      	ldrb	r2, [r5, #15]
 801b162:	f899 300f 	ldrb.w	r3, [r9, #15]
 801b166:	429a      	cmp	r2, r3
 801b168:	d013      	beq.n	801b192 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0xb2>
 801b16a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801b16e:	b913      	cbnz	r3, 801b176 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x96>
 801b170:	e00b      	b.n	801b18a <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0xaa>
 801b172:	2c04      	cmp	r4, #4
 801b174:	d807      	bhi.n	801b186 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0xa6>
 801b176:	3401      	adds	r4, #1
 801b178:	f004 0307 	and.w	r3, r4, #7
 801b17c:	b2e4      	uxtb	r4, r4
 801b17e:	fa46 f303 	asr.w	r3, r6, r3
 801b182:	07db      	lsls	r3, r3, #31
 801b184:	d5f5      	bpl.n	801b172 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x92>
 801b186:	2c05      	cmp	r4, #5
 801b188:	d1d7      	bne.n	801b13a <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x5a>
 801b18a:	9b01      	ldr	r3, [sp, #4]
 801b18c:	4543      	cmp	r3, r8
 801b18e:	d1ba      	bne.n	801b106 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x26>
 801b190:	2700      	movs	r7, #0
 801b192:	4638      	mov	r0, r7
 801b194:	b003      	add	sp, #12
 801b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b19a:	4650      	mov	r0, sl
 801b19c:	4659      	mov	r1, fp
 801b19e:	f006 fc5f 	bl	8021a60 <memcmp>
 801b1a2:	2800      	cmp	r0, #0
 801b1a4:	d1e1      	bne.n	801b16a <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x8a>
 801b1a6:	e7db      	b.n	801b160 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x80>
 801b1a8:	2400      	movs	r4, #0
 801b1aa:	e7c3      	b.n	801b134 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE+0x54>

0801b1ac <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE>:
 801b1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1ae:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 801b1b2:	b1d3      	cbz	r3, 801b1ea <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE+0x3e>
 801b1b4:	2400      	movs	r4, #0
 801b1b6:	4606      	mov	r6, r0
 801b1b8:	460f      	mov	r7, r1
 801b1ba:	4623      	mov	r3, r4
 801b1bc:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 801b1c0:	3401      	adds	r4, #1
 801b1c2:	4639      	mov	r1, r7
 801b1c4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801b1c6:	3004      	adds	r0, #4
 801b1c8:	f001 ff2c 	bl	801d024 <_ZN4rtps9TopicData14matchesTopicOfERKS0_>
 801b1cc:	b2e3      	uxtb	r3, r4
 801b1ce:	b140      	cbz	r0, 801b1e2 <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE+0x36>
 801b1d0:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 801b1d4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801b1d6:	2a01      	cmp	r2, #1
 801b1d8:	d008      	beq.n	801b1ec <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE+0x40>
 801b1da:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 801b1de:	2a02      	cmp	r2, #2
 801b1e0:	d004      	beq.n	801b1ec <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE+0x40>
 801b1e2:	f896 2058 	ldrb.w	r2, [r6, #88]	; 0x58
 801b1e6:	429a      	cmp	r2, r3
 801b1e8:	d8e8      	bhi.n	801b1bc <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE+0x10>
 801b1ea:	2000      	movs	r0, #0
 801b1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1ee:	bf00      	nop

0801b1f0 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE>:
 801b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1f2:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801b1f6:	b1d3      	cbz	r3, 801b22e <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE+0x3e>
 801b1f8:	2400      	movs	r4, #0
 801b1fa:	4606      	mov	r6, r0
 801b1fc:	460f      	mov	r7, r1
 801b1fe:	4623      	mov	r3, r4
 801b200:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 801b204:	3401      	adds	r4, #1
 801b206:	4639      	mov	r1, r7
 801b208:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 801b20a:	3004      	adds	r0, #4
 801b20c:	f001 ff0a 	bl	801d024 <_ZN4rtps9TopicData14matchesTopicOfERKS0_>
 801b210:	b2e3      	uxtb	r3, r4
 801b212:	b140      	cbz	r0, 801b226 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE+0x36>
 801b214:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 801b218:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 801b21a:	2a02      	cmp	r2, #2
 801b21c:	d008      	beq.n	801b230 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE+0x40>
 801b21e:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 801b222:	2a01      	cmp	r2, #1
 801b224:	d004      	beq.n	801b230 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE+0x40>
 801b226:	f896 2088 	ldrb.w	r2, [r6, #136]	; 0x88
 801b22a:	429a      	cmp	r2, r3
 801b22c:	d8e8      	bhi.n	801b200 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE+0x10>
 801b22e:	2000      	movs	r0, #0
 801b230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b232:	bf00      	nop

0801b234 <_ZNK4rtps11Participant17getMatchingWriterERKNS_19TopicDataCompressedE>:
 801b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b236:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 801b23a:	b1cb      	cbz	r3, 801b270 <_ZNK4rtps11Participant17getMatchingWriterERKNS_19TopicDataCompressedE+0x3c>
 801b23c:	2400      	movs	r4, #0
 801b23e:	4606      	mov	r6, r0
 801b240:	460f      	mov	r7, r1
 801b242:	4623      	mov	r3, r4
 801b244:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 801b248:	3401      	adds	r4, #1
 801b24a:	4638      	mov	r0, r7
 801b24c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801b24e:	3104      	adds	r1, #4
 801b250:	f002 f88c 	bl	801d36c <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE>
 801b254:	b2e3      	uxtb	r3, r4
 801b256:	b138      	cbz	r0, 801b268 <_ZNK4rtps11Participant17getMatchingWriterERKNS_19TopicDataCompressedE+0x34>
 801b258:	69ba      	ldr	r2, [r7, #24]
 801b25a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 801b25c:	2a01      	cmp	r2, #1
 801b25e:	d008      	beq.n	801b272 <_ZNK4rtps11Participant17getMatchingWriterERKNS_19TopicDataCompressedE+0x3e>
 801b260:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 801b264:	2a02      	cmp	r2, #2
 801b266:	d004      	beq.n	801b272 <_ZNK4rtps11Participant17getMatchingWriterERKNS_19TopicDataCompressedE+0x3e>
 801b268:	f896 2058 	ldrb.w	r2, [r6, #88]	; 0x58
 801b26c:	429a      	cmp	r2, r3
 801b26e:	d8e9      	bhi.n	801b244 <_ZNK4rtps11Participant17getMatchingWriterERKNS_19TopicDataCompressedE+0x10>
 801b270:	2000      	movs	r0, #0
 801b272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b274 <_ZNK4rtps11Participant17getMatchingReaderERKNS_19TopicDataCompressedE>:
 801b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b276:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801b27a:	b1cb      	cbz	r3, 801b2b0 <_ZNK4rtps11Participant17getMatchingReaderERKNS_19TopicDataCompressedE+0x3c>
 801b27c:	2400      	movs	r4, #0
 801b27e:	4606      	mov	r6, r0
 801b280:	460f      	mov	r7, r1
 801b282:	4623      	mov	r3, r4
 801b284:	eb06 0583 	add.w	r5, r6, r3, lsl #2
 801b288:	3401      	adds	r4, #1
 801b28a:	4638      	mov	r0, r7
 801b28c:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 801b28e:	3104      	adds	r1, #4
 801b290:	f002 f86c 	bl	801d36c <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE>
 801b294:	b2e3      	uxtb	r3, r4
 801b296:	b138      	cbz	r0, 801b2a8 <_ZNK4rtps11Participant17getMatchingReaderERKNS_19TopicDataCompressedE+0x34>
 801b298:	69ba      	ldr	r2, [r7, #24]
 801b29a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 801b29c:	2a02      	cmp	r2, #2
 801b29e:	d008      	beq.n	801b2b2 <_ZNK4rtps11Participant17getMatchingReaderERKNS_19TopicDataCompressedE+0x3e>
 801b2a0:	f8d0 21a4 	ldr.w	r2, [r0, #420]	; 0x1a4
 801b2a4:	2a01      	cmp	r2, #1
 801b2a6:	d004      	beq.n	801b2b2 <_ZNK4rtps11Participant17getMatchingReaderERKNS_19TopicDataCompressedE+0x3e>
 801b2a8:	f896 2088 	ldrb.w	r2, [r6, #136]	; 0x88
 801b2ac:	429a      	cmp	r2, r3
 801b2ae:	d8e9      	bhi.n	801b284 <_ZNK4rtps11Participant17getMatchingReaderERKNS_19TopicDataCompressedE+0x10>
 801b2b0:	2000      	movs	r0, #0
 801b2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b2b4 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE>:
 801b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2b6:	f100 068c 	add.w	r6, r0, #140	; 0x8c
 801b2ba:	4604      	mov	r4, r0
 801b2bc:	460d      	mov	r5, r1
 801b2be:	4630      	mov	r0, r6
 801b2c0:	f7fb fb75 	bl	80169ae <sys_mutex_lock>
 801b2c4:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
 801b2c8:	2f05      	cmp	r7, #5
 801b2ca:	d012      	beq.n	801b2f2 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x3e>
 801b2cc:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 801b2d0:	f013 0001 	ands.w	r0, r3, #1
 801b2d4:	d02d      	beq.n	801b332 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x7e>
 801b2d6:	0798      	lsls	r0, r3, #30
 801b2d8:	d52d      	bpl.n	801b336 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x82>
 801b2da:	0759      	lsls	r1, r3, #29
 801b2dc:	d52e      	bpl.n	801b33c <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x88>
 801b2de:	071a      	lsls	r2, r3, #28
 801b2e0:	d50d      	bpl.n	801b2fe <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x4a>
 801b2e2:	06d8      	lsls	r0, r3, #27
 801b2e4:	d52d      	bpl.n	801b342 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x8e>
 801b2e6:	0699      	lsls	r1, r3, #26
 801b2e8:	d52e      	bpl.n	801b348 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x94>
 801b2ea:	065a      	lsls	r2, r3, #25
 801b2ec:	d52f      	bpl.n	801b34e <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x9a>
 801b2ee:	09da      	lsrs	r2, r3, #7
 801b2f0:	d01b      	beq.n	801b32a <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x76>
 801b2f2:	2500      	movs	r5, #0
 801b2f4:	4630      	mov	r0, r6
 801b2f6:	f7fb fb69 	bl	80169cc <sys_mutex_unlock>
 801b2fa:	4628      	mov	r0, r5
 801b2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2fe:	2108      	movs	r1, #8
 801b300:	2003      	movs	r0, #3
 801b302:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801b306:	430b      	orrs	r3, r1
 801b308:	4629      	mov	r1, r5
 801b30a:	2501      	movs	r5, #1
 801b30c:	fb02 4000 	mla	r0, r2, r0, r4
 801b310:	442f      	add	r7, r5
 801b312:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 801b316:	3098      	adds	r0, #152	; 0x98
 801b318:	f006 fbb2 	bl	8021a80 <memcpy>
 801b31c:	4630      	mov	r0, r6
 801b31e:	f8c4 7094 	str.w	r7, [r4, #148]	; 0x94
 801b322:	f7fb fb53 	bl	80169cc <sys_mutex_unlock>
 801b326:	4628      	mov	r0, r5
 801b328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b32a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 801b32e:	2007      	movs	r0, #7
 801b330:	e7e7      	b.n	801b302 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x4e>
 801b332:	2101      	movs	r1, #1
 801b334:	e7e5      	b.n	801b302 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x4e>
 801b336:	2102      	movs	r1, #2
 801b338:	2001      	movs	r0, #1
 801b33a:	e7e2      	b.n	801b302 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x4e>
 801b33c:	2104      	movs	r1, #4
 801b33e:	2002      	movs	r0, #2
 801b340:	e7df      	b.n	801b302 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x4e>
 801b342:	2110      	movs	r1, #16
 801b344:	2004      	movs	r0, #4
 801b346:	e7dc      	b.n	801b302 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x4e>
 801b348:	2120      	movs	r1, #32
 801b34a:	2005      	movs	r0, #5
 801b34c:	e7d9      	b.n	801b302 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x4e>
 801b34e:	2140      	movs	r1, #64	; 0x40
 801b350:	2006      	movs	r0, #6
 801b352:	e7d6      	b.n	801b302 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x4e>

0801b354 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE>:
 801b354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b358:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 801b35c:	4605      	mov	r5, r0
 801b35e:	460e      	mov	r6, r1
 801b360:	b16b      	cbz	r3, 801b37e <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x2a>
 801b362:	f100 0728 	add.w	r7, r0, #40	; 0x28
 801b366:	2400      	movs	r4, #0
 801b368:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801b36c:	4631      	mov	r1, r6
 801b36e:	3401      	adds	r4, #1
 801b370:	6803      	ldr	r3, [r0, #0]
 801b372:	689b      	ldr	r3, [r3, #8]
 801b374:	4798      	blx	r3
 801b376:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 801b37a:	42a3      	cmp	r3, r4
 801b37c:	dcf4      	bgt.n	801b368 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x14>
 801b37e:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 801b382:	b16b      	cbz	r3, 801b3a0 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x4c>
 801b384:	f105 0758 	add.w	r7, r5, #88	; 0x58
 801b388:	2400      	movs	r4, #0
 801b38a:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801b38e:	4631      	mov	r1, r6
 801b390:	3401      	adds	r4, #1
 801b392:	6803      	ldr	r3, [r0, #0]
 801b394:	695b      	ldr	r3, [r3, #20]
 801b396:	4798      	blx	r3
 801b398:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 801b39c:	42a3      	cmp	r3, r4
 801b39e:	dcf4      	bgt.n	801b38a <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x36>
 801b3a0:	f895 8090 	ldrb.w	r8, [r5, #144]	; 0x90
 801b3a4:	f018 0f01 	tst.w	r8, #1
 801b3a8:	d117      	bne.n	801b3da <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x86>
 801b3aa:	f8d5 7094 	ldr.w	r7, [r5, #148]	; 0x94
 801b3ae:	b18f      	cbz	r7, 801b3d4 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x80>
 801b3b0:	2201      	movs	r2, #1
 801b3b2:	f002 0307 	and.w	r3, r2, #7
 801b3b6:	1c51      	adds	r1, r2, #1
 801b3b8:	4614      	mov	r4, r2
 801b3ba:	fa48 f303 	asr.w	r3, r8, r3
 801b3be:	f003 0301 	and.w	r3, r3, #1
 801b3c2:	2a04      	cmp	r2, #4
 801b3c4:	bf88      	it	hi
 801b3c6:	f043 0301 	orrhi.w	r3, r3, #1
 801b3ca:	b2ca      	uxtb	r2, r1
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d0f0      	beq.n	801b3b2 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x5e>
 801b3d0:	2c05      	cmp	r4, #5
 801b3d2:	d105      	bne.n	801b3e0 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x8c>
 801b3d4:	2000      	movs	r0, #0
 801b3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3da:	f8d5 7094 	ldr.w	r7, [r5, #148]	; 0x94
 801b3de:	2400      	movs	r4, #0
 801b3e0:	f105 0a90 	add.w	sl, r5, #144	; 0x90
 801b3e4:	f44f 7903 	mov.w	r9, #524	; 0x20c
 801b3e8:	fb09 a004 	mla	r0, r9, r4, sl
 801b3ec:	220c      	movs	r2, #12
 801b3ee:	4631      	mov	r1, r6
 801b3f0:	300a      	adds	r0, #10
 801b3f2:	f006 fb35 	bl	8021a60 <memcmp>
 801b3f6:	b170      	cbz	r0, 801b416 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0xc2>
 801b3f8:	b917      	cbnz	r7, 801b400 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0xac>
 801b3fa:	e7eb      	b.n	801b3d4 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x80>
 801b3fc:	2c04      	cmp	r4, #4
 801b3fe:	d807      	bhi.n	801b410 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0xbc>
 801b400:	3401      	adds	r4, #1
 801b402:	f004 0307 	and.w	r3, r4, #7
 801b406:	b2e4      	uxtb	r4, r4
 801b408:	fa48 f303 	asr.w	r3, r8, r3
 801b40c:	07db      	lsls	r3, r3, #31
 801b40e:	d5f5      	bpl.n	801b3fc <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0xa8>
 801b410:	2c05      	cmp	r4, #5
 801b412:	d1e9      	bne.n	801b3e8 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x94>
 801b414:	e7de      	b.n	801b3d4 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE+0x80>
 801b416:	f3c4 03c7 	ubfx	r3, r4, #3, #8
 801b41a:	2001      	movs	r0, #1
 801b41c:	f004 0407 	and.w	r4, r4, #7
 801b420:	3f01      	subs	r7, #1
 801b422:	442b      	add	r3, r5
 801b424:	fa00 f404 	lsl.w	r4, r0, r4
 801b428:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 801b42c:	ea22 0404 	bic.w	r4, r2, r4
 801b430:	f883 4090 	strb.w	r4, [r3, #144]	; 0x90
 801b434:	f8c5 7094 	str.w	r7, [r5, #148]	; 0x94
 801b438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801b43c <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE>:
 801b43c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b440:	f100 0b8c 	add.w	fp, r0, #140	; 0x8c
 801b444:	4606      	mov	r6, r0
 801b446:	4688      	mov	r8, r1
 801b448:	4658      	mov	r0, fp
 801b44a:	f7fb fab0 	bl	80169ae <sys_mutex_lock>
 801b44e:	f896 7090 	ldrb.w	r7, [r6, #144]	; 0x90
 801b452:	07fb      	lsls	r3, r7, #31
 801b454:	d41b      	bmi.n	801b48e <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x52>
 801b456:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 801b45a:	b18b      	cbz	r3, 801b480 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x44>
 801b45c:	2201      	movs	r2, #1
 801b45e:	f002 0307 	and.w	r3, r2, #7
 801b462:	1c51      	adds	r1, r2, #1
 801b464:	4615      	mov	r5, r2
 801b466:	fa47 f303 	asr.w	r3, r7, r3
 801b46a:	f003 0301 	and.w	r3, r3, #1
 801b46e:	2a04      	cmp	r2, #4
 801b470:	bf88      	it	hi
 801b472:	f043 0301 	orrhi.w	r3, r3, #1
 801b476:	b2ca      	uxtb	r2, r1
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d0f0      	beq.n	801b45e <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x22>
 801b47c:	2d05      	cmp	r5, #5
 801b47e:	d107      	bne.n	801b490 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x54>
 801b480:	2400      	movs	r4, #0
 801b482:	4658      	mov	r0, fp
 801b484:	f7fb faa2 	bl	80169cc <sys_mutex_unlock>
 801b488:	4620      	mov	r0, r4
 801b48a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b48e:	2500      	movs	r5, #0
 801b490:	f106 0a90 	add.w	sl, r6, #144	; 0x90
 801b494:	f44f 7903 	mov.w	r9, #524	; 0x20c
 801b498:	fb09 a405 	mla	r4, r9, r5, sl
 801b49c:	220c      	movs	r2, #12
 801b49e:	4641      	mov	r1, r8
 801b4a0:	f104 000a 	add.w	r0, r4, #10
 801b4a4:	3408      	adds	r4, #8
 801b4a6:	f006 fadb 	bl	8021a60 <memcmp>
 801b4aa:	2800      	cmp	r0, #0
 801b4ac:	d0e9      	beq.n	801b482 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x46>
 801b4ae:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d0e4      	beq.n	801b480 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x44>
 801b4b6:	3501      	adds	r5, #1
 801b4b8:	b2ea      	uxtb	r2, r5
 801b4ba:	f002 0307 	and.w	r3, r2, #7
 801b4be:	1c51      	adds	r1, r2, #1
 801b4c0:	4615      	mov	r5, r2
 801b4c2:	fa47 f303 	asr.w	r3, r7, r3
 801b4c6:	f003 0301 	and.w	r3, r3, #1
 801b4ca:	2a04      	cmp	r2, #4
 801b4cc:	bf88      	it	hi
 801b4ce:	f043 0301 	orrhi.w	r3, r3, #1
 801b4d2:	b2ca      	uxtb	r2, r1
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	d0f0      	beq.n	801b4ba <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x7e>
 801b4d8:	2d05      	cmp	r5, #5
 801b4da:	d1dd      	bne.n	801b498 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x5c>
 801b4dc:	e7d0      	b.n	801b480 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x44>
 801b4de:	bf00      	nop

0801b4e0 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE>:
 801b4e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4e4:	f100 088c 	add.w	r8, r0, #140	; 0x8c
 801b4e8:	4606      	mov	r6, r0
 801b4ea:	4689      	mov	r9, r1
 801b4ec:	4640      	mov	r0, r8
 801b4ee:	f7fb fa5e 	bl	80169ae <sys_mutex_lock>
 801b4f2:	f896 7090 	ldrb.w	r7, [r6, #144]	; 0x90
 801b4f6:	07fa      	lsls	r2, r7, #31
 801b4f8:	d41f      	bmi.n	801b53a <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x5a>
 801b4fa:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 801b4fe:	b18b      	cbz	r3, 801b524 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x44>
 801b500:	2201      	movs	r2, #1
 801b502:	f002 0307 	and.w	r3, r2, #7
 801b506:	1c51      	adds	r1, r2, #1
 801b508:	4614      	mov	r4, r2
 801b50a:	fa47 f303 	asr.w	r3, r7, r3
 801b50e:	f003 0301 	and.w	r3, r3, #1
 801b512:	2a04      	cmp	r2, #4
 801b514:	bf88      	it	hi
 801b516:	f043 0301 	orrhi.w	r3, r3, #1
 801b51a:	b2ca      	uxtb	r2, r1
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d0f0      	beq.n	801b502 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x22>
 801b520:	2c05      	cmp	r4, #5
 801b522:	d10b      	bne.n	801b53c <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x5c>
 801b524:	2500      	movs	r5, #0
 801b526:	f7ee fa0b 	bl	8009940 <xTaskGetTickCount>
 801b52a:	4603      	mov	r3, r0
 801b52c:	4640      	mov	r0, r8
 801b52e:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
 801b532:	f7fb fa4b 	bl	80169cc <sys_mutex_unlock>
 801b536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b53a:	2400      	movs	r4, #0
 801b53c:	f106 0b90 	add.w	fp, r6, #144	; 0x90
 801b540:	f44f 7a03 	mov.w	sl, #524	; 0x20c
 801b544:	fb0a b504 	mla	r5, sl, r4, fp
 801b548:	220c      	movs	r2, #12
 801b54a:	4649      	mov	r1, r9
 801b54c:	f105 000a 	add.w	r0, r5, #10
 801b550:	3508      	adds	r5, #8
 801b552:	f006 fa85 	bl	8021a60 <memcmp>
 801b556:	2800      	cmp	r0, #0
 801b558:	d0e5      	beq.n	801b526 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x46>
 801b55a:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 801b55e:	b913      	cbnz	r3, 801b566 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x86>
 801b560:	e7e0      	b.n	801b524 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x44>
 801b562:	2c04      	cmp	r4, #4
 801b564:	d807      	bhi.n	801b576 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x96>
 801b566:	3401      	adds	r4, #1
 801b568:	f004 0307 	and.w	r3, r4, #7
 801b56c:	b2e4      	uxtb	r4, r4
 801b56e:	fa47 f303 	asr.w	r3, r7, r3
 801b572:	07db      	lsls	r3, r3, #31
 801b574:	d5f5      	bpl.n	801b562 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x82>
 801b576:	2c05      	cmp	r4, #5
 801b578:	d1e4      	bne.n	801b544 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x64>
 801b57a:	e7d3      	b.n	801b524 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE+0x44>
 801b57c:	4640      	mov	r0, r8
 801b57e:	f7fb fa25 	bl	80169cc <sys_mutex_unlock>
 801b582:	f005 fb83 	bl	8020c8c <__cxa_end_cleanup>
 801b586:	bf00      	nop

0801b588 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr>:
 801b588:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
 801b58c:	2a00      	cmp	r2, #0
 801b58e:	d069      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b590:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801b592:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b596:	4299      	cmp	r1, r3
 801b598:	d066      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b59a:	2a01      	cmp	r2, #1
 801b59c:	d962      	bls.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b59e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801b5a0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b5a4:	4299      	cmp	r1, r3
 801b5a6:	d05f      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b5a8:	2a02      	cmp	r2, #2
 801b5aa:	d05b      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b5ac:	6e43      	ldr	r3, [r0, #100]	; 0x64
 801b5ae:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b5b2:	4299      	cmp	r1, r3
 801b5b4:	d058      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b5b6:	2a03      	cmp	r2, #3
 801b5b8:	d054      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b5ba:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801b5bc:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b5c0:	4299      	cmp	r1, r3
 801b5c2:	d051      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b5c4:	2a04      	cmp	r2, #4
 801b5c6:	d04d      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b5c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801b5ca:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b5ce:	4299      	cmp	r1, r3
 801b5d0:	d04a      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b5d2:	2a05      	cmp	r2, #5
 801b5d4:	d046      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b5d6:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801b5d8:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b5dc:	4299      	cmp	r1, r3
 801b5de:	d043      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b5e0:	2a06      	cmp	r2, #6
 801b5e2:	d03f      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b5e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801b5e6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b5ea:	4299      	cmp	r1, r3
 801b5ec:	d03c      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b5ee:	2a07      	cmp	r2, #7
 801b5f0:	d038      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b5f2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 801b5f4:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b5f8:	4299      	cmp	r1, r3
 801b5fa:	d035      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b5fc:	2a08      	cmp	r2, #8
 801b5fe:	d031      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b600:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801b602:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b606:	4299      	cmp	r1, r3
 801b608:	d02e      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b60a:	2a09      	cmp	r2, #9
 801b60c:	d02a      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b60e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 801b612:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b616:	4299      	cmp	r1, r3
 801b618:	d026      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b61a:	2a0a      	cmp	r2, #10
 801b61c:	d022      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b61e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 801b622:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b626:	4299      	cmp	r1, r3
 801b628:	d01e      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b62a:	2a0b      	cmp	r2, #11
 801b62c:	d01a      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b62e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 801b632:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 801b636:	4299      	cmp	r1, r3
 801b638:	d016      	beq.n	801b668 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe0>
 801b63a:	2a0c      	cmp	r2, #12
 801b63c:	d012      	beq.n	801b664 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xdc>
 801b63e:	f100 038c 	add.w	r3, r0, #140	; 0x8c
 801b642:	200c      	movs	r0, #12
 801b644:	b410      	push	{r4}
 801b646:	e001      	b.n	801b64c <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xc4>
 801b648:	4290      	cmp	r0, r2
 801b64a:	d00f      	beq.n	801b66c <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xe4>
 801b64c:	f853 4b04 	ldr.w	r4, [r3], #4
 801b650:	3001      	adds	r0, #1
 801b652:	f8d4 41d8 	ldr.w	r4, [r4, #472]	; 0x1d8
 801b656:	b2c0      	uxtb	r0, r0
 801b658:	42a1      	cmp	r1, r4
 801b65a:	d1f5      	bne.n	801b648 <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xc0>
 801b65c:	2001      	movs	r0, #1
 801b65e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b662:	4770      	bx	lr
 801b664:	2000      	movs	r0, #0
 801b666:	4770      	bx	lr
 801b668:	2001      	movs	r0, #1
 801b66a:	4770      	bx	lr
 801b66c:	2000      	movs	r0, #0
 801b66e:	e7f6      	b.n	801b65e <_ZN4rtps11Participant29hasReaderWithMulticastLocatorE8ip4_addr+0xd6>

0801b670 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE>:
 801b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b674:	b085      	sub	sp, #20
 801b676:	f100 098c 	add.w	r9, r0, #140	; 0x8c
 801b67a:	4605      	mov	r5, r0
 801b67c:	af01      	add	r7, sp, #4
 801b67e:	4648      	mov	r0, r9
 801b680:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 801b684:	f7fb f993 	bl	80169ae <sys_mutex_lock>
 801b688:	f895 6090 	ldrb.w	r6, [r5, #144]	; 0x90
 801b68c:	f016 0401 	ands.w	r4, r6, #1
 801b690:	d115      	bne.n	801b6be <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x4e>
 801b692:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801b696:	b93b      	cbnz	r3, 801b6a8 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x38>
 801b698:	4648      	mov	r0, r9
 801b69a:	f7fb f997 	bl	80169cc <sys_mutex_unlock>
 801b69e:	b005      	add	sp, #20
 801b6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6a4:	2c04      	cmp	r4, #4
 801b6a6:	d807      	bhi.n	801b6b8 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x48>
 801b6a8:	3401      	adds	r4, #1
 801b6aa:	f004 0307 	and.w	r3, r4, #7
 801b6ae:	b2e4      	uxtb	r4, r4
 801b6b0:	fa46 f303 	asr.w	r3, r6, r3
 801b6b4:	07da      	lsls	r2, r3, #31
 801b6b6:	d5f5      	bpl.n	801b6a4 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x34>
 801b6b8:	2c05      	cmp	r4, #5
 801b6ba:	d101      	bne.n	801b6c0 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x50>
 801b6bc:	e7ec      	b.n	801b698 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x28>
 801b6be:	2400      	movs	r4, #0
 801b6c0:	f105 0890 	add.w	r8, r5, #144	; 0x90
 801b6c4:	f44f 7a03 	mov.w	sl, #524	; 0x20c
 801b6c8:	fb0a fb04 	mul.w	fp, sl, r4
 801b6cc:	220c      	movs	r2, #12
 801b6ce:	4639      	mov	r1, r7
 801b6d0:	f10b 000a 	add.w	r0, fp, #10
 801b6d4:	4440      	add	r0, r8
 801b6d6:	f006 f9c3 	bl	8021a60 <memcmp>
 801b6da:	b180      	cbz	r0, 801b6fe <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x8e>
 801b6dc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 801b6e0:	b913      	cbnz	r3, 801b6e8 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x78>
 801b6e2:	e7d9      	b.n	801b698 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x28>
 801b6e4:	2c04      	cmp	r4, #4
 801b6e6:	d807      	bhi.n	801b6f8 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x88>
 801b6e8:	3401      	adds	r4, #1
 801b6ea:	f004 0307 	and.w	r3, r4, #7
 801b6ee:	b2e4      	uxtb	r4, r4
 801b6f0:	fa46 f303 	asr.w	r3, r6, r3
 801b6f4:	07db      	lsls	r3, r3, #31
 801b6f6:	d5f5      	bpl.n	801b6e4 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x74>
 801b6f8:	2c05      	cmp	r4, #5
 801b6fa:	d1e5      	bne.n	801b6c8 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x58>
 801b6fc:	e7cc      	b.n	801b698 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE+0x28>
 801b6fe:	f7ee f91f 	bl	8009940 <xTaskGetTickCount>
 801b702:	44d8      	add	r8, fp
 801b704:	f8c8 0210 	str.w	r0, [r8, #528]	; 0x210
 801b708:	4648      	mov	r0, r9
 801b70a:	f7fb f95f 	bl	80169cc <sys_mutex_unlock>
 801b70e:	b005      	add	sp, #20
 801b710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b714:	4648      	mov	r0, r9
 801b716:	f7fb f959 	bl	80169cc <sys_mutex_unlock>
 801b71a:	f005 fab7 	bl	8020c8c <__cxa_end_cleanup>
 801b71e:	bf00      	nop

0801b720 <_ZN4rtps11Participant23checkAndResetHeartbeatsEv>:
 801b720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b724:	f100 038c 	add.w	r3, r0, #140	; 0x8c
 801b728:	4607      	mov	r7, r0
 801b72a:	ed2d 8b02 	vpush	{d8}
 801b72e:	4618      	mov	r0, r3
 801b730:	ee08 3a10 	vmov	s16, r3
 801b734:	f7fb f93b 	bl	80169ae <sys_mutex_lock>
 801b738:	f897 b090 	ldrb.w	fp, [r7, #144]	; 0x90
 801b73c:	f01b 0f01 	tst.w	fp, #1
 801b740:	d11e      	bne.n	801b780 <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0x60>
 801b742:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b746:	b18b      	cbz	r3, 801b76c <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0x4c>
 801b748:	2201      	movs	r2, #1
 801b74a:	f002 0307 	and.w	r3, r2, #7
 801b74e:	1c51      	adds	r1, r2, #1
 801b750:	4614      	mov	r4, r2
 801b752:	fa4b f303 	asr.w	r3, fp, r3
 801b756:	f003 0301 	and.w	r3, r3, #1
 801b75a:	2a04      	cmp	r2, #4
 801b75c:	bf88      	it	hi
 801b75e:	f043 0301 	orrhi.w	r3, r3, #1
 801b762:	b2ca      	uxtb	r2, r1
 801b764:	2b00      	cmp	r3, #0
 801b766:	d0f0      	beq.n	801b74a <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0x2a>
 801b768:	2c05      	cmp	r4, #5
 801b76a:	d10a      	bne.n	801b782 <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0x62>
 801b76c:	2501      	movs	r5, #1
 801b76e:	ee18 0a10 	vmov	r0, s16
 801b772:	f7fb f92b 	bl	80169cc <sys_mutex_unlock>
 801b776:	4628      	mov	r0, r5
 801b778:	ecbd 8b02 	vpop	{d8}
 801b77c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b780:	2400      	movs	r4, #0
 801b782:	f107 0a90 	add.w	sl, r7, #144	; 0x90
 801b786:	f44f 7303 	mov.w	r3, #524	; 0x20c
 801b78a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b78e:	fb03 f504 	mul.w	r5, r3, r4
 801b792:	eb07 0905 	add.w	r9, r7, r5
 801b796:	f105 0608 	add.w	r6, r5, #8
 801b79a:	f8d9 3298 	ldr.w	r3, [r9, #664]	; 0x298
 801b79e:	4456      	add	r6, sl
 801b7a0:	fb00 f003 	mul.w	r0, r0, r3
 801b7a4:	f7e5 f812 	bl	80007cc <__aeabi_i2d>
 801b7a8:	4602      	mov	r2, r0
 801b7aa:	f8d9 029c 	ldr.w	r0, [r9, #668]	; 0x29c
 801b7ae:	4689      	mov	r9, r1
 801b7b0:	4690      	mov	r8, r2
 801b7b2:	f7e4 fffb 	bl	80007ac <__aeabi_ui2d>
 801b7b6:	a323      	add	r3, pc, #140	; (adr r3, 801b844 <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0x124>)
 801b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7bc:	f7e4 fd8a 	bl	80002d4 <__aeabi_dmul>
 801b7c0:	4602      	mov	r2, r0
 801b7c2:	460b      	mov	r3, r1
 801b7c4:	4640      	mov	r0, r8
 801b7c6:	4649      	mov	r1, r9
 801b7c8:	f7e4 feb4 	bl	8000534 <__adddf3>
 801b7cc:	f7e5 f868 	bl	80008a0 <__aeabi_d2uiz>
 801b7d0:	4680      	mov	r8, r0
 801b7d2:	f7ee f8b5 	bl	8009940 <xTaskGetTickCount>
 801b7d6:	4a1a      	ldr	r2, [pc, #104]	; (801b840 <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0x120>)
 801b7d8:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 801b7dc:	4590      	cmp	r8, r2
 801b7de:	eba0 0303 	sub.w	r3, r0, r3
 801b7e2:	bf28      	it	cs
 801b7e4:	4690      	movcs	r8, r2
 801b7e6:	4598      	cmp	r8, r3
 801b7e8:	d317      	bcc.n	801b81a <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0xfa>
 801b7ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d0bc      	beq.n	801b76c <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0x4c>
 801b7f2:	3401      	adds	r4, #1
 801b7f4:	b2e2      	uxtb	r2, r4
 801b7f6:	f002 0307 	and.w	r3, r2, #7
 801b7fa:	1c51      	adds	r1, r2, #1
 801b7fc:	4614      	mov	r4, r2
 801b7fe:	fa4b f303 	asr.w	r3, fp, r3
 801b802:	f003 0301 	and.w	r3, r3, #1
 801b806:	2a04      	cmp	r2, #4
 801b808:	bf88      	it	hi
 801b80a:	f043 0301 	orrhi.w	r3, r3, #1
 801b80e:	b2ca      	uxtb	r2, r1
 801b810:	2b00      	cmp	r3, #0
 801b812:	d0f0      	beq.n	801b7f6 <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0xd6>
 801b814:	2c05      	cmp	r4, #5
 801b816:	d1b6      	bne.n	801b786 <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0x66>
 801b818:	e7a8      	b.n	801b76c <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0x4c>
 801b81a:	f105 010a 	add.w	r1, r5, #10
 801b81e:	4638      	mov	r0, r7
 801b820:	4451      	add	r1, sl
 801b822:	f7ff fd97 	bl	801b354 <_ZN4rtps11Participant23removeRemoteParticipantERKNS_12GuidPrefix_tE>
 801b826:	4605      	mov	r5, r0
 801b828:	2800      	cmp	r0, #0
 801b82a:	d1de      	bne.n	801b7ea <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0xca>
 801b82c:	e79f      	b.n	801b76e <_ZN4rtps11Participant23checkAndResetHeartbeatsEv+0x4e>
 801b82e:	ee18 0a10 	vmov	r0, s16
 801b832:	f7fb f8cb 	bl	80169cc <sys_mutex_unlock>
 801b836:	f005 fa29 	bl	8020c8c <__cxa_end_cleanup>
 801b83a:	bf00      	nop
 801b83c:	f3af 8000 	nop.w
 801b840:	0002bf20 	.word	0x0002bf20
 801b844:	a0b5ed8d 	.word	0xa0b5ed8d
 801b848:	3eb0c6f7 	.word	0x3eb0c6f7

0801b84c <_ZN4rtps11Participant12getSPDPAgentEv>:
 801b84c:	f600 20d4 	addw	r0, r0, #2772	; 0xad4
 801b850:	4770      	bx	lr
 801b852:	bf00      	nop

0801b854 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE>:
 801b854:	b570      	push	{r4, r5, r6, lr}
 801b856:	f241 064c 	movw	r6, #4172	; 0x104c
 801b85a:	2301      	movs	r3, #1
 801b85c:	460d      	mov	r5, r1
 801b85e:	4604      	mov	r4, r0
 801b860:	4406      	add	r6, r0
 801b862:	460a      	mov	r2, r1
 801b864:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b868:	4601      	mov	r1, r0
 801b86a:	f600 20d4 	addw	r0, r0, #2772	; 0xad4
 801b86e:	f000 ff29 	bl	801c6c4 <_ZN4rtps9SPDPAgent4initERNS_11ParticipantERNS_16BuiltInEndpointsE>
 801b872:	4621      	mov	r1, r4
 801b874:	4630      	mov	r0, r6
 801b876:	462a      	mov	r2, r5
 801b878:	f000 f87c 	bl	801b974 <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE>
 801b87c:	6829      	ldr	r1, [r5, #0]
 801b87e:	b169      	cbz	r1, 801b89c <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x48>
 801b880:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801b884:	2b0b      	cmp	r3, #11
 801b886:	d009      	beq.n	801b89c <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x48>
 801b888:	1c58      	adds	r0, r3, #1
 801b88a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 801b88e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b892:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 801b896:	62d9      	str	r1, [r3, #44]	; 0x2c
 801b898:	2a00      	cmp	r2, #0
 801b89a:	d162      	bne.n	801b962 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x10e>
 801b89c:	6869      	ldr	r1, [r5, #4]
 801b89e:	b169      	cbz	r1, 801b8bc <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x68>
 801b8a0:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801b8a4:	2b0b      	cmp	r3, #11
 801b8a6:	d009      	beq.n	801b8bc <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x68>
 801b8a8:	1c58      	adds	r0, r3, #1
 801b8aa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 801b8ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b8b2:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
 801b8b6:	65d9      	str	r1, [r3, #92]	; 0x5c
 801b8b8:	2a00      	cmp	r2, #0
 801b8ba:	d14e      	bne.n	801b95a <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x106>
 801b8bc:	68a9      	ldr	r1, [r5, #8]
 801b8be:	b169      	cbz	r1, 801b8dc <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x88>
 801b8c0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801b8c4:	2b0b      	cmp	r3, #11
 801b8c6:	d009      	beq.n	801b8dc <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x88>
 801b8c8:	1c58      	adds	r0, r3, #1
 801b8ca:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 801b8ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b8d2:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 801b8d6:	62d9      	str	r1, [r3, #44]	; 0x2c
 801b8d8:	2a00      	cmp	r2, #0
 801b8da:	d13a      	bne.n	801b952 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xfe>
 801b8dc:	68e9      	ldr	r1, [r5, #12]
 801b8de:	b161      	cbz	r1, 801b8fa <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xa6>
 801b8e0:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801b8e4:	2b0b      	cmp	r3, #11
 801b8e6:	d008      	beq.n	801b8fa <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xa6>
 801b8e8:	1c58      	adds	r0, r3, #1
 801b8ea:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 801b8ee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b8f2:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
 801b8f6:	65d9      	str	r1, [r3, #92]	; 0x5c
 801b8f8:	bb3a      	cbnz	r2, 801b94a <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xf6>
 801b8fa:	6929      	ldr	r1, [r5, #16]
 801b8fc:	b161      	cbz	r1, 801b918 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xc4>
 801b8fe:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801b902:	2b0b      	cmp	r3, #11
 801b904:	d008      	beq.n	801b918 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xc4>
 801b906:	1c58      	adds	r0, r3, #1
 801b908:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 801b90c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b910:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 801b914:	62d9      	str	r1, [r3, #44]	; 0x2c
 801b916:	b9a2      	cbnz	r2, 801b942 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xee>
 801b918:	6969      	ldr	r1, [r5, #20]
 801b91a:	b161      	cbz	r1, 801b936 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xe2>
 801b91c:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
 801b920:	2b0b      	cmp	r3, #11
 801b922:	d008      	beq.n	801b936 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xe2>
 801b924:	1c58      	adds	r0, r3, #1
 801b926:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 801b92a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b92e:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
 801b932:	65d9      	str	r1, [r3, #92]	; 0x5c
 801b934:	b902      	cbnz	r2, 801b938 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xe4>
 801b936:	bd70      	pop	{r4, r5, r6, pc}
 801b938:	4630      	mov	r0, r6
 801b93a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b93e:	f000 bb3f 	b.w	801bfc0 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE>
 801b942:	4630      	mov	r0, r6
 801b944:	f000 faea 	bl	801bf1c <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE>
 801b948:	e7e6      	b.n	801b918 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xc4>
 801b94a:	4630      	mov	r0, r6
 801b94c:	f000 fb38 	bl	801bfc0 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE>
 801b950:	e7d3      	b.n	801b8fa <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xa6>
 801b952:	4630      	mov	r0, r6
 801b954:	f000 fae2 	bl	801bf1c <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE>
 801b958:	e7c0      	b.n	801b8dc <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x88>
 801b95a:	4630      	mov	r0, r6
 801b95c:	f000 fb30 	bl	801bfc0 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE>
 801b960:	e7ac      	b.n	801b8bc <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x68>
 801b962:	4630      	mov	r0, r6
 801b964:	f000 fada 	bl	801bf1c <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE>
 801b968:	e798      	b.n	801b89c <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x48>
 801b96a:	bf00      	nop

0801b96c <_ZN4rtps11Participant10newMessageEPKht>:
 801b96c:	3010      	adds	r0, #16
 801b96e:	f004 bb19 	b.w	801ffa4 <_ZN4rtps15MessageReceiver14processMessageEPKht>
 801b972:	bf00      	nop

0801b974 <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE>:
 801b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b978:	4605      	mov	r5, r0
 801b97a:	3004      	adds	r0, #4
 801b97c:	460f      	mov	r7, r1
 801b97e:	4614      	mov	r4, r2
 801b980:	f7fa fff2 	bl	8016968 <sys_mutex_new>
 801b984:	b9d0      	cbnz	r0, 801b9bc <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE+0x48>
 801b986:	f505 7618 	add.w	r6, r5, #608	; 0x260
 801b98a:	602f      	str	r7, [r5, #0]
 801b98c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b98e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801b990:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b994:	e886 0003 	stmia.w	r6, {r0, r1}
 801b998:	f8d5 026c 	ldr.w	r0, [r5, #620]	; 0x26c
 801b99c:	b120      	cbz	r0, 801b9a8 <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE+0x34>
 801b99e:	6803      	ldr	r3, [r0, #0]
 801b9a0:	462a      	mov	r2, r5
 801b9a2:	4907      	ldr	r1, [pc, #28]	; (801b9c0 <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE+0x4c>)
 801b9a4:	685b      	ldr	r3, [r3, #4]
 801b9a6:	4798      	blx	r3
 801b9a8:	f8d5 0274 	ldr.w	r0, [r5, #628]	; 0x274
 801b9ac:	b130      	cbz	r0, 801b9bc <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE+0x48>
 801b9ae:	6803      	ldr	r3, [r0, #0]
 801b9b0:	462a      	mov	r2, r5
 801b9b2:	4904      	ldr	r1, [pc, #16]	; (801b9c4 <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE+0x50>)
 801b9b4:	685b      	ldr	r3, [r3, #4]
 801b9b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b9ba:	4718      	bx	r3
 801b9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9c0:	0801bb35 	.word	0x0801bb35
 801b9c4:	0801bd15 	.word	0x0801bd15

0801b9c8 <_ZN4rtps9SEDPAgent37registerOnNewPublisherMatchedCallbackEPFvPvES1_>:
 801b9c8:	b410      	push	{r4}
 801b9ca:	f500 5314 	add.w	r3, r0, #9472	; 0x2500
 801b9ce:	f242 44fc 	movw	r4, #9468	; 0x24fc
 801b9d2:	5101      	str	r1, [r0, r4]
 801b9d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b9d8:	601a      	str	r2, [r3, #0]
 801b9da:	4770      	bx	lr

0801b9dc <_ZN4rtps9SEDPAgent38registerOnNewSubscriberMatchedCallbackEPFvPvES1_>:
 801b9dc:	b410      	push	{r4}
 801b9de:	f242 5308 	movw	r3, #9480	; 0x2508
 801b9e2:	f242 5404 	movw	r4, #9476	; 0x2504
 801b9e6:	5101      	str	r1, [r0, r4]
 801b9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b9ec:	50c2      	str	r2, [r0, r3]
 801b9ee:	4770      	bx	lr

0801b9f0 <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_9TopicDataE>:
 801b9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9f4:	4605      	mov	r5, r0
 801b9f6:	b08e      	sub	sp, #56	; 0x38
 801b9f8:	6800      	ldr	r0, [r0, #0]
 801b9fa:	460c      	mov	r4, r1
 801b9fc:	f7ff fd1e 	bl	801b43c <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE>
 801ba00:	b358      	cbz	r0, 801ba5a <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_9TopicDataE+0x6a>
 801ba02:	4621      	mov	r1, r4
 801ba04:	6828      	ldr	r0, [r5, #0]
 801ba06:	f7ff fbf3 	bl	801b1f0 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE>
 801ba0a:	4680      	mov	r8, r0
 801ba0c:	b328      	cbz	r0, 801ba5a <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_9TopicDataE+0x6a>
 801ba0e:	6807      	ldr	r7, [r0, #0]
 801ba10:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
 801ba14:	6820      	ldr	r0, [r4, #0]
 801ba16:	46ee      	mov	lr, sp
 801ba18:	6861      	ldr	r1, [r4, #4]
 801ba1a:	ae08      	add	r6, sp, #32
 801ba1c:	68a2      	ldr	r2, [r4, #8]
 801ba1e:	68e3      	ldr	r3, [r4, #12]
 801ba20:	68fc      	ldr	r4, [r7, #12]
 801ba22:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ba26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ba2a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801ba2c:	2000      	movs	r0, #0
 801ba2e:	2101      	movs	r1, #1
 801ba30:	2300      	movs	r3, #0
 801ba32:	2201      	movs	r2, #1
 801ba34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ba38:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801ba3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ba40:	e886 0003 	stmia.w	r6, {r0, r1}
 801ba44:	4640      	mov	r0, r8
 801ba46:	4669      	mov	r1, sp
 801ba48:	47a0      	blx	r4
 801ba4a:	f242 43fc 	movw	r3, #9468	; 0x24fc
 801ba4e:	58eb      	ldr	r3, [r5, r3]
 801ba50:	b11b      	cbz	r3, 801ba5a <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_9TopicDataE+0x6a>
 801ba52:	f505 5514 	add.w	r5, r5, #9472	; 0x2500
 801ba56:	6828      	ldr	r0, [r5, #0]
 801ba58:	4798      	blx	r3
 801ba5a:	b00e      	add	sp, #56	; 0x38
 801ba5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ba60 <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_17ReaderCacheChangeE>:
 801ba60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba62:	1d06      	adds	r6, r0, #4
 801ba64:	460c      	mov	r4, r1
 801ba66:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 801ba6a:	4605      	mov	r5, r0
 801ba6c:	4630      	mov	r0, r6
 801ba6e:	f7fa ff9e 	bl	80169ae <sys_mutex_lock>
 801ba72:	88e2      	ldrh	r2, [r4, #6]
 801ba74:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 801ba78:	d905      	bls.n	801ba86 <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_17ReaderCacheChangeE+0x26>
 801ba7a:	4630      	mov	r0, r6
 801ba7c:	f7fa ffa6 	bl	80169cc <sys_mutex_unlock>
 801ba80:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 801ba84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba86:	f105 0308 	add.w	r3, r5, #8
 801ba8a:	6821      	ldr	r1, [r4, #0]
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	f005 fff7 	bl	8021a80 <memcpy>
 801ba92:	f44f 7216 	mov.w	r2, #600	; 0x258
 801ba96:	4601      	mov	r1, r0
 801ba98:	a806      	add	r0, sp, #24
 801ba9a:	f002 facd 	bl	801e038 <ucdr_init_buffer>
 801ba9e:	2400      	movs	r4, #0
 801baa0:	682b      	ldr	r3, [r5, #0]
 801baa2:	22c8      	movs	r2, #200	; 0xc8
 801baa4:	a812      	add	r0, sp, #72	; 0x48
 801baa6:	7b5f      	ldrb	r7, [r3, #13]
 801baa8:	4621      	mov	r1, r4
 801baaa:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 801baae:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 801bab2:	f006 f80d 	bl	8021ad0 <memset>
 801bab6:	4621      	mov	r1, r4
 801bab8:	22c8      	movs	r2, #200	; 0xc8
 801baba:	a844      	add	r0, sp, #272	; 0x110
 801babc:	f006 f808 	bl	8021ad0 <memset>
 801bac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bac4:	ebc7 1347 	rsb	r3, r7, r7, lsl #5
 801bac8:	4919      	ldr	r1, [pc, #100]	; (801bb30 <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_17ReaderCacheChangeE+0xd0>)
 801baca:	9200      	str	r2, [sp, #0]
 801bacc:	46ec      	mov	ip, sp
 801bace:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801bad2:	f641 43f3 	movw	r3, #7411	; 0x1cf3
 801bad6:	2201      	movs	r2, #1
 801bad8:	9403      	str	r4, [sp, #12]
 801bada:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801bade:	9404      	str	r4, [sp, #16]
 801bae0:	9405      	str	r4, [sp, #20]
 801bae2:	af7e      	add	r7, sp, #504	; 0x1f8
 801bae4:	b29b      	uxth	r3, r3
 801bae6:	917d      	str	r1, [sp, #500]	; 0x1f4
 801bae8:	9278      	str	r2, [sp, #480]	; 0x1e0
 801baea:	9379      	str	r3, [sp, #484]	; 0x1e4
 801baec:	947c      	str	r4, [sp, #496]	; 0x1f0
 801baee:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801baf2:	e9cd 2276 	strd	r2, r2, [sp, #472]	; 0x1d8
 801baf6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bafa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bafc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801bb00:	e9cd 447a 	strd	r4, r4, [sp, #488]	; 0x1e8
 801bb04:	e887 0003 	stmia.w	r7, {r0, r1}
 801bb08:	a906      	add	r1, sp, #24
 801bb0a:	a80e      	add	r0, sp, #56	; 0x38
 801bb0c:	f001 fa9e 	bl	801d04c <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer>
 801bb10:	b118      	cbz	r0, 801bb1a <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_17ReaderCacheChangeE+0xba>
 801bb12:	a90e      	add	r1, sp, #56	; 0x38
 801bb14:	4628      	mov	r0, r5
 801bb16:	f7ff ff6b 	bl	801b9f0 <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_9TopicDataE>
 801bb1a:	4630      	mov	r0, r6
 801bb1c:	f7fa ff56 	bl	80169cc <sys_mutex_unlock>
 801bb20:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 801bb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb26:	4630      	mov	r0, r6
 801bb28:	f7fa ff50 	bl	80169cc <sys_mutex_unlock>
 801bb2c:	f005 f8ae 	bl	8020c8c <__cxa_end_cleanup>
 801bb30:	2a00a8c0 	.word	0x2a00a8c0

0801bb34 <_ZN4rtps9SEDPAgent24receiveCallbackPublisherEPvRKNS_17ReaderCacheChangeE>:
 801bb34:	f7ff bf94 	b.w	801ba60 <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_17ReaderCacheChangeE>

0801bb38 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE>:
 801bb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb3c:	4605      	mov	r5, r0
 801bb3e:	b09f      	sub	sp, #124	; 0x7c
 801bb40:	6800      	ldr	r0, [r0, #0]
 801bb42:	460c      	mov	r4, r1
 801bb44:	f7ff fc7a 	bl	801b43c <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE>
 801bb48:	2800      	cmp	r0, #0
 801bb4a:	d042      	beq.n	801bbd2 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE+0x9a>
 801bb4c:	4621      	mov	r1, r4
 801bb4e:	6828      	ldr	r0, [r5, #0]
 801bb50:	f7ff fb2c 	bl	801b1ac <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE>
 801bb54:	4680      	mov	r8, r0
 801bb56:	2800      	cmp	r0, #0
 801bb58:	d03b      	beq.n	801bbd2 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE+0x9a>
 801bb5a:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 801bb5e:	2b01      	cmp	r3, #1
 801bb60:	d03a      	beq.n	801bbd8 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE+0xa0>
 801bb62:	6807      	ldr	r7, [r0, #0]
 801bb64:	f504 7cd4 	add.w	ip, r4, #424	; 0x1a8
 801bb68:	6820      	ldr	r0, [r4, #0]
 801bb6a:	46ee      	mov	lr, sp
 801bb6c:	6861      	ldr	r1, [r4, #4]
 801bb6e:	ae04      	add	r6, sp, #16
 801bb70:	68a2      	ldr	r2, [r4, #8]
 801bb72:	f04f 0a00 	mov.w	sl, #0
 801bb76:	68e3      	ldr	r3, [r4, #12]
 801bb78:	2400      	movs	r4, #0
 801bb7a:	683f      	ldr	r7, [r7, #0]
 801bb7c:	f04f 0b20 	mov.w	fp, #32
 801bb80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bb84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bb8a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801bb8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb92:	2220      	movs	r2, #32
 801bb94:	e886 0003 	stmia.w	r6, {r0, r1}
 801bb98:	4621      	mov	r1, r4
 801bb9a:	a814      	add	r0, sp, #80	; 0x50
 801bb9c:	940b      	str	r4, [sp, #44]	; 0x2c
 801bb9e:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
 801bba2:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
 801bba6:	9411      	str	r4, [sp, #68]	; 0x44
 801bba8:	930a      	str	r3, [sp, #40]	; 0x28
 801bbaa:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 801bbae:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 801bbb2:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 801bbb6:	f005 ff8b 	bl	8021ad0 <memset>
 801bbba:	4640      	mov	r0, r8
 801bbbc:	4669      	mov	r1, sp
 801bbbe:	941c      	str	r4, [sp, #112]	; 0x70
 801bbc0:	47b8      	blx	r7
 801bbc2:	f242 5304 	movw	r3, #9476	; 0x2504
 801bbc6:	58eb      	ldr	r3, [r5, r3]
 801bbc8:	b11b      	cbz	r3, 801bbd2 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE+0x9a>
 801bbca:	f242 5208 	movw	r2, #9480	; 0x2508
 801bbce:	58a8      	ldr	r0, [r5, r2]
 801bbd0:	4798      	blx	r3
 801bbd2:	b01f      	add	sp, #124	; 0x7c
 801bbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbd8:	6806      	ldr	r6, [r0, #0]
 801bbda:	46ee      	mov	lr, sp
 801bbdc:	6820      	ldr	r0, [r4, #0]
 801bbde:	f504 77d4 	add.w	r7, r4, #424	; 0x1a8
 801bbe2:	6861      	ldr	r1, [r4, #4]
 801bbe4:	f10d 0c10 	add.w	ip, sp, #16
 801bbe8:	68a2      	ldr	r2, [r4, #8]
 801bbea:	f04f 0a00 	mov.w	sl, #0
 801bbee:	68e3      	ldr	r3, [r4, #12]
 801bbf0:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
 801bbf4:	f8d6 9000 	ldr.w	r9, [r6]
 801bbf8:	ae0a      	add	r6, sp, #40	; 0x28
 801bbfa:	f04f 0b20 	mov.w	fp, #32
 801bbfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801bc02:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801bc04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bc08:	e897 0003 	ldmia.w	r7, {r0, r1}
 801bc0c:	2700      	movs	r7, #0
 801bc0e:	e88c 0003 	stmia.w	ip, {r0, r1}
 801bc12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801bc16:	e894 0003 	ldmia.w	r4, {r0, r1}
 801bc1a:	2220      	movs	r2, #32
 801bc1c:	e886 0003 	stmia.w	r6, {r0, r1}
 801bc20:	4639      	mov	r1, r7
 801bc22:	a814      	add	r0, sp, #80	; 0x50
 801bc24:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 801bc28:	f88d 7042 	strb.w	r7, [sp, #66]	; 0x42
 801bc2c:	9711      	str	r7, [sp, #68]	; 0x44
 801bc2e:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 801bc32:	f005 ff4d 	bl	8021ad0 <memset>
 801bc36:	4640      	mov	r0, r8
 801bc38:	4669      	mov	r1, sp
 801bc3a:	971c      	str	r7, [sp, #112]	; 0x70
 801bc3c:	47c8      	blx	r9
 801bc3e:	e7c0      	b.n	801bbc2 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE+0x8a>

0801bc40 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_17ReaderCacheChangeE>:
 801bc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc42:	1d06      	adds	r6, r0, #4
 801bc44:	460c      	mov	r4, r1
 801bc46:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 801bc4a:	4605      	mov	r5, r0
 801bc4c:	4630      	mov	r0, r6
 801bc4e:	f7fa feae 	bl	80169ae <sys_mutex_lock>
 801bc52:	88e2      	ldrh	r2, [r4, #6]
 801bc54:	f5b2 7f16 	cmp.w	r2, #600	; 0x258
 801bc58:	d905      	bls.n	801bc66 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_17ReaderCacheChangeE+0x26>
 801bc5a:	4630      	mov	r0, r6
 801bc5c:	f7fa feb6 	bl	80169cc <sys_mutex_unlock>
 801bc60:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 801bc64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc66:	f105 0308 	add.w	r3, r5, #8
 801bc6a:	6821      	ldr	r1, [r4, #0]
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	f005 ff07 	bl	8021a80 <memcpy>
 801bc72:	f44f 7216 	mov.w	r2, #600	; 0x258
 801bc76:	4601      	mov	r1, r0
 801bc78:	a806      	add	r0, sp, #24
 801bc7a:	f002 f9dd 	bl	801e038 <ucdr_init_buffer>
 801bc7e:	2400      	movs	r4, #0
 801bc80:	682b      	ldr	r3, [r5, #0]
 801bc82:	22c8      	movs	r2, #200	; 0xc8
 801bc84:	a812      	add	r0, sp, #72	; 0x48
 801bc86:	7b5f      	ldrb	r7, [r3, #13]
 801bc88:	4621      	mov	r1, r4
 801bc8a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 801bc8e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 801bc92:	f005 ff1d 	bl	8021ad0 <memset>
 801bc96:	4621      	mov	r1, r4
 801bc98:	22c8      	movs	r2, #200	; 0xc8
 801bc9a:	a844      	add	r0, sp, #272	; 0x110
 801bc9c:	f005 ff18 	bl	8021ad0 <memset>
 801bca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bca4:	ebc7 1347 	rsb	r3, r7, r7, lsl #5
 801bca8:	4919      	ldr	r1, [pc, #100]	; (801bd10 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_17ReaderCacheChangeE+0xd0>)
 801bcaa:	9200      	str	r2, [sp, #0]
 801bcac:	46ec      	mov	ip, sp
 801bcae:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 801bcb2:	f641 43f3 	movw	r3, #7411	; 0x1cf3
 801bcb6:	2201      	movs	r2, #1
 801bcb8:	9403      	str	r4, [sp, #12]
 801bcba:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801bcbe:	9404      	str	r4, [sp, #16]
 801bcc0:	9405      	str	r4, [sp, #20]
 801bcc2:	af7e      	add	r7, sp, #504	; 0x1f8
 801bcc4:	b29b      	uxth	r3, r3
 801bcc6:	917d      	str	r1, [sp, #500]	; 0x1f4
 801bcc8:	9278      	str	r2, [sp, #480]	; 0x1e0
 801bcca:	9379      	str	r3, [sp, #484]	; 0x1e4
 801bccc:	947c      	str	r4, [sp, #496]	; 0x1f0
 801bcce:	e9cd 4401 	strd	r4, r4, [sp, #4]
 801bcd2:	e9cd 2276 	strd	r2, r2, [sp, #472]	; 0x1d8
 801bcd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bcda:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bcdc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801bce0:	e9cd 447a 	strd	r4, r4, [sp, #488]	; 0x1e8
 801bce4:	e887 0003 	stmia.w	r7, {r0, r1}
 801bce8:	a906      	add	r1, sp, #24
 801bcea:	a80e      	add	r0, sp, #56	; 0x38
 801bcec:	f001 f9ae 	bl	801d04c <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer>
 801bcf0:	b118      	cbz	r0, 801bcfa <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_17ReaderCacheChangeE+0xba>
 801bcf2:	a90e      	add	r1, sp, #56	; 0x38
 801bcf4:	4628      	mov	r0, r5
 801bcf6:	f7ff ff1f 	bl	801bb38 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE>
 801bcfa:	4630      	mov	r0, r6
 801bcfc:	f7fa fe66 	bl	80169cc <sys_mutex_unlock>
 801bd00:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 801bd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd06:	4630      	mov	r0, r6
 801bd08:	f7fa fe60 	bl	80169cc <sys_mutex_unlock>
 801bd0c:	f004 ffbe 	bl	8020c8c <__cxa_end_cleanup>
 801bd10:	2a00a8c0 	.word	0x2a00a8c0

0801bd14 <_ZN4rtps9SEDPAgent25receiveCallbackSubscriberEPvRKNS_17ReaderCacheChangeE>:
 801bd14:	f7ff bf94 	b.w	801bc40 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_17ReaderCacheChangeE>

0801bd18 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv>:
 801bd18:	f242 13d0 	movw	r3, #8656	; 0x21d0
 801bd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd20:	5cc4      	ldrb	r4, [r0, r3]
 801bd22:	b0a7      	sub	sp, #156	; 0x9c
 801bd24:	5ac2      	ldrh	r2, [r0, r3]
 801bd26:	4606      	mov	r6, r0
 801bd28:	f014 0401 	ands.w	r4, r4, #1
 801bd2c:	eb00 0a03 	add.w	sl, r0, r3
 801bd30:	f8ad 2010 	strh.w	r2, [sp, #16]
 801bd34:	f040 80f0 	bne.w	801bf18 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x200>
 801bd38:	f8da 3004 	ldr.w	r3, [sl, #4]
 801bd3c:	bb7b      	cbnz	r3, 801bd9e <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x86>
 801bd3e:	ab04      	add	r3, sp, #16
 801bd40:	f8d6 0278 	ldr.w	r0, [r6, #632]	; 0x278
 801bd44:	f8d6 127c 	ldr.w	r1, [r6, #636]	; 0x27c
 801bd48:	f506 791e 	add.w	r9, r6, #632	; 0x278
 801bd4c:	f8d6 2280 	ldr.w	r2, [r6, #640]	; 0x280
 801bd50:	f896 5284 	ldrb.w	r5, [r6, #644]	; 0x284
 801bd54:	f896 4278 	ldrb.w	r4, [r6, #632]	; 0x278
 801bd58:	c307      	stmia	r3!, {r0, r1, r2}
 801bd5a:	701d      	strb	r5, [r3, #0]
 801bd5c:	07e3      	lsls	r3, r4, #31
 801bd5e:	f100 808f 	bmi.w	801be80 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x168>
 801bd62:	f8d6 3288 	ldr.w	r3, [r6, #648]	; 0x288
 801bd66:	b1ab      	cbz	r3, 801bd94 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x7c>
 801bd68:	2201      	movs	r2, #1
 801bd6a:	ab26      	add	r3, sp, #152	; 0x98
 801bd6c:	f002 0007 	and.w	r0, r2, #7
 801bd70:	1c51      	adds	r1, r2, #1
 801bd72:	4614      	mov	r4, r2
 801bd74:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
 801bd78:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 801bd7c:	4103      	asrs	r3, r0
 801bd7e:	f003 0301 	and.w	r3, r3, #1
 801bd82:	2a63      	cmp	r2, #99	; 0x63
 801bd84:	bf88      	it	hi
 801bd86:	f043 0301 	orrhi.w	r3, r3, #1
 801bd8a:	b2ca      	uxtb	r2, r1
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d0ec      	beq.n	801bd6a <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x52>
 801bd90:	2c64      	cmp	r4, #100	; 0x64
 801bd92:	d176      	bne.n	801be82 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x16a>
 801bd94:	b027      	add	sp, #156	; 0x9c
 801bd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd9a:	2c09      	cmp	r4, #9
 801bd9c:	d80c      	bhi.n	801bdb8 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0xa0>
 801bd9e:	3401      	adds	r4, #1
 801bda0:	ab26      	add	r3, sp, #152	; 0x98
 801bda2:	f3c4 02c4 	ubfx	r2, r4, #3, #5
 801bda6:	f004 0107 	and.w	r1, r4, #7
 801bdaa:	b2e4      	uxtb	r4, r4
 801bdac:	441a      	add	r2, r3
 801bdae:	f812 3c88 	ldrb.w	r3, [r2, #-136]
 801bdb2:	410b      	asrs	r3, r1
 801bdb4:	07da      	lsls	r2, r3, #31
 801bdb6:	d5f0      	bpl.n	801bd9a <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x82>
 801bdb8:	2c0a      	cmp	r4, #10
 801bdba:	d0c0      	beq.n	801bd3e <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x26>
 801bdbc:	46b1      	mov	r9, r6
 801bdbe:	2350      	movs	r3, #80	; 0x50
 801bdc0:	2208      	movs	r2, #8
 801bdc2:	f8d9 0000 	ldr.w	r0, [r9]
 801bdc6:	fb13 2104 	smlabb	r1, r3, r4, r2
 801bdca:	4451      	add	r1, sl
 801bdcc:	f7ff fa32 	bl	801b234 <_ZNK4rtps11Participant17getMatchingWriterERKNS_19TopicDataCompressedE>
 801bdd0:	4607      	mov	r7, r0
 801bdd2:	2800      	cmp	r0, #0
 801bdd4:	d038      	beq.n	801be48 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x130>
 801bdd6:	6803      	ldr	r3, [r0, #0]
 801bdd8:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 801bddc:	f10d 0820 	add.w	r8, sp, #32
 801bde0:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	eb0a 1505 	add.w	r5, sl, r5, lsl #4
 801bdea:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 801bdee:	f04f 0b00 	mov.w	fp, #0
 801bdf2:	9301      	str	r3, [sp, #4]
 801bdf4:	f105 0308 	add.w	r3, r5, #8
 801bdf8:	f105 0628 	add.w	r6, r5, #40	; 0x28
 801bdfc:	3540      	adds	r5, #64	; 0x40
 801bdfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801be00:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 801be04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801be06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801be0a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801be0e:	2600      	movs	r6, #0
 801be10:	e88e 0003 	stmia.w	lr, {r0, r1}
 801be14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801be1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801be1e:	2220      	movs	r2, #32
 801be20:	e88c 0003 	stmia.w	ip, {r0, r1}
 801be24:	f04f 0c20 	mov.w	ip, #32
 801be28:	4631      	mov	r1, r6
 801be2a:	a81c      	add	r0, sp, #112	; 0x70
 801be2c:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
 801be30:	f88d 6062 	strb.w	r6, [sp, #98]	; 0x62
 801be34:	9619      	str	r6, [sp, #100]	; 0x64
 801be36:	e9cd bc1a 	strd	fp, ip, [sp, #104]	; 0x68
 801be3a:	f005 fe49 	bl	8021ad0 <memset>
 801be3e:	4641      	mov	r1, r8
 801be40:	4638      	mov	r0, r7
 801be42:	9b01      	ldr	r3, [sp, #4]
 801be44:	9624      	str	r6, [sp, #144]	; 0x90
 801be46:	4798      	blx	r3
 801be48:	f8da 3004 	ldr.w	r3, [sl, #4]
 801be4c:	b1b3      	cbz	r3, 801be7c <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x164>
 801be4e:	3401      	adds	r4, #1
 801be50:	b2e2      	uxtb	r2, r4
 801be52:	ab26      	add	r3, sp, #152	; 0x98
 801be54:	f002 0007 	and.w	r0, r2, #7
 801be58:	1c51      	adds	r1, r2, #1
 801be5a:	4614      	mov	r4, r2
 801be5c:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
 801be60:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 801be64:	4103      	asrs	r3, r0
 801be66:	f003 0301 	and.w	r3, r3, #1
 801be6a:	2a09      	cmp	r2, #9
 801be6c:	bf88      	it	hi
 801be6e:	f043 0301 	orrhi.w	r3, r3, #1
 801be72:	b2ca      	uxtb	r2, r1
 801be74:	2b00      	cmp	r3, #0
 801be76:	d0ec      	beq.n	801be52 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x13a>
 801be78:	2c0a      	cmp	r4, #10
 801be7a:	d1a0      	bne.n	801bdbe <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0xa6>
 801be7c:	464e      	mov	r6, r9
 801be7e:	e75e      	b.n	801bd3e <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x26>
 801be80:	2400      	movs	r4, #0
 801be82:	2350      	movs	r3, #80	; 0x50
 801be84:	2214      	movs	r2, #20
 801be86:	6830      	ldr	r0, [r6, #0]
 801be88:	fb13 2104 	smlabb	r1, r3, r4, r2
 801be8c:	4449      	add	r1, r9
 801be8e:	f7ff f9f1 	bl	801b274 <_ZNK4rtps11Participant17getMatchingReaderERKNS_19TopicDataCompressedE>
 801be92:	4684      	mov	ip, r0
 801be94:	b318      	cbz	r0, 801bede <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x1c6>
 801be96:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 801be9a:	6803      	ldr	r3, [r0, #0]
 801be9c:	2200      	movs	r2, #0
 801be9e:	f10d 0e20 	add.w	lr, sp, #32
 801bea2:	eb06 1505 	add.w	r5, r6, r5, lsl #4
 801bea6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801beaa:	920c      	str	r2, [sp, #48]	; 0x30
 801beac:	2201      	movs	r2, #1
 801beae:	f505 7323 	add.w	r3, r5, #652	; 0x28c
 801beb2:	f505 752b 	add.w	r5, r5, #684	; 0x2ac
 801beb6:	920d      	str	r2, [sp, #52]	; 0x34
 801beb8:	af10      	add	r7, sp, #64	; 0x40
 801beba:	f04f 0a01 	mov.w	sl, #1
 801bebe:	f04f 0b00 	mov.w	fp, #0
 801bec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bec4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801bec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801beca:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 801bece:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bed0:	e895 0003 	ldmia.w	r5, {r0, r1}
 801bed4:	e887 0003 	stmia.w	r7, {r0, r1}
 801bed8:	4671      	mov	r1, lr
 801beda:	4660      	mov	r0, ip
 801bedc:	47c0      	blx	r8
 801bede:	f8d6 3288 	ldr.w	r3, [r6, #648]	; 0x288
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	f43f af56 	beq.w	801bd94 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x7c>
 801bee8:	3401      	adds	r4, #1
 801beea:	b2e2      	uxtb	r2, r4
 801beec:	ab26      	add	r3, sp, #152	; 0x98
 801beee:	f002 0007 	and.w	r0, r2, #7
 801bef2:	1c51      	adds	r1, r2, #1
 801bef4:	4614      	mov	r4, r2
 801bef6:	eb03 03d2 	add.w	r3, r3, r2, lsr #3
 801befa:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 801befe:	4103      	asrs	r3, r0
 801bf00:	f003 0301 	and.w	r3, r3, #1
 801bf04:	2a63      	cmp	r2, #99	; 0x63
 801bf06:	bf88      	it	hi
 801bf08:	f043 0301 	orrhi.w	r3, r3, #1
 801bf0c:	b2ca      	uxtb	r2, r1
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d0ec      	beq.n	801beec <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x1d4>
 801bf12:	2c64      	cmp	r4, #100	; 0x64
 801bf14:	d1b5      	bne.n	801be82 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x16a>
 801bf16:	e73d      	b.n	801bd94 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0x7c>
 801bf18:	2400      	movs	r4, #0
 801bf1a:	e74f      	b.n	801bdbc <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv+0xa4>

0801bf1c <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE>:
 801bf1c:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d040      	beq.n	801bfa6 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE+0x8a>
 801bf24:	7ccb      	ldrb	r3, [r1, #19]
 801bf26:	333e      	adds	r3, #62	; 0x3e
 801bf28:	b2db      	uxtb	r3, r3
 801bf2a:	2b01      	cmp	r3, #1
 801bf2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf2e:	460d      	mov	r5, r1
 801bf30:	b08f      	sub	sp, #60	; 0x3c
 801bf32:	d936      	bls.n	801bfa2 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE+0x86>
 801bf34:	1d06      	adds	r6, r0, #4
 801bf36:	4604      	mov	r4, r0
 801bf38:	4630      	mov	r0, r6
 801bf3a:	f7fa fd38 	bl	80169ae <sys_mutex_lock>
 801bf3e:	4620      	mov	r0, r4
 801bf40:	f7ff feea 	bl	801bd18 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv>
 801bf44:	f104 0708 	add.w	r7, r4, #8
 801bf48:	f44f 7216 	mov.w	r2, #600	; 0x258
 801bf4c:	a806      	add	r0, sp, #24
 801bf4e:	4639      	mov	r1, r7
 801bf50:	f002 f872 	bl	801e038 <ucdr_init_buffer>
 801bf54:	2202      	movs	r2, #2
 801bf56:	4917      	ldr	r1, [pc, #92]	; (801bfb4 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE+0x98>)
 801bf58:	a806      	add	r0, sp, #24
 801bf5a:	f001 fc31 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801bf5e:	2100      	movs	r1, #0
 801bf60:	a806      	add	r0, sp, #24
 801bf62:	f001 fcd7 	bl	801d914 <ucdr_serialize_uint16_t>
 801bf66:	a906      	add	r1, sp, #24
 801bf68:	1d28      	adds	r0, r5, #4
 801bf6a:	f001 f931 	bl	801d1d0 <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer>
 801bf6e:	f8d4 4268 	ldr.w	r4, [r4, #616]	; 0x268
 801bf72:	a806      	add	r0, sp, #24
 801bf74:	6823      	ldr	r3, [r4, #0]
 801bf76:	691d      	ldr	r5, [r3, #16]
 801bf78:	f002 f88c 	bl	801e094 <ucdr_buffer_length>
 801bf7c:	490e      	ldr	r1, [pc, #56]	; (801bfb8 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE+0x9c>)
 801bf7e:	4684      	mov	ip, r0
 801bf80:	aa04      	add	r2, sp, #16
 801bf82:	4b0e      	ldr	r3, [pc, #56]	; (801bfbc <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE+0xa0>)
 801bf84:	c903      	ldmia	r1, {r0, r1}
 801bf86:	e882 0003 	stmia.w	r2, {r0, r1}
 801bf8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bf8c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801bf90:	fa1f f38c 	uxth.w	r3, ip
 801bf94:	463a      	mov	r2, r7
 801bf96:	4620      	mov	r0, r4
 801bf98:	2101      	movs	r1, #1
 801bf9a:	47a8      	blx	r5
 801bf9c:	4630      	mov	r0, r6
 801bf9e:	f7fa fd15 	bl	80169cc <sys_mutex_unlock>
 801bfa2:	b00f      	add	sp, #60	; 0x3c
 801bfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bfa6:	4770      	bx	lr
 801bfa8:	4630      	mov	r0, r6
 801bfaa:	f7fa fd0f 	bl	80169cc <sys_mutex_unlock>
 801bfae:	f004 fe6d 	bl	8020c8c <__cxa_end_cleanup>
 801bfb2:	bf00      	nop
 801bfb4:	08026610 	.word	0x08026610
 801bfb8:	08026624 	.word	0x08026624
 801bfbc:	08026614 	.word	0x08026614

0801bfc0 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE>:
 801bfc0:	f8d0 3270 	ldr.w	r3, [r0, #624]	; 0x270
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d040      	beq.n	801c04a <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE+0x8a>
 801bfc8:	7ccb      	ldrb	r3, [r1, #19]
 801bfca:	2bc7      	cmp	r3, #199	; 0xc7
 801bfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfce:	460d      	mov	r5, r1
 801bfd0:	b08f      	sub	sp, #60	; 0x3c
 801bfd2:	d038      	beq.n	801c046 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE+0x86>
 801bfd4:	2bc4      	cmp	r3, #196	; 0xc4
 801bfd6:	d036      	beq.n	801c046 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE+0x86>
 801bfd8:	1d06      	adds	r6, r0, #4
 801bfda:	4604      	mov	r4, r0
 801bfdc:	4630      	mov	r0, r6
 801bfde:	f7fa fce6 	bl	80169ae <sys_mutex_lock>
 801bfe2:	4620      	mov	r0, r4
 801bfe4:	f7ff fe98 	bl	801bd18 <_ZN4rtps9SEDPAgent26tryMatchUnmatchedEndpointsEv>
 801bfe8:	f104 0708 	add.w	r7, r4, #8
 801bfec:	f44f 7216 	mov.w	r2, #600	; 0x258
 801bff0:	a806      	add	r0, sp, #24
 801bff2:	4639      	mov	r1, r7
 801bff4:	f002 f820 	bl	801e038 <ucdr_init_buffer>
 801bff8:	2202      	movs	r2, #2
 801bffa:	4917      	ldr	r1, [pc, #92]	; (801c058 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE+0x98>)
 801bffc:	a806      	add	r0, sp, #24
 801bffe:	f001 fbdf 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801c002:	2100      	movs	r1, #0
 801c004:	a806      	add	r0, sp, #24
 801c006:	f001 fc85 	bl	801d914 <ucdr_serialize_uint16_t>
 801c00a:	a906      	add	r1, sp, #24
 801c00c:	1d28      	adds	r0, r5, #4
 801c00e:	f001 f8df 	bl	801d1d0 <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer>
 801c012:	f8d4 4270 	ldr.w	r4, [r4, #624]	; 0x270
 801c016:	a806      	add	r0, sp, #24
 801c018:	6823      	ldr	r3, [r4, #0]
 801c01a:	691d      	ldr	r5, [r3, #16]
 801c01c:	f002 f83a 	bl	801e094 <ucdr_buffer_length>
 801c020:	490e      	ldr	r1, [pc, #56]	; (801c05c <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE+0x9c>)
 801c022:	4684      	mov	ip, r0
 801c024:	aa04      	add	r2, sp, #16
 801c026:	4b0e      	ldr	r3, [pc, #56]	; (801c060 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE+0xa0>)
 801c028:	c903      	ldmia	r1, {r0, r1}
 801c02a:	e882 0003 	stmia.w	r2, {r0, r1}
 801c02e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c030:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c034:	fa1f f38c 	uxth.w	r3, ip
 801c038:	463a      	mov	r2, r7
 801c03a:	4620      	mov	r0, r4
 801c03c:	2101      	movs	r1, #1
 801c03e:	47a8      	blx	r5
 801c040:	4630      	mov	r0, r6
 801c042:	f7fa fcc3 	bl	80169cc <sys_mutex_unlock>
 801c046:	b00f      	add	sp, #60	; 0x3c
 801c048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c04a:	4770      	bx	lr
 801c04c:	4630      	mov	r0, r6
 801c04e:	f7fa fcbd 	bl	80169cc <sys_mutex_unlock>
 801c052:	f004 fe1b 	bl	8020c8c <__cxa_end_cleanup>
 801c056:	bf00      	nop
 801c058:	08026610 	.word	0x08026610
 801c05c:	08026624 	.word	0x08026624
 801c060:	08026614 	.word	0x08026614

0801c064 <_ZN4rtps9SPDPAgent12runBroadcastEPv>:
 801c064:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c066:	4604      	mov	r4, r0
 801c068:	b087      	sub	sp, #28
 801c06a:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 801c06e:	f002 f811 	bl	801e094 <ucdr_buffer_length>
 801c072:	491a      	ldr	r1, [pc, #104]	; (801c0dc <_ZN4rtps9SPDPAgent12runBroadcastEPv+0x78>)
 801c074:	6865      	ldr	r5, [r4, #4]
 801c076:	4606      	mov	r6, r0
 801c078:	aa04      	add	r2, sp, #16
 801c07a:	4b19      	ldr	r3, [pc, #100]	; (801c0e0 <_ZN4rtps9SPDPAgent12runBroadcastEPv+0x7c>)
 801c07c:	682f      	ldr	r7, [r5, #0]
 801c07e:	c903      	ldmia	r1, {r0, r1}
 801c080:	e882 0003 	stmia.w	r2, {r0, r1}
 801c084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c086:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801c08a:	4628      	mov	r0, r5
 801c08c:	b2b3      	uxth	r3, r6
 801c08e:	693d      	ldr	r5, [r7, #16]
 801c090:	2101      	movs	r1, #1
 801c092:	f8d4 254c 	ldr.w	r2, [r4, #1356]	; 0x54c
 801c096:	47a8      	blx	r5
 801c098:	7f23      	ldrb	r3, [r4, #28]
 801c09a:	b19b      	cbz	r3, 801c0c4 <_ZN4rtps9SPDPAgent12runBroadcastEPv+0x60>
 801c09c:	2500      	movs	r5, #0
 801c09e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c0a2:	f7ed fb2b 	bl	80096fc <vTaskDelay>
 801c0a6:	6860      	ldr	r0, [r4, #4]
 801c0a8:	6803      	ldr	r3, [r0, #0]
 801c0aa:	695b      	ldr	r3, [r3, #20]
 801c0ac:	4798      	blx	r3
 801c0ae:	f894 356c 	ldrb.w	r3, [r4, #1388]	; 0x56c
 801c0b2:	2b02      	cmp	r3, #2
 801c0b4:	f103 0301 	add.w	r3, r3, #1
 801c0b8:	d006      	beq.n	801c0c8 <_ZN4rtps9SPDPAgent12runBroadcastEPv+0x64>
 801c0ba:	7f22      	ldrb	r2, [r4, #28]
 801c0bc:	f884 356c 	strb.w	r3, [r4, #1388]	; 0x56c
 801c0c0:	2a00      	cmp	r2, #0
 801c0c2:	d1ec      	bne.n	801c09e <_ZN4rtps9SPDPAgent12runBroadcastEPv+0x3a>
 801c0c4:	b007      	add	sp, #28
 801c0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0c8:	6820      	ldr	r0, [r4, #0]
 801c0ca:	f884 556c 	strb.w	r5, [r4, #1388]	; 0x56c
 801c0ce:	f7ff fb27 	bl	801b720 <_ZN4rtps11Participant23checkAndResetHeartbeatsEv>
 801c0d2:	7f23      	ldrb	r3, [r4, #28]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d1e2      	bne.n	801c09e <_ZN4rtps9SPDPAgent12runBroadcastEPv+0x3a>
 801c0d8:	b007      	add	sp, #28
 801c0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0dc:	08026650 	.word	0x08026650
 801c0e0:	08026640 	.word	0x08026640

0801c0e4 <_ZN4rtps9SPDPAgentD1Ev>:
 801c0e4:	f890 3574 	ldrb.w	r3, [r0, #1396]	; 0x574
 801c0e8:	b510      	push	{r4, lr}
 801c0ea:	4604      	mov	r4, r0
 801c0ec:	b90b      	cbnz	r3, 801c0f2 <_ZN4rtps9SPDPAgentD1Ev+0xe>
 801c0ee:	4620      	mov	r0, r4
 801c0f0:	bd10      	pop	{r4, pc}
 801c0f2:	f500 60ae 	add.w	r0, r0, #1392	; 0x570
 801c0f6:	f7fa fc4d 	bl	8016994 <sys_mutex_free>
 801c0fa:	4620      	mov	r0, r4
 801c0fc:	bd10      	pop	{r4, pc}
 801c0fe:	bf00      	nop

0801c100 <_ZN4rtps9SPDPAgent5startEv>:
 801c100:	7f03      	ldrb	r3, [r0, #28]
 801c102:	b103      	cbz	r3, 801c106 <_ZN4rtps9SPDPAgent5startEv+0x6>
 801c104:	4770      	bx	lr
 801c106:	b510      	push	{r4, lr}
 801c108:	2113      	movs	r1, #19
 801c10a:	b082      	sub	sp, #8
 801c10c:	2401      	movs	r4, #1
 801c10e:	4602      	mov	r2, r0
 801c110:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801c114:	7704      	strb	r4, [r0, #28]
 801c116:	9100      	str	r1, [sp, #0]
 801c118:	4902      	ldr	r1, [pc, #8]	; (801c124 <_ZN4rtps9SPDPAgent5startEv+0x24>)
 801c11a:	4803      	ldr	r0, [pc, #12]	; (801c128 <_ZN4rtps9SPDPAgent5startEv+0x28>)
 801c11c:	f7fa fc63 	bl	80169e6 <sys_thread_new>
 801c120:	b002      	add	sp, #8
 801c122:	bd10      	pop	{r4, pc}
 801c124:	0801c065 	.word	0x0801c065
 801c128:	0802662c 	.word	0x0802662c

0801c12c <_ZN4rtps9SPDPAgent4stopEv>:
 801c12c:	2300      	movs	r3, #0
 801c12e:	7703      	strb	r3, [r0, #28]
 801c130:	4770      	bx	lr
 801c132:	bf00      	nop

0801c134 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv>:
 801c134:	f8d0 335c 	ldr.w	r3, [r0, #860]	; 0x35c
 801c138:	3301      	adds	r3, #1
 801c13a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c13e:	4604      	mov	r4, r0
 801c140:	b0a5      	sub	sp, #148	; 0x94
 801c142:	d13b      	bne.n	801c1bc <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x88>
 801c144:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 801c148:	f504 755d 	add.w	r5, r4, #884	; 0x374
 801c14c:	3301      	adds	r3, #1
 801c14e:	d115      	bne.n	801c17c <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x48>
 801c150:	f8d4 338c 	ldr.w	r3, [r4, #908]	; 0x38c
 801c154:	f504 7563 	add.w	r5, r4, #908	; 0x38c
 801c158:	3301      	adds	r3, #1
 801c15a:	d117      	bne.n	801c18c <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x58>
 801c15c:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
 801c160:	f504 7569 	add.w	r5, r4, #932	; 0x3a4
 801c164:	3301      	adds	r3, #1
 801c166:	d119      	bne.n	801c19c <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x68>
 801c168:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 801c16c:	f504 756f 	add.w	r5, r4, #956	; 0x3bc
 801c170:	3301      	adds	r3, #1
 801c172:	d11b      	bne.n	801c1ac <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x78>
 801c174:	2000      	movs	r0, #0
 801c176:	b025      	add	sp, #148	; 0x94
 801c178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c17c:	f8d4 0388 	ldr.w	r0, [r4, #904]	; 0x388
 801c180:	f001 fa02 	bl	801d588 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
 801c184:	2800      	cmp	r0, #0
 801c186:	d0e3      	beq.n	801c150 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x1c>
 801c188:	2601      	movs	r6, #1
 801c18a:	e020      	b.n	801c1ce <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x9a>
 801c18c:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 801c190:	f001 f9fa 	bl	801d588 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
 801c194:	2800      	cmp	r0, #0
 801c196:	d0e1      	beq.n	801c15c <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x28>
 801c198:	2602      	movs	r6, #2
 801c19a:	e018      	b.n	801c1ce <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x9a>
 801c19c:	f8d4 03b8 	ldr.w	r0, [r4, #952]	; 0x3b8
 801c1a0:	f001 f9f2 	bl	801d588 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
 801c1a4:	2800      	cmp	r0, #0
 801c1a6:	d0df      	beq.n	801c168 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x34>
 801c1a8:	2603      	movs	r6, #3
 801c1aa:	e010      	b.n	801c1ce <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x9a>
 801c1ac:	f8d4 03d0 	ldr.w	r0, [r4, #976]	; 0x3d0
 801c1b0:	f001 f9ea 	bl	801d588 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
 801c1b4:	2800      	cmp	r0, #0
 801c1b6:	d0dd      	beq.n	801c174 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x40>
 801c1b8:	2604      	movs	r6, #4
 801c1ba:	e008      	b.n	801c1ce <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x9a>
 801c1bc:	f500 7557 	add.w	r5, r0, #860	; 0x35c
 801c1c0:	f8d0 0370 	ldr.w	r0, [r0, #880]	; 0x370
 801c1c4:	f001 f9e0 	bl	801d588 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
 801c1c8:	2800      	cmp	r0, #0
 801c1ca:	d0bb      	beq.n	801c144 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x10>
 801c1cc:	2600      	movs	r6, #0
 801c1ce:	696b      	ldr	r3, [r5, #20]
 801c1d0:	a801      	add	r0, sp, #4
 801c1d2:	9301      	str	r3, [sp, #4]
 801c1d4:	f7f9 fb20 	bl	8015818 <ip4addr_ntoa>
 801c1d8:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 801c1dc:	075a      	lsls	r2, r3, #29
 801c1de:	d538      	bpl.n	801c252 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x11e>
 801c1e0:	4a89      	ldr	r2, [pc, #548]	; (801c408 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x2d4>)
 801c1e2:	ab02      	add	r3, sp, #8
 801c1e4:	f8d4 0342 	ldr.w	r0, [r4, #834]	; 0x342
 801c1e8:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801c1ec:	6817      	ldr	r7, [r2, #0]
 801c1ee:	469c      	mov	ip, r3
 801c1f0:	f8d4 1346 	ldr.w	r1, [r4, #838]	; 0x346
 801c1f4:	f04f 08c2 	mov.w	r8, #194	; 0xc2
 801c1f8:	f8d4 234a 	ldr.w	r2, [r4, #842]	; 0x34a
 801c1fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 801c200:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801c204:	f8ad 7014 	strh.w	r7, [sp, #20]
 801c208:	f88d e016 	strb.w	lr, [sp, #22]
 801c20c:	2700      	movs	r7, #0
 801c20e:	f10d 0e18 	add.w	lr, sp, #24
 801c212:	f505 7557 	add.w	r5, r5, #860	; 0x35c
 801c216:	970a      	str	r7, [sp, #40]	; 0x28
 801c218:	f04f 0900 	mov.w	r9, #0
 801c21c:	af0e      	add	r7, sp, #56	; 0x38
 801c21e:	c307      	stmia	r3!, {r0, r1, r2}
 801c220:	2301      	movs	r3, #1
 801c222:	f88d 8017 	strb.w	r8, [sp, #23]
 801c226:	f04f 0801 	mov.w	r8, #1
 801c22a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c22c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801c230:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801c234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c236:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 801c23a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c23c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c240:	e887 0003 	stmia.w	r7, {r0, r1}
 801c244:	6920      	ldr	r0, [r4, #16]
 801c246:	4671      	mov	r1, lr
 801c248:	6803      	ldr	r3, [r0, #0]
 801c24a:	68db      	ldr	r3, [r3, #12]
 801c24c:	4798      	blx	r3
 801c24e:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 801c252:	06dd      	lsls	r5, r3, #27
 801c254:	d53a      	bpl.n	801c2cc <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x198>
 801c256:	4b6c      	ldr	r3, [pc, #432]	; (801c408 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x2d4>)
 801c258:	af02      	add	r7, sp, #8
 801c25a:	f8d4 0342 	ldr.w	r0, [r4, #834]	; 0x342
 801c25e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801c262:	f8d3 c004 	ldr.w	ip, [r3, #4]
 801c266:	f04f 0ec2 	mov.w	lr, #194	; 0xc2
 801c26a:	f8d4 1346 	ldr.w	r1, [r4, #838]	; 0x346
 801c26e:	463b      	mov	r3, r7
 801c270:	f8d4 234a 	ldr.w	r2, [r4, #842]	; 0x34a
 801c274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 801c278:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801c27c:	f8ad c014 	strh.w	ip, [sp, #20]
 801c280:	f88d 8016 	strb.w	r8, [sp, #22]
 801c284:	f10d 0c18 	add.w	ip, sp, #24
 801c288:	f04f 0800 	mov.w	r8, #0
 801c28c:	f505 7557 	add.w	r5, r5, #860	; 0x35c
 801c290:	f04f 0900 	mov.w	r9, #0
 801c294:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801c298:	f04f 0801 	mov.w	r8, #1
 801c29c:	c707      	stmia	r7!, {r0, r1, r2}
 801c29e:	2201      	movs	r2, #1
 801c2a0:	f88d e017 	strb.w	lr, [sp, #23]
 801c2a4:	af0e      	add	r7, sp, #56	; 0x38
 801c2a6:	920b      	str	r2, [sp, #44]	; 0x2c
 801c2a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c2aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 801c2ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c2b0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 801c2b4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c2b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c2ba:	e887 0003 	stmia.w	r7, {r0, r1}
 801c2be:	69a0      	ldr	r0, [r4, #24]
 801c2c0:	4661      	mov	r1, ip
 801c2c2:	6803      	ldr	r3, [r0, #0]
 801c2c4:	68db      	ldr	r3, [r3, #12]
 801c2c6:	4798      	blx	r3
 801c2c8:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 801c2cc:	0718      	lsls	r0, r3, #28
 801c2ce:	d44f      	bmi.n	801c370 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x23c>
 801c2d0:	0699      	lsls	r1, r3, #26
 801c2d2:	d403      	bmi.n	801c2dc <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x1a8>
 801c2d4:	2001      	movs	r0, #1
 801c2d6:	b025      	add	sp, #148	; 0x94
 801c2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2dc:	4a4a      	ldr	r2, [pc, #296]	; (801c408 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x2d4>)
 801c2de:	ab02      	add	r3, sp, #8
 801c2e0:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801c2e4:	f8d4 0342 	ldr.w	r0, [r4, #834]	; 0x342
 801c2e8:	6856      	ldr	r6, [r2, #4]
 801c2ea:	469c      	mov	ip, r3
 801c2ec:	f8d4 1346 	ldr.w	r1, [r4, #838]	; 0x346
 801c2f0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801c2f4:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 801c2f8:	f8d4 234a 	ldr.w	r2, [r4, #842]	; 0x34a
 801c2fc:	27c7      	movs	r7, #199	; 0xc7
 801c2fe:	f8ad 6014 	strh.w	r6, [sp, #20]
 801c302:	f88d e016 	strb.w	lr, [sp, #22]
 801c306:	f10d 0818 	add.w	r8, sp, #24
 801c30a:	f505 7557 	add.w	r5, r5, #860	; 0x35c
 801c30e:	2600      	movs	r6, #0
 801c310:	f04f 0a00 	mov.w	sl, #0
 801c314:	f04f 0b20 	mov.w	fp, #32
 801c318:	c307      	stmia	r3!, {r0, r1, r2}
 801c31a:	f88d 7017 	strb.w	r7, [sp, #23]
 801c31e:	af0a      	add	r7, sp, #40	; 0x28
 801c320:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801c324:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 801c328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c32a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801c32c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c334:	2220      	movs	r2, #32
 801c336:	e887 0003 	stmia.w	r7, {r0, r1}
 801c33a:	4631      	mov	r1, r6
 801c33c:	a81a      	add	r0, sp, #104	; 0x68
 801c33e:	9310      	str	r3, [sp, #64]	; 0x40
 801c340:	9611      	str	r6, [sp, #68]	; 0x44
 801c342:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
 801c346:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
 801c34a:	f88d 605a 	strb.w	r6, [sp, #90]	; 0x5a
 801c34e:	9617      	str	r6, [sp, #92]	; 0x5c
 801c350:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
 801c354:	e9cd ab18 	strd	sl, fp, [sp, #96]	; 0x60
 801c358:	f005 fbba 	bl	8021ad0 <memset>
 801c35c:	6960      	ldr	r0, [r4, #20]
 801c35e:	4641      	mov	r1, r8
 801c360:	9622      	str	r6, [sp, #136]	; 0x88
 801c362:	6803      	ldr	r3, [r0, #0]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	4798      	blx	r3
 801c368:	2001      	movs	r0, #1
 801c36a:	b025      	add	sp, #148	; 0x94
 801c36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c370:	4a25      	ldr	r2, [pc, #148]	; (801c408 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x2d4>)
 801c372:	ab02      	add	r3, sp, #8
 801c374:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801c378:	f8d4 0342 	ldr.w	r0, [r4, #834]	; 0x342
 801c37c:	6817      	ldr	r7, [r2, #0]
 801c37e:	469e      	mov	lr, r3
 801c380:	f8d4 1346 	ldr.w	r1, [r4, #838]	; 0x346
 801c384:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
 801c388:	f8d4 234a 	ldr.w	r2, [r4, #842]	; 0x34a
 801c38c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 801c390:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801c394:	f8ad 7014 	strh.w	r7, [sp, #20]
 801c398:	f88d 8016 	strb.w	r8, [sp, #22]
 801c39c:	f10d 0a18 	add.w	sl, sp, #24
 801c3a0:	f505 7557 	add.w	r5, r5, #860	; 0x35c
 801c3a4:	2700      	movs	r7, #0
 801c3a6:	f04f 0800 	mov.w	r8, #0
 801c3aa:	f04f 0920 	mov.w	r9, #32
 801c3ae:	c307      	stmia	r3!, {r0, r1, r2}
 801c3b0:	f88d c017 	strb.w	ip, [sp, #23]
 801c3b4:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801c3b8:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 801c3bc:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 801c3c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c3c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c3c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c3ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c3ce:	2220      	movs	r2, #32
 801c3d0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c3d4:	4639      	mov	r1, r7
 801c3d6:	a81a      	add	r0, sp, #104	; 0x68
 801c3d8:	9310      	str	r3, [sp, #64]	; 0x40
 801c3da:	9711      	str	r7, [sp, #68]	; 0x44
 801c3dc:	e9cd 7712 	strd	r7, r7, [sp, #72]	; 0x48
 801c3e0:	f8ad 7058 	strh.w	r7, [sp, #88]	; 0x58
 801c3e4:	f88d 705a 	strb.w	r7, [sp, #90]	; 0x5a
 801c3e8:	9717      	str	r7, [sp, #92]	; 0x5c
 801c3ea:	e9cd 7714 	strd	r7, r7, [sp, #80]	; 0x50
 801c3ee:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 801c3f2:	f005 fb6d 	bl	8021ad0 <memset>
 801c3f6:	68e0      	ldr	r0, [r4, #12]
 801c3f8:	4651      	mov	r1, sl
 801c3fa:	9722      	str	r7, [sp, #136]	; 0x88
 801c3fc:	6803      	ldr	r3, [r0, #0]
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	4798      	blx	r3
 801c402:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 801c406:	e763      	b.n	801c2d0 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x19c>
 801c408:	0802611c 	.word	0x0802611c

0801c40c <_ZN4rtps9SPDPAgent16processProxyDataEv>:
 801c40c:	b570      	push	{r4, r5, r6, lr}
 801c40e:	6806      	ldr	r6, [r0, #0]
 801c410:	f200 3542 	addw	r5, r0, #834	; 0x342
 801c414:	4604      	mov	r4, r0
 801c416:	220c      	movs	r2, #12
 801c418:	4628      	mov	r0, r5
 801c41a:	4631      	mov	r1, r6
 801c41c:	f005 fb20 	bl	8021a60 <memcmp>
 801c420:	b900      	cbnz	r0, 801c424 <_ZN4rtps9SPDPAgent16processProxyDataEv+0x18>
 801c422:	bd70      	pop	{r4, r5, r6, pc}
 801c424:	4630      	mov	r0, r6
 801c426:	4629      	mov	r1, r5
 801c428:	f7ff f808 	bl	801b43c <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE>
 801c42c:	b128      	cbz	r0, 801c43a <_ZN4rtps9SPDPAgent16processProxyDataEv+0x2e>
 801c42e:	4629      	mov	r1, r5
 801c430:	6820      	ldr	r0, [r4, #0]
 801c432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c436:	f7ff b853 	b.w	801b4e0 <_ZN4rtps11Participant34refreshRemoteParticipantLivelinessERKNS_12GuidPrefix_tE>
 801c43a:	f504 7150 	add.w	r1, r4, #832	; 0x340
 801c43e:	6820      	ldr	r0, [r4, #0]
 801c440:	f7fe ff38 	bl	801b2b4 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE>
 801c444:	b900      	cbnz	r0, 801c448 <_ZN4rtps9SPDPAgent16processProxyDataEv+0x3c>
 801c446:	e7fe      	b.n	801c446 <_ZN4rtps9SPDPAgent16processProxyDataEv+0x3a>
 801c448:	4620      	mov	r0, r4
 801c44a:	f7ff fe73 	bl	801c134 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv>
 801c44e:	6860      	ldr	r0, [r4, #4]
 801c450:	6803      	ldr	r3, [r0, #0]
 801c452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c456:	695b      	ldr	r3, [r3, #20]
 801c458:	4718      	bx	r3
 801c45a:	bf00      	nop

0801c45c <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE>:
 801c45c:	f890 3574 	ldrb.w	r3, [r0, #1396]	; 0x574
 801c460:	b903      	cbnz	r3, 801c464 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x8>
 801c462:	4770      	bx	lr
 801c464:	b570      	push	{r4, r5, r6, lr}
 801c466:	f500 66ae 	add.w	r6, r0, #1392	; 0x570
 801c46a:	460d      	mov	r5, r1
 801c46c:	b08a      	sub	sp, #40	; 0x28
 801c46e:	4604      	mov	r4, r0
 801c470:	4630      	mov	r0, r6
 801c472:	f7fa fa9c 	bl	80169ae <sys_mutex_lock>
 801c476:	88ea      	ldrh	r2, [r5, #6]
 801c478:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 801c47c:	d813      	bhi.n	801c4a6 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x4a>
 801c47e:	f204 13ad 	addw	r3, r4, #429	; 0x1ad
 801c482:	6829      	ldr	r1, [r5, #0]
 801c484:	4618      	mov	r0, r3
 801c486:	f005 fafb 	bl	8021a80 <memcpy>
 801c48a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801c48e:	4601      	mov	r1, r0
 801c490:	a802      	add	r0, sp, #8
 801c492:	f001 fdd1 	bl	801e038 <ucdr_init_buffer>
 801c496:	792b      	ldrb	r3, [r5, #4]
 801c498:	2b01      	cmp	r3, #1
 801c49a:	d009      	beq.n	801c4b0 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x54>
 801c49c:	4630      	mov	r0, r6
 801c49e:	f7fa fa95 	bl	80169cc <sys_mutex_unlock>
 801c4a2:	b00a      	add	sp, #40	; 0x28
 801c4a4:	bd70      	pop	{r4, r5, r6, pc}
 801c4a6:	4630      	mov	r0, r6
 801c4a8:	f7fa fa90 	bl	80169cc <sys_mutex_unlock>
 801c4ac:	b00a      	add	sp, #40	; 0x28
 801c4ae:	bd70      	pop	{r4, r5, r6, pc}
 801c4b0:	2300      	movs	r3, #0
 801c4b2:	2202      	movs	r2, #2
 801c4b4:	a802      	add	r0, sp, #8
 801c4b6:	a901      	add	r1, sp, #4
 801c4b8:	f8ad 3004 	strh.w	r3, [sp, #4]
 801c4bc:	f001 f9b2 	bl	801d824 <ucdr_deserialize_array_uint8_t>
 801c4c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c4c4:	a901      	add	r1, sp, #4
 801c4c6:	2202      	movs	r2, #2
 801c4c8:	a802      	add	r0, sp, #8
 801c4ca:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 801c4ce:	fab3 f383 	clz	r3, r3
 801c4d2:	095b      	lsrs	r3, r3, #5
 801c4d4:	f88d 301c 	strb.w	r3, [sp, #28]
 801c4d8:	f001 f9a4 	bl	801d824 <ucdr_deserialize_array_uint8_t>
 801c4dc:	a902      	add	r1, sp, #8
 801c4de:	f504 7050 	add.w	r0, r4, #832	; 0x340
 801c4e2:	f003 fef1 	bl	80202c8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer>
 801c4e6:	f88d 0004 	strb.w	r0, [sp, #4]
 801c4ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d0d4      	beq.n	801c49c <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x40>
 801c4f2:	4620      	mov	r0, r4
 801c4f4:	f7ff ff8a 	bl	801c40c <_ZN4rtps9SPDPAgent16processProxyDataEv>
 801c4f8:	e7d0      	b.n	801c49c <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x40>
 801c4fa:	4630      	mov	r0, r6
 801c4fc:	f7fa fa66 	bl	80169cc <sys_mutex_unlock>
 801c500:	f004 fbc4 	bl	8020c8c <__cxa_end_cleanup>

0801c504 <_ZN4rtps9SPDPAgent24addParticipantParametersEv>:
 801c504:	6801      	ldr	r1, [r0, #0]
 801c506:	f641 4cf3 	movw	ip, #7411	; 0x1cf3
 801c50a:	4b69      	ldr	r3, [pc, #420]	; (801c6b0 <_ZN4rtps9SPDPAgent24addParticipantParametersEv+0x1ac>)
 801c50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c50e:	681f      	ldr	r7, [r3, #0]
 801c510:	b093      	sub	sp, #76	; 0x4c
 801c512:	7b4b      	ldrb	r3, [r1, #13]
 801c514:	2500      	movs	r5, #0
 801c516:	4606      	mov	r6, r0
 801c518:	f991 200c 	ldrsb.w	r2, [r1, #12]
 801c51c:	ebc3 1043 	rsb	r0, r3, r3, lsl #5
 801c520:	9705      	str	r7, [sp, #20]
 801c522:	9502      	str	r5, [sp, #8]
 801c524:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c528:	9508      	str	r5, [sp, #32]
 801c52a:	950e      	str	r5, [sp, #56]	; 0x38
 801c52c:	4410      	add	r0, r2
 801c52e:	e9cd 5503 	strd	r5, r5, [sp, #12]
 801c532:	7b4b      	ldrb	r3, [r1, #13]
 801c534:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 801c538:	f991 400c 	ldrsb.w	r4, [r1, #12]
 801c53c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801c540:	970b      	str	r7, [sp, #44]	; 0x2c
 801c542:	9509      	str	r5, [sp, #36]	; 0x24
 801c544:	b280      	uxth	r0, r0
 801c546:	950a      	str	r5, [sp, #40]	; 0x28
 801c548:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c54c:	7b49      	ldrb	r1, [r1, #13]
 801c54e:	f641 42f2 	movw	r2, #7410	; 0x1cf2
 801c552:	441c      	add	r4, r3
 801c554:	f641 43e8 	movw	r3, #7400	; 0x1ce8
 801c558:	ebc1 1741 	rsb	r7, r1, r1, lsl #5
 801c55c:	f8df c160 	ldr.w	ip, [pc, #352]	; 801c6c0 <_ZN4rtps9SPDPAgent24addParticipantParametersEv+0x1bc>
 801c560:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801c564:	f206 544c 	addw	r4, r6, #1356	; 0x54c
 801c568:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 801c56c:	2701      	movs	r7, #1
 801c56e:	b292      	uxth	r2, r2
 801c570:	9001      	str	r0, [sp, #4]
 801c572:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801c576:	4620      	mov	r0, r4
 801c578:	9207      	str	r2, [sp, #28]
 801c57a:	2202      	movs	r2, #2
 801c57c:	b29b      	uxth	r3, r3
 801c57e:	494d      	ldr	r1, [pc, #308]	; (801c6b4 <_ZN4rtps9SPDPAgent24addParticipantParametersEv+0x1b0>)
 801c580:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
 801c584:	930d      	str	r3, [sp, #52]	; 0x34
 801c586:	950f      	str	r5, [sp, #60]	; 0x3c
 801c588:	9510      	str	r5, [sp, #64]	; 0x40
 801c58a:	9700      	str	r7, [sp, #0]
 801c58c:	9706      	str	r7, [sp, #24]
 801c58e:	970c      	str	r7, [sp, #48]	; 0x30
 801c590:	f001 f916 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801c594:	4629      	mov	r1, r5
 801c596:	4620      	mov	r0, r4
 801c598:	f001 f9bc 	bl	801d914 <ucdr_serialize_uint16_t>
 801c59c:	4620      	mov	r0, r4
 801c59e:	2115      	movs	r1, #21
 801c5a0:	f001 f9b8 	bl	801d914 <ucdr_serialize_uint16_t>
 801c5a4:	4620      	mov	r0, r4
 801c5a6:	2104      	movs	r1, #4
 801c5a8:	f001 f9b4 	bl	801d914 <ucdr_serialize_uint16_t>
 801c5ac:	4620      	mov	r0, r4
 801c5ae:	2102      	movs	r1, #2
 801c5b0:	f001 f984 	bl	801d8bc <ucdr_serialize_uint8_t>
 801c5b4:	4620      	mov	r0, r4
 801c5b6:	2102      	movs	r1, #2
 801c5b8:	f001 f980 	bl	801d8bc <ucdr_serialize_uint8_t>
 801c5bc:	4620      	mov	r0, r4
 801c5be:	2102      	movs	r1, #2
 801c5c0:	f001 fd8e 	bl	801e0e0 <ucdr_advance_buffer>
 801c5c4:	4620      	mov	r0, r4
 801c5c6:	2116      	movs	r1, #22
 801c5c8:	f001 f9a4 	bl	801d914 <ucdr_serialize_uint16_t>
 801c5cc:	4620      	mov	r0, r4
 801c5ce:	2104      	movs	r1, #4
 801c5d0:	f001 f9a0 	bl	801d914 <ucdr_serialize_uint16_t>
 801c5d4:	2202      	movs	r2, #2
 801c5d6:	4620      	mov	r0, r4
 801c5d8:	4937      	ldr	r1, [pc, #220]	; (801c6b8 <_ZN4rtps9SPDPAgent24addParticipantParametersEv+0x1b4>)
 801c5da:	f001 f8f1 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801c5de:	4620      	mov	r0, r4
 801c5e0:	2102      	movs	r1, #2
 801c5e2:	f001 fd7d 	bl	801e0e0 <ucdr_advance_buffer>
 801c5e6:	4620      	mov	r0, r4
 801c5e8:	2131      	movs	r1, #49	; 0x31
 801c5ea:	f001 f993 	bl	801d914 <ucdr_serialize_uint16_t>
 801c5ee:	4620      	mov	r0, r4
 801c5f0:	2118      	movs	r1, #24
 801c5f2:	f001 f98f 	bl	801d914 <ucdr_serialize_uint16_t>
 801c5f6:	2218      	movs	r2, #24
 801c5f8:	4669      	mov	r1, sp
 801c5fa:	4620      	mov	r0, r4
 801c5fc:	f001 f8e0 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801c600:	4620      	mov	r0, r4
 801c602:	2132      	movs	r1, #50	; 0x32
 801c604:	f001 f986 	bl	801d914 <ucdr_serialize_uint16_t>
 801c608:	4620      	mov	r0, r4
 801c60a:	2118      	movs	r1, #24
 801c60c:	f001 f982 	bl	801d914 <ucdr_serialize_uint16_t>
 801c610:	2218      	movs	r2, #24
 801c612:	4620      	mov	r0, r4
 801c614:	eb0d 0102 	add.w	r1, sp, r2
 801c618:	f001 f8d2 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801c61c:	4620      	mov	r0, r4
 801c61e:	2133      	movs	r1, #51	; 0x33
 801c620:	f001 f978 	bl	801d914 <ucdr_serialize_uint16_t>
 801c624:	4620      	mov	r0, r4
 801c626:	2118      	movs	r1, #24
 801c628:	f001 f974 	bl	801d914 <ucdr_serialize_uint16_t>
 801c62c:	2218      	movs	r2, #24
 801c62e:	a90c      	add	r1, sp, #48	; 0x30
 801c630:	4620      	mov	r0, r4
 801c632:	f001 f8c5 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801c636:	4620      	mov	r0, r4
 801c638:	2102      	movs	r1, #2
 801c63a:	f001 f96b 	bl	801d914 <ucdr_serialize_uint16_t>
 801c63e:	4620      	mov	r0, r4
 801c640:	2108      	movs	r1, #8
 801c642:	f001 f967 	bl	801d914 <ucdr_serialize_uint16_t>
 801c646:	4620      	mov	r0, r4
 801c648:	2164      	movs	r1, #100	; 0x64
 801c64a:	f001 fb7f 	bl	801dd4c <ucdr_serialize_int32_t>
 801c64e:	4629      	mov	r1, r5
 801c650:	4620      	mov	r0, r4
 801c652:	f001 fa53 	bl	801dafc <ucdr_serialize_uint32_t>
 801c656:	4620      	mov	r0, r4
 801c658:	2150      	movs	r1, #80	; 0x50
 801c65a:	f001 f95b 	bl	801d914 <ucdr_serialize_uint16_t>
 801c65e:	4620      	mov	r0, r4
 801c660:	2110      	movs	r1, #16
 801c662:	f001 f957 	bl	801d914 <ucdr_serialize_uint16_t>
 801c666:	6831      	ldr	r1, [r6, #0]
 801c668:	4620      	mov	r0, r4
 801c66a:	220c      	movs	r2, #12
 801c66c:	f001 f8a8 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801c670:	2203      	movs	r2, #3
 801c672:	4620      	mov	r0, r4
 801c674:	4911      	ldr	r1, [pc, #68]	; (801c6bc <_ZN4rtps9SPDPAgent24addParticipantParametersEv+0x1b8>)
 801c676:	f001 f8a3 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801c67a:	4620      	mov	r0, r4
 801c67c:	21c1      	movs	r1, #193	; 0xc1
 801c67e:	f001 f91d 	bl	801d8bc <ucdr_serialize_uint8_t>
 801c682:	4620      	mov	r0, r4
 801c684:	2158      	movs	r1, #88	; 0x58
 801c686:	f001 f945 	bl	801d914 <ucdr_serialize_uint16_t>
 801c68a:	4620      	mov	r0, r4
 801c68c:	2104      	movs	r1, #4
 801c68e:	f001 f941 	bl	801d914 <ucdr_serialize_uint16_t>
 801c692:	4620      	mov	r0, r4
 801c694:	213f      	movs	r1, #63	; 0x3f
 801c696:	f001 fa31 	bl	801dafc <ucdr_serialize_uint32_t>
 801c69a:	4639      	mov	r1, r7
 801c69c:	4620      	mov	r0, r4
 801c69e:	f001 f939 	bl	801d914 <ucdr_serialize_uint16_t>
 801c6a2:	4629      	mov	r1, r5
 801c6a4:	4620      	mov	r0, r4
 801c6a6:	f001 f935 	bl	801d914 <ucdr_serialize_uint16_t>
 801c6aa:	b013      	add	sp, #76	; 0x4c
 801c6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c6ae:	bf00      	nop
 801c6b0:	20018d44 	.word	0x20018d44
 801c6b4:	0802663c 	.word	0x0802663c
 801c6b8:	08026638 	.word	0x08026638
 801c6bc:	08026658 	.word	0x08026658
 801c6c0:	0100ffef 	.word	0x0100ffef

0801c6c4 <_ZN4rtps9SPDPAgent4initERNS_11ParticipantERNS_16BuiltInEndpointsE>:
 801c6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6c6:	4605      	mov	r5, r0
 801c6c8:	f500 60ae 	add.w	r0, r0, #1392	; 0x570
 801c6cc:	460f      	mov	r7, r1
 801c6ce:	4614      	mov	r4, r2
 801c6d0:	f7fa f94a 	bl	8016968 <sys_mutex_new>
 801c6d4:	b9e0      	cbnz	r0, 801c710 <_ZN4rtps9SPDPAgent4initERNS_11ParticipantERNS_16BuiltInEndpointsE+0x4c>
 801c6d6:	462e      	mov	r6, r5
 801c6d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c6da:	f846 7b04 	str.w	r7, [r6], #4
 801c6de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801c6e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c6e4:	462a      	mov	r2, r5
 801c6e6:	e886 0003 	stmia.w	r6, {r0, r1}
 801c6ea:	68a8      	ldr	r0, [r5, #8]
 801c6ec:	4909      	ldr	r1, [pc, #36]	; (801c714 <_ZN4rtps9SPDPAgent4initERNS_11ParticipantERNS_16BuiltInEndpointsE+0x50>)
 801c6ee:	6803      	ldr	r3, [r0, #0]
 801c6f0:	685b      	ldr	r3, [r3, #4]
 801c6f2:	4798      	blx	r3
 801c6f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801c6f8:	f105 011d 	add.w	r1, r5, #29
 801c6fc:	f205 504c 	addw	r0, r5, #1356	; 0x54c
 801c700:	f001 fc9a 	bl	801e038 <ucdr_init_buffer>
 801c704:	4628      	mov	r0, r5
 801c706:	f7ff fefd 	bl	801c504 <_ZN4rtps9SPDPAgent24addParticipantParametersEv>
 801c70a:	2301      	movs	r3, #1
 801c70c:	f885 3574 	strb.w	r3, [r5, #1396]	; 0x574
 801c710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c712:	bf00      	nop
 801c714:	0801c45d 	.word	0x0801c45d

0801c718 <_ZNK4rtps18SimpleHistoryCache6isFullEv>:
 801c718:	f8b0 31e4 	ldrh.w	r3, [r0, #484]	; 0x1e4
 801c71c:	f8b0 01e6 	ldrh.w	r0, [r0, #486]	; 0x1e6
 801c720:	3301      	adds	r3, #1
 801c722:	b29b      	uxth	r3, r3
 801c724:	2b0b      	cmp	r3, #11
 801c726:	bf28      	it	cs
 801c728:	2300      	movcs	r3, #0
 801c72a:	1ac0      	subs	r0, r0, r3
 801c72c:	fab0 f080 	clz	r0, r0
 801c730:	0940      	lsrs	r0, r0, #5
 801c732:	4770      	bx	lr

0801c734 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>:
 801c734:	f8b0 31e6 	ldrh.w	r3, [r0, #486]	; 0x1e6
 801c738:	f8b0 21e4 	ldrh.w	r2, [r0, #484]	; 0x1e4
 801c73c:	429a      	cmp	r2, r3
 801c73e:	d004      	beq.n	801c74a <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv+0x16>
 801c740:	222c      	movs	r2, #44	; 0x2c
 801c742:	fb02 0003 	mla	r0, r2, r3, r0
 801c746:	3004      	adds	r0, #4
 801c748:	4770      	bx	lr
 801c74a:	4801      	ldr	r0, [pc, #4]	; (801c750 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv+0x1c>)
 801c74c:	4770      	bx	lr
 801c74e:	bf00      	nop
 801c750:	0802665c 	.word	0x0802665c

0801c754 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMaxEv>:
 801c754:	f8b0 21e4 	ldrh.w	r2, [r0, #484]	; 0x1e4
 801c758:	f8b0 31e6 	ldrh.w	r3, [r0, #486]	; 0x1e6
 801c75c:	429a      	cmp	r2, r3
 801c75e:	bf14      	ite	ne
 801c760:	f500 70f4 	addne.w	r0, r0, #488	; 0x1e8
 801c764:	4800      	ldreq	r0, [pc, #0]	; (801c768 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMaxEv+0x14>)
 801c766:	4770      	bx	lr
 801c768:	0802665c 	.word	0x0802665c

0801c76c <_ZN4rtps18SimpleHistoryCache9addChangeEPKhtNS_6Guid_tENS_16SequenceNumber_tE>:
 801c76c:	b082      	sub	sp, #8
 801c76e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c772:	b08d      	sub	sp, #52	; 0x34
 801c774:	2600      	movs	r6, #0
 801c776:	4617      	mov	r7, r2
 801c778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c77c:	ad06      	add	r5, sp, #24
 801c77e:	9315      	str	r3, [sp, #84]	; 0x54
 801c780:	2301      	movs	r3, #1
 801c782:	9606      	str	r6, [sp, #24]
 801c784:	4688      	mov	r8, r1
 801c786:	4604      	mov	r4, r0
 801c788:	4639      	mov	r1, r7
 801c78a:	a804      	add	r0, sp, #16
 801c78c:	60ee      	str	r6, [r5, #12]
 801c78e:	9202      	str	r2, [sp, #8]
 801c790:	920a      	str	r2, [sp, #40]	; 0x28
 801c792:	f8ad 6014 	strh.w	r6, [sp, #20]
 801c796:	960b      	str	r6, [sp, #44]	; 0x2c
 801c798:	f88d 3004 	strb.w	r3, [sp, #4]
 801c79c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801c7a0:	e9cd 6603 	strd	r6, r6, [sp, #12]
 801c7a4:	f7fe f86c 	bl	801a880 <_ZN4rtps11PBufWrapper7reserveEt>
 801c7a8:	463a      	mov	r2, r7
 801c7aa:	4641      	mov	r1, r8
 801c7ac:	a804      	add	r0, sp, #16
 801c7ae:	f7fe f835 	bl	801a81c <_ZN4rtps11PBufWrapper6appendEPKht>
 801c7b2:	f8d4 31ec 	ldr.w	r3, [r4, #492]	; 0x1ec
 801c7b6:	3301      	adds	r3, #1
 801c7b8:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
 801c7bc:	b923      	cbnz	r3, 801c7c8 <_ZN4rtps18SimpleHistoryCache9addChangeEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x5c>
 801c7be:	f8d4 31e8 	ldr.w	r3, [r4, #488]	; 0x1e8
 801c7c2:	3301      	adds	r3, #1
 801c7c4:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
 801c7c8:	f8b4 91e4 	ldrh.w	r9, [r4, #484]	; 0x1e4
 801c7cc:	f10d 0c08 	add.w	ip, sp, #8
 801c7d0:	ab15      	add	r3, sp, #84	; 0x54
 801c7d2:	262c      	movs	r6, #44	; 0x2c
 801c7d4:	f109 0e01 	add.w	lr, r9, #1
 801c7d8:	af0a      	add	r7, sp, #40	; 0x28
 801c7da:	fb06 f609 	mul.w	r6, r6, r9
 801c7de:	fa1f fe8e 	uxth.w	lr, lr
 801c7e2:	eb04 0806 	add.w	r8, r4, r6
 801c7e6:	f1be 0f0a 	cmp.w	lr, #10
 801c7ea:	e9d4 017a 	ldrd	r0, r1, [r4, #488]	; 0x1e8
 801c7ee:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c7f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c7f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801c7f8:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c7fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 801c7fc:	e887 0003 	stmia.w	r7, {r0, r1}
 801c800:	d82b      	bhi.n	801c85a <_ZN4rtps18SimpleHistoryCache9addChangeEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0xee>
 801c802:	f8b4 31e6 	ldrh.w	r3, [r4, #486]	; 0x1e6
 801c806:	f8a4 e1e4 	strh.w	lr, [r4, #484]	; 0x1e4
 801c80a:	4573      	cmp	r3, lr
 801c80c:	d030      	beq.n	801c870 <_ZN4rtps18SimpleHistoryCache9addChangeEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0x104>
 801c80e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801c812:	f106 020c 	add.w	r2, r6, #12
 801c816:	f108 0304 	add.w	r3, r8, #4
 801c81a:	55a1      	strb	r1, [r4, r6]
 801c81c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801c820:	e883 0003 	stmia.w	r3, {r0, r1}
 801c824:	18a0      	adds	r0, r4, r2
 801c826:	a904      	add	r1, sp, #16
 801c828:	f7fd ffce 	bl	801a7c8 <_ZN4rtps11PBufWrapperaSEOS0_>
 801c82c:	202c      	movs	r0, #44	; 0x2c
 801c82e:	fb00 4409 	mla	r4, r0, r9, r4
 801c832:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801c836:	f104 0514 	add.w	r5, r4, #20
 801c83a:	3424      	adds	r4, #36	; 0x24
 801c83c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801c840:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c844:	e884 0003 	stmia.w	r4, {r0, r1}
 801c848:	a804      	add	r0, sp, #16
 801c84a:	f7fd ffcf 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801c84e:	4640      	mov	r0, r8
 801c850:	b00d      	add	sp, #52	; 0x34
 801c852:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c856:	b002      	add	sp, #8
 801c858:	4770      	bx	lr
 801c85a:	2200      	movs	r2, #0
 801c85c:	f8b4 31e6 	ldrh.w	r3, [r4, #486]	; 0x1e6
 801c860:	f8a4 21e4 	strh.w	r2, [r4, #484]	; 0x1e4
 801c864:	2b00      	cmp	r3, #0
 801c866:	d1d2      	bne.n	801c80e <_ZN4rtps18SimpleHistoryCache9addChangeEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0xa2>
 801c868:	2301      	movs	r3, #1
 801c86a:	f8a4 31e6 	strh.w	r3, [r4, #486]	; 0x1e6
 801c86e:	e7ce      	b.n	801c80e <_ZN4rtps18SimpleHistoryCache9addChangeEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0xa2>
 801c870:	f109 0302 	add.w	r3, r9, #2
 801c874:	b29b      	uxth	r3, r3
 801c876:	2b0a      	cmp	r3, #10
 801c878:	d9f7      	bls.n	801c86a <_ZN4rtps18SimpleHistoryCache9addChangeEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0xfe>
 801c87a:	2300      	movs	r3, #0
 801c87c:	e7f5      	b.n	801c86a <_ZN4rtps18SimpleHistoryCache9addChangeEPKhtNS_6Guid_tENS_16SequenceNumber_tE+0xfe>
 801c87e:	a804      	add	r0, sp, #16
 801c880:	f7fd ffb4 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801c884:	f004 fa02 	bl	8020c8c <__cxa_end_cleanup>

0801c888 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE>:
 801c888:	b470      	push	{r4, r5, r6}
 801c88a:	f8b0 31e4 	ldrh.w	r3, [r0, #484]	; 0x1e4
 801c88e:	b083      	sub	sp, #12
 801c890:	f8b0 41e6 	ldrh.w	r4, [r0, #486]	; 0x1e6
 801c894:	ad02      	add	r5, sp, #8
 801c896:	42a3      	cmp	r3, r4
 801c898:	e905 0006 	stmdb	r5, {r1, r2}
 801c89c:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c8a0:	d024      	beq.n	801c8ec <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x64>
 801c8a2:	232c      	movs	r3, #44	; 0x2c
 801c8a4:	fb03 f304 	mul.w	r3, r3, r4
 801c8a8:	3304      	adds	r3, #4
 801c8aa:	58c5      	ldr	r5, [r0, r3]
 801c8ac:	4403      	add	r3, r0
 801c8ae:	428d      	cmp	r5, r1
 801c8b0:	dd03      	ble.n	801c8ba <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x32>
 801c8b2:	2000      	movs	r0, #0
 801c8b4:	b003      	add	sp, #12
 801c8b6:	bc70      	pop	{r4, r5, r6}
 801c8b8:	4770      	bx	lr
 801c8ba:	685b      	ldr	r3, [r3, #4]
 801c8bc:	429a      	cmp	r2, r3
 801c8be:	d201      	bcs.n	801c8c4 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x3c>
 801c8c0:	428d      	cmp	r5, r1
 801c8c2:	d0f6      	beq.n	801c8b2 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x2a>
 801c8c4:	f500 76f4 	add.w	r6, r0, #488	; 0x1e8
 801c8c8:	f8d0 51e8 	ldr.w	r5, [r0, #488]	; 0x1e8
 801c8cc:	42a9      	cmp	r1, r5
 801c8ce:	dcf0      	bgt.n	801c8b2 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x2a>
 801c8d0:	d013      	beq.n	801c8fa <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x72>
 801c8d2:	4422      	add	r2, r4
 801c8d4:	1ad2      	subs	r2, r2, r3
 801c8d6:	b292      	uxth	r2, r2
 801c8d8:	2a0a      	cmp	r2, #10
 801c8da:	d901      	bls.n	801c8e0 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x58>
 801c8dc:	3a0b      	subs	r2, #11
 801c8de:	b292      	uxth	r2, r2
 801c8e0:	232c      	movs	r3, #44	; 0x2c
 801c8e2:	fb03 0002 	mla	r0, r3, r2, r0
 801c8e6:	b003      	add	sp, #12
 801c8e8:	bc70      	pop	{r4, r5, r6}
 801c8ea:	4770      	bx	lr
 801c8ec:	1c4b      	adds	r3, r1, #1
 801c8ee:	dbe0      	blt.n	801c8b2 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x2a>
 801c8f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	4e03      	ldr	r6, [pc, #12]	; (801c904 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x7c>)
 801c8f8:	e7e8      	b.n	801c8cc <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x44>
 801c8fa:	6871      	ldr	r1, [r6, #4]
 801c8fc:	428a      	cmp	r2, r1
 801c8fe:	d8d8      	bhi.n	801c8b2 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x2a>
 801c900:	e7e7      	b.n	801c8d2 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x4a>
 801c902:	bf00      	nop
 801c904:	0802665c 	.word	0x0802665c

0801c908 <_ZN4rtps15StatelessReader9newChangeERKNS_17ReaderCacheChangeE>:
 801c908:	f8d0 3304 	ldr.w	r3, [r0, #772]	; 0x304
 801c90c:	b113      	cbz	r3, 801c914 <_ZN4rtps15StatelessReader9newChangeERKNS_17ReaderCacheChangeE+0xc>
 801c90e:	f8d0 0308 	ldr.w	r0, [r0, #776]	; 0x308
 801c912:	4718      	bx	r3
 801c914:	4770      	bx	lr
 801c916:	bf00      	nop

0801c918 <_ZN4rtps15StatelessReader16registerCallbackEPFvPvRKNS_17ReaderCacheChangeEES1_>:
 801c918:	b109      	cbz	r1, 801c91e <_ZN4rtps15StatelessReader16registerCallbackEPFvPvRKNS_17ReaderCacheChangeEES1_+0x6>
 801c91a:	e9c0 12c1 	strd	r1, r2, [r0, #772]	; 0x304
 801c91e:	4770      	bx	lr

0801c920 <_ZN4rtps15StatelessReader14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE>:
 801c920:	2000      	movs	r0, #0
 801c922:	4770      	bx	lr

0801c924 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE>:
 801c924:	b4f0      	push	{r4, r5, r6, r7}
 801c926:	f8d0 71e4 	ldr.w	r7, [r0, #484]	; 0x1e4
 801c92a:	2f05      	cmp	r7, #5
 801c92c:	d013      	beq.n	801c956 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x32>
 801c92e:	f890 31e0 	ldrb.w	r3, [r0, #480]	; 0x1e0
 801c932:	4606      	mov	r6, r0
 801c934:	f013 0501 	ands.w	r5, r3, #1
 801c938:	d034      	beq.n	801c9a4 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x80>
 801c93a:	0798      	lsls	r0, r3, #30
 801c93c:	d534      	bpl.n	801c9a8 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x84>
 801c93e:	075a      	lsls	r2, r3, #29
 801c940:	d535      	bpl.n	801c9ae <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x8a>
 801c942:	071d      	lsls	r5, r3, #28
 801c944:	d50c      	bpl.n	801c960 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x3c>
 801c946:	06dc      	lsls	r4, r3, #27
 801c948:	d534      	bpl.n	801c9b4 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x90>
 801c94a:	0698      	lsls	r0, r3, #26
 801c94c:	d535      	bpl.n	801c9ba <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x96>
 801c94e:	065a      	lsls	r2, r3, #25
 801c950:	d536      	bpl.n	801c9c0 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x9c>
 801c952:	09da      	lsrs	r2, r3, #7
 801c954:	d022      	beq.n	801c99c <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x78>
 801c956:	f04f 0c00 	mov.w	ip, #0
 801c95a:	bcf0      	pop	{r4, r5, r6, r7}
 801c95c:	4660      	mov	r0, ip
 801c95e:	4770      	bx	lr
 801c960:	2008      	movs	r0, #8
 801c962:	2503      	movs	r5, #3
 801c964:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 801c968:	4303      	orrs	r3, r0
 801c96a:	460c      	mov	r4, r1
 801c96c:	3701      	adds	r7, #1
 801c96e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801c972:	f886 31e0 	strb.w	r3, [r6, #480]	; 0x1e0
 801c976:	f04f 0c01 	mov.w	ip, #1
 801c97a:	f505 75f4 	add.w	r5, r5, #488	; 0x1e8
 801c97e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801c98a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801c98e:	e885 0003 	stmia.w	r5, {r0, r1}
 801c992:	4660      	mov	r0, ip
 801c994:	f8c6 71e4 	str.w	r7, [r6, #484]	; 0x1e4
 801c998:	bcf0      	pop	{r4, r5, r6, r7}
 801c99a:	4770      	bx	lr
 801c99c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 801c9a0:	2507      	movs	r5, #7
 801c9a2:	e7df      	b.n	801c964 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 801c9a4:	2001      	movs	r0, #1
 801c9a6:	e7dd      	b.n	801c964 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 801c9a8:	2002      	movs	r0, #2
 801c9aa:	2501      	movs	r5, #1
 801c9ac:	e7da      	b.n	801c964 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 801c9ae:	2004      	movs	r0, #4
 801c9b0:	2502      	movs	r5, #2
 801c9b2:	e7d7      	b.n	801c964 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 801c9b4:	2010      	movs	r0, #16
 801c9b6:	2504      	movs	r5, #4
 801c9b8:	e7d4      	b.n	801c964 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 801c9ba:	2020      	movs	r0, #32
 801c9bc:	2505      	movs	r5, #5
 801c9be:	e7d1      	b.n	801c964 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 801c9c0:	2040      	movs	r0, #64	; 0x40
 801c9c2:	2506      	movs	r5, #6
 801c9c4:	e7ce      	b.n	801c964 <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE+0x40>
 801c9c6:	bf00      	nop

0801c9c8 <_ZN4rtps15StatelessReaderD1Ev>:
 801c9c8:	4770      	bx	lr
 801c9ca:	bf00      	nop

0801c9cc <_ZN4rtps15StatelessReaderD0Ev>:
 801c9cc:	b510      	push	{r4, lr}
 801c9ce:	4604      	mov	r4, r0
 801c9d0:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801c9d4:	f004 f958 	bl	8020c88 <_ZdlPvj>
 801c9d8:	4620      	mov	r0, r4
 801c9da:	bd10      	pop	{r4, pc}

0801c9dc <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE>:
 801c9dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9e0:	f500 7840 	add.w	r8, r0, #768	; 0x300
 801c9e4:	4605      	mov	r5, r0
 801c9e6:	4689      	mov	r9, r1
 801c9e8:	4640      	mov	r0, r8
 801c9ea:	f7f9 ffe0 	bl	80169ae <sys_mutex_lock>
 801c9ee:	f895 61e0 	ldrb.w	r6, [r5, #480]	; 0x1e0
 801c9f2:	f8d5 71e4 	ldr.w	r7, [r5, #484]	; 0x1e4
 801c9f6:	07f2      	lsls	r2, r6, #31
 801c9f8:	d417      	bmi.n	801ca2a <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x4e>
 801c9fa:	b18f      	cbz	r7, 801ca20 <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x44>
 801c9fc:	2201      	movs	r2, #1
 801c9fe:	f002 0307 	and.w	r3, r2, #7
 801ca02:	1c50      	adds	r0, r2, #1
 801ca04:	4614      	mov	r4, r2
 801ca06:	fa46 f303 	asr.w	r3, r6, r3
 801ca0a:	f003 0301 	and.w	r3, r3, #1
 801ca0e:	2a04      	cmp	r2, #4
 801ca10:	bf88      	it	hi
 801ca12:	f043 0301 	orrhi.w	r3, r3, #1
 801ca16:	b2c2      	uxtb	r2, r0
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d0f0      	beq.n	801c9fe <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x22>
 801ca1c:	2c05      	cmp	r4, #5
 801ca1e:	d105      	bne.n	801ca2c <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x50>
 801ca20:	4640      	mov	r0, r8
 801ca22:	f7f9 ffd3 	bl	80169cc <sys_mutex_unlock>
 801ca26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca2a:	2400      	movs	r4, #0
 801ca2c:	f505 7bf0 	add.w	fp, r5, #480	; 0x1e0
 801ca30:	f04f 0a38 	mov.w	sl, #56	; 0x38
 801ca34:	2308      	movs	r3, #8
 801ca36:	220c      	movs	r2, #12
 801ca38:	4649      	mov	r1, r9
 801ca3a:	fb1a 3004 	smlabb	r0, sl, r4, r3
 801ca3e:	4458      	add	r0, fp
 801ca40:	f005 f80e 	bl	8021a60 <memcmp>
 801ca44:	b170      	cbz	r0, 801ca64 <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x88>
 801ca46:	b917      	cbnz	r7, 801ca4e <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x72>
 801ca48:	e7ea      	b.n	801ca20 <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x44>
 801ca4a:	2c04      	cmp	r4, #4
 801ca4c:	d807      	bhi.n	801ca5e <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x82>
 801ca4e:	3401      	adds	r4, #1
 801ca50:	f004 0307 	and.w	r3, r4, #7
 801ca54:	b2e4      	uxtb	r4, r4
 801ca56:	fa46 f303 	asr.w	r3, r6, r3
 801ca5a:	07db      	lsls	r3, r3, #31
 801ca5c:	d5f5      	bpl.n	801ca4a <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x6e>
 801ca5e:	2c05      	cmp	r4, #5
 801ca60:	d1e8      	bne.n	801ca34 <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x58>
 801ca62:	e7dd      	b.n	801ca20 <_ZN4rtps15StatelessReader25removeWriterOfParticipantERKNS_12GuidPrefix_tE+0x44>
 801ca64:	f3c4 03c7 	ubfx	r3, r4, #3, #8
 801ca68:	2201      	movs	r2, #1
 801ca6a:	f004 0407 	and.w	r4, r4, #7
 801ca6e:	3f01      	subs	r7, #1
 801ca70:	442b      	add	r3, r5
 801ca72:	4640      	mov	r0, r8
 801ca74:	40a2      	lsls	r2, r4
 801ca76:	f893 41e0 	ldrb.w	r4, [r3, #480]	; 0x1e0
 801ca7a:	ea24 0402 	bic.w	r4, r4, r2
 801ca7e:	f883 41e0 	strb.w	r4, [r3, #480]	; 0x1e0
 801ca82:	f8c5 71e4 	str.w	r7, [r5, #484]	; 0x1e4
 801ca86:	f7f9 ffa1 	bl	80169cc <sys_mutex_unlock>
 801ca8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca8e:	bf00      	nop

0801ca90 <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE>:
 801ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca94:	f500 7a40 	add.w	sl, r0, #768	; 0x300
 801ca98:	4606      	mov	r6, r0
 801ca9a:	b083      	sub	sp, #12
 801ca9c:	460f      	mov	r7, r1
 801ca9e:	4650      	mov	r0, sl
 801caa0:	f7f9 ff85 	bl	80169ae <sys_mutex_lock>
 801caa4:	f896 91e0 	ldrb.w	r9, [r6, #480]	; 0x1e0
 801caa8:	f8d6 81e4 	ldr.w	r8, [r6, #484]	; 0x1e4
 801caac:	f019 0f01 	tst.w	r9, #1
 801cab0:	d11a      	bne.n	801cae8 <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x58>
 801cab2:	f1b8 0f00 	cmp.w	r8, #0
 801cab6:	d011      	beq.n	801cadc <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x4c>
 801cab8:	2201      	movs	r2, #1
 801caba:	f002 0307 	and.w	r3, r2, #7
 801cabe:	1c51      	adds	r1, r2, #1
 801cac0:	4614      	mov	r4, r2
 801cac2:	fa49 f303 	asr.w	r3, r9, r3
 801cac6:	f003 0301 	and.w	r3, r3, #1
 801caca:	2a04      	cmp	r2, #4
 801cacc:	bf88      	it	hi
 801cace:	f043 0301 	orrhi.w	r3, r3, #1
 801cad2:	b2ca      	uxtb	r2, r1
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d0f0      	beq.n	801caba <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x2a>
 801cad8:	2c05      	cmp	r4, #5
 801cada:	d106      	bne.n	801caea <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x5a>
 801cadc:	4650      	mov	r0, sl
 801cade:	f7f9 ff75 	bl	80169cc <sys_mutex_unlock>
 801cae2:	b003      	add	sp, #12
 801cae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cae8:	2400      	movs	r4, #0
 801caea:	f506 73f0 	add.w	r3, r6, #480	; 0x1e0
 801caee:	f107 0b0c 	add.w	fp, r7, #12
 801caf2:	9601      	str	r6, [sp, #4]
 801caf4:	9300      	str	r3, [sp, #0]
 801caf6:	2338      	movs	r3, #56	; 0x38
 801caf8:	2208      	movs	r2, #8
 801cafa:	4639      	mov	r1, r7
 801cafc:	fb13 2504 	smlabb	r5, r3, r4, r2
 801cb00:	9b00      	ldr	r3, [sp, #0]
 801cb02:	220c      	movs	r2, #12
 801cb04:	441d      	add	r5, r3
 801cb06:	4628      	mov	r0, r5
 801cb08:	18ae      	adds	r6, r5, r2
 801cb0a:	f004 ffa9 	bl	8021a60 <memcmp>
 801cb0e:	b938      	cbnz	r0, 801cb20 <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x90>
 801cb10:	f105 020f 	add.w	r2, r5, #15
 801cb14:	1b92      	subs	r2, r2, r6
 801cb16:	d12c      	bne.n	801cb72 <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0xe2>
 801cb18:	7bea      	ldrb	r2, [r5, #15]
 801cb1a:	7bfb      	ldrb	r3, [r7, #15]
 801cb1c:	429a      	cmp	r2, r3
 801cb1e:	d010      	beq.n	801cb42 <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0xb2>
 801cb20:	f1b8 0f00 	cmp.w	r8, #0
 801cb24:	d102      	bne.n	801cb2c <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x9c>
 801cb26:	e7d9      	b.n	801cadc <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x4c>
 801cb28:	2c04      	cmp	r4, #4
 801cb2a:	d807      	bhi.n	801cb3c <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0xac>
 801cb2c:	3401      	adds	r4, #1
 801cb2e:	f004 0307 	and.w	r3, r4, #7
 801cb32:	b2e4      	uxtb	r4, r4
 801cb34:	fa49 f303 	asr.w	r3, r9, r3
 801cb38:	07db      	lsls	r3, r3, #31
 801cb3a:	d5f5      	bpl.n	801cb28 <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x98>
 801cb3c:	2c05      	cmp	r4, #5
 801cb3e:	d1da      	bne.n	801caf6 <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x66>
 801cb40:	e7cc      	b.n	801cadc <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x4c>
 801cb42:	9e01      	ldr	r6, [sp, #4]
 801cb44:	f3c4 02c7 	ubfx	r2, r4, #3, #8
 801cb48:	2101      	movs	r1, #1
 801cb4a:	f004 0407 	and.w	r4, r4, #7
 801cb4e:	4432      	add	r2, r6
 801cb50:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801cb54:	40a1      	lsls	r1, r4
 801cb56:	4650      	mov	r0, sl
 801cb58:	f892 41e0 	ldrb.w	r4, [r2, #480]	; 0x1e0
 801cb5c:	ea24 0401 	bic.w	r4, r4, r1
 801cb60:	f882 41e0 	strb.w	r4, [r2, #480]	; 0x1e0
 801cb64:	f8c6 31e4 	str.w	r3, [r6, #484]	; 0x1e4
 801cb68:	f7f9 ff30 	bl	80169cc <sys_mutex_unlock>
 801cb6c:	b003      	add	sp, #12
 801cb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb72:	4630      	mov	r0, r6
 801cb74:	4659      	mov	r1, fp
 801cb76:	f004 ff73 	bl	8021a60 <memcmp>
 801cb7a:	2800      	cmp	r0, #0
 801cb7c:	d1d0      	bne.n	801cb20 <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x90>
 801cb7e:	e7cb      	b.n	801cb18 <_ZN4rtps15StatelessReader12removeWriterERKNS_6Guid_tE+0x88>

0801cb80 <_ZN4rtps15StatelessReader4initERKNS_9TopicDataE>:
 801cb80:	b510      	push	{r4, lr}
 801cb82:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801cb86:	4604      	mov	r4, r0
 801cb88:	3004      	adds	r0, #4
 801cb8a:	f004 ff79 	bl	8021a80 <memcpy>
 801cb8e:	2301      	movs	r3, #1
 801cb90:	f504 7040 	add.w	r0, r4, #768	; 0x300
 801cb94:	f884 31dc 	strb.w	r3, [r4, #476]	; 0x1dc
 801cb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb9c:	f7f9 bee4 	b.w	8016968 <sys_mutex_new>

0801cba0 <_ZN4rtps10ThreadPool20writerThreadFunctionEPv>:
 801cba0:	b3a8      	cbz	r0, 801cc0e <_ZN4rtps10ThreadPool20writerThreadFunctionEPv+0x6e>
 801cba2:	7a03      	ldrb	r3, [r0, #8]
 801cba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cba8:	4604      	mov	r4, r0
 801cbaa:	b373      	cbz	r3, 801cc0a <_ZN4rtps10ThreadPool20writerThreadFunctionEPv+0x6a>
 801cbac:	f100 054c 	add.w	r5, r0, #76	; 0x4c
 801cbb0:	2700      	movs	r7, #0
 801cbb2:	f100 0618 	add.w	r6, r0, #24
 801cbb6:	e015      	b.n	801cbe4 <_ZN4rtps10ThreadPool20writerThreadFunctionEPv+0x44>
 801cbb8:	1c5a      	adds	r2, r3, #1
 801cbba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cbbe:	4628      	mov	r0, r5
 801cbc0:	b292      	uxth	r2, r2
 801cbc2:	f8d3 801c 	ldr.w	r8, [r3, #28]
 801cbc6:	2a0a      	cmp	r2, #10
 801cbc8:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
 801cbcc:	bf88      	it	hi
 801cbce:	f8a4 704a 	strhhi.w	r7, [r4, #74]	; 0x4a
 801cbd2:	f7f9 fefb 	bl	80169cc <sys_mutex_unlock>
 801cbd6:	f8d8 3000 	ldr.w	r3, [r8]
 801cbda:	4640      	mov	r0, r8
 801cbdc:	68db      	ldr	r3, [r3, #12]
 801cbde:	4798      	blx	r3
 801cbe0:	7a23      	ldrb	r3, [r4, #8]
 801cbe2:	b193      	cbz	r3, 801cc0a <_ZN4rtps10ThreadPool20writerThreadFunctionEPv+0x6a>
 801cbe4:	4628      	mov	r0, r5
 801cbe6:	f7f9 fee2 	bl	80169ae <sys_mutex_lock>
 801cbea:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801cbee:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801cbf2:	429a      	cmp	r2, r3
 801cbf4:	d1e0      	bne.n	801cbb8 <_ZN4rtps10ThreadPool20writerThreadFunctionEPv+0x18>
 801cbf6:	4628      	mov	r0, r5
 801cbf8:	f7f9 fee8 	bl	80169cc <sys_mutex_unlock>
 801cbfc:	2100      	movs	r1, #0
 801cbfe:	4630      	mov	r0, r6
 801cc00:	f7f9 fe49 	bl	8016896 <sys_arch_sem_wait>
 801cc04:	7a23      	ldrb	r3, [r4, #8]
 801cc06:	2b00      	cmp	r3, #0
 801cc08:	d1ec      	bne.n	801cbe4 <_ZN4rtps10ThreadPool20writerThreadFunctionEPv+0x44>
 801cc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc0e:	4770      	bx	lr

0801cc10 <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_>:
 801cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc12:	2500      	movs	r5, #0
 801cc14:	4604      	mov	r4, r0
 801cc16:	4613      	mov	r3, r2
 801cc18:	460e      	mov	r6, r1
 801cc1a:	f100 0754 	add.w	r7, r0, #84	; 0x54
 801cc1e:	222c      	movs	r2, #44	; 0x2c
 801cc20:	4629      	mov	r1, r5
 801cc22:	e9c0 6300 	strd	r6, r3, [r0]
 801cc26:	301c      	adds	r0, #28
 801cc28:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801cc2c:	7225      	strb	r5, [r4, #8]
 801cc2e:	f004 ff4f 	bl	8021ad0 <memset>
 801cc32:	4638      	mov	r0, r7
 801cc34:	4629      	mov	r1, r5
 801cc36:	22dc      	movs	r2, #220	; 0xdc
 801cc38:	64a5      	str	r5, [r4, #72]	; 0x48
 801cc3a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 801cc3e:	f004 ff47 	bl	8021ad0 <memset>
 801cc42:	4630      	mov	r0, r6
 801cc44:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801cc48:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801cc4c:	f7f9 fe8c 	bl	8016968 <sys_mutex_new>
 801cc50:	b978      	cbnz	r0, 801cc72 <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x62>
 801cc52:	2201      	movs	r2, #1
 801cc54:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801cc58:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 801cc5c:	b15b      	cbz	r3, 801cc76 <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x66>
 801cc5e:	2100      	movs	r1, #0
 801cc60:	f104 0014 	add.w	r0, r4, #20
 801cc64:	f7f9 fdf2 	bl	801684c <sys_sem_new>
 801cc68:	2100      	movs	r1, #0
 801cc6a:	f104 0018 	add.w	r0, r4, #24
 801cc6e:	f7f9 fded 	bl	801684c <sys_sem_new>
 801cc72:	4620      	mov	r0, r4
 801cc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc76:	f504 709a 	add.w	r0, r4, #308	; 0x134
 801cc7a:	f7f9 fe75 	bl	8016968 <sys_mutex_new>
 801cc7e:	2800      	cmp	r0, #0
 801cc80:	d1f7      	bne.n	801cc72 <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x62>
 801cc82:	2301      	movs	r3, #1
 801cc84:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 801cc88:	e7e9      	b.n	801cc5e <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x4e>
 801cc8a:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801cc8e:	b11b      	cbz	r3, 801cc98 <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x88>
 801cc90:	f504 709a 	add.w	r0, r4, #308	; 0x134
 801cc94:	f7f9 fe7e 	bl	8016994 <sys_mutex_free>
 801cc98:	f504 7598 	add.w	r5, r4, #304	; 0x130
 801cc9c:	42af      	cmp	r7, r5
 801cc9e:	d107      	bne.n	801ccb0 <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0xa0>
 801cca0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 801cca4:	b113      	cbz	r3, 801ccac <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x9c>
 801cca6:	4630      	mov	r0, r6
 801cca8:	f7f9 fe74 	bl	8016994 <sys_mutex_free>
 801ccac:	f003 ffee 	bl	8020c8c <__cxa_end_cleanup>
 801ccb0:	3d14      	subs	r5, #20
 801ccb2:	f105 000c 	add.w	r0, r5, #12
 801ccb6:	f7fd fd99 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801ccba:	e7ef      	b.n	801cc9c <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x8c>

0801ccbc <_ZN4rtps10ThreadPoolD1Ev>:
 801ccbc:	7a03      	ldrb	r3, [r0, #8]
 801ccbe:	b570      	push	{r4, r5, r6, lr}
 801ccc0:	4604      	mov	r4, r0
 801ccc2:	b9fb      	cbnz	r3, 801cd04 <_ZN4rtps10ThreadPoolD1Ev+0x48>
 801ccc4:	f100 0614 	add.w	r6, r0, #20
 801ccc8:	f100 0518 	add.w	r5, r0, #24
 801cccc:	4630      	mov	r0, r6
 801ccce:	f7f9 fe2d 	bl	801692c <sys_sem_valid>
 801ccd2:	bba8      	cbnz	r0, 801cd40 <_ZN4rtps10ThreadPoolD1Ev+0x84>
 801ccd4:	4628      	mov	r0, r5
 801ccd6:	f7f9 fe29 	bl	801692c <sys_sem_valid>
 801ccda:	bbc8      	cbnz	r0, 801cd50 <_ZN4rtps10ThreadPoolD1Ev+0x94>
 801ccdc:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d13c      	bne.n	801cd5e <_ZN4rtps10ThreadPoolD1Ev+0xa2>
 801cce4:	f504 758e 	add.w	r5, r4, #284	; 0x11c
 801cce8:	f104 0640 	add.w	r6, r4, #64	; 0x40
 801ccec:	f105 000c 	add.w	r0, r5, #12
 801ccf0:	3d14      	subs	r5, #20
 801ccf2:	f7fd fd7b 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801ccf6:	42b5      	cmp	r5, r6
 801ccf8:	d1f8      	bne.n	801ccec <_ZN4rtps10ThreadPoolD1Ev+0x30>
 801ccfa:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 801ccfe:	bb9b      	cbnz	r3, 801cd68 <_ZN4rtps10ThreadPoolD1Ev+0xac>
 801cd00:	4620      	mov	r0, r4
 801cd02:	bd70      	pop	{r4, r5, r6, pc}
 801cd04:	2300      	movs	r3, #0
 801cd06:	f100 0518 	add.w	r5, r0, #24
 801cd0a:	f100 0614 	add.w	r6, r0, #20
 801cd0e:	7203      	strb	r3, [r0, #8]
 801cd10:	4628      	mov	r0, r5
 801cd12:	f7f9 fdf1 	bl	80168f8 <sys_sem_signal>
 801cd16:	200a      	movs	r0, #10
 801cd18:	f7f0 fd9e 	bl	800d858 <sys_msleep>
 801cd1c:	4630      	mov	r0, r6
 801cd1e:	f7f9 fdeb 	bl	80168f8 <sys_sem_signal>
 801cd22:	200a      	movs	r0, #10
 801cd24:	f7f0 fd98 	bl	800d858 <sys_msleep>
 801cd28:	200a      	movs	r0, #10
 801cd2a:	f7f0 fd95 	bl	800d858 <sys_msleep>
 801cd2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801cd32:	f7f0 fd91 	bl	800d858 <sys_msleep>
 801cd36:	4630      	mov	r0, r6
 801cd38:	f7f9 fdf8 	bl	801692c <sys_sem_valid>
 801cd3c:	2800      	cmp	r0, #0
 801cd3e:	d0c9      	beq.n	801ccd4 <_ZN4rtps10ThreadPoolD1Ev+0x18>
 801cd40:	4630      	mov	r0, r6
 801cd42:	f7f9 fde6 	bl	8016912 <sys_sem_free>
 801cd46:	4628      	mov	r0, r5
 801cd48:	f7f9 fdf0 	bl	801692c <sys_sem_valid>
 801cd4c:	2800      	cmp	r0, #0
 801cd4e:	d0c5      	beq.n	801ccdc <_ZN4rtps10ThreadPoolD1Ev+0x20>
 801cd50:	4628      	mov	r0, r5
 801cd52:	f7f9 fdde 	bl	8016912 <sys_sem_free>
 801cd56:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d0c2      	beq.n	801cce4 <_ZN4rtps10ThreadPoolD1Ev+0x28>
 801cd5e:	f504 709a 	add.w	r0, r4, #308	; 0x134
 801cd62:	f7f9 fe17 	bl	8016994 <sys_mutex_free>
 801cd66:	e7bd      	b.n	801cce4 <_ZN4rtps10ThreadPoolD1Ev+0x28>
 801cd68:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801cd6c:	f7f9 fe12 	bl	8016994 <sys_mutex_free>
 801cd70:	4620      	mov	r0, r4
 801cd72:	bd70      	pop	{r4, r5, r6, pc}

0801cd74 <_ZN4rtps10ThreadPool12startThreadsEv>:
 801cd74:	b570      	push	{r4, r5, r6, lr}
 801cd76:	7a05      	ldrb	r5, [r0, #8]
 801cd78:	b082      	sub	sp, #8
 801cd7a:	b115      	cbz	r5, 801cd82 <_ZN4rtps10ThreadPool12startThreadsEv+0xe>
 801cd7c:	4628      	mov	r0, r5
 801cd7e:	b002      	add	sp, #8
 801cd80:	bd70      	pop	{r4, r5, r6, pc}
 801cd82:	4604      	mov	r4, r0
 801cd84:	3014      	adds	r0, #20
 801cd86:	f7f9 fdd1 	bl	801692c <sys_sem_valid>
 801cd8a:	2800      	cmp	r0, #0
 801cd8c:	d0f6      	beq.n	801cd7c <_ZN4rtps10ThreadPool12startThreadsEv+0x8>
 801cd8e:	f104 0018 	add.w	r0, r4, #24
 801cd92:	f7f9 fdcb 	bl	801692c <sys_sem_valid>
 801cd96:	2800      	cmp	r0, #0
 801cd98:	d0f0      	beq.n	801cd7c <_ZN4rtps10ThreadPool12startThreadsEv+0x8>
 801cd9a:	2501      	movs	r5, #1
 801cd9c:	2613      	movs	r6, #19
 801cd9e:	4622      	mov	r2, r4
 801cda0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801cda4:	7225      	strb	r5, [r4, #8]
 801cda6:	4909      	ldr	r1, [pc, #36]	; (801cdcc <_ZN4rtps10ThreadPool12startThreadsEv+0x58>)
 801cda8:	9600      	str	r6, [sp, #0]
 801cdaa:	4809      	ldr	r0, [pc, #36]	; (801cdd0 <_ZN4rtps10ThreadPool12startThreadsEv+0x5c>)
 801cdac:	f7f9 fe1b 	bl	80169e6 <sys_thread_new>
 801cdb0:	9600      	str	r6, [sp, #0]
 801cdb2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801cdb6:	60e0      	str	r0, [r4, #12]
 801cdb8:	4622      	mov	r2, r4
 801cdba:	4906      	ldr	r1, [pc, #24]	; (801cdd4 <_ZN4rtps10ThreadPool12startThreadsEv+0x60>)
 801cdbc:	4806      	ldr	r0, [pc, #24]	; (801cdd8 <_ZN4rtps10ThreadPool12startThreadsEv+0x64>)
 801cdbe:	f7f9 fe12 	bl	80169e6 <sys_thread_new>
 801cdc2:	6120      	str	r0, [r4, #16]
 801cdc4:	4628      	mov	r0, r5
 801cdc6:	b002      	add	sp, #8
 801cdc8:	bd70      	pop	{r4, r5, r6, pc}
 801cdca:	bf00      	nop
 801cdcc:	0801cba1 	.word	0x0801cba1
 801cdd0:	0802668c 	.word	0x0802668c
 801cdd4:	0801d01d 	.word	0x0801d01d
 801cdd8:	0802669c 	.word	0x0802669c

0801cddc <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE>:
 801cddc:	b530      	push	{r4, r5, lr}
 801cdde:	4604      	mov	r4, r0
 801cde0:	b083      	sub	sp, #12
 801cde2:	304c      	adds	r0, #76	; 0x4c
 801cde4:	460d      	mov	r5, r1
 801cde6:	9001      	str	r0, [sp, #4]
 801cde8:	f7f9 fde1 	bl	80169ae <sys_mutex_lock>
 801cdec:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801cdf0:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 801cdf4:	1c53      	adds	r3, r2, #1
 801cdf6:	9801      	ldr	r0, [sp, #4]
 801cdf8:	b29b      	uxth	r3, r3
 801cdfa:	2b0a      	cmp	r3, #10
 801cdfc:	d907      	bls.n	801ce0e <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE+0x32>
 801cdfe:	b1b1      	cbz	r1, 801ce2e <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE+0x52>
 801ce00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ce04:	2300      	movs	r3, #0
 801ce06:	61d5      	str	r5, [r2, #28]
 801ce08:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801ce0c:	e006      	b.n	801ce1c <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE+0x40>
 801ce0e:	4299      	cmp	r1, r3
 801ce10:	d00d      	beq.n	801ce2e <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE+0x52>
 801ce12:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ce16:	61d5      	str	r5, [r2, #28]
 801ce18:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801ce1c:	f7f9 fdd6 	bl	80169cc <sys_mutex_unlock>
 801ce20:	f104 0018 	add.w	r0, r4, #24
 801ce24:	f7f9 fd68 	bl	80168f8 <sys_sem_signal>
 801ce28:	2001      	movs	r0, #1
 801ce2a:	b003      	add	sp, #12
 801ce2c:	bd30      	pop	{r4, r5, pc}
 801ce2e:	f7f9 fdcd 	bl	80169cc <sys_mutex_unlock>
 801ce32:	2000      	movs	r0, #0
 801ce34:	b003      	add	sp, #12
 801ce36:	bd30      	pop	{r4, r5, pc}

0801ce38 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt>:
 801ce38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	b089      	sub	sp, #36	; 0x24
 801ce40:	4616      	mov	r6, r2
 801ce42:	6812      	ldr	r2, [r2, #0]
 801ce44:	4604      	mov	r4, r0
 801ce46:	460f      	mov	r7, r1
 801ce48:	f8bd 9040 	ldrh.w	r9, [sp, #64]	; 0x40
 801ce4c:	9306      	str	r3, [sp, #24]
 801ce4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ce52:	2a00      	cmp	r2, #0
 801ce54:	d068      	beq.n	801cf28 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0xf0>
 801ce56:	4618      	mov	r0, r3
 801ce58:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801ce5c:	8931      	ldrh	r1, [r6, #8]
 801ce5e:	ad06      	add	r5, sp, #24
 801ce60:	f7ef fe12 	bl	800ca88 <pbuf_alloc>
 801ce64:	4631      	mov	r1, r6
 801ce66:	ad06      	add	r5, sp, #24
 801ce68:	4680      	mov	r8, r0
 801ce6a:	f7f0 fa25 	bl	800d2b8 <pbuf_copy>
 801ce6e:	4630      	mov	r0, r6
 801ce70:	ad06      	add	r5, sp, #24
 801ce72:	f7f0 f8ed 	bl	800d050 <pbuf_free>
 801ce76:	8a7a      	ldrh	r2, [r7, #18]
 801ce78:	2300      	movs	r3, #0
 801ce7a:	4641      	mov	r1, r8
 801ce7c:	a801      	add	r0, sp, #4
 801ce7e:	ad06      	add	r5, sp, #24
 801ce80:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ce84:	f8ad 900c 	strh.w	r9, [sp, #12]
 801ce88:	9304      	str	r3, [sp, #16]
 801ce8a:	f7fd fc89 	bl	801a7a0 <_ZN4rtps11PBufWrapperC1EP4pbuf>
 801ce8e:	ad06      	add	r5, sp, #24
 801ce90:	a901      	add	r1, sp, #4
 801ce92:	f504 769a 	add.w	r6, r4, #308	; 0x134
 801ce96:	4628      	mov	r0, r5
 801ce98:	f7fd fc96 	bl	801a7c8 <_ZN4rtps11PBufWrapperaSEOS0_>
 801ce9c:	a801      	add	r0, sp, #4
 801ce9e:	f7fd fca5 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801cea2:	4630      	mov	r0, r6
 801cea4:	f7f9 fd83 	bl	80169ae <sys_mutex_lock>
 801cea8:	f8b4 0130 	ldrh.w	r0, [r4, #304]	; 0x130
 801ceac:	f8b4 2132 	ldrh.w	r2, [r4, #306]	; 0x132
 801ceb0:	1c43      	adds	r3, r0, #1
 801ceb2:	b29b      	uxth	r3, r3
 801ceb4:	2b0b      	cmp	r3, #11
 801ceb6:	bf28      	it	cs
 801ceb8:	2300      	movcs	r3, #0
 801ceba:	429a      	cmp	r2, r3
 801cebc:	d108      	bne.n	801ced0 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0x98>
 801cebe:	4630      	mov	r0, r6
 801cec0:	f7f9 fd84 	bl	80169cc <sys_mutex_unlock>
 801cec4:	4628      	mov	r0, r5
 801cec6:	f7fd fc91 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801ceca:	b009      	add	sp, #36	; 0x24
 801cecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ced0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801ced4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801ced8:	f8bd 700c 	ldrh.w	r7, [sp, #12]
 801cedc:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801cee0:	9a04      	ldr	r2, [sp, #16]
 801cee2:	4618      	mov	r0, r3
 801cee4:	f8a3 105c 	strh.w	r1, [r3, #92]	; 0x5c
 801cee8:	f8a3 7054 	strh.w	r7, [r3, #84]	; 0x54
 801ceec:	4629      	mov	r1, r5
 801ceee:	659a      	str	r2, [r3, #88]	; 0x58
 801cef0:	3060      	adds	r0, #96	; 0x60
 801cef2:	f7fd fc69 	bl	801a7c8 <_ZN4rtps11PBufWrapperaSEOS0_>
 801cef6:	f8b4 3130 	ldrh.w	r3, [r4, #304]	; 0x130
 801cefa:	3301      	adds	r3, #1
 801cefc:	b29b      	uxth	r3, r3
 801cefe:	2b0a      	cmp	r3, #10
 801cf00:	d814      	bhi.n	801cf2c <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0xf4>
 801cf02:	f8b4 2132 	ldrh.w	r2, [r4, #306]	; 0x132
 801cf06:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
 801cf0a:	4293      	cmp	r3, r2
 801cf0c:	d019      	beq.n	801cf42 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0x10a>
 801cf0e:	4630      	mov	r0, r6
 801cf10:	f7f9 fd5c 	bl	80169cc <sys_mutex_unlock>
 801cf14:	f104 0014 	add.w	r0, r4, #20
 801cf18:	f7f9 fcee 	bl	80168f8 <sys_sem_signal>
 801cf1c:	4628      	mov	r0, r5
 801cf1e:	f7fd fc65 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801cf22:	b009      	add	sp, #36	; 0x24
 801cf24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cf28:	46b0      	mov	r8, r6
 801cf2a:	e7a4      	b.n	801ce76 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0x3e>
 801cf2c:	2200      	movs	r2, #0
 801cf2e:	f8b4 3132 	ldrh.w	r3, [r4, #306]	; 0x132
 801cf32:	f8a4 2130 	strh.w	r2, [r4, #304]	; 0x130
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d1e9      	bne.n	801cf0e <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0xd6>
 801cf3a:	2301      	movs	r3, #1
 801cf3c:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
 801cf40:	e7e5      	b.n	801cf0e <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0xd6>
 801cf42:	3301      	adds	r3, #1
 801cf44:	b29b      	uxth	r3, r3
 801cf46:	2b0b      	cmp	r3, #11
 801cf48:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
 801cf4c:	d1df      	bne.n	801cf0e <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0xd6>
 801cf4e:	2300      	movs	r3, #0
 801cf50:	4630      	mov	r0, r6
 801cf52:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
 801cf56:	f7f9 fd39 	bl	80169cc <sys_mutex_unlock>
 801cf5a:	e7db      	b.n	801cf14 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0xdc>
 801cf5c:	4628      	mov	r0, r5
 801cf5e:	f7fd fc45 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801cf62:	f003 fe93 	bl	8020c8c <__cxa_end_cleanup>
 801cf66:	bf00      	nop

0801cf68 <_ZN4rtps10ThreadPool12doReaderWorkEv>:
 801cf68:	7a03      	ldrb	r3, [r0, #8]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d04f      	beq.n	801d00e <_ZN4rtps10ThreadPool12doReaderWorkEv+0xa6>
 801cf6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf70:	4604      	mov	r4, r0
 801cf72:	b087      	sub	sp, #28
 801cf74:	f500 769a 	add.w	r6, r0, #308	; 0x134
 801cf78:	2500      	movs	r5, #0
 801cf7a:	f100 0754 	add.w	r7, r0, #84	; 0x54
 801cf7e:	e00d      	b.n	801cf9c <_ZN4rtps10ThreadPool12doReaderWorkEv+0x34>
 801cf80:	4630      	mov	r0, r6
 801cf82:	f7f9 fd23 	bl	80169cc <sys_mutex_unlock>
 801cf86:	2100      	movs	r1, #0
 801cf88:	f104 0014 	add.w	r0, r4, #20
 801cf8c:	f7f9 fc83 	bl	8016896 <sys_arch_sem_wait>
 801cf90:	a804      	add	r0, sp, #16
 801cf92:	f7fd fc2b 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801cf96:	7a23      	ldrb	r3, [r4, #8]
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	d036      	beq.n	801d00a <_ZN4rtps10ThreadPool12doReaderWorkEv+0xa2>
 801cf9c:	4630      	mov	r0, r6
 801cf9e:	9504      	str	r5, [sp, #16]
 801cfa0:	f8ad 5014 	strh.w	r5, [sp, #20]
 801cfa4:	f7f9 fd03 	bl	80169ae <sys_mutex_lock>
 801cfa8:	f8b4 1132 	ldrh.w	r1, [r4, #306]	; 0x132
 801cfac:	f8b4 3130 	ldrh.w	r3, [r4, #304]	; 0x130
 801cfb0:	428b      	cmp	r3, r1
 801cfb2:	d0e5      	beq.n	801cf80 <_ZN4rtps10ThreadPool12doReaderWorkEv+0x18>
 801cfb4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801cfb8:	a804      	add	r0, sp, #16
 801cfba:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 801cfbe:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 801cfc2:	f8b3 c054 	ldrh.w	ip, [r3, #84]	; 0x54
 801cfc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801cfca:	310c      	adds	r1, #12
 801cfcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cfce:	f8ad c004 	strh.w	ip, [sp, #4]
 801cfd2:	f8ad 200c 	strh.w	r2, [sp, #12]
 801cfd6:	9302      	str	r3, [sp, #8]
 801cfd8:	f7fd fbf6 	bl	801a7c8 <_ZN4rtps11PBufWrapperaSEOS0_>
 801cfdc:	f8b4 3132 	ldrh.w	r3, [r4, #306]	; 0x132
 801cfe0:	4630      	mov	r0, r6
 801cfe2:	3301      	adds	r3, #1
 801cfe4:	b29b      	uxth	r3, r3
 801cfe6:	2b0a      	cmp	r3, #10
 801cfe8:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
 801cfec:	bf88      	it	hi
 801cfee:	f8a4 5132 	strhhi.w	r5, [r4, #306]	; 0x132
 801cff2:	f7f9 fceb 	bl	80169cc <sys_mutex_unlock>
 801cff6:	6823      	ldr	r3, [r4, #0]
 801cff8:	a901      	add	r1, sp, #4
 801cffa:	6860      	ldr	r0, [r4, #4]
 801cffc:	4798      	blx	r3
 801cffe:	a804      	add	r0, sp, #16
 801d000:	f7fd fbf4 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801d004:	7a23      	ldrb	r3, [r4, #8]
 801d006:	2b00      	cmp	r3, #0
 801d008:	d1c8      	bne.n	801cf9c <_ZN4rtps10ThreadPool12doReaderWorkEv+0x34>
 801d00a:	b007      	add	sp, #28
 801d00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d00e:	4770      	bx	lr
 801d010:	a804      	add	r0, sp, #16
 801d012:	f7fd fbeb 	bl	801a7ec <_ZN4rtps11PBufWrapperD1Ev>
 801d016:	f003 fe39 	bl	8020c8c <__cxa_end_cleanup>
 801d01a:	bf00      	nop

0801d01c <_ZN4rtps10ThreadPool20readerThreadFunctionEPv>:
 801d01c:	b108      	cbz	r0, 801d022 <_ZN4rtps10ThreadPool20readerThreadFunctionEPv+0x6>
 801d01e:	f7ff bfa3 	b.w	801cf68 <_ZN4rtps10ThreadPool12doReaderWorkEv>
 801d022:	4770      	bx	lr

0801d024 <_ZN4rtps9TopicData14matchesTopicOfERKS0_>:
 801d024:	b538      	push	{r3, r4, r5, lr}
 801d026:	4604      	mov	r4, r0
 801d028:	460d      	mov	r5, r1
 801d02a:	30d8      	adds	r0, #216	; 0xd8
 801d02c:	31d8      	adds	r1, #216	; 0xd8
 801d02e:	f7e3 f93f 	bl	80002b0 <strcmp>
 801d032:	b948      	cbnz	r0, 801d048 <_ZN4rtps9TopicData14matchesTopicOfERKS0_+0x24>
 801d034:	f105 0110 	add.w	r1, r5, #16
 801d038:	f104 0010 	add.w	r0, r4, #16
 801d03c:	f7e3 f938 	bl	80002b0 <strcmp>
 801d040:	fab0 f080 	clz	r0, r0
 801d044:	0940      	lsrs	r0, r0, #5
 801d046:	bd38      	pop	{r3, r4, r5, pc}
 801d048:	2000      	movs	r0, #0
 801d04a:	bd38      	pop	{r3, r4, r5, pc}

0801d04c <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer>:
 801d04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d04e:	460c      	mov	r4, r1
 801d050:	b089      	sub	sp, #36	; 0x24
 801d052:	4606      	mov	r6, r0
 801d054:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d058:	4620      	mov	r0, r4
 801d05a:	2500      	movs	r5, #0
 801d05c:	f001 f81e 	bl	801e09c <ucdr_buffer_remaining>
 801d060:	2803      	cmp	r0, #3
 801d062:	d970      	bls.n	801d146 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xfa>
 801d064:	4669      	mov	r1, sp
 801d066:	4620      	mov	r0, r4
 801d068:	e9cd 7502 	strd	r7, r5, [sp, #8]
 801d06c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d070:	e9cd 5506 	strd	r5, r5, [sp, #24]
 801d074:	f000 fcce 	bl	801da14 <ucdr_deserialize_uint16_t>
 801d078:	f10d 0102 	add.w	r1, sp, #2
 801d07c:	4620      	mov	r0, r4
 801d07e:	f000 fcc9 	bl	801da14 <ucdr_deserialize_uint16_t>
 801d082:	4620      	mov	r0, r4
 801d084:	f001 f80a 	bl	801e09c <ucdr_buffer_remaining>
 801d088:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 801d08c:	4281      	cmp	r1, r0
 801d08e:	f200 809b 	bhi.w	801d1c8 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x17c>
 801d092:	f8bd 3000 	ldrh.w	r3, [sp]
 801d096:	2b30      	cmp	r3, #48	; 0x30
 801d098:	d87a      	bhi.n	801d190 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x144>
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d074      	beq.n	801d188 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x13c>
 801d09e:	3b01      	subs	r3, #1
 801d0a0:	2b2f      	cmp	r3, #47	; 0x2f
 801d0a2:	d871      	bhi.n	801d188 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x13c>
 801d0a4:	e8df f003 	tbb	[pc, r3]
 801d0a8:	7070706d 	.word	0x7070706d
 801d0ac:	70577062 	.word	0x70577062
 801d0b0:	70707070 	.word	0x70707070
 801d0b4:	70707070 	.word	0x70707070
 801d0b8:	70707070 	.word	0x70707070
 801d0bc:	70707070 	.word	0x70707070
 801d0c0:	70703d70 	.word	0x70703d70
 801d0c4:	70707070 	.word	0x70707070
 801d0c8:	70707070 	.word	0x70707070
 801d0cc:	70707070 	.word	0x70707070
 801d0d0:	70707070 	.word	0x70707070
 801d0d4:	18247070 	.word	0x18247070
 801d0d8:	4620      	mov	r0, r4
 801d0da:	f000 ffdf 	bl	801e09c <ucdr_buffer_remaining>
 801d0de:	2817      	cmp	r0, #23
 801d0e0:	d928      	bls.n	801d134 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe8>
 801d0e2:	2218      	movs	r2, #24
 801d0e4:	f506 71e0 	add.w	r1, r6, #448	; 0x1c0
 801d0e8:	4620      	mov	r0, r4
 801d0ea:	f000 fb9b 	bl	801d824 <ucdr_deserialize_array_uint8_t>
 801d0ee:	e021      	b.n	801d134 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe8>
 801d0f0:	4620      	mov	r0, r4
 801d0f2:	f000 ffd3 	bl	801e09c <ucdr_buffer_remaining>
 801d0f6:	2817      	cmp	r0, #23
 801d0f8:	d85d      	bhi.n	801d1b6 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x16a>
 801d0fa:	9b02      	ldr	r3, [sp, #8]
 801d0fc:	2b01      	cmp	r3, #1
 801d0fe:	d119      	bne.n	801d134 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe8>
 801d100:	9807      	ldr	r0, [sp, #28]
 801d102:	f000 fa41 	bl	801d588 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
 801d106:	b1a8      	cbz	r0, 801d134 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe8>
 801d108:	f10d 0e08 	add.w	lr, sp, #8
 801d10c:	f506 7cd4 	add.w	ip, r6, #424	; 0x1a8
 801d110:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801d114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d118:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801d11c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d120:	e008      	b.n	801d134 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe8>
 801d122:	f506 71d0 	add.w	r1, r6, #416	; 0x1a0
 801d126:	4620      	mov	r0, r4
 801d128:	f000 fd80 	bl	801dc2c <ucdr_deserialize_uint32_t>
 801d12c:	2108      	movs	r1, #8
 801d12e:	4620      	mov	r0, r4
 801d130:	f000 ffd6 	bl	801e0e0 <ucdr_advance_buffer>
 801d134:	2104      	movs	r1, #4
 801d136:	4620      	mov	r0, r4
 801d138:	f000 ff9a 	bl	801e070 <ucdr_align_to>
 801d13c:	4620      	mov	r0, r4
 801d13e:	f000 ffad 	bl	801e09c <ucdr_buffer_remaining>
 801d142:	2803      	cmp	r0, #3
 801d144:	d88e      	bhi.n	801d064 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x18>
 801d146:	4620      	mov	r0, r4
 801d148:	f000 ffa8 	bl	801e09c <ucdr_buffer_remaining>
 801d14c:	fab0 f080 	clz	r0, r0
 801d150:	0940      	lsrs	r0, r0, #5
 801d152:	b009      	add	sp, #36	; 0x24
 801d154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d156:	a901      	add	r1, sp, #4
 801d158:	4620      	mov	r0, r4
 801d15a:	f000 fd67 	bl	801dc2c <ucdr_deserialize_uint32_t>
 801d15e:	9a01      	ldr	r2, [sp, #4]
 801d160:	f106 0110 	add.w	r1, r6, #16
 801d164:	4620      	mov	r0, r4
 801d166:	f000 faf7 	bl	801d758 <ucdr_deserialize_array_char>
 801d16a:	e7e3      	b.n	801d134 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe8>
 801d16c:	a901      	add	r1, sp, #4
 801d16e:	4620      	mov	r0, r4
 801d170:	f000 fd5c 	bl	801dc2c <ucdr_deserialize_uint32_t>
 801d174:	9a01      	ldr	r2, [sp, #4]
 801d176:	f106 01d8 	add.w	r1, r6, #216	; 0xd8
 801d17a:	4620      	mov	r0, r4
 801d17c:	f000 faec 	bl	801d758 <ucdr_deserialize_array_char>
 801d180:	e7d8      	b.n	801d134 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe8>
 801d182:	2001      	movs	r0, #1
 801d184:	b009      	add	sp, #36	; 0x24
 801d186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d188:	4620      	mov	r0, r4
 801d18a:	f000 ffa9 	bl	801e0e0 <ucdr_advance_buffer>
 801d18e:	e7d1      	b.n	801d134 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe8>
 801d190:	2b5a      	cmp	r3, #90	; 0x5a
 801d192:	d1f9      	bne.n	801d188 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x13c>
 801d194:	4631      	mov	r1, r6
 801d196:	220c      	movs	r2, #12
 801d198:	4620      	mov	r0, r4
 801d19a:	f000 fb43 	bl	801d824 <ucdr_deserialize_array_uint8_t>
 801d19e:	f106 010c 	add.w	r1, r6, #12
 801d1a2:	2203      	movs	r2, #3
 801d1a4:	4620      	mov	r0, r4
 801d1a6:	f000 fb3d 	bl	801d824 <ucdr_deserialize_array_uint8_t>
 801d1aa:	f106 010f 	add.w	r1, r6, #15
 801d1ae:	4620      	mov	r0, r4
 801d1b0:	f000 fb9a 	bl	801d8e8 <ucdr_deserialize_uint8_t>
 801d1b4:	e7be      	b.n	801d134 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe8>
 801d1b6:	2218      	movs	r2, #24
 801d1b8:	a902      	add	r1, sp, #8
 801d1ba:	4620      	mov	r0, r4
 801d1bc:	f000 fb32 	bl	801d824 <ucdr_deserialize_array_uint8_t>
 801d1c0:	9b02      	ldr	r3, [sp, #8]
 801d1c2:	2b01      	cmp	r3, #1
 801d1c4:	d1b6      	bne.n	801d134 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe8>
 801d1c6:	e79b      	b.n	801d100 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xb4>
 801d1c8:	2000      	movs	r0, #0
 801d1ca:	b009      	add	sp, #36	; 0x24
 801d1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1ce:	bf00      	nop

0801d1d0 <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer>:
 801d1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1d4:	460c      	mov	r4, r1
 801d1d6:	4605      	mov	r5, r0
 801d1d8:	212f      	movs	r1, #47	; 0x2f
 801d1da:	4620      	mov	r0, r4
 801d1dc:	f000 fb9a 	bl	801d914 <ucdr_serialize_uint16_t>
 801d1e0:	2118      	movs	r1, #24
 801d1e2:	4620      	mov	r0, r4
 801d1e4:	f000 fb96 	bl	801d914 <ucdr_serialize_uint16_t>
 801d1e8:	f505 71d4 	add.w	r1, r5, #424	; 0x1a8
 801d1ec:	4620      	mov	r0, r4
 801d1ee:	2218      	movs	r2, #24
 801d1f0:	f000 fae6 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801d1f4:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
 801d1f8:	2b01      	cmp	r3, #1
 801d1fa:	f000 80a7 	beq.w	801d34c <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer+0x17c>
 801d1fe:	f105 08d8 	add.w	r8, r5, #216	; 0xd8
 801d202:	4640      	mov	r0, r8
 801d204:	f7e3 f85e 	bl	80002c4 <strlen>
 801d208:	f100 0901 	add.w	r9, r0, #1
 801d20c:	f019 0603 	ands.w	r6, r9, #3
 801d210:	d002      	beq.n	801d218 <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer+0x48>
 801d212:	f1c6 0604 	rsb	r6, r6, #4
 801d216:	b2f6      	uxtb	r6, r6
 801d218:	f109 0304 	add.w	r3, r9, #4
 801d21c:	2105      	movs	r1, #5
 801d21e:	4620      	mov	r0, r4
 801d220:	f105 0710 	add.w	r7, r5, #16
 801d224:	441e      	add	r6, r3
 801d226:	f000 fb75 	bl	801d914 <ucdr_serialize_uint16_t>
 801d22a:	4620      	mov	r0, r4
 801d22c:	b2b6      	uxth	r6, r6
 801d22e:	4631      	mov	r1, r6
 801d230:	f000 fb70 	bl	801d914 <ucdr_serialize_uint16_t>
 801d234:	4649      	mov	r1, r9
 801d236:	4620      	mov	r0, r4
 801d238:	f000 fc60 	bl	801dafc <ucdr_serialize_uint32_t>
 801d23c:	464a      	mov	r2, r9
 801d23e:	4641      	mov	r1, r8
 801d240:	4620      	mov	r0, r4
 801d242:	f000 fa57 	bl	801d6f4 <ucdr_serialize_array_char>
 801d246:	2104      	movs	r1, #4
 801d248:	4620      	mov	r0, r4
 801d24a:	f000 ff11 	bl	801e070 <ucdr_align_to>
 801d24e:	4638      	mov	r0, r7
 801d250:	f7e3 f838 	bl	80002c4 <strlen>
 801d254:	f100 0801 	add.w	r8, r0, #1
 801d258:	f018 0603 	ands.w	r6, r8, #3
 801d25c:	d002      	beq.n	801d264 <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer+0x94>
 801d25e:	f1c6 0604 	rsb	r6, r6, #4
 801d262:	b2f6      	uxtb	r6, r6
 801d264:	f108 0304 	add.w	r3, r8, #4
 801d268:	2107      	movs	r1, #7
 801d26a:	4620      	mov	r0, r4
 801d26c:	f105 090c 	add.w	r9, r5, #12
 801d270:	441e      	add	r6, r3
 801d272:	f000 fb4f 	bl	801d914 <ucdr_serialize_uint16_t>
 801d276:	4620      	mov	r0, r4
 801d278:	b2b6      	uxth	r6, r6
 801d27a:	4631      	mov	r1, r6
 801d27c:	f000 fb4a 	bl	801d914 <ucdr_serialize_uint16_t>
 801d280:	4641      	mov	r1, r8
 801d282:	4620      	mov	r0, r4
 801d284:	f000 fc3a 	bl	801dafc <ucdr_serialize_uint32_t>
 801d288:	4642      	mov	r2, r8
 801d28a:	4639      	mov	r1, r7
 801d28c:	4620      	mov	r0, r4
 801d28e:	f000 fa31 	bl	801d6f4 <ucdr_serialize_array_char>
 801d292:	4620      	mov	r0, r4
 801d294:	2104      	movs	r1, #4
 801d296:	f000 feeb 	bl	801e070 <ucdr_align_to>
 801d29a:	2170      	movs	r1, #112	; 0x70
 801d29c:	4620      	mov	r0, r4
 801d29e:	f000 fb39 	bl	801d914 <ucdr_serialize_uint16_t>
 801d2a2:	2110      	movs	r1, #16
 801d2a4:	4620      	mov	r0, r4
 801d2a6:	f000 fb35 	bl	801d914 <ucdr_serialize_uint16_t>
 801d2aa:	4629      	mov	r1, r5
 801d2ac:	220c      	movs	r2, #12
 801d2ae:	4620      	mov	r0, r4
 801d2b0:	f000 fa86 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801d2b4:	2203      	movs	r2, #3
 801d2b6:	4649      	mov	r1, r9
 801d2b8:	4620      	mov	r0, r4
 801d2ba:	f000 fa81 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801d2be:	7be9      	ldrb	r1, [r5, #15]
 801d2c0:	4620      	mov	r0, r4
 801d2c2:	f000 fafb 	bl	801d8bc <ucdr_serialize_uint8_t>
 801d2c6:	215a      	movs	r1, #90	; 0x5a
 801d2c8:	4620      	mov	r0, r4
 801d2ca:	f000 fb23 	bl	801d914 <ucdr_serialize_uint16_t>
 801d2ce:	2110      	movs	r1, #16
 801d2d0:	4620      	mov	r0, r4
 801d2d2:	f000 fb1f 	bl	801d914 <ucdr_serialize_uint16_t>
 801d2d6:	4629      	mov	r1, r5
 801d2d8:	220c      	movs	r2, #12
 801d2da:	4620      	mov	r0, r4
 801d2dc:	f000 fa70 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801d2e0:	2203      	movs	r2, #3
 801d2e2:	4649      	mov	r1, r9
 801d2e4:	4620      	mov	r0, r4
 801d2e6:	f000 fa6b 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801d2ea:	7be9      	ldrb	r1, [r5, #15]
 801d2ec:	4620      	mov	r0, r4
 801d2ee:	f000 fae5 	bl	801d8bc <ucdr_serialize_uint8_t>
 801d2f2:	211a      	movs	r1, #26
 801d2f4:	4620      	mov	r0, r4
 801d2f6:	f000 fb0d 	bl	801d914 <ucdr_serialize_uint16_t>
 801d2fa:	210c      	movs	r1, #12
 801d2fc:	4620      	mov	r0, r4
 801d2fe:	f000 fb09 	bl	801d914 <ucdr_serialize_uint16_t>
 801d302:	f8d5 11a0 	ldr.w	r1, [r5, #416]	; 0x1a0
 801d306:	4620      	mov	r0, r4
 801d308:	f000 fbf8 	bl	801dafc <ucdr_serialize_uint32_t>
 801d30c:	2100      	movs	r1, #0
 801d30e:	4620      	mov	r0, r4
 801d310:	f000 fbf4 	bl	801dafc <ucdr_serialize_uint32_t>
 801d314:	2100      	movs	r1, #0
 801d316:	4620      	mov	r0, r4
 801d318:	f000 fbf0 	bl	801dafc <ucdr_serialize_uint32_t>
 801d31c:	211d      	movs	r1, #29
 801d31e:	4620      	mov	r0, r4
 801d320:	f000 faf8 	bl	801d914 <ucdr_serialize_uint16_t>
 801d324:	2104      	movs	r1, #4
 801d326:	4620      	mov	r0, r4
 801d328:	f000 faf4 	bl	801d914 <ucdr_serialize_uint16_t>
 801d32c:	f8d5 11a4 	ldr.w	r1, [r5, #420]	; 0x1a4
 801d330:	4620      	mov	r0, r4
 801d332:	f000 fbe3 	bl	801dafc <ucdr_serialize_uint32_t>
 801d336:	2101      	movs	r1, #1
 801d338:	4620      	mov	r0, r4
 801d33a:	f000 faeb 	bl	801d914 <ucdr_serialize_uint16_t>
 801d33e:	4620      	mov	r0, r4
 801d340:	2100      	movs	r1, #0
 801d342:	f000 fae7 	bl	801d914 <ucdr_serialize_uint16_t>
 801d346:	2001      	movs	r0, #1
 801d348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d34c:	2130      	movs	r1, #48	; 0x30
 801d34e:	4620      	mov	r0, r4
 801d350:	f000 fae0 	bl	801d914 <ucdr_serialize_uint16_t>
 801d354:	2118      	movs	r1, #24
 801d356:	4620      	mov	r0, r4
 801d358:	f000 fadc 	bl	801d914 <ucdr_serialize_uint16_t>
 801d35c:	2218      	movs	r2, #24
 801d35e:	f505 71e0 	add.w	r1, r5, #448	; 0x1c0
 801d362:	4620      	mov	r0, r4
 801d364:	f000 fa2c 	bl	801d7c0 <ucdr_serialize_array_uint8_t>
 801d368:	e749      	b.n	801d1fe <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer+0x2e>
 801d36a:	bf00      	nop

0801d36c <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE>:
 801d36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d370:	b08e      	sub	sp, #56	; 0x38
 801d372:	f101 05d8 	add.w	r5, r1, #216	; 0xd8
 801d376:	4607      	mov	r7, r0
 801d378:	460e      	mov	r6, r1
 801d37a:	f10d 0810 	add.w	r8, sp, #16
 801d37e:	4628      	mov	r0, r5
 801d380:	f8cd 8008 	str.w	r8, [sp, #8]
 801d384:	f7e2 ff9e 	bl	80002c4 <strlen>
 801d388:	280f      	cmp	r0, #15
 801d38a:	4604      	mov	r4, r0
 801d38c:	9008      	str	r0, [sp, #32]
 801d38e:	d81e      	bhi.n	801d3ce <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x62>
 801d390:	2801      	cmp	r0, #1
 801d392:	d118      	bne.n	801d3c6 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x5a>
 801d394:	f896 20d8 	ldrb.w	r2, [r6, #216]	; 0xd8
 801d398:	4643      	mov	r3, r8
 801d39a:	f88d 2010 	strb.w	r2, [sp, #16]
 801d39e:	2500      	movs	r5, #0
 801d3a0:	9403      	str	r4, [sp, #12]
 801d3a2:	4a35      	ldr	r2, [pc, #212]	; (801d478 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x10c>)
 801d3a4:	551d      	strb	r5, [r3, r4]
 801d3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801d3aa:	f003 ffcb 	bl	8021344 <_ZSt11_Hash_bytesPKvjj>
 801d3ae:	693b      	ldr	r3, [r7, #16]
 801d3b0:	4283      	cmp	r3, r0
 801d3b2:	d01b      	beq.n	801d3ec <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x80>
 801d3b4:	9802      	ldr	r0, [sp, #8]
 801d3b6:	4540      	cmp	r0, r8
 801d3b8:	d001      	beq.n	801d3be <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x52>
 801d3ba:	f003 fc63 	bl	8020c84 <_ZdlPv>
 801d3be:	4628      	mov	r0, r5
 801d3c0:	b00e      	add	sp, #56	; 0x38
 801d3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3c6:	2800      	cmp	r0, #0
 801d3c8:	d14c      	bne.n	801d464 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0xf8>
 801d3ca:	4643      	mov	r3, r8
 801d3cc:	e7e7      	b.n	801d39e <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x32>
 801d3ce:	a802      	add	r0, sp, #8
 801d3d0:	2200      	movs	r2, #0
 801d3d2:	a908      	add	r1, sp, #32
 801d3d4:	f004 f894 	bl	8021500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801d3d8:	9b08      	ldr	r3, [sp, #32]
 801d3da:	9002      	str	r0, [sp, #8]
 801d3dc:	9304      	str	r3, [sp, #16]
 801d3de:	4622      	mov	r2, r4
 801d3e0:	4629      	mov	r1, r5
 801d3e2:	f004 fb4d 	bl	8021a80 <memcpy>
 801d3e6:	9c08      	ldr	r4, [sp, #32]
 801d3e8:	9b02      	ldr	r3, [sp, #8]
 801d3ea:	e7d8      	b.n	801d39e <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x32>
 801d3ec:	f106 0a10 	add.w	sl, r6, #16
 801d3f0:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 801d3f4:	4650      	mov	r0, sl
 801d3f6:	f8cd 9020 	str.w	r9, [sp, #32]
 801d3fa:	f7e2 ff63 	bl	80002c4 <strlen>
 801d3fe:	280f      	cmp	r0, #15
 801d400:	4604      	mov	r4, r0
 801d402:	9001      	str	r0, [sp, #4]
 801d404:	d81a      	bhi.n	801d43c <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0xd0>
 801d406:	2801      	cmp	r0, #1
 801d408:	d127      	bne.n	801d45a <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0xee>
 801d40a:	7c33      	ldrb	r3, [r6, #16]
 801d40c:	4649      	mov	r1, r9
 801d40e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801d412:	2300      	movs	r3, #0
 801d414:	9409      	str	r4, [sp, #36]	; 0x24
 801d416:	4a18      	ldr	r2, [pc, #96]	; (801d478 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x10c>)
 801d418:	550b      	strb	r3, [r1, r4]
 801d41a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801d41e:	f003 ff91 	bl	8021344 <_ZSt11_Hash_bytesPKvjj>
 801d422:	697d      	ldr	r5, [r7, #20]
 801d424:	9a08      	ldr	r2, [sp, #32]
 801d426:	1a2d      	subs	r5, r5, r0
 801d428:	454a      	cmp	r2, r9
 801d42a:	fab5 f585 	clz	r5, r5
 801d42e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801d432:	d0bf      	beq.n	801d3b4 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x48>
 801d434:	4610      	mov	r0, r2
 801d436:	f003 fc25 	bl	8020c84 <_ZdlPv>
 801d43a:	e7bb      	b.n	801d3b4 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x48>
 801d43c:	462a      	mov	r2, r5
 801d43e:	a808      	add	r0, sp, #32
 801d440:	a901      	add	r1, sp, #4
 801d442:	f004 f85d 	bl	8021500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801d446:	9b01      	ldr	r3, [sp, #4]
 801d448:	9008      	str	r0, [sp, #32]
 801d44a:	930a      	str	r3, [sp, #40]	; 0x28
 801d44c:	4622      	mov	r2, r4
 801d44e:	4651      	mov	r1, sl
 801d450:	f004 fb16 	bl	8021a80 <memcpy>
 801d454:	9c01      	ldr	r4, [sp, #4]
 801d456:	9908      	ldr	r1, [sp, #32]
 801d458:	e7db      	b.n	801d412 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0xa6>
 801d45a:	b908      	cbnz	r0, 801d460 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0xf4>
 801d45c:	4649      	mov	r1, r9
 801d45e:	e7d8      	b.n	801d412 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0xa6>
 801d460:	4648      	mov	r0, r9
 801d462:	e7f3      	b.n	801d44c <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0xe0>
 801d464:	4640      	mov	r0, r8
 801d466:	e7ba      	b.n	801d3de <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x72>
 801d468:	9802      	ldr	r0, [sp, #8]
 801d46a:	4540      	cmp	r0, r8
 801d46c:	d001      	beq.n	801d472 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x106>
 801d46e:	f003 fc09 	bl	8020c84 <_ZdlPv>
 801d472:	f003 fc0b 	bl	8020c8c <__cxa_end_cleanup>
 801d476:	e7fc      	b.n	801d472 <_ZNK4rtps19TopicDataCompressed14matchesTopicOfERKNS_9TopicDataE+0x106>
 801d478:	c70f6907 	.word	0xc70f6907

0801d47c <_ZN4rtps9UdpDriverC1EPFvPvP7udp_pcbP4pbufPK8ip4_addrtES1_>:
 801d47c:	b570      	push	{r4, r5, r6, lr}
 801d47e:	460e      	mov	r6, r1
 801d480:	4615      	mov	r5, r2
 801d482:	2100      	movs	r1, #0
 801d484:	2278      	movs	r2, #120	; 0x78
 801d486:	4604      	mov	r4, r0
 801d488:	f004 fb22 	bl	8021ad0 <memset>
 801d48c:	2300      	movs	r3, #0
 801d48e:	4620      	mov	r0, r4
 801d490:	67e6      	str	r6, [r4, #124]	; 0x7c
 801d492:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 801d496:	67a3      	str	r3, [r4, #120]	; 0x78
 801d498:	bd70      	pop	{r4, r5, r6, pc}
 801d49a:	bf00      	nop

0801d49c <_ZN4rtps9UdpDriver19createUdpConnectionEt>:
 801d49c:	b570      	push	{r4, r5, r6, lr}
 801d49e:	460e      	mov	r6, r1
 801d4a0:	6f81      	ldr	r1, [r0, #120]	; 0x78
 801d4a2:	b082      	sub	sp, #8
 801d4a4:	4605      	mov	r5, r0
 801d4a6:	b191      	cbz	r1, 801d4ce <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x32>
 801d4a8:	2300      	movs	r3, #0
 801d4aa:	461a      	mov	r2, r3
 801d4ac:	e004      	b.n	801d4b8 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x1c>
 801d4ae:	3301      	adds	r3, #1
 801d4b0:	b2db      	uxtb	r3, r3
 801d4b2:	428b      	cmp	r3, r1
 801d4b4:	461a      	mov	r2, r3
 801d4b6:	d208      	bcs.n	801d4ca <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x2e>
 801d4b8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801d4bc:	8894      	ldrh	r4, [r2, #4]
 801d4be:	42b4      	cmp	r4, r6
 801d4c0:	d1f5      	bne.n	801d4ae <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x12>
 801d4c2:	4614      	mov	r4, r2
 801d4c4:	4620      	mov	r0, r4
 801d4c6:	b002      	add	sp, #8
 801d4c8:	bd70      	pop	{r4, r5, r6, pc}
 801d4ca:	290f      	cmp	r1, #15
 801d4cc:	d048      	beq.n	801d560 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xc4>
 801d4ce:	2300      	movs	r3, #0
 801d4d0:	482b      	ldr	r0, [pc, #172]	; (801d580 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xe4>)
 801d4d2:	f8ad 6004 	strh.w	r6, [sp, #4]
 801d4d6:	9300      	str	r3, [sp, #0]
 801d4d8:	f7f9 fa69 	bl	80169ae <sys_mutex_lock>
 801d4dc:	f7f6 f95a 	bl	8013794 <udp_new>
 801d4e0:	4603      	mov	r3, r0
 801d4e2:	4827      	ldr	r0, [pc, #156]	; (801d580 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xe4>)
 801d4e4:	9300      	str	r3, [sp, #0]
 801d4e6:	f7f9 fa71 	bl	80169cc <sys_mutex_unlock>
 801d4ea:	4825      	ldr	r0, [pc, #148]	; (801d580 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xe4>)
 801d4ec:	f7f9 fa5f 	bl	80169ae <sys_mutex_lock>
 801d4f0:	4632      	mov	r2, r6
 801d4f2:	4924      	ldr	r1, [pc, #144]	; (801d584 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xe8>)
 801d4f4:	9800      	ldr	r0, [sp, #0]
 801d4f6:	f7f6 f863 	bl	80135c0 <udp_bind>
 801d4fa:	b130      	cbz	r0, 801d50a <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x6e>
 801d4fc:	3008      	adds	r0, #8
 801d4fe:	d004      	beq.n	801d50a <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x6e>
 801d500:	481f      	ldr	r0, [pc, #124]	; (801d580 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xe4>)
 801d502:	2400      	movs	r4, #0
 801d504:	f7f9 fa62 	bl	80169cc <sys_mutex_unlock>
 801d508:	e024      	b.n	801d554 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xb8>
 801d50a:	e9d5 121f 	ldrd	r1, r2, [r5, #124]	; 0x7c
 801d50e:	9800      	ldr	r0, [sp, #0]
 801d510:	f7f6 f8de 	bl	80136d0 <udp_recv>
 801d514:	481a      	ldr	r0, [pc, #104]	; (801d580 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xe4>)
 801d516:	f7f9 fa59 	bl	80169cc <sys_mutex_unlock>
 801d51a:	6fac      	ldr	r4, [r5, #120]	; 0x78
 801d51c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801d520:	00e2      	lsls	r2, r4, #3
 801d522:	18ab      	adds	r3, r5, r2
 801d524:	4616      	mov	r6, r2
 801d526:	8099      	strh	r1, [r3, #4]
 801d528:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 801d52c:	b15b      	cbz	r3, 801d546 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xaa>
 801d52e:	4814      	ldr	r0, [pc, #80]	; (801d580 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xe4>)
 801d530:	f7f9 fa3d 	bl	80169ae <sys_mutex_lock>
 801d534:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
 801d538:	f7f6 f8ea 	bl	8013710 <udp_remove>
 801d53c:	4810      	ldr	r0, [pc, #64]	; (801d580 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xe4>)
 801d53e:	f7f9 fa45 	bl	80169cc <sys_mutex_unlock>
 801d542:	6fac      	ldr	r4, [r5, #120]	; 0x78
 801d544:	00e2      	lsls	r2, r4, #3
 801d546:	1c63      	adds	r3, r4, #1
 801d548:	9900      	ldr	r1, [sp, #0]
 801d54a:	18ac      	adds	r4, r5, r2
 801d54c:	2200      	movs	r2, #0
 801d54e:	51a9      	str	r1, [r5, r6]
 801d550:	9200      	str	r2, [sp, #0]
 801d552:	67ab      	str	r3, [r5, #120]	; 0x78
 801d554:	4668      	mov	r0, sp
 801d556:	f7fa fabf 	bl	8017ad8 <_ZN4rtps13UdpConnectionD1Ev>
 801d55a:	4620      	mov	r0, r4
 801d55c:	b002      	add	sp, #8
 801d55e:	bd70      	pop	{r4, r5, r6, pc}
 801d560:	2400      	movs	r4, #0
 801d562:	e7af      	b.n	801d4c4 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x28>
 801d564:	4806      	ldr	r0, [pc, #24]	; (801d580 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xe4>)
 801d566:	f7f9 fa31 	bl	80169cc <sys_mutex_unlock>
 801d56a:	f003 fb8f 	bl	8020c8c <__cxa_end_cleanup>
 801d56e:	e002      	b.n	801d576 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xda>
 801d570:	4803      	ldr	r0, [pc, #12]	; (801d580 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xe4>)
 801d572:	f7f9 fa2b 	bl	80169cc <sys_mutex_unlock>
 801d576:	4668      	mov	r0, sp
 801d578:	f7fa faae 	bl	8017ad8 <_ZN4rtps13UdpConnectionD1Ev>
 801d57c:	f003 fb86 	bl	8020c8c <__cxa_end_cleanup>
 801d580:	20035334 	.word	0x20035334
 801d584:	080262a0 	.word	0x080262a0

0801d588 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>:
 801d588:	4b04      	ldr	r3, [pc, #16]	; (801d59c <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr+0x14>)
 801d58a:	681b      	ldr	r3, [r3, #0]
 801d58c:	e9d3 2301 	ldrd	r2, r3, [r3, #4]
 801d590:	4050      	eors	r0, r2
 801d592:	4218      	tst	r0, r3
 801d594:	bf0c      	ite	eq
 801d596:	2001      	moveq	r0, #1
 801d598:	2000      	movne	r0, #0
 801d59a:	4770      	bx	lr
 801d59c:	20040b38 	.word	0x20040b38

0801d5a0 <_ZNK4rtps9UdpDriver18joinMultiCastGroupE8ip4_addr>:
 801d5a0:	b510      	push	{r4, lr}
 801d5a2:	b082      	sub	sp, #8
 801d5a4:	480a      	ldr	r0, [pc, #40]	; (801d5d0 <_ZNK4rtps9UdpDriver18joinMultiCastGroupE8ip4_addr+0x30>)
 801d5a6:	9101      	str	r1, [sp, #4]
 801d5a8:	f7f9 fa01 	bl	80169ae <sys_mutex_lock>
 801d5ac:	a901      	add	r1, sp, #4
 801d5ae:	4809      	ldr	r0, [pc, #36]	; (801d5d4 <_ZNK4rtps9UdpDriver18joinMultiCastGroupE8ip4_addr+0x34>)
 801d5b0:	f7f7 fb92 	bl	8014cd8 <igmp_joingroup>
 801d5b4:	4604      	mov	r4, r0
 801d5b6:	4806      	ldr	r0, [pc, #24]	; (801d5d0 <_ZNK4rtps9UdpDriver18joinMultiCastGroupE8ip4_addr+0x30>)
 801d5b8:	f7f9 fa08 	bl	80169cc <sys_mutex_unlock>
 801d5bc:	fab4 f084 	clz	r0, r4
 801d5c0:	0940      	lsrs	r0, r0, #5
 801d5c2:	b002      	add	sp, #8
 801d5c4:	bd10      	pop	{r4, pc}
 801d5c6:	4802      	ldr	r0, [pc, #8]	; (801d5d0 <_ZNK4rtps9UdpDriver18joinMultiCastGroupE8ip4_addr+0x30>)
 801d5c8:	f7f9 fa00 	bl	80169cc <sys_mutex_unlock>
 801d5cc:	f003 fb5e 	bl	8020c8c <__cxa_end_cleanup>
 801d5d0:	20035334 	.word	0x20035334
 801d5d4:	080262a0 	.word	0x080262a0

0801d5d8 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>:
 801d5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5dc:	460e      	mov	r6, r1
 801d5de:	6f81      	ldr	r1, [r0, #120]	; 0x78
 801d5e0:	b084      	sub	sp, #16
 801d5e2:	4605      	mov	r5, r0
 801d5e4:	8834      	ldrh	r4, [r6, #0]
 801d5e6:	b311      	cbz	r1, 801d62e <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x56>
 801d5e8:	2200      	movs	r2, #0
 801d5ea:	4613      	mov	r3, r2
 801d5ec:	e004      	b.n	801d5f8 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x20>
 801d5ee:	3301      	adds	r3, #1
 801d5f0:	b2db      	uxtb	r3, r3
 801d5f2:	428b      	cmp	r3, r1
 801d5f4:	461a      	mov	r2, r3
 801d5f6:	d218      	bcs.n	801d62a <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x52>
 801d5f8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801d5fc:	8890      	ldrh	r0, [r2, #4]
 801d5fe:	42a0      	cmp	r0, r4
 801d600:	d1f5      	bne.n	801d5ee <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x16>
 801d602:	4614      	mov	r4, r2
 801d604:	68f1      	ldr	r1, [r6, #12]
 801d606:	8933      	ldrh	r3, [r6, #8]
 801d608:	4838      	ldr	r0, [pc, #224]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d60a:	9101      	str	r1, [sp, #4]
 801d60c:	9300      	str	r3, [sp, #0]
 801d60e:	f7f9 f9ce 	bl	80169ae <sys_mutex_lock>
 801d612:	1d32      	adds	r2, r6, #4
 801d614:	6820      	ldr	r0, [r4, #0]
 801d616:	e9dd 3100 	ldrd	r3, r1, [sp]
 801d61a:	f7f5 fdd7 	bl	80131cc <udp_sendto>
 801d61e:	4833      	ldr	r0, [pc, #204]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d620:	f7f9 f9d4 	bl	80169cc <sys_mutex_unlock>
 801d624:	b004      	add	sp, #16
 801d626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d62a:	290f      	cmp	r1, #15
 801d62c:	d0fa      	beq.n	801d624 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x4c>
 801d62e:	2300      	movs	r3, #0
 801d630:	482e      	ldr	r0, [pc, #184]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d632:	f8ad 400c 	strh.w	r4, [sp, #12]
 801d636:	9302      	str	r3, [sp, #8]
 801d638:	f7f9 f9b9 	bl	80169ae <sys_mutex_lock>
 801d63c:	f7f6 f8aa 	bl	8013794 <udp_new>
 801d640:	4603      	mov	r3, r0
 801d642:	482a      	ldr	r0, [pc, #168]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d644:	9302      	str	r3, [sp, #8]
 801d646:	f7f9 f9c1 	bl	80169cc <sys_mutex_unlock>
 801d64a:	4828      	ldr	r0, [pc, #160]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d64c:	f7f9 f9af 	bl	80169ae <sys_mutex_lock>
 801d650:	4622      	mov	r2, r4
 801d652:	4927      	ldr	r1, [pc, #156]	; (801d6f0 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x118>)
 801d654:	9802      	ldr	r0, [sp, #8]
 801d656:	f7f5 ffb3 	bl	80135c0 <udp_bind>
 801d65a:	b150      	cbz	r0, 801d672 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x9a>
 801d65c:	3008      	adds	r0, #8
 801d65e:	d008      	beq.n	801d672 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x9a>
 801d660:	4822      	ldr	r0, [pc, #136]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d662:	f7f9 f9b3 	bl	80169cc <sys_mutex_unlock>
 801d666:	a802      	add	r0, sp, #8
 801d668:	f7fa fa36 	bl	8017ad8 <_ZN4rtps13UdpConnectionD1Ev>
 801d66c:	b004      	add	sp, #16
 801d66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d672:	e9d5 121f 	ldrd	r1, r2, [r5, #124]	; 0x7c
 801d676:	9802      	ldr	r0, [sp, #8]
 801d678:	f7f6 f82a 	bl	80136d0 <udp_recv>
 801d67c:	481b      	ldr	r0, [pc, #108]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d67e:	f7f9 f9a5 	bl	80169cc <sys_mutex_unlock>
 801d682:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801d684:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d688:	00fa      	lsls	r2, r7, #3
 801d68a:	18ab      	adds	r3, r5, r2
 801d68c:	4690      	mov	r8, r2
 801d68e:	8099      	strh	r1, [r3, #4]
 801d690:	f855 3037 	ldr.w	r3, [r5, r7, lsl #3]
 801d694:	b15b      	cbz	r3, 801d6ae <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xd6>
 801d696:	4815      	ldr	r0, [pc, #84]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d698:	f7f9 f989 	bl	80169ae <sys_mutex_lock>
 801d69c:	f855 0037 	ldr.w	r0, [r5, r7, lsl #3]
 801d6a0:	f7f6 f836 	bl	8013710 <udp_remove>
 801d6a4:	4811      	ldr	r0, [pc, #68]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d6a6:	f7f9 f991 	bl	80169cc <sys_mutex_unlock>
 801d6aa:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801d6ac:	00fa      	lsls	r2, r7, #3
 801d6ae:	9902      	ldr	r1, [sp, #8]
 801d6b0:	3701      	adds	r7, #1
 801d6b2:	2300      	movs	r3, #0
 801d6b4:	a802      	add	r0, sp, #8
 801d6b6:	f845 1008 	str.w	r1, [r5, r8]
 801d6ba:	18ac      	adds	r4, r5, r2
 801d6bc:	67af      	str	r7, [r5, #120]	; 0x78
 801d6be:	9302      	str	r3, [sp, #8]
 801d6c0:	f7fa fa0a 	bl	8017ad8 <_ZN4rtps13UdpConnectionD1Ev>
 801d6c4:	e79e      	b.n	801d604 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x2c>
 801d6c6:	4809      	ldr	r0, [pc, #36]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d6c8:	f7f9 f980 	bl	80169cc <sys_mutex_unlock>
 801d6cc:	a802      	add	r0, sp, #8
 801d6ce:	f7fa fa03 	bl	8017ad8 <_ZN4rtps13UdpConnectionD1Ev>
 801d6d2:	f003 fadb 	bl	8020c8c <__cxa_end_cleanup>
 801d6d6:	4805      	ldr	r0, [pc, #20]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d6d8:	f7f9 f978 	bl	80169cc <sys_mutex_unlock>
 801d6dc:	f003 fad6 	bl	8020c8c <__cxa_end_cleanup>
 801d6e0:	4802      	ldr	r0, [pc, #8]	; (801d6ec <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x114>)
 801d6e2:	f7f9 f973 	bl	80169cc <sys_mutex_unlock>
 801d6e6:	f003 fad1 	bl	8020c8c <__cxa_end_cleanup>
 801d6ea:	e7ef      	b.n	801d6cc <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xf4>
 801d6ec:	20035334 	.word	0x20035334
 801d6f0:	080262a0 	.word	0x080262a0

0801d6f4 <ucdr_serialize_array_char>:
 801d6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6f8:	4688      	mov	r8, r1
 801d6fa:	4611      	mov	r1, r2
 801d6fc:	4616      	mov	r6, r2
 801d6fe:	4604      	mov	r4, r0
 801d700:	f000 fc4c 	bl	801df9c <ucdr_check_buffer_available_for>
 801d704:	b9e0      	cbnz	r0, 801d740 <ucdr_serialize_array_char+0x4c>
 801d706:	4637      	mov	r7, r6
 801d708:	e00b      	b.n	801d722 <ucdr_serialize_array_char+0x2e>
 801d70a:	4441      	add	r1, r8
 801d70c:	68a0      	ldr	r0, [r4, #8]
 801d70e:	462a      	mov	r2, r5
 801d710:	1b7f      	subs	r7, r7, r5
 801d712:	f004 f9b5 	bl	8021a80 <memcpy>
 801d716:	68a3      	ldr	r3, [r4, #8]
 801d718:	6920      	ldr	r0, [r4, #16]
 801d71a:	442b      	add	r3, r5
 801d71c:	4428      	add	r0, r5
 801d71e:	60a3      	str	r3, [r4, #8]
 801d720:	6120      	str	r0, [r4, #16]
 801d722:	4639      	mov	r1, r7
 801d724:	2201      	movs	r2, #1
 801d726:	4620      	mov	r0, r4
 801d728:	f000 fcbc 	bl	801e0a4 <ucdr_check_final_buffer_behavior_array>
 801d72c:	1bf1      	subs	r1, r6, r7
 801d72e:	4605      	mov	r5, r0
 801d730:	2800      	cmp	r0, #0
 801d732:	d1ea      	bne.n	801d70a <ucdr_serialize_array_char+0x16>
 801d734:	2301      	movs	r3, #1
 801d736:	7da0      	ldrb	r0, [r4, #22]
 801d738:	7563      	strb	r3, [r4, #21]
 801d73a:	4058      	eors	r0, r3
 801d73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d740:	4632      	mov	r2, r6
 801d742:	4641      	mov	r1, r8
 801d744:	68a0      	ldr	r0, [r4, #8]
 801d746:	f004 f99b 	bl	8021a80 <memcpy>
 801d74a:	68a3      	ldr	r3, [r4, #8]
 801d74c:	6922      	ldr	r2, [r4, #16]
 801d74e:	4433      	add	r3, r6
 801d750:	4432      	add	r2, r6
 801d752:	60a3      	str	r3, [r4, #8]
 801d754:	6122      	str	r2, [r4, #16]
 801d756:	e7ed      	b.n	801d734 <ucdr_serialize_array_char+0x40>

0801d758 <ucdr_deserialize_array_char>:
 801d758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d75c:	4688      	mov	r8, r1
 801d75e:	4611      	mov	r1, r2
 801d760:	4616      	mov	r6, r2
 801d762:	4604      	mov	r4, r0
 801d764:	f000 fc1a 	bl	801df9c <ucdr_check_buffer_available_for>
 801d768:	b9e8      	cbnz	r0, 801d7a6 <ucdr_deserialize_array_char+0x4e>
 801d76a:	4637      	mov	r7, r6
 801d76c:	e00c      	b.n	801d788 <ucdr_deserialize_array_char+0x30>
 801d76e:	eb08 0003 	add.w	r0, r8, r3
 801d772:	68a1      	ldr	r1, [r4, #8]
 801d774:	462a      	mov	r2, r5
 801d776:	1b7f      	subs	r7, r7, r5
 801d778:	f004 f982 	bl	8021a80 <memcpy>
 801d77c:	68a3      	ldr	r3, [r4, #8]
 801d77e:	6920      	ldr	r0, [r4, #16]
 801d780:	442b      	add	r3, r5
 801d782:	4428      	add	r0, r5
 801d784:	60a3      	str	r3, [r4, #8]
 801d786:	6120      	str	r0, [r4, #16]
 801d788:	2201      	movs	r2, #1
 801d78a:	4639      	mov	r1, r7
 801d78c:	4620      	mov	r0, r4
 801d78e:	f000 fc89 	bl	801e0a4 <ucdr_check_final_buffer_behavior_array>
 801d792:	1bf3      	subs	r3, r6, r7
 801d794:	4605      	mov	r5, r0
 801d796:	2800      	cmp	r0, #0
 801d798:	d1e9      	bne.n	801d76e <ucdr_deserialize_array_char+0x16>
 801d79a:	2301      	movs	r3, #1
 801d79c:	7da0      	ldrb	r0, [r4, #22]
 801d79e:	7563      	strb	r3, [r4, #21]
 801d7a0:	4058      	eors	r0, r3
 801d7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7a6:	4632      	mov	r2, r6
 801d7a8:	4640      	mov	r0, r8
 801d7aa:	68a1      	ldr	r1, [r4, #8]
 801d7ac:	f004 f968 	bl	8021a80 <memcpy>
 801d7b0:	68a3      	ldr	r3, [r4, #8]
 801d7b2:	6922      	ldr	r2, [r4, #16]
 801d7b4:	4433      	add	r3, r6
 801d7b6:	4432      	add	r2, r6
 801d7b8:	60a3      	str	r3, [r4, #8]
 801d7ba:	6122      	str	r2, [r4, #16]
 801d7bc:	e7ed      	b.n	801d79a <ucdr_deserialize_array_char+0x42>
 801d7be:	bf00      	nop

0801d7c0 <ucdr_serialize_array_uint8_t>:
 801d7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7c4:	4688      	mov	r8, r1
 801d7c6:	4611      	mov	r1, r2
 801d7c8:	4616      	mov	r6, r2
 801d7ca:	4604      	mov	r4, r0
 801d7cc:	f000 fbe6 	bl	801df9c <ucdr_check_buffer_available_for>
 801d7d0:	b9e0      	cbnz	r0, 801d80c <ucdr_serialize_array_uint8_t+0x4c>
 801d7d2:	4637      	mov	r7, r6
 801d7d4:	e00b      	b.n	801d7ee <ucdr_serialize_array_uint8_t+0x2e>
 801d7d6:	4441      	add	r1, r8
 801d7d8:	68a0      	ldr	r0, [r4, #8]
 801d7da:	462a      	mov	r2, r5
 801d7dc:	1b7f      	subs	r7, r7, r5
 801d7de:	f004 f94f 	bl	8021a80 <memcpy>
 801d7e2:	68a3      	ldr	r3, [r4, #8]
 801d7e4:	6920      	ldr	r0, [r4, #16]
 801d7e6:	442b      	add	r3, r5
 801d7e8:	4428      	add	r0, r5
 801d7ea:	60a3      	str	r3, [r4, #8]
 801d7ec:	6120      	str	r0, [r4, #16]
 801d7ee:	4639      	mov	r1, r7
 801d7f0:	2201      	movs	r2, #1
 801d7f2:	4620      	mov	r0, r4
 801d7f4:	f000 fc56 	bl	801e0a4 <ucdr_check_final_buffer_behavior_array>
 801d7f8:	1bf1      	subs	r1, r6, r7
 801d7fa:	4605      	mov	r5, r0
 801d7fc:	2800      	cmp	r0, #0
 801d7fe:	d1ea      	bne.n	801d7d6 <ucdr_serialize_array_uint8_t+0x16>
 801d800:	2301      	movs	r3, #1
 801d802:	7da0      	ldrb	r0, [r4, #22]
 801d804:	7563      	strb	r3, [r4, #21]
 801d806:	4058      	eors	r0, r3
 801d808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d80c:	4632      	mov	r2, r6
 801d80e:	4641      	mov	r1, r8
 801d810:	68a0      	ldr	r0, [r4, #8]
 801d812:	f004 f935 	bl	8021a80 <memcpy>
 801d816:	68a3      	ldr	r3, [r4, #8]
 801d818:	6922      	ldr	r2, [r4, #16]
 801d81a:	4433      	add	r3, r6
 801d81c:	4432      	add	r2, r6
 801d81e:	60a3      	str	r3, [r4, #8]
 801d820:	6122      	str	r2, [r4, #16]
 801d822:	e7ed      	b.n	801d800 <ucdr_serialize_array_uint8_t+0x40>

0801d824 <ucdr_deserialize_array_uint8_t>:
 801d824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d828:	4688      	mov	r8, r1
 801d82a:	4611      	mov	r1, r2
 801d82c:	4616      	mov	r6, r2
 801d82e:	4604      	mov	r4, r0
 801d830:	f000 fbb4 	bl	801df9c <ucdr_check_buffer_available_for>
 801d834:	b9e8      	cbnz	r0, 801d872 <ucdr_deserialize_array_uint8_t+0x4e>
 801d836:	4637      	mov	r7, r6
 801d838:	e00c      	b.n	801d854 <ucdr_deserialize_array_uint8_t+0x30>
 801d83a:	eb08 0003 	add.w	r0, r8, r3
 801d83e:	68a1      	ldr	r1, [r4, #8]
 801d840:	462a      	mov	r2, r5
 801d842:	1b7f      	subs	r7, r7, r5
 801d844:	f004 f91c 	bl	8021a80 <memcpy>
 801d848:	68a3      	ldr	r3, [r4, #8]
 801d84a:	6920      	ldr	r0, [r4, #16]
 801d84c:	442b      	add	r3, r5
 801d84e:	4428      	add	r0, r5
 801d850:	60a3      	str	r3, [r4, #8]
 801d852:	6120      	str	r0, [r4, #16]
 801d854:	2201      	movs	r2, #1
 801d856:	4639      	mov	r1, r7
 801d858:	4620      	mov	r0, r4
 801d85a:	f000 fc23 	bl	801e0a4 <ucdr_check_final_buffer_behavior_array>
 801d85e:	1bf3      	subs	r3, r6, r7
 801d860:	4605      	mov	r5, r0
 801d862:	2800      	cmp	r0, #0
 801d864:	d1e9      	bne.n	801d83a <ucdr_deserialize_array_uint8_t+0x16>
 801d866:	2301      	movs	r3, #1
 801d868:	7da0      	ldrb	r0, [r4, #22]
 801d86a:	7563      	strb	r3, [r4, #21]
 801d86c:	4058      	eors	r0, r3
 801d86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d872:	4632      	mov	r2, r6
 801d874:	4640      	mov	r0, r8
 801d876:	68a1      	ldr	r1, [r4, #8]
 801d878:	f004 f902 	bl	8021a80 <memcpy>
 801d87c:	68a3      	ldr	r3, [r4, #8]
 801d87e:	6922      	ldr	r2, [r4, #16]
 801d880:	4433      	add	r3, r6
 801d882:	4432      	add	r2, r6
 801d884:	60a3      	str	r3, [r4, #8]
 801d886:	6122      	str	r2, [r4, #16]
 801d888:	e7ed      	b.n	801d866 <ucdr_deserialize_array_uint8_t+0x42>
 801d88a:	bf00      	nop

0801d88c <ucdr_deserialize_bool>:
 801d88c:	b538      	push	{r3, r4, r5, lr}
 801d88e:	460d      	mov	r5, r1
 801d890:	2101      	movs	r1, #1
 801d892:	4604      	mov	r4, r0
 801d894:	f000 fb8e 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801d898:	b160      	cbz	r0, 801d8b4 <ucdr_deserialize_bool+0x28>
 801d89a:	68a2      	ldr	r2, [r4, #8]
 801d89c:	2001      	movs	r0, #1
 801d89e:	6923      	ldr	r3, [r4, #16]
 801d8a0:	f812 1b01 	ldrb.w	r1, [r2], #1
 801d8a4:	4403      	add	r3, r0
 801d8a6:	3900      	subs	r1, #0
 801d8a8:	bf18      	it	ne
 801d8aa:	2101      	movne	r1, #1
 801d8ac:	7029      	strb	r1, [r5, #0]
 801d8ae:	60a2      	str	r2, [r4, #8]
 801d8b0:	6123      	str	r3, [r4, #16]
 801d8b2:	7560      	strb	r0, [r4, #21]
 801d8b4:	7da0      	ldrb	r0, [r4, #22]
 801d8b6:	f080 0001 	eor.w	r0, r0, #1
 801d8ba:	bd38      	pop	{r3, r4, r5, pc}

0801d8bc <ucdr_serialize_uint8_t>:
 801d8bc:	b538      	push	{r3, r4, r5, lr}
 801d8be:	460d      	mov	r5, r1
 801d8c0:	2101      	movs	r1, #1
 801d8c2:	4604      	mov	r4, r0
 801d8c4:	f000 fb76 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801d8c8:	b148      	cbz	r0, 801d8de <ucdr_serialize_uint8_t+0x22>
 801d8ca:	68a3      	ldr	r3, [r4, #8]
 801d8cc:	2101      	movs	r1, #1
 801d8ce:	701d      	strb	r5, [r3, #0]
 801d8d0:	68a2      	ldr	r2, [r4, #8]
 801d8d2:	6923      	ldr	r3, [r4, #16]
 801d8d4:	440a      	add	r2, r1
 801d8d6:	7561      	strb	r1, [r4, #21]
 801d8d8:	440b      	add	r3, r1
 801d8da:	60a2      	str	r2, [r4, #8]
 801d8dc:	6123      	str	r3, [r4, #16]
 801d8de:	7da0      	ldrb	r0, [r4, #22]
 801d8e0:	f080 0001 	eor.w	r0, r0, #1
 801d8e4:	bd38      	pop	{r3, r4, r5, pc}
 801d8e6:	bf00      	nop

0801d8e8 <ucdr_deserialize_uint8_t>:
 801d8e8:	b538      	push	{r3, r4, r5, lr}
 801d8ea:	460d      	mov	r5, r1
 801d8ec:	2101      	movs	r1, #1
 801d8ee:	4604      	mov	r4, r0
 801d8f0:	f000 fb60 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801d8f4:	b150      	cbz	r0, 801d90c <ucdr_deserialize_uint8_t+0x24>
 801d8f6:	68a3      	ldr	r3, [r4, #8]
 801d8f8:	2101      	movs	r1, #1
 801d8fa:	781b      	ldrb	r3, [r3, #0]
 801d8fc:	702b      	strb	r3, [r5, #0]
 801d8fe:	68a2      	ldr	r2, [r4, #8]
 801d900:	6923      	ldr	r3, [r4, #16]
 801d902:	440a      	add	r2, r1
 801d904:	7561      	strb	r1, [r4, #21]
 801d906:	440b      	add	r3, r1
 801d908:	60a2      	str	r2, [r4, #8]
 801d90a:	6123      	str	r3, [r4, #16]
 801d90c:	7da0      	ldrb	r0, [r4, #22]
 801d90e:	f080 0001 	eor.w	r0, r0, #1
 801d912:	bd38      	pop	{r3, r4, r5, pc}

0801d914 <ucdr_serialize_uint16_t>:
 801d914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d918:	460b      	mov	r3, r1
 801d91a:	b082      	sub	sp, #8
 801d91c:	4604      	mov	r4, r0
 801d91e:	2102      	movs	r1, #2
 801d920:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d924:	f000 fb94 	bl	801e050 <ucdr_buffer_alignment>
 801d928:	4601      	mov	r1, r0
 801d92a:	4620      	mov	r0, r4
 801d92c:	7d67      	ldrb	r7, [r4, #21]
 801d92e:	f000 fbd7 	bl	801e0e0 <ucdr_advance_buffer>
 801d932:	4620      	mov	r0, r4
 801d934:	2102      	movs	r1, #2
 801d936:	f000 fb31 	bl	801df9c <ucdr_check_buffer_available_for>
 801d93a:	bb78      	cbnz	r0, 801d99c <ucdr_serialize_uint16_t+0x88>
 801d93c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801d940:	42ab      	cmp	r3, r5
 801d942:	d926      	bls.n	801d992 <ucdr_serialize_uint16_t+0x7e>
 801d944:	1b5e      	subs	r6, r3, r5
 801d946:	6922      	ldr	r2, [r4, #16]
 801d948:	4620      	mov	r0, r4
 801d94a:	60a3      	str	r3, [r4, #8]
 801d94c:	4432      	add	r2, r6
 801d94e:	f1c6 0802 	rsb	r8, r6, #2
 801d952:	6122      	str	r2, [r4, #16]
 801d954:	4641      	mov	r1, r8
 801d956:	f000 fb2d 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801d95a:	2800      	cmp	r0, #0
 801d95c:	d03b      	beq.n	801d9d6 <ucdr_serialize_uint16_t+0xc2>
 801d95e:	7d23      	ldrb	r3, [r4, #20]
 801d960:	2b01      	cmp	r3, #1
 801d962:	d04a      	beq.n	801d9fa <ucdr_serialize_uint16_t+0xe6>
 801d964:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801d968:	702b      	strb	r3, [r5, #0]
 801d96a:	2e00      	cmp	r6, #0
 801d96c:	d040      	beq.n	801d9f0 <ucdr_serialize_uint16_t+0xdc>
 801d96e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801d972:	706b      	strb	r3, [r5, #1]
 801d974:	6923      	ldr	r3, [r4, #16]
 801d976:	2102      	movs	r1, #2
 801d978:	68a2      	ldr	r2, [r4, #8]
 801d97a:	440b      	add	r3, r1
 801d97c:	7da0      	ldrb	r0, [r4, #22]
 801d97e:	4442      	add	r2, r8
 801d980:	7561      	strb	r1, [r4, #21]
 801d982:	1b9e      	subs	r6, r3, r6
 801d984:	f080 0001 	eor.w	r0, r0, #1
 801d988:	60a2      	str	r2, [r4, #8]
 801d98a:	6126      	str	r6, [r4, #16]
 801d98c:	b002      	add	sp, #8
 801d98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d992:	2102      	movs	r1, #2
 801d994:	4620      	mov	r0, r4
 801d996:	f000 fb0d 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801d99a:	b190      	cbz	r0, 801d9c2 <ucdr_serialize_uint16_t+0xae>
 801d99c:	7d23      	ldrb	r3, [r4, #20]
 801d99e:	2b01      	cmp	r3, #1
 801d9a0:	68a3      	ldr	r3, [r4, #8]
 801d9a2:	d014      	beq.n	801d9ce <ucdr_serialize_uint16_t+0xba>
 801d9a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801d9a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801d9ac:	7019      	strb	r1, [r3, #0]
 801d9ae:	68a3      	ldr	r3, [r4, #8]
 801d9b0:	705a      	strb	r2, [r3, #1]
 801d9b2:	2102      	movs	r1, #2
 801d9b4:	68a2      	ldr	r2, [r4, #8]
 801d9b6:	6923      	ldr	r3, [r4, #16]
 801d9b8:	440a      	add	r2, r1
 801d9ba:	7561      	strb	r1, [r4, #21]
 801d9bc:	440b      	add	r3, r1
 801d9be:	60a2      	str	r2, [r4, #8]
 801d9c0:	6123      	str	r3, [r4, #16]
 801d9c2:	7da0      	ldrb	r0, [r4, #22]
 801d9c4:	f080 0001 	eor.w	r0, r0, #1
 801d9c8:	b002      	add	sp, #8
 801d9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801d9d2:	801a      	strh	r2, [r3, #0]
 801d9d4:	e7ed      	b.n	801d9b2 <ucdr_serialize_uint16_t+0x9e>
 801d9d6:	68a2      	ldr	r2, [r4, #8]
 801d9d8:	6923      	ldr	r3, [r4, #16]
 801d9da:	7da0      	ldrb	r0, [r4, #22]
 801d9dc:	1b92      	subs	r2, r2, r6
 801d9de:	1b9e      	subs	r6, r3, r6
 801d9e0:	7567      	strb	r7, [r4, #21]
 801d9e2:	f080 0001 	eor.w	r0, r0, #1
 801d9e6:	60a2      	str	r2, [r4, #8]
 801d9e8:	6126      	str	r6, [r4, #16]
 801d9ea:	b002      	add	sp, #8
 801d9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9f0:	68a3      	ldr	r3, [r4, #8]
 801d9f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801d9f6:	701a      	strb	r2, [r3, #0]
 801d9f8:	e7bc      	b.n	801d974 <ucdr_serialize_uint16_t+0x60>
 801d9fa:	4628      	mov	r0, r5
 801d9fc:	f10d 0506 	add.w	r5, sp, #6
 801da00:	4632      	mov	r2, r6
 801da02:	4629      	mov	r1, r5
 801da04:	f004 f83c 	bl	8021a80 <memcpy>
 801da08:	4642      	mov	r2, r8
 801da0a:	19a9      	adds	r1, r5, r6
 801da0c:	68a0      	ldr	r0, [r4, #8]
 801da0e:	f004 f837 	bl	8021a80 <memcpy>
 801da12:	e7af      	b.n	801d974 <ucdr_serialize_uint16_t+0x60>

0801da14 <ucdr_deserialize_uint16_t>:
 801da14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801da18:	4604      	mov	r4, r0
 801da1a:	460d      	mov	r5, r1
 801da1c:	2102      	movs	r1, #2
 801da1e:	f000 fb17 	bl	801e050 <ucdr_buffer_alignment>
 801da22:	4601      	mov	r1, r0
 801da24:	4620      	mov	r0, r4
 801da26:	f894 8015 	ldrb.w	r8, [r4, #21]
 801da2a:	f000 fb59 	bl	801e0e0 <ucdr_advance_buffer>
 801da2e:	4620      	mov	r0, r4
 801da30:	2102      	movs	r1, #2
 801da32:	f000 fab3 	bl	801df9c <ucdr_check_buffer_available_for>
 801da36:	bb60      	cbnz	r0, 801da92 <ucdr_deserialize_uint16_t+0x7e>
 801da38:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 801da3c:	42b3      	cmp	r3, r6
 801da3e:	d923      	bls.n	801da88 <ucdr_deserialize_uint16_t+0x74>
 801da40:	1b9f      	subs	r7, r3, r6
 801da42:	6922      	ldr	r2, [r4, #16]
 801da44:	4620      	mov	r0, r4
 801da46:	60a3      	str	r3, [r4, #8]
 801da48:	443a      	add	r2, r7
 801da4a:	f1c7 0902 	rsb	r9, r7, #2
 801da4e:	6122      	str	r2, [r4, #16]
 801da50:	4649      	mov	r1, r9
 801da52:	f000 faaf 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801da56:	2800      	cmp	r0, #0
 801da58:	d034      	beq.n	801dac4 <ucdr_deserialize_uint16_t+0xb0>
 801da5a:	7d23      	ldrb	r3, [r4, #20]
 801da5c:	2b01      	cmp	r3, #1
 801da5e:	d042      	beq.n	801dae6 <ucdr_deserialize_uint16_t+0xd2>
 801da60:	7873      	ldrb	r3, [r6, #1]
 801da62:	702b      	strb	r3, [r5, #0]
 801da64:	2f00      	cmp	r7, #0
 801da66:	d03a      	beq.n	801dade <ucdr_deserialize_uint16_t+0xca>
 801da68:	7833      	ldrb	r3, [r6, #0]
 801da6a:	706b      	strb	r3, [r5, #1]
 801da6c:	6923      	ldr	r3, [r4, #16]
 801da6e:	2102      	movs	r1, #2
 801da70:	68a2      	ldr	r2, [r4, #8]
 801da72:	440b      	add	r3, r1
 801da74:	7da0      	ldrb	r0, [r4, #22]
 801da76:	444a      	add	r2, r9
 801da78:	7561      	strb	r1, [r4, #21]
 801da7a:	1bdf      	subs	r7, r3, r7
 801da7c:	f080 0001 	eor.w	r0, r0, #1
 801da80:	60a2      	str	r2, [r4, #8]
 801da82:	6127      	str	r7, [r4, #16]
 801da84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801da88:	2102      	movs	r1, #2
 801da8a:	4620      	mov	r0, r4
 801da8c:	f000 fa92 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801da90:	b180      	cbz	r0, 801dab4 <ucdr_deserialize_uint16_t+0xa0>
 801da92:	7d23      	ldrb	r3, [r4, #20]
 801da94:	2b01      	cmp	r3, #1
 801da96:	68a3      	ldr	r3, [r4, #8]
 801da98:	d011      	beq.n	801dabe <ucdr_deserialize_uint16_t+0xaa>
 801da9a:	785b      	ldrb	r3, [r3, #1]
 801da9c:	702b      	strb	r3, [r5, #0]
 801da9e:	68a3      	ldr	r3, [r4, #8]
 801daa0:	781b      	ldrb	r3, [r3, #0]
 801daa2:	706b      	strb	r3, [r5, #1]
 801daa4:	2102      	movs	r1, #2
 801daa6:	68a2      	ldr	r2, [r4, #8]
 801daa8:	6923      	ldr	r3, [r4, #16]
 801daaa:	440a      	add	r2, r1
 801daac:	7561      	strb	r1, [r4, #21]
 801daae:	440b      	add	r3, r1
 801dab0:	60a2      	str	r2, [r4, #8]
 801dab2:	6123      	str	r3, [r4, #16]
 801dab4:	7da0      	ldrb	r0, [r4, #22]
 801dab6:	f080 0001 	eor.w	r0, r0, #1
 801daba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dabe:	881b      	ldrh	r3, [r3, #0]
 801dac0:	802b      	strh	r3, [r5, #0]
 801dac2:	e7ef      	b.n	801daa4 <ucdr_deserialize_uint16_t+0x90>
 801dac4:	68a2      	ldr	r2, [r4, #8]
 801dac6:	6923      	ldr	r3, [r4, #16]
 801dac8:	1bd2      	subs	r2, r2, r7
 801daca:	7da0      	ldrb	r0, [r4, #22]
 801dacc:	1bdf      	subs	r7, r3, r7
 801dace:	f884 8015 	strb.w	r8, [r4, #21]
 801dad2:	f080 0001 	eor.w	r0, r0, #1
 801dad6:	60a2      	str	r2, [r4, #8]
 801dad8:	6127      	str	r7, [r4, #16]
 801dada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dade:	68a3      	ldr	r3, [r4, #8]
 801dae0:	781b      	ldrb	r3, [r3, #0]
 801dae2:	706b      	strb	r3, [r5, #1]
 801dae4:	e7c2      	b.n	801da6c <ucdr_deserialize_uint16_t+0x58>
 801dae6:	4631      	mov	r1, r6
 801dae8:	463a      	mov	r2, r7
 801daea:	4628      	mov	r0, r5
 801daec:	f003 ffc8 	bl	8021a80 <memcpy>
 801daf0:	464a      	mov	r2, r9
 801daf2:	19e8      	adds	r0, r5, r7
 801daf4:	68a1      	ldr	r1, [r4, #8]
 801daf6:	f003 ffc3 	bl	8021a80 <memcpy>
 801dafa:	e7b7      	b.n	801da6c <ucdr_deserialize_uint16_t+0x58>

0801dafc <ucdr_serialize_uint32_t>:
 801dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db00:	b082      	sub	sp, #8
 801db02:	4604      	mov	r4, r0
 801db04:	9101      	str	r1, [sp, #4]
 801db06:	2104      	movs	r1, #4
 801db08:	f000 faa2 	bl	801e050 <ucdr_buffer_alignment>
 801db0c:	4601      	mov	r1, r0
 801db0e:	4620      	mov	r0, r4
 801db10:	7d67      	ldrb	r7, [r4, #21]
 801db12:	f000 fae5 	bl	801e0e0 <ucdr_advance_buffer>
 801db16:	4620      	mov	r0, r4
 801db18:	2104      	movs	r1, #4
 801db1a:	f000 fa3f 	bl	801df9c <ucdr_check_buffer_available_for>
 801db1e:	2800      	cmp	r0, #0
 801db20:	d139      	bne.n	801db96 <ucdr_serialize_uint32_t+0x9a>
 801db22:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801db26:	42ab      	cmp	r3, r5
 801db28:	d930      	bls.n	801db8c <ucdr_serialize_uint32_t+0x90>
 801db2a:	1b5e      	subs	r6, r3, r5
 801db2c:	6922      	ldr	r2, [r4, #16]
 801db2e:	4620      	mov	r0, r4
 801db30:	60a3      	str	r3, [r4, #8]
 801db32:	4432      	add	r2, r6
 801db34:	f1c6 0804 	rsb	r8, r6, #4
 801db38:	6122      	str	r2, [r4, #16]
 801db3a:	4641      	mov	r1, r8
 801db3c:	f000 fa3a 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801db40:	2800      	cmp	r0, #0
 801db42:	d04c      	beq.n	801dbde <ucdr_serialize_uint32_t+0xe2>
 801db44:	7d23      	ldrb	r3, [r4, #20]
 801db46:	2b01      	cmp	r3, #1
 801db48:	d063      	beq.n	801dc12 <ucdr_serialize_uint32_t+0x116>
 801db4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801db4e:	702b      	strb	r3, [r5, #0]
 801db50:	2e00      	cmp	r6, #0
 801db52:	d051      	beq.n	801dbf8 <ucdr_serialize_uint32_t+0xfc>
 801db54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801db58:	2e01      	cmp	r6, #1
 801db5a:	706b      	strb	r3, [r5, #1]
 801db5c:	d050      	beq.n	801dc00 <ucdr_serialize_uint32_t+0x104>
 801db5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801db62:	2e02      	cmp	r6, #2
 801db64:	70ab      	strb	r3, [r5, #2]
 801db66:	d04f      	beq.n	801dc08 <ucdr_serialize_uint32_t+0x10c>
 801db68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801db6c:	70eb      	strb	r3, [r5, #3]
 801db6e:	6923      	ldr	r3, [r4, #16]
 801db70:	2104      	movs	r1, #4
 801db72:	68a2      	ldr	r2, [r4, #8]
 801db74:	440b      	add	r3, r1
 801db76:	7da0      	ldrb	r0, [r4, #22]
 801db78:	4442      	add	r2, r8
 801db7a:	7561      	strb	r1, [r4, #21]
 801db7c:	1b9e      	subs	r6, r3, r6
 801db7e:	f080 0001 	eor.w	r0, r0, #1
 801db82:	60a2      	str	r2, [r4, #8]
 801db84:	6126      	str	r6, [r4, #16]
 801db86:	b002      	add	sp, #8
 801db88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db8c:	2104      	movs	r1, #4
 801db8e:	4620      	mov	r0, r4
 801db90:	f000 fa10 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801db94:	b1d0      	cbz	r0, 801dbcc <ucdr_serialize_uint32_t+0xd0>
 801db96:	7d23      	ldrb	r3, [r4, #20]
 801db98:	2b01      	cmp	r3, #1
 801db9a:	68a3      	ldr	r3, [r4, #8]
 801db9c:	d01c      	beq.n	801dbd8 <ucdr_serialize_uint32_t+0xdc>
 801db9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801dba2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801dba6:	7019      	strb	r1, [r3, #0]
 801dba8:	68a3      	ldr	r3, [r4, #8]
 801dbaa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801dbae:	705a      	strb	r2, [r3, #1]
 801dbb0:	68a3      	ldr	r3, [r4, #8]
 801dbb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801dbb6:	7099      	strb	r1, [r3, #2]
 801dbb8:	68a3      	ldr	r3, [r4, #8]
 801dbba:	70da      	strb	r2, [r3, #3]
 801dbbc:	2104      	movs	r1, #4
 801dbbe:	68a2      	ldr	r2, [r4, #8]
 801dbc0:	6923      	ldr	r3, [r4, #16]
 801dbc2:	440a      	add	r2, r1
 801dbc4:	7561      	strb	r1, [r4, #21]
 801dbc6:	440b      	add	r3, r1
 801dbc8:	60a2      	str	r2, [r4, #8]
 801dbca:	6123      	str	r3, [r4, #16]
 801dbcc:	7da0      	ldrb	r0, [r4, #22]
 801dbce:	f080 0001 	eor.w	r0, r0, #1
 801dbd2:	b002      	add	sp, #8
 801dbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbd8:	9a01      	ldr	r2, [sp, #4]
 801dbda:	601a      	str	r2, [r3, #0]
 801dbdc:	e7ee      	b.n	801dbbc <ucdr_serialize_uint32_t+0xc0>
 801dbde:	68a2      	ldr	r2, [r4, #8]
 801dbe0:	6923      	ldr	r3, [r4, #16]
 801dbe2:	7da0      	ldrb	r0, [r4, #22]
 801dbe4:	1b92      	subs	r2, r2, r6
 801dbe6:	1b9e      	subs	r6, r3, r6
 801dbe8:	7567      	strb	r7, [r4, #21]
 801dbea:	f080 0001 	eor.w	r0, r0, #1
 801dbee:	60a2      	str	r2, [r4, #8]
 801dbf0:	6126      	str	r6, [r4, #16]
 801dbf2:	b002      	add	sp, #8
 801dbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbf8:	68a3      	ldr	r3, [r4, #8]
 801dbfa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801dbfe:	701a      	strb	r2, [r3, #0]
 801dc00:	68a3      	ldr	r3, [r4, #8]
 801dc02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801dc06:	701a      	strb	r2, [r3, #0]
 801dc08:	68a3      	ldr	r3, [r4, #8]
 801dc0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801dc0e:	701a      	strb	r2, [r3, #0]
 801dc10:	e7ad      	b.n	801db6e <ucdr_serialize_uint32_t+0x72>
 801dc12:	4628      	mov	r0, r5
 801dc14:	ad01      	add	r5, sp, #4
 801dc16:	4632      	mov	r2, r6
 801dc18:	4629      	mov	r1, r5
 801dc1a:	f003 ff31 	bl	8021a80 <memcpy>
 801dc1e:	4642      	mov	r2, r8
 801dc20:	19a9      	adds	r1, r5, r6
 801dc22:	68a0      	ldr	r0, [r4, #8]
 801dc24:	f003 ff2c 	bl	8021a80 <memcpy>
 801dc28:	e7a1      	b.n	801db6e <ucdr_serialize_uint32_t+0x72>
 801dc2a:	bf00      	nop

0801dc2c <ucdr_deserialize_uint32_t>:
 801dc2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc30:	4604      	mov	r4, r0
 801dc32:	460d      	mov	r5, r1
 801dc34:	2104      	movs	r1, #4
 801dc36:	f000 fa0b 	bl	801e050 <ucdr_buffer_alignment>
 801dc3a:	4601      	mov	r1, r0
 801dc3c:	4620      	mov	r0, r4
 801dc3e:	f894 8015 	ldrb.w	r8, [r4, #21]
 801dc42:	f000 fa4d 	bl	801e0e0 <ucdr_advance_buffer>
 801dc46:	4620      	mov	r0, r4
 801dc48:	2104      	movs	r1, #4
 801dc4a:	f000 f9a7 	bl	801df9c <ucdr_check_buffer_available_for>
 801dc4e:	2800      	cmp	r0, #0
 801dc50:	d138      	bne.n	801dcc4 <ucdr_deserialize_uint32_t+0x98>
 801dc52:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 801dc56:	42b3      	cmp	r3, r6
 801dc58:	d92f      	bls.n	801dcba <ucdr_deserialize_uint32_t+0x8e>
 801dc5a:	1b9f      	subs	r7, r3, r6
 801dc5c:	6922      	ldr	r2, [r4, #16]
 801dc5e:	4620      	mov	r0, r4
 801dc60:	60a3      	str	r3, [r4, #8]
 801dc62:	443a      	add	r2, r7
 801dc64:	f1c7 0904 	rsb	r9, r7, #4
 801dc68:	6122      	str	r2, [r4, #16]
 801dc6a:	4649      	mov	r1, r9
 801dc6c:	f000 f9a2 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801dc70:	2800      	cmp	r0, #0
 801dc72:	d046      	beq.n	801dd02 <ucdr_deserialize_uint32_t+0xd6>
 801dc74:	7d23      	ldrb	r3, [r4, #20]
 801dc76:	2b01      	cmp	r3, #1
 801dc78:	d05c      	beq.n	801dd34 <ucdr_deserialize_uint32_t+0x108>
 801dc7a:	78f3      	ldrb	r3, [r6, #3]
 801dc7c:	702b      	strb	r3, [r5, #0]
 801dc7e:	2f00      	cmp	r7, #0
 801dc80:	d04c      	beq.n	801dd1c <ucdr_deserialize_uint32_t+0xf0>
 801dc82:	78b2      	ldrb	r2, [r6, #2]
 801dc84:	2f01      	cmp	r7, #1
 801dc86:	f105 0302 	add.w	r3, r5, #2
 801dc8a:	706a      	strb	r2, [r5, #1]
 801dc8c:	d04a      	beq.n	801dd24 <ucdr_deserialize_uint32_t+0xf8>
 801dc8e:	7872      	ldrb	r2, [r6, #1]
 801dc90:	2f02      	cmp	r7, #2
 801dc92:	f105 0303 	add.w	r3, r5, #3
 801dc96:	70aa      	strb	r2, [r5, #2]
 801dc98:	d048      	beq.n	801dd2c <ucdr_deserialize_uint32_t+0x100>
 801dc9a:	7833      	ldrb	r3, [r6, #0]
 801dc9c:	70eb      	strb	r3, [r5, #3]
 801dc9e:	6923      	ldr	r3, [r4, #16]
 801dca0:	2104      	movs	r1, #4
 801dca2:	68a2      	ldr	r2, [r4, #8]
 801dca4:	440b      	add	r3, r1
 801dca6:	7da0      	ldrb	r0, [r4, #22]
 801dca8:	444a      	add	r2, r9
 801dcaa:	7561      	strb	r1, [r4, #21]
 801dcac:	1bdf      	subs	r7, r3, r7
 801dcae:	f080 0001 	eor.w	r0, r0, #1
 801dcb2:	60a2      	str	r2, [r4, #8]
 801dcb4:	6127      	str	r7, [r4, #16]
 801dcb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dcba:	2104      	movs	r1, #4
 801dcbc:	4620      	mov	r0, r4
 801dcbe:	f000 f979 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801dcc2:	b1b0      	cbz	r0, 801dcf2 <ucdr_deserialize_uint32_t+0xc6>
 801dcc4:	7d23      	ldrb	r3, [r4, #20]
 801dcc6:	2b01      	cmp	r3, #1
 801dcc8:	68a3      	ldr	r3, [r4, #8]
 801dcca:	d017      	beq.n	801dcfc <ucdr_deserialize_uint32_t+0xd0>
 801dccc:	78db      	ldrb	r3, [r3, #3]
 801dcce:	702b      	strb	r3, [r5, #0]
 801dcd0:	68a3      	ldr	r3, [r4, #8]
 801dcd2:	789b      	ldrb	r3, [r3, #2]
 801dcd4:	706b      	strb	r3, [r5, #1]
 801dcd6:	68a3      	ldr	r3, [r4, #8]
 801dcd8:	785b      	ldrb	r3, [r3, #1]
 801dcda:	70ab      	strb	r3, [r5, #2]
 801dcdc:	68a3      	ldr	r3, [r4, #8]
 801dcde:	781b      	ldrb	r3, [r3, #0]
 801dce0:	70eb      	strb	r3, [r5, #3]
 801dce2:	2104      	movs	r1, #4
 801dce4:	68a2      	ldr	r2, [r4, #8]
 801dce6:	6923      	ldr	r3, [r4, #16]
 801dce8:	440a      	add	r2, r1
 801dcea:	7561      	strb	r1, [r4, #21]
 801dcec:	440b      	add	r3, r1
 801dcee:	60a2      	str	r2, [r4, #8]
 801dcf0:	6123      	str	r3, [r4, #16]
 801dcf2:	7da0      	ldrb	r0, [r4, #22]
 801dcf4:	f080 0001 	eor.w	r0, r0, #1
 801dcf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	602b      	str	r3, [r5, #0]
 801dd00:	e7ef      	b.n	801dce2 <ucdr_deserialize_uint32_t+0xb6>
 801dd02:	68a2      	ldr	r2, [r4, #8]
 801dd04:	6923      	ldr	r3, [r4, #16]
 801dd06:	1bd2      	subs	r2, r2, r7
 801dd08:	7da0      	ldrb	r0, [r4, #22]
 801dd0a:	1bdf      	subs	r7, r3, r7
 801dd0c:	f884 8015 	strb.w	r8, [r4, #21]
 801dd10:	f080 0001 	eor.w	r0, r0, #1
 801dd14:	60a2      	str	r2, [r4, #8]
 801dd16:	6127      	str	r7, [r4, #16]
 801dd18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd1c:	68a2      	ldr	r2, [r4, #8]
 801dd1e:	1cab      	adds	r3, r5, #2
 801dd20:	7892      	ldrb	r2, [r2, #2]
 801dd22:	706a      	strb	r2, [r5, #1]
 801dd24:	68a2      	ldr	r2, [r4, #8]
 801dd26:	7852      	ldrb	r2, [r2, #1]
 801dd28:	f803 2b01 	strb.w	r2, [r3], #1
 801dd2c:	68a2      	ldr	r2, [r4, #8]
 801dd2e:	7812      	ldrb	r2, [r2, #0]
 801dd30:	701a      	strb	r2, [r3, #0]
 801dd32:	e7b4      	b.n	801dc9e <ucdr_deserialize_uint32_t+0x72>
 801dd34:	4631      	mov	r1, r6
 801dd36:	463a      	mov	r2, r7
 801dd38:	4628      	mov	r0, r5
 801dd3a:	f003 fea1 	bl	8021a80 <memcpy>
 801dd3e:	464a      	mov	r2, r9
 801dd40:	19e8      	adds	r0, r5, r7
 801dd42:	68a1      	ldr	r1, [r4, #8]
 801dd44:	f003 fe9c 	bl	8021a80 <memcpy>
 801dd48:	e7a9      	b.n	801dc9e <ucdr_deserialize_uint32_t+0x72>
 801dd4a:	bf00      	nop

0801dd4c <ucdr_serialize_int32_t>:
 801dd4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd50:	b082      	sub	sp, #8
 801dd52:	4604      	mov	r4, r0
 801dd54:	9101      	str	r1, [sp, #4]
 801dd56:	2104      	movs	r1, #4
 801dd58:	f000 f97a 	bl	801e050 <ucdr_buffer_alignment>
 801dd5c:	4601      	mov	r1, r0
 801dd5e:	4620      	mov	r0, r4
 801dd60:	7d67      	ldrb	r7, [r4, #21]
 801dd62:	f000 f9bd 	bl	801e0e0 <ucdr_advance_buffer>
 801dd66:	4620      	mov	r0, r4
 801dd68:	2104      	movs	r1, #4
 801dd6a:	f000 f917 	bl	801df9c <ucdr_check_buffer_available_for>
 801dd6e:	2800      	cmp	r0, #0
 801dd70:	d139      	bne.n	801dde6 <ucdr_serialize_int32_t+0x9a>
 801dd72:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801dd76:	42ab      	cmp	r3, r5
 801dd78:	d930      	bls.n	801dddc <ucdr_serialize_int32_t+0x90>
 801dd7a:	1b5e      	subs	r6, r3, r5
 801dd7c:	6922      	ldr	r2, [r4, #16]
 801dd7e:	4620      	mov	r0, r4
 801dd80:	60a3      	str	r3, [r4, #8]
 801dd82:	4432      	add	r2, r6
 801dd84:	f1c6 0804 	rsb	r8, r6, #4
 801dd88:	6122      	str	r2, [r4, #16]
 801dd8a:	4641      	mov	r1, r8
 801dd8c:	f000 f912 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801dd90:	2800      	cmp	r0, #0
 801dd92:	d04c      	beq.n	801de2e <ucdr_serialize_int32_t+0xe2>
 801dd94:	7d23      	ldrb	r3, [r4, #20]
 801dd96:	2b01      	cmp	r3, #1
 801dd98:	d063      	beq.n	801de62 <ucdr_serialize_int32_t+0x116>
 801dd9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801dd9e:	702b      	strb	r3, [r5, #0]
 801dda0:	2e00      	cmp	r6, #0
 801dda2:	d051      	beq.n	801de48 <ucdr_serialize_int32_t+0xfc>
 801dda4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801dda8:	2e01      	cmp	r6, #1
 801ddaa:	706b      	strb	r3, [r5, #1]
 801ddac:	d050      	beq.n	801de50 <ucdr_serialize_int32_t+0x104>
 801ddae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801ddb2:	2e02      	cmp	r6, #2
 801ddb4:	70ab      	strb	r3, [r5, #2]
 801ddb6:	d04f      	beq.n	801de58 <ucdr_serialize_int32_t+0x10c>
 801ddb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801ddbc:	70eb      	strb	r3, [r5, #3]
 801ddbe:	6923      	ldr	r3, [r4, #16]
 801ddc0:	2104      	movs	r1, #4
 801ddc2:	68a2      	ldr	r2, [r4, #8]
 801ddc4:	440b      	add	r3, r1
 801ddc6:	7da0      	ldrb	r0, [r4, #22]
 801ddc8:	4442      	add	r2, r8
 801ddca:	7561      	strb	r1, [r4, #21]
 801ddcc:	1b9e      	subs	r6, r3, r6
 801ddce:	f080 0001 	eor.w	r0, r0, #1
 801ddd2:	60a2      	str	r2, [r4, #8]
 801ddd4:	6126      	str	r6, [r4, #16]
 801ddd6:	b002      	add	sp, #8
 801ddd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dddc:	2104      	movs	r1, #4
 801ddde:	4620      	mov	r0, r4
 801dde0:	f000 f8e8 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801dde4:	b1d0      	cbz	r0, 801de1c <ucdr_serialize_int32_t+0xd0>
 801dde6:	7d23      	ldrb	r3, [r4, #20]
 801dde8:	2b01      	cmp	r3, #1
 801ddea:	68a3      	ldr	r3, [r4, #8]
 801ddec:	d01c      	beq.n	801de28 <ucdr_serialize_int32_t+0xdc>
 801ddee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801ddf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801ddf6:	7019      	strb	r1, [r3, #0]
 801ddf8:	68a3      	ldr	r3, [r4, #8]
 801ddfa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801ddfe:	705a      	strb	r2, [r3, #1]
 801de00:	68a3      	ldr	r3, [r4, #8]
 801de02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801de06:	7099      	strb	r1, [r3, #2]
 801de08:	68a3      	ldr	r3, [r4, #8]
 801de0a:	70da      	strb	r2, [r3, #3]
 801de0c:	2104      	movs	r1, #4
 801de0e:	68a2      	ldr	r2, [r4, #8]
 801de10:	6923      	ldr	r3, [r4, #16]
 801de12:	440a      	add	r2, r1
 801de14:	7561      	strb	r1, [r4, #21]
 801de16:	440b      	add	r3, r1
 801de18:	60a2      	str	r2, [r4, #8]
 801de1a:	6123      	str	r3, [r4, #16]
 801de1c:	7da0      	ldrb	r0, [r4, #22]
 801de1e:	f080 0001 	eor.w	r0, r0, #1
 801de22:	b002      	add	sp, #8
 801de24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de28:	9a01      	ldr	r2, [sp, #4]
 801de2a:	601a      	str	r2, [r3, #0]
 801de2c:	e7ee      	b.n	801de0c <ucdr_serialize_int32_t+0xc0>
 801de2e:	68a2      	ldr	r2, [r4, #8]
 801de30:	6923      	ldr	r3, [r4, #16]
 801de32:	7da0      	ldrb	r0, [r4, #22]
 801de34:	1b92      	subs	r2, r2, r6
 801de36:	1b9e      	subs	r6, r3, r6
 801de38:	7567      	strb	r7, [r4, #21]
 801de3a:	f080 0001 	eor.w	r0, r0, #1
 801de3e:	60a2      	str	r2, [r4, #8]
 801de40:	6126      	str	r6, [r4, #16]
 801de42:	b002      	add	sp, #8
 801de44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de48:	68a3      	ldr	r3, [r4, #8]
 801de4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801de4e:	701a      	strb	r2, [r3, #0]
 801de50:	68a3      	ldr	r3, [r4, #8]
 801de52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801de56:	701a      	strb	r2, [r3, #0]
 801de58:	68a3      	ldr	r3, [r4, #8]
 801de5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801de5e:	701a      	strb	r2, [r3, #0]
 801de60:	e7ad      	b.n	801ddbe <ucdr_serialize_int32_t+0x72>
 801de62:	4628      	mov	r0, r5
 801de64:	ad01      	add	r5, sp, #4
 801de66:	4632      	mov	r2, r6
 801de68:	4629      	mov	r1, r5
 801de6a:	f003 fe09 	bl	8021a80 <memcpy>
 801de6e:	4642      	mov	r2, r8
 801de70:	19a9      	adds	r1, r5, r6
 801de72:	68a0      	ldr	r0, [r4, #8]
 801de74:	f003 fe04 	bl	8021a80 <memcpy>
 801de78:	e7a1      	b.n	801ddbe <ucdr_serialize_int32_t+0x72>
 801de7a:	bf00      	nop

0801de7c <ucdr_deserialize_int32_t>:
 801de7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de80:	4604      	mov	r4, r0
 801de82:	460d      	mov	r5, r1
 801de84:	2104      	movs	r1, #4
 801de86:	f000 f8e3 	bl	801e050 <ucdr_buffer_alignment>
 801de8a:	4601      	mov	r1, r0
 801de8c:	4620      	mov	r0, r4
 801de8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 801de92:	f000 f925 	bl	801e0e0 <ucdr_advance_buffer>
 801de96:	4620      	mov	r0, r4
 801de98:	2104      	movs	r1, #4
 801de9a:	f000 f87f 	bl	801df9c <ucdr_check_buffer_available_for>
 801de9e:	2800      	cmp	r0, #0
 801dea0:	d138      	bne.n	801df14 <ucdr_deserialize_int32_t+0x98>
 801dea2:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 801dea6:	42b3      	cmp	r3, r6
 801dea8:	d92f      	bls.n	801df0a <ucdr_deserialize_int32_t+0x8e>
 801deaa:	1b9f      	subs	r7, r3, r6
 801deac:	6922      	ldr	r2, [r4, #16]
 801deae:	4620      	mov	r0, r4
 801deb0:	60a3      	str	r3, [r4, #8]
 801deb2:	443a      	add	r2, r7
 801deb4:	f1c7 0904 	rsb	r9, r7, #4
 801deb8:	6122      	str	r2, [r4, #16]
 801deba:	4649      	mov	r1, r9
 801debc:	f000 f87a 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801dec0:	2800      	cmp	r0, #0
 801dec2:	d046      	beq.n	801df52 <ucdr_deserialize_int32_t+0xd6>
 801dec4:	7d23      	ldrb	r3, [r4, #20]
 801dec6:	2b01      	cmp	r3, #1
 801dec8:	d05c      	beq.n	801df84 <ucdr_deserialize_int32_t+0x108>
 801deca:	78f3      	ldrb	r3, [r6, #3]
 801decc:	702b      	strb	r3, [r5, #0]
 801dece:	2f00      	cmp	r7, #0
 801ded0:	d04c      	beq.n	801df6c <ucdr_deserialize_int32_t+0xf0>
 801ded2:	78b2      	ldrb	r2, [r6, #2]
 801ded4:	2f01      	cmp	r7, #1
 801ded6:	f105 0302 	add.w	r3, r5, #2
 801deda:	706a      	strb	r2, [r5, #1]
 801dedc:	d04a      	beq.n	801df74 <ucdr_deserialize_int32_t+0xf8>
 801dede:	7872      	ldrb	r2, [r6, #1]
 801dee0:	2f02      	cmp	r7, #2
 801dee2:	f105 0303 	add.w	r3, r5, #3
 801dee6:	70aa      	strb	r2, [r5, #2]
 801dee8:	d048      	beq.n	801df7c <ucdr_deserialize_int32_t+0x100>
 801deea:	7833      	ldrb	r3, [r6, #0]
 801deec:	70eb      	strb	r3, [r5, #3]
 801deee:	6923      	ldr	r3, [r4, #16]
 801def0:	2104      	movs	r1, #4
 801def2:	68a2      	ldr	r2, [r4, #8]
 801def4:	440b      	add	r3, r1
 801def6:	7da0      	ldrb	r0, [r4, #22]
 801def8:	444a      	add	r2, r9
 801defa:	7561      	strb	r1, [r4, #21]
 801defc:	1bdf      	subs	r7, r3, r7
 801defe:	f080 0001 	eor.w	r0, r0, #1
 801df02:	60a2      	str	r2, [r4, #8]
 801df04:	6127      	str	r7, [r4, #16]
 801df06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df0a:	2104      	movs	r1, #4
 801df0c:	4620      	mov	r0, r4
 801df0e:	f000 f851 	bl	801dfb4 <ucdr_check_final_buffer_behavior>
 801df12:	b1b0      	cbz	r0, 801df42 <ucdr_deserialize_int32_t+0xc6>
 801df14:	7d23      	ldrb	r3, [r4, #20]
 801df16:	2b01      	cmp	r3, #1
 801df18:	68a3      	ldr	r3, [r4, #8]
 801df1a:	d017      	beq.n	801df4c <ucdr_deserialize_int32_t+0xd0>
 801df1c:	78db      	ldrb	r3, [r3, #3]
 801df1e:	702b      	strb	r3, [r5, #0]
 801df20:	68a3      	ldr	r3, [r4, #8]
 801df22:	789b      	ldrb	r3, [r3, #2]
 801df24:	706b      	strb	r3, [r5, #1]
 801df26:	68a3      	ldr	r3, [r4, #8]
 801df28:	785b      	ldrb	r3, [r3, #1]
 801df2a:	70ab      	strb	r3, [r5, #2]
 801df2c:	68a3      	ldr	r3, [r4, #8]
 801df2e:	781b      	ldrb	r3, [r3, #0]
 801df30:	70eb      	strb	r3, [r5, #3]
 801df32:	2104      	movs	r1, #4
 801df34:	68a2      	ldr	r2, [r4, #8]
 801df36:	6923      	ldr	r3, [r4, #16]
 801df38:	440a      	add	r2, r1
 801df3a:	7561      	strb	r1, [r4, #21]
 801df3c:	440b      	add	r3, r1
 801df3e:	60a2      	str	r2, [r4, #8]
 801df40:	6123      	str	r3, [r4, #16]
 801df42:	7da0      	ldrb	r0, [r4, #22]
 801df44:	f080 0001 	eor.w	r0, r0, #1
 801df48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	602b      	str	r3, [r5, #0]
 801df50:	e7ef      	b.n	801df32 <ucdr_deserialize_int32_t+0xb6>
 801df52:	68a2      	ldr	r2, [r4, #8]
 801df54:	6923      	ldr	r3, [r4, #16]
 801df56:	1bd2      	subs	r2, r2, r7
 801df58:	7da0      	ldrb	r0, [r4, #22]
 801df5a:	1bdf      	subs	r7, r3, r7
 801df5c:	f884 8015 	strb.w	r8, [r4, #21]
 801df60:	f080 0001 	eor.w	r0, r0, #1
 801df64:	60a2      	str	r2, [r4, #8]
 801df66:	6127      	str	r7, [r4, #16]
 801df68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df6c:	68a2      	ldr	r2, [r4, #8]
 801df6e:	1cab      	adds	r3, r5, #2
 801df70:	7892      	ldrb	r2, [r2, #2]
 801df72:	706a      	strb	r2, [r5, #1]
 801df74:	68a2      	ldr	r2, [r4, #8]
 801df76:	7852      	ldrb	r2, [r2, #1]
 801df78:	f803 2b01 	strb.w	r2, [r3], #1
 801df7c:	68a2      	ldr	r2, [r4, #8]
 801df7e:	7812      	ldrb	r2, [r2, #0]
 801df80:	701a      	strb	r2, [r3, #0]
 801df82:	e7b4      	b.n	801deee <ucdr_deserialize_int32_t+0x72>
 801df84:	4631      	mov	r1, r6
 801df86:	463a      	mov	r2, r7
 801df88:	4628      	mov	r0, r5
 801df8a:	f003 fd79 	bl	8021a80 <memcpy>
 801df8e:	464a      	mov	r2, r9
 801df90:	19e8      	adds	r0, r5, r7
 801df92:	68a1      	ldr	r1, [r4, #8]
 801df94:	f003 fd74 	bl	8021a80 <memcpy>
 801df98:	e7a9      	b.n	801deee <ucdr_deserialize_int32_t+0x72>
 801df9a:	bf00      	nop

0801df9c <ucdr_check_buffer_available_for>:
 801df9c:	7d83      	ldrb	r3, [r0, #22]
 801df9e:	b93b      	cbnz	r3, 801dfb0 <ucdr_check_buffer_available_for+0x14>
 801dfa0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801dfa4:	4419      	add	r1, r3
 801dfa6:	4288      	cmp	r0, r1
 801dfa8:	bf34      	ite	cc
 801dfaa:	2000      	movcc	r0, #0
 801dfac:	2001      	movcs	r0, #1
 801dfae:	4770      	bx	lr
 801dfb0:	2000      	movs	r0, #0
 801dfb2:	4770      	bx	lr

0801dfb4 <ucdr_check_final_buffer_behavior>:
 801dfb4:	7d83      	ldrb	r3, [r0, #22]
 801dfb6:	b943      	cbnz	r3, 801dfca <ucdr_check_final_buffer_behavior+0x16>
 801dfb8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801dfbc:	b510      	push	{r4, lr}
 801dfbe:	4291      	cmp	r1, r2
 801dfc0:	4604      	mov	r4, r0
 801dfc2:	d205      	bcs.n	801dfd0 <ucdr_check_final_buffer_behavior+0x1c>
 801dfc4:	2301      	movs	r3, #1
 801dfc6:	4618      	mov	r0, r3
 801dfc8:	bd10      	pop	{r4, pc}
 801dfca:	2300      	movs	r3, #0
 801dfcc:	4618      	mov	r0, r3
 801dfce:	4770      	bx	lr
 801dfd0:	6982      	ldr	r2, [r0, #24]
 801dfd2:	b13a      	cbz	r2, 801dfe4 <ucdr_check_final_buffer_behavior+0x30>
 801dfd4:	69c1      	ldr	r1, [r0, #28]
 801dfd6:	4790      	blx	r2
 801dfd8:	f080 0301 	eor.w	r3, r0, #1
 801dfdc:	75a0      	strb	r0, [r4, #22]
 801dfde:	b2db      	uxtb	r3, r3
 801dfe0:	4618      	mov	r0, r3
 801dfe2:	bd10      	pop	{r4, pc}
 801dfe4:	2001      	movs	r0, #1
 801dfe6:	75a0      	strb	r0, [r4, #22]
 801dfe8:	e7fa      	b.n	801dfe0 <ucdr_check_final_buffer_behavior+0x2c>
 801dfea:	bf00      	nop

0801dfec <ucdr_init_buffer_origin_offset_endian>:
 801dfec:	b470      	push	{r4, r5, r6}
 801dfee:	9c03      	ldr	r4, [sp, #12]
 801dff0:	440a      	add	r2, r1
 801dff2:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801dff6:	190e      	adds	r6, r1, r4
 801dff8:	6001      	str	r1, [r0, #0]
 801dffa:	441c      	add	r4, r3
 801dffc:	2100      	movs	r1, #0
 801dffe:	7505      	strb	r5, [r0, #20]
 801e000:	6104      	str	r4, [r0, #16]
 801e002:	60c3      	str	r3, [r0, #12]
 801e004:	7541      	strb	r1, [r0, #21]
 801e006:	7581      	strb	r1, [r0, #22]
 801e008:	e9c0 2601 	strd	r2, r6, [r0, #4]
 801e00c:	e9c0 1106 	strd	r1, r1, [r0, #24]
 801e010:	bc70      	pop	{r4, r5, r6}
 801e012:	4770      	bx	lr

0801e014 <ucdr_init_buffer_origin_offset>:
 801e014:	b530      	push	{r4, r5, lr}
 801e016:	b083      	sub	sp, #12
 801e018:	2401      	movs	r4, #1
 801e01a:	9d06      	ldr	r5, [sp, #24]
 801e01c:	e9cd 5400 	strd	r5, r4, [sp]
 801e020:	f7ff ffe4 	bl	801dfec <ucdr_init_buffer_origin_offset_endian>
 801e024:	b003      	add	sp, #12
 801e026:	bd30      	pop	{r4, r5, pc}

0801e028 <ucdr_init_buffer_origin>:
 801e028:	b510      	push	{r4, lr}
 801e02a:	2400      	movs	r4, #0
 801e02c:	b082      	sub	sp, #8
 801e02e:	9400      	str	r4, [sp, #0]
 801e030:	f7ff fff0 	bl	801e014 <ucdr_init_buffer_origin_offset>
 801e034:	b002      	add	sp, #8
 801e036:	bd10      	pop	{r4, pc}

0801e038 <ucdr_init_buffer>:
 801e038:	2300      	movs	r3, #0
 801e03a:	f7ff bff5 	b.w	801e028 <ucdr_init_buffer_origin>
 801e03e:	bf00      	nop

0801e040 <ucdr_alignment>:
 801e040:	fbb0 f3f1 	udiv	r3, r0, r1
 801e044:	fb03 0311 	mls	r3, r3, r1, r0
 801e048:	1e48      	subs	r0, r1, #1
 801e04a:	1ac9      	subs	r1, r1, r3
 801e04c:	4008      	ands	r0, r1
 801e04e:	4770      	bx	lr

0801e050 <ucdr_buffer_alignment>:
 801e050:	7d43      	ldrb	r3, [r0, #21]
 801e052:	428b      	cmp	r3, r1
 801e054:	d209      	bcs.n	801e06a <ucdr_buffer_alignment+0x1a>
 801e056:	6903      	ldr	r3, [r0, #16]
 801e058:	1e4a      	subs	r2, r1, #1
 801e05a:	fbb3 f0f1 	udiv	r0, r3, r1
 801e05e:	fb01 3010 	mls	r0, r1, r0, r3
 801e062:	1a09      	subs	r1, r1, r0
 801e064:	ea01 0002 	and.w	r0, r1, r2
 801e068:	4770      	bx	lr
 801e06a:	2000      	movs	r0, #0
 801e06c:	4770      	bx	lr
 801e06e:	bf00      	nop

0801e070 <ucdr_align_to>:
 801e070:	b570      	push	{r4, r5, r6, lr}
 801e072:	4604      	mov	r4, r0
 801e074:	460e      	mov	r6, r1
 801e076:	f7ff ffeb 	bl	801e050 <ucdr_buffer_alignment>
 801e07a:	68a5      	ldr	r5, [r4, #8]
 801e07c:	6863      	ldr	r3, [r4, #4]
 801e07e:	4405      	add	r5, r0
 801e080:	6922      	ldr	r2, [r4, #16]
 801e082:	7566      	strb	r6, [r4, #21]
 801e084:	42ab      	cmp	r3, r5
 801e086:	4410      	add	r0, r2
 801e088:	bf28      	it	cs
 801e08a:	462b      	movcs	r3, r5
 801e08c:	6120      	str	r0, [r4, #16]
 801e08e:	60a3      	str	r3, [r4, #8]
 801e090:	bd70      	pop	{r4, r5, r6, pc}
 801e092:	bf00      	nop

0801e094 <ucdr_buffer_length>:
 801e094:	6882      	ldr	r2, [r0, #8]
 801e096:	6800      	ldr	r0, [r0, #0]
 801e098:	1a10      	subs	r0, r2, r0
 801e09a:	4770      	bx	lr

0801e09c <ucdr_buffer_remaining>:
 801e09c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 801e0a0:	1a10      	subs	r0, r2, r0
 801e0a2:	4770      	bx	lr

0801e0a4 <ucdr_check_final_buffer_behavior_array>:
 801e0a4:	b538      	push	{r3, r4, r5, lr}
 801e0a6:	7d83      	ldrb	r3, [r0, #22]
 801e0a8:	b9a3      	cbnz	r3, 801e0d4 <ucdr_check_final_buffer_behavior_array+0x30>
 801e0aa:	4604      	mov	r4, r0
 801e0ac:	460d      	mov	r5, r1
 801e0ae:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801e0b2:	429a      	cmp	r2, r3
 801e0b4:	d300      	bcc.n	801e0b8 <ucdr_check_final_buffer_behavior_array+0x14>
 801e0b6:	b931      	cbnz	r1, 801e0c6 <ucdr_check_final_buffer_behavior_array+0x22>
 801e0b8:	4620      	mov	r0, r4
 801e0ba:	f7ff ffef 	bl	801e09c <ucdr_buffer_remaining>
 801e0be:	42a8      	cmp	r0, r5
 801e0c0:	bf28      	it	cs
 801e0c2:	4628      	movcs	r0, r5
 801e0c4:	bd38      	pop	{r3, r4, r5, pc}
 801e0c6:	6983      	ldr	r3, [r0, #24]
 801e0c8:	b133      	cbz	r3, 801e0d8 <ucdr_check_final_buffer_behavior_array+0x34>
 801e0ca:	69c1      	ldr	r1, [r0, #28]
 801e0cc:	4798      	blx	r3
 801e0ce:	75a0      	strb	r0, [r4, #22]
 801e0d0:	2800      	cmp	r0, #0
 801e0d2:	d0f1      	beq.n	801e0b8 <ucdr_check_final_buffer_behavior_array+0x14>
 801e0d4:	2000      	movs	r0, #0
 801e0d6:	bd38      	pop	{r3, r4, r5, pc}
 801e0d8:	2301      	movs	r3, #1
 801e0da:	7583      	strb	r3, [r0, #22]
 801e0dc:	e7fa      	b.n	801e0d4 <ucdr_check_final_buffer_behavior_array+0x30>
 801e0de:	bf00      	nop

0801e0e0 <ucdr_advance_buffer>:
 801e0e0:	b538      	push	{r3, r4, r5, lr}
 801e0e2:	4604      	mov	r4, r0
 801e0e4:	460d      	mov	r5, r1
 801e0e6:	f7ff ff59 	bl	801df9c <ucdr_check_buffer_available_for>
 801e0ea:	b178      	cbz	r0, 801e10c <ucdr_advance_buffer+0x2c>
 801e0ec:	68a3      	ldr	r3, [r4, #8]
 801e0ee:	6921      	ldr	r1, [r4, #16]
 801e0f0:	442b      	add	r3, r5
 801e0f2:	4429      	add	r1, r5
 801e0f4:	60a3      	str	r3, [r4, #8]
 801e0f6:	2301      	movs	r3, #1
 801e0f8:	6121      	str	r1, [r4, #16]
 801e0fa:	7563      	strb	r3, [r4, #21]
 801e0fc:	bd38      	pop	{r3, r4, r5, pc}
 801e0fe:	68a2      	ldr	r2, [r4, #8]
 801e100:	1a2d      	subs	r5, r5, r0
 801e102:	6923      	ldr	r3, [r4, #16]
 801e104:	4402      	add	r2, r0
 801e106:	4418      	add	r0, r3
 801e108:	60a2      	str	r2, [r4, #8]
 801e10a:	6120      	str	r0, [r4, #16]
 801e10c:	2201      	movs	r2, #1
 801e10e:	4629      	mov	r1, r5
 801e110:	4620      	mov	r0, r4
 801e112:	f7ff ffc7 	bl	801e0a4 <ucdr_check_final_buffer_behavior_array>
 801e116:	2800      	cmp	r0, #0
 801e118:	d1f1      	bne.n	801e0fe <ucdr_advance_buffer+0x1e>
 801e11a:	2301      	movs	r3, #1
 801e11c:	7563      	strb	r3, [r4, #21]
 801e11e:	bd38      	pop	{r3, r4, r5, pc}

0801e120 <rcl_convert_rmw_ret_to_rcl_ret>:
 801e120:	280b      	cmp	r0, #11
 801e122:	dc0d      	bgt.n	801e140 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 801e124:	2800      	cmp	r0, #0
 801e126:	db09      	blt.n	801e13c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801e128:	280b      	cmp	r0, #11
 801e12a:	d807      	bhi.n	801e13c <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801e12c:	e8df f000 	tbb	[pc, r0]
 801e130:	07060607 	.word	0x07060607
 801e134:	06060606 	.word	0x06060606
 801e138:	07070606 	.word	0x07070606
 801e13c:	2001      	movs	r0, #1
 801e13e:	4770      	bx	lr
 801e140:	28cb      	cmp	r0, #203	; 0xcb
 801e142:	bf18      	it	ne
 801e144:	2001      	movne	r0, #1
 801e146:	4770      	bx	lr

0801e148 <rcl_get_zero_initialized_context>:
 801e148:	b4d0      	push	{r4, r6, r7}
 801e14a:	4b06      	ldr	r3, [pc, #24]	; (801e164 <rcl_get_zero_initialized_context+0x1c>)
 801e14c:	2600      	movs	r6, #0
 801e14e:	2700      	movs	r7, #0
 801e150:	4604      	mov	r4, r0
 801e152:	e9c3 6702 	strd	r6, r7, [r3, #8]
 801e156:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801e15c:	4620      	mov	r0, r4
 801e15e:	bcd0      	pop	{r4, r6, r7}
 801e160:	4770      	bx	lr
 801e162:	bf00      	nop
 801e164:	20044018 	.word	0x20044018

0801e168 <rcl_context_is_valid>:
 801e168:	b150      	cbz	r0, 801e180 <rcl_context_is_valid+0x18>
 801e16a:	3008      	adds	r0, #8
 801e16c:	2105      	movs	r1, #5
 801e16e:	b508      	push	{r3, lr}
 801e170:	f000 ff1e 	bl	801efb0 <__atomic_load_8>
 801e174:	ea51 0300 	orrs.w	r3, r1, r0
 801e178:	bf14      	ite	ne
 801e17a:	2001      	movne	r0, #1
 801e17c:	2000      	moveq	r0, #0
 801e17e:	bd08      	pop	{r3, pc}
 801e180:	4770      	bx	lr
 801e182:	bf00      	nop

0801e184 <__cleanup_context>:
 801e184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e188:	2105      	movs	r1, #5
 801e18a:	b087      	sub	sp, #28
 801e18c:	4606      	mov	r6, r0
 801e18e:	2200      	movs	r2, #0
 801e190:	3008      	adds	r0, #8
 801e192:	2300      	movs	r3, #0
 801e194:	9100      	str	r1, [sp, #0]
 801e196:	f000 ff3f 	bl	801f018 <__atomic_store_8>
 801e19a:	6830      	ldr	r0, [r6, #0]
 801e19c:	2800      	cmp	r0, #0
 801e19e:	d056      	beq.n	801e24e <__cleanup_context+0xca>
 801e1a0:	6947      	ldr	r7, [r0, #20]
 801e1a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801e1a6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801e1aa:	b137      	cbz	r7, 801e1ba <__cleanup_context+0x36>
 801e1ac:	3014      	adds	r0, #20
 801e1ae:	f000 f9c1 	bl	801e534 <rcl_init_options_fini>
 801e1b2:	4607      	mov	r7, r0
 801e1b4:	2800      	cmp	r0, #0
 801e1b6:	d14c      	bne.n	801e252 <__cleanup_context+0xce>
 801e1b8:	6830      	ldr	r0, [r6, #0]
 801e1ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801e1bc:	b143      	cbz	r3, 801e1d0 <__cleanup_context+0x4c>
 801e1be:	3028      	adds	r0, #40	; 0x28
 801e1c0:	f001 fdac 	bl	801fd1c <rmw_context_fini>
 801e1c4:	b118      	cbz	r0, 801e1ce <__cleanup_context+0x4a>
 801e1c6:	2f00      	cmp	r7, #0
 801e1c8:	d046      	beq.n	801e258 <__cleanup_context+0xd4>
 801e1ca:	f7f8 fe67 	bl	8016e9c <rcutils_reset_error>
 801e1ce:	6830      	ldr	r0, [r6, #0]
 801e1d0:	f8d0 c020 	ldr.w	ip, [r0, #32]
 801e1d4:	f1bc 0f00 	cmp.w	ip, #0
 801e1d8:	d01c      	beq.n	801e214 <__cleanup_context+0x90>
 801e1da:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801e1de:	2a01      	cmp	r2, #1
 801e1e0:	f173 0100 	sbcs.w	r1, r3, #0
 801e1e4:	db12      	blt.n	801e20c <__cleanup_context+0x88>
 801e1e6:	2400      	movs	r4, #0
 801e1e8:	2500      	movs	r5, #0
 801e1ea:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 801e1ee:	4649      	mov	r1, r9
 801e1f0:	b308      	cbz	r0, 801e236 <__cleanup_context+0xb2>
 801e1f2:	47c0      	blx	r8
 801e1f4:	6833      	ldr	r3, [r6, #0]
 801e1f6:	3401      	adds	r4, #1
 801e1f8:	f8d3 c020 	ldr.w	ip, [r3, #32]
 801e1fc:	f145 0500 	adc.w	r5, r5, #0
 801e200:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801e204:	4294      	cmp	r4, r2
 801e206:	eb75 0103 	sbcs.w	r1, r5, r3
 801e20a:	dbee      	blt.n	801e1ea <__cleanup_context+0x66>
 801e20c:	4660      	mov	r0, ip
 801e20e:	4649      	mov	r1, r9
 801e210:	47c0      	blx	r8
 801e212:	6830      	ldr	r0, [r6, #0]
 801e214:	4649      	mov	r1, r9
 801e216:	47c0      	blx	r8
 801e218:	4b11      	ldr	r3, [pc, #68]	; (801e260 <__cleanup_context+0xdc>)
 801e21a:	2000      	movs	r0, #0
 801e21c:	2100      	movs	r1, #0
 801e21e:	ac02      	add	r4, sp, #8
 801e220:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801e224:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801e226:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801e22a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801e22e:	4638      	mov	r0, r7
 801e230:	b007      	add	sp, #28
 801e232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e236:	3401      	adds	r4, #1
 801e238:	f145 0500 	adc.w	r5, r5, #0
 801e23c:	4294      	cmp	r4, r2
 801e23e:	eb75 0103 	sbcs.w	r1, r5, r3
 801e242:	dbd2      	blt.n	801e1ea <__cleanup_context+0x66>
 801e244:	4660      	mov	r0, ip
 801e246:	4649      	mov	r1, r9
 801e248:	47c0      	blx	r8
 801e24a:	6830      	ldr	r0, [r6, #0]
 801e24c:	e7e2      	b.n	801e214 <__cleanup_context+0x90>
 801e24e:	4607      	mov	r7, r0
 801e250:	e7e2      	b.n	801e218 <__cleanup_context+0x94>
 801e252:	f7f8 fe23 	bl	8016e9c <rcutils_reset_error>
 801e256:	e7af      	b.n	801e1b8 <__cleanup_context+0x34>
 801e258:	f7ff ff62 	bl	801e120 <rcl_convert_rmw_ret_to_rcl_ret>
 801e25c:	4607      	mov	r7, r0
 801e25e:	e7b4      	b.n	801e1ca <__cleanup_context+0x46>
 801e260:	20044018 	.word	0x20044018

0801e264 <rcl_init>:
 801e264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e268:	f1b0 0b00 	subs.w	fp, r0, #0
 801e26c:	b0a1      	sub	sp, #132	; 0x84
 801e26e:	468a      	mov	sl, r1
 801e270:	4690      	mov	r8, r2
 801e272:	461f      	mov	r7, r3
 801e274:	f340 8091 	ble.w	801e39a <rcl_init+0x136>
 801e278:	2900      	cmp	r1, #0
 801e27a:	f000 8091 	beq.w	801e3a0 <rcl_init+0x13c>
 801e27e:	1f0d      	subs	r5, r1, #4
 801e280:	2400      	movs	r4, #0
 801e282:	f855 6f04 	ldr.w	r6, [r5, #4]!
 801e286:	3401      	adds	r4, #1
 801e288:	2e00      	cmp	r6, #0
 801e28a:	f000 8089 	beq.w	801e3a0 <rcl_init+0x13c>
 801e28e:	45a3      	cmp	fp, r4
 801e290:	d1f7      	bne.n	801e282 <rcl_init+0x1e>
 801e292:	f1b8 0f00 	cmp.w	r8, #0
 801e296:	f000 8083 	beq.w	801e3a0 <rcl_init+0x13c>
 801e29a:	f8d8 4000 	ldr.w	r4, [r8]
 801e29e:	2c00      	cmp	r4, #0
 801e2a0:	d07e      	beq.n	801e3a0 <rcl_init+0x13c>
 801e2a2:	ad1b      	add	r5, sp, #108	; 0x6c
 801e2a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e2a6:	6824      	ldr	r4, [r4, #0]
 801e2a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e2aa:	a81b      	add	r0, sp, #108	; 0x6c
 801e2ac:	602c      	str	r4, [r5, #0]
 801e2ae:	f7f8 fdd1 	bl	8016e54 <rcutils_allocator_is_valid>
 801e2b2:	f080 0001 	eor.w	r0, r0, #1
 801e2b6:	f010 0fff 	tst.w	r0, #255	; 0xff
 801e2ba:	d171      	bne.n	801e3a0 <rcl_init+0x13c>
 801e2bc:	2f00      	cmp	r7, #0
 801e2be:	d06f      	beq.n	801e3a0 <rcl_init+0x13c>
 801e2c0:	683b      	ldr	r3, [r7, #0]
 801e2c2:	2b00      	cmp	r3, #0
 801e2c4:	d171      	bne.n	801e3aa <rcl_init+0x146>
 801e2c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e2c8:	2178      	movs	r1, #120	; 0x78
 801e2ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e2cc:	2001      	movs	r0, #1
 801e2ce:	4798      	blx	r3
 801e2d0:	4604      	mov	r4, r0
 801e2d2:	6038      	str	r0, [r7, #0]
 801e2d4:	2800      	cmp	r0, #0
 801e2d6:	f000 80bd 	beq.w	801e454 <rcl_init+0x1f0>
 801e2da:	a804      	add	r0, sp, #16
 801e2dc:	f001 fa5e 	bl	801f79c <rmw_get_zero_initialized_context>
 801e2e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801e2e4:	ac1b      	add	r4, sp, #108	; 0x6c
 801e2e6:	a904      	add	r1, sp, #16
 801e2e8:	2250      	movs	r2, #80	; 0x50
 801e2ea:	f003 fbc9 	bl	8021a80 <memcpy>
 801e2ee:	683e      	ldr	r6, [r7, #0]
 801e2f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e2f2:	4635      	mov	r5, r6
 801e2f4:	6824      	ldr	r4, [r4, #0]
 801e2f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e2f8:	f106 0114 	add.w	r1, r6, #20
 801e2fc:	602c      	str	r4, [r5, #0]
 801e2fe:	4640      	mov	r0, r8
 801e300:	f000 f93c 	bl	801e57c <rcl_init_options_copy>
 801e304:	4604      	mov	r4, r0
 801e306:	2800      	cmp	r0, #0
 801e308:	d140      	bne.n	801e38c <rcl_init+0x128>
 801e30a:	683d      	ldr	r5, [r7, #0]
 801e30c:	46d8      	mov	r8, fp
 801e30e:	ea4f 79eb 	mov.w	r9, fp, asr #31
 801e312:	6228      	str	r0, [r5, #32]
 801e314:	e9c5 8906 	strd	r8, r9, [r5, #24]
 801e318:	f1bb 0f00 	cmp.w	fp, #0
 801e31c:	d04a      	beq.n	801e3b4 <rcl_init+0x150>
 801e31e:	f1ba 0f00 	cmp.w	sl, #0
 801e322:	d047      	beq.n	801e3b4 <rcl_init+0x150>
 801e324:	4658      	mov	r0, fp
 801e326:	2104      	movs	r1, #4
 801e328:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 801e32c:	4798      	blx	r3
 801e32e:	683e      	ldr	r6, [r7, #0]
 801e330:	6228      	str	r0, [r5, #32]
 801e332:	6a33      	ldr	r3, [r6, #32]
 801e334:	b34b      	cbz	r3, 801e38a <rcl_init+0x126>
 801e336:	f1bb 0f01 	cmp.w	fp, #1
 801e33a:	f179 0300 	sbcs.w	r3, r9, #0
 801e33e:	db39      	blt.n	801e3b4 <rcl_init+0x150>
 801e340:	f1aa 0404 	sub.w	r4, sl, #4
 801e344:	f04f 0b00 	mov.w	fp, #0
 801e348:	f04f 0a00 	mov.w	sl, #0
 801e34c:	e00b      	b.n	801e366 <rcl_init+0x102>
 801e34e:	6821      	ldr	r1, [r4, #0]
 801e350:	f003 fb96 	bl	8021a80 <memcpy>
 801e354:	f11a 0a01 	adds.w	sl, sl, #1
 801e358:	f14b 0b00 	adc.w	fp, fp, #0
 801e35c:	45d9      	cmp	r9, fp
 801e35e:	bf08      	it	eq
 801e360:	45d0      	cmpeq	r8, sl
 801e362:	d027      	beq.n	801e3b4 <rcl_init+0x150>
 801e364:	683e      	ldr	r6, [r7, #0]
 801e366:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801e36a:	ea4f 058a 	mov.w	r5, sl, lsl #2
 801e36e:	f7e1 ffa9 	bl	80002c4 <strlen>
 801e372:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801e374:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801e376:	6a36      	ldr	r6, [r6, #32]
 801e378:	9003      	str	r0, [sp, #12]
 801e37a:	4798      	blx	r3
 801e37c:	683b      	ldr	r3, [r7, #0]
 801e37e:	5170      	str	r0, [r6, r5]
 801e380:	6a1b      	ldr	r3, [r3, #32]
 801e382:	9a03      	ldr	r2, [sp, #12]
 801e384:	5958      	ldr	r0, [r3, r5]
 801e386:	2800      	cmp	r0, #0
 801e388:	d1e1      	bne.n	801e34e <rcl_init+0xea>
 801e38a:	240a      	movs	r4, #10
 801e38c:	4638      	mov	r0, r7
 801e38e:	f7ff fef9 	bl	801e184 <__cleanup_context>
 801e392:	4620      	mov	r0, r4
 801e394:	b021      	add	sp, #132	; 0x84
 801e396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e39a:	2900      	cmp	r1, #0
 801e39c:	f43f af79 	beq.w	801e292 <rcl_init+0x2e>
 801e3a0:	240b      	movs	r4, #11
 801e3a2:	4620      	mov	r0, r4
 801e3a4:	b021      	add	sp, #132	; 0x84
 801e3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3aa:	2464      	movs	r4, #100	; 0x64
 801e3ac:	4620      	mov	r0, r4
 801e3ae:	b021      	add	sp, #132	; 0x84
 801e3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3b4:	2605      	movs	r6, #5
 801e3b6:	2300      	movs	r3, #0
 801e3b8:	2201      	movs	r2, #1
 801e3ba:	482d      	ldr	r0, [pc, #180]	; (801e470 <rcl_init+0x20c>)
 801e3bc:	9600      	str	r6, [sp, #0]
 801e3be:	f000 fe5f 	bl	801f080 <__atomic_fetch_add_8>
 801e3c2:	4604      	mov	r4, r0
 801e3c4:	460d      	mov	r5, r1
 801e3c6:	ea54 0305 	orrs.w	r3, r4, r5
 801e3ca:	d039      	beq.n	801e440 <rcl_init+0x1dc>
 801e3cc:	4602      	mov	r2, r0
 801e3ce:	460b      	mov	r3, r1
 801e3d0:	f107 0008 	add.w	r0, r7, #8
 801e3d4:	9600      	str	r6, [sp, #0]
 801e3d6:	f000 fe1f 	bl	801f018 <__atomic_store_8>
 801e3da:	683b      	ldr	r3, [r7, #0]
 801e3dc:	6958      	ldr	r0, [r3, #20]
 801e3de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801e3e0:	3301      	adds	r3, #1
 801e3e2:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801e3e6:	d039      	beq.n	801e45c <rcl_init+0x1f8>
 801e3e8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801e3ec:	b93b      	cbnz	r3, 801e3fe <rcl_init+0x19a>
 801e3ee:	3030      	adds	r0, #48	; 0x30
 801e3f0:	f000 f92e 	bl	801e650 <rcl_get_localhost_only>
 801e3f4:	4604      	mov	r4, r0
 801e3f6:	2800      	cmp	r0, #0
 801e3f8:	d1c8      	bne.n	801e38c <rcl_init+0x128>
 801e3fa:	683b      	ldr	r3, [r7, #0]
 801e3fc:	6958      	ldr	r0, [r3, #20]
 801e3fe:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e400:	aa1a      	add	r2, sp, #104	; 0x68
 801e402:	a919      	add	r1, sp, #100	; 0x64
 801e404:	f000 fdc2 	bl	801ef8c <rcl_validate_enclave_name>
 801e408:	4604      	mov	r4, r0
 801e40a:	2800      	cmp	r0, #0
 801e40c:	d1be      	bne.n	801e38c <rcl_init+0x128>
 801e40e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e410:	bb13      	cbnz	r3, 801e458 <rcl_init+0x1f4>
 801e412:	6839      	ldr	r1, [r7, #0]
 801e414:	694b      	ldr	r3, [r1, #20]
 801e416:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801e41a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801e41c:	f000 fc6a 	bl	801ecf4 <rcl_get_security_options_from_environment>
 801e420:	4604      	mov	r4, r0
 801e422:	2800      	cmp	r0, #0
 801e424:	d1b2      	bne.n	801e38c <rcl_init+0x128>
 801e426:	6839      	ldr	r1, [r7, #0]
 801e428:	6948      	ldr	r0, [r1, #20]
 801e42a:	3128      	adds	r1, #40	; 0x28
 801e42c:	3018      	adds	r0, #24
 801e42e:	f001 fbdf 	bl	801fbf0 <rmw_init>
 801e432:	4604      	mov	r4, r0
 801e434:	2800      	cmp	r0, #0
 801e436:	d0b4      	beq.n	801e3a2 <rcl_init+0x13e>
 801e438:	f7ff fe72 	bl	801e120 <rcl_convert_rmw_ret_to_rcl_ret>
 801e43c:	4604      	mov	r4, r0
 801e43e:	e7a5      	b.n	801e38c <rcl_init+0x128>
 801e440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e448:	4809      	ldr	r0, [pc, #36]	; (801e470 <rcl_init+0x20c>)
 801e44a:	2401      	movs	r4, #1
 801e44c:	9600      	str	r6, [sp, #0]
 801e44e:	f000 fde3 	bl	801f018 <__atomic_store_8>
 801e452:	e79b      	b.n	801e38c <rcl_init+0x128>
 801e454:	240a      	movs	r4, #10
 801e456:	e7a4      	b.n	801e3a2 <rcl_init+0x13e>
 801e458:	2401      	movs	r4, #1
 801e45a:	e797      	b.n	801e38c <rcl_init+0x128>
 801e45c:	3024      	adds	r0, #36	; 0x24
 801e45e:	f002 f8ff 	bl	8020660 <rcl_get_default_domain_id>
 801e462:	4604      	mov	r4, r0
 801e464:	2800      	cmp	r0, #0
 801e466:	d191      	bne.n	801e38c <rcl_init+0x128>
 801e468:	683b      	ldr	r3, [r7, #0]
 801e46a:	6958      	ldr	r0, [r3, #20]
 801e46c:	e7bc      	b.n	801e3e8 <rcl_init+0x184>
 801e46e:	bf00      	nop
 801e470:	200000b0 	.word	0x200000b0

0801e474 <rcl_get_zero_initialized_init_options>:
 801e474:	2000      	movs	r0, #0
 801e476:	4770      	bx	lr

0801e478 <rcl_init_options_init>:
 801e478:	b084      	sub	sp, #16
 801e47a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e47e:	b097      	sub	sp, #92	; 0x5c
 801e480:	ae1f      	add	r6, sp, #124	; 0x7c
 801e482:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 801e486:	2800      	cmp	r0, #0
 801e488:	d04f      	beq.n	801e52a <rcl_init_options_init+0xb2>
 801e48a:	6803      	ldr	r3, [r0, #0]
 801e48c:	4605      	mov	r5, r0
 801e48e:	b133      	cbz	r3, 801e49e <rcl_init_options_init+0x26>
 801e490:	2464      	movs	r4, #100	; 0x64
 801e492:	4620      	mov	r0, r4
 801e494:	b017      	add	sp, #92	; 0x5c
 801e496:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e49a:	b004      	add	sp, #16
 801e49c:	4770      	bx	lr
 801e49e:	4630      	mov	r0, r6
 801e4a0:	f7f8 fcd8 	bl	8016e54 <rcutils_allocator_is_valid>
 801e4a4:	2800      	cmp	r0, #0
 801e4a6:	d040      	beq.n	801e52a <rcl_init_options_init+0xb2>
 801e4a8:	4637      	mov	r7, r6
 801e4aa:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 801e4ae:	ac11      	add	r4, sp, #68	; 0x44
 801e4b0:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 801e4b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e4b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e4b8:	4641      	mov	r1, r8
 801e4ba:	2050      	movs	r0, #80	; 0x50
 801e4bc:	47c8      	blx	r9
 801e4be:	4604      	mov	r4, r0
 801e4c0:	6028      	str	r0, [r5, #0]
 801e4c2:	2800      	cmp	r0, #0
 801e4c4:	d033      	beq.n	801e52e <rcl_init_options_init+0xb6>
 801e4c6:	af11      	add	r7, sp, #68	; 0x44
 801e4c8:	4684      	mov	ip, r0
 801e4ca:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 801e4ce:	3418      	adds	r4, #24
 801e4d0:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
 801e4d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e4d6:	af02      	add	r7, sp, #8
 801e4d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e4dc:	a802      	add	r0, sp, #8
 801e4de:	f8cc 8000 	str.w	r8, [ip]
 801e4e2:	f001 f96b 	bl	801f7bc <rmw_get_zero_initialized_init_options>
 801e4e6:	f8d5 c000 	ldr.w	ip, [r5]
 801e4ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e4ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e4ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e4f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e4f2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e4f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e4f6:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e4fa:	e884 0003 	stmia.w	r4, {r0, r1}
 801e4fe:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 801e502:	e88d 0003 	stmia.w	sp, {r0, r1}
 801e506:	f10c 0018 	add.w	r0, ip, #24
 801e50a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801e50e:	f001 faf9 	bl	801fb04 <rmw_init_options_init>
 801e512:	4604      	mov	r4, r0
 801e514:	2800      	cmp	r0, #0
 801e516:	d0bc      	beq.n	801e492 <rcl_init_options_init+0x1a>
 801e518:	6828      	ldr	r0, [r5, #0]
 801e51a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e51c:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801e51e:	4798      	blx	r3
 801e520:	4620      	mov	r0, r4
 801e522:	f7ff fdfd 	bl	801e120 <rcl_convert_rmw_ret_to_rcl_ret>
 801e526:	4604      	mov	r4, r0
 801e528:	e7b3      	b.n	801e492 <rcl_init_options_init+0x1a>
 801e52a:	240b      	movs	r4, #11
 801e52c:	e7b1      	b.n	801e492 <rcl_init_options_init+0x1a>
 801e52e:	240a      	movs	r4, #10
 801e530:	e7af      	b.n	801e492 <rcl_init_options_init+0x1a>
 801e532:	bf00      	nop

0801e534 <rcl_init_options_fini>:
 801e534:	b570      	push	{r4, r5, r6, lr}
 801e536:	b086      	sub	sp, #24
 801e538:	b1c0      	cbz	r0, 801e56c <rcl_init_options_fini+0x38>
 801e53a:	6804      	ldr	r4, [r0, #0]
 801e53c:	4606      	mov	r6, r0
 801e53e:	b1ac      	cbz	r4, 801e56c <rcl_init_options_fini+0x38>
 801e540:	ad01      	add	r5, sp, #4
 801e542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801e544:	6824      	ldr	r4, [r4, #0]
 801e546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e548:	a801      	add	r0, sp, #4
 801e54a:	602c      	str	r4, [r5, #0]
 801e54c:	f7f8 fc82 	bl	8016e54 <rcutils_allocator_is_valid>
 801e550:	b160      	cbz	r0, 801e56c <rcl_init_options_fini+0x38>
 801e552:	6830      	ldr	r0, [r6, #0]
 801e554:	3018      	adds	r0, #24
 801e556:	f001 fb2d 	bl	801fbb4 <rmw_init_options_fini>
 801e55a:	4604      	mov	r4, r0
 801e55c:	b950      	cbnz	r0, 801e574 <rcl_init_options_fini+0x40>
 801e55e:	6830      	ldr	r0, [r6, #0]
 801e560:	9b02      	ldr	r3, [sp, #8]
 801e562:	9905      	ldr	r1, [sp, #20]
 801e564:	4798      	blx	r3
 801e566:	4620      	mov	r0, r4
 801e568:	b006      	add	sp, #24
 801e56a:	bd70      	pop	{r4, r5, r6, pc}
 801e56c:	240b      	movs	r4, #11
 801e56e:	4620      	mov	r0, r4
 801e570:	b006      	add	sp, #24
 801e572:	bd70      	pop	{r4, r5, r6, pc}
 801e574:	f7ff fdd4 	bl	801e120 <rcl_convert_rmw_ret_to_rcl_ret>
 801e578:	4604      	mov	r4, r0
 801e57a:	e7f8      	b.n	801e56e <rcl_init_options_fini+0x3a>

0801e57c <rcl_init_options_copy>:
 801e57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e580:	b095      	sub	sp, #84	; 0x54
 801e582:	2800      	cmp	r0, #0
 801e584:	d056      	beq.n	801e634 <rcl_init_options_copy+0xb8>
 801e586:	4604      	mov	r4, r0
 801e588:	6800      	ldr	r0, [r0, #0]
 801e58a:	2800      	cmp	r0, #0
 801e58c:	d052      	beq.n	801e634 <rcl_init_options_copy+0xb8>
 801e58e:	460e      	mov	r6, r1
 801e590:	f7f8 fc60 	bl	8016e54 <rcutils_allocator_is_valid>
 801e594:	2e00      	cmp	r6, #0
 801e596:	d04d      	beq.n	801e634 <rcl_init_options_copy+0xb8>
 801e598:	f080 0001 	eor.w	r0, r0, #1
 801e59c:	f010 0fff 	tst.w	r0, #255	; 0xff
 801e5a0:	d148      	bne.n	801e634 <rcl_init_options_copy+0xb8>
 801e5a2:	6833      	ldr	r3, [r6, #0]
 801e5a4:	b123      	cbz	r3, 801e5b0 <rcl_init_options_copy+0x34>
 801e5a6:	2464      	movs	r4, #100	; 0x64
 801e5a8:	4620      	mov	r0, r4
 801e5aa:	b015      	add	sp, #84	; 0x54
 801e5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e5b0:	6823      	ldr	r3, [r4, #0]
 801e5b2:	af0f      	add	r7, sp, #60	; 0x3c
 801e5b4:	461d      	mov	r5, r3
 801e5b6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801e5ba:	f8d3 9000 	ldr.w	r9, [r3]
 801e5be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801e5c0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801e5c2:	4641      	mov	r1, r8
 801e5c4:	2050      	movs	r0, #80	; 0x50
 801e5c6:	f8c7 8000 	str.w	r8, [r7]
 801e5ca:	47c8      	blx	r9
 801e5cc:	4605      	mov	r5, r0
 801e5ce:	6030      	str	r0, [r6, #0]
 801e5d0:	2800      	cmp	r0, #0
 801e5d2:	d034      	beq.n	801e63e <rcl_init_options_copy+0xc2>
 801e5d4:	af0f      	add	r7, sp, #60	; 0x3c
 801e5d6:	4684      	mov	ip, r0
 801e5d8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 801e5dc:	3518      	adds	r5, #24
 801e5de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801e5e2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e5e4:	466f      	mov	r7, sp
 801e5e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801e5ea:	4668      	mov	r0, sp
 801e5ec:	f8cc 8000 	str.w	r8, [ip]
 801e5f0:	f001 f8e4 	bl	801f7bc <rmw_get_zero_initialized_init_options>
 801e5f4:	f8d4 c000 	ldr.w	ip, [r4]
 801e5f8:	6834      	ldr	r4, [r6, #0]
 801e5fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e5fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e5fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e602:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e606:	e897 0003 	ldmia.w	r7, {r0, r1}
 801e60a:	e885 0003 	stmia.w	r5, {r0, r1}
 801e60e:	f104 0118 	add.w	r1, r4, #24
 801e612:	f10c 0018 	add.w	r0, ip, #24
 801e616:	f001 faa9 	bl	801fb6c <rmw_init_options_copy>
 801e61a:	4604      	mov	r4, r0
 801e61c:	2800      	cmp	r0, #0
 801e61e:	d0c3      	beq.n	801e5a8 <rcl_init_options_copy+0x2c>
 801e620:	f7f8 fc26 	bl	8016e70 <rcutils_get_error_string>
 801e624:	f7f8 fc3a 	bl	8016e9c <rcutils_reset_error>
 801e628:	4630      	mov	r0, r6
 801e62a:	f7ff ff83 	bl	801e534 <rcl_init_options_fini>
 801e62e:	b140      	cbz	r0, 801e642 <rcl_init_options_copy+0xc6>
 801e630:	4604      	mov	r4, r0
 801e632:	e7b9      	b.n	801e5a8 <rcl_init_options_copy+0x2c>
 801e634:	240b      	movs	r4, #11
 801e636:	4620      	mov	r0, r4
 801e638:	b015      	add	sp, #84	; 0x54
 801e63a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e63e:	240a      	movs	r4, #10
 801e640:	e7b2      	b.n	801e5a8 <rcl_init_options_copy+0x2c>
 801e642:	4620      	mov	r0, r4
 801e644:	b015      	add	sp, #84	; 0x54
 801e646:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e64a:	f7ff bd69 	b.w	801e120 <rcl_convert_rmw_ret_to_rcl_ret>
 801e64e:	bf00      	nop

0801e650 <rcl_get_localhost_only>:
 801e650:	b510      	push	{r4, lr}
 801e652:	2300      	movs	r3, #0
 801e654:	b082      	sub	sp, #8
 801e656:	9301      	str	r3, [sp, #4]
 801e658:	b1b8      	cbz	r0, 801e68a <rcl_get_localhost_only+0x3a>
 801e65a:	4604      	mov	r4, r0
 801e65c:	a901      	add	r1, sp, #4
 801e65e:	480c      	ldr	r0, [pc, #48]	; (801e690 <rcl_get_localhost_only+0x40>)
 801e660:	f000 fd94 	bl	801f18c <rcutils_get_env>
 801e664:	b110      	cbz	r0, 801e66c <rcl_get_localhost_only+0x1c>
 801e666:	2001      	movs	r0, #1
 801e668:	b002      	add	sp, #8
 801e66a:	bd10      	pop	{r4, pc}
 801e66c:	9b01      	ldr	r3, [sp, #4]
 801e66e:	b113      	cbz	r3, 801e676 <rcl_get_localhost_only+0x26>
 801e670:	781a      	ldrb	r2, [r3, #0]
 801e672:	2a31      	cmp	r2, #49	; 0x31
 801e674:	d004      	beq.n	801e680 <rcl_get_localhost_only+0x30>
 801e676:	2302      	movs	r3, #2
 801e678:	2000      	movs	r0, #0
 801e67a:	7023      	strb	r3, [r4, #0]
 801e67c:	b002      	add	sp, #8
 801e67e:	bd10      	pop	{r4, pc}
 801e680:	785b      	ldrb	r3, [r3, #1]
 801e682:	2b00      	cmp	r3, #0
 801e684:	d1f7      	bne.n	801e676 <rcl_get_localhost_only+0x26>
 801e686:	2301      	movs	r3, #1
 801e688:	e7f6      	b.n	801e678 <rcl_get_localhost_only+0x28>
 801e68a:	200b      	movs	r0, #11
 801e68c:	b002      	add	sp, #8
 801e68e:	bd10      	pop	{r4, pc}
 801e690:	080266ac 	.word	0x080266ac

0801e694 <rcl_get_zero_initialized_node>:
 801e694:	4a03      	ldr	r2, [pc, #12]	; (801e6a4 <rcl_get_zero_initialized_node+0x10>)
 801e696:	4603      	mov	r3, r0
 801e698:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e69c:	e883 0003 	stmia.w	r3, {r0, r1}
 801e6a0:	4618      	mov	r0, r3
 801e6a2:	4770      	bx	lr
 801e6a4:	080266d4 	.word	0x080266d4

0801e6a8 <rcl_node_init>:
 801e6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6ac:	b0a9      	sub	sp, #164	; 0xa4
 801e6ae:	4605      	mov	r5, r0
 801e6b0:	460f      	mov	r7, r1
 801e6b2:	4616      	mov	r6, r2
 801e6b4:	f8dd 90c8 	ldr.w	r9, [sp, #200]	; 0xc8
 801e6b8:	a823      	add	r0, sp, #140	; 0x8c
 801e6ba:	4698      	mov	r8, r3
 801e6bc:	f002 f9e8 	bl	8020a90 <rcl_guard_condition_get_default_options>
 801e6c0:	f1b9 0f00 	cmp.w	r9, #0
 801e6c4:	f000 80f0 	beq.w	801e8a8 <rcl_node_init+0x200>
 801e6c8:	fab6 f486 	clz	r4, r6
 801e6cc:	4648      	mov	r0, r9
 801e6ce:	f7f8 fbc1 	bl	8016e54 <rcutils_allocator_is_valid>
 801e6d2:	f080 0001 	eor.w	r0, r0, #1
 801e6d6:	0964      	lsrs	r4, r4, #5
 801e6d8:	2d00      	cmp	r5, #0
 801e6da:	bf08      	it	eq
 801e6dc:	2401      	moveq	r4, #1
 801e6de:	2f00      	cmp	r7, #0
 801e6e0:	bf08      	it	eq
 801e6e2:	2401      	moveq	r4, #1
 801e6e4:	4304      	orrs	r4, r0
 801e6e6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 801e6ea:	f040 80dd 	bne.w	801e8a8 <rcl_node_init+0x200>
 801e6ee:	f8d5 a004 	ldr.w	sl, [r5, #4]
 801e6f2:	f1ba 0f00 	cmp.w	sl, #0
 801e6f6:	f040 80fd 	bne.w	801e8f4 <rcl_node_init+0x24c>
 801e6fa:	f1b8 0f00 	cmp.w	r8, #0
 801e6fe:	f000 80d3 	beq.w	801e8a8 <rcl_node_init+0x200>
 801e702:	4640      	mov	r0, r8
 801e704:	f7ff fd30 	bl	801e168 <rcl_context_is_valid>
 801e708:	4683      	mov	fp, r0
 801e70a:	2800      	cmp	r0, #0
 801e70c:	f000 80d2 	beq.w	801e8b4 <rcl_node_init+0x20c>
 801e710:	4652      	mov	r2, sl
 801e712:	4638      	mov	r0, r7
 801e714:	a922      	add	r1, sp, #136	; 0x88
 801e716:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 801e71a:	f001 f959 	bl	801f9d0 <rmw_validate_node_name>
 801e71e:	4682      	mov	sl, r0
 801e720:	2800      	cmp	r0, #0
 801e722:	f040 80c3 	bne.w	801e8ac <rcl_node_init+0x204>
 801e726:	9822      	ldr	r0, [sp, #136]	; 0x88
 801e728:	2800      	cmp	r0, #0
 801e72a:	f040 80f1 	bne.w	801e910 <rcl_node_init+0x268>
 801e72e:	4630      	mov	r0, r6
 801e730:	f7e1 fdc8 	bl	80002c4 <strlen>
 801e734:	2800      	cmp	r0, #0
 801e736:	f040 80c0 	bne.w	801e8ba <rcl_node_init+0x212>
 801e73a:	4e79      	ldr	r6, [pc, #484]	; (801e920 <rcl_node_init+0x278>)
 801e73c:	a922      	add	r1, sp, #136	; 0x88
 801e73e:	2200      	movs	r2, #0
 801e740:	4630      	mov	r0, r6
 801e742:	f001 f927 	bl	801f994 <rmw_validate_namespace>
 801e746:	4682      	mov	sl, r0
 801e748:	2800      	cmp	r0, #0
 801e74a:	f040 80af 	bne.w	801e8ac <rcl_node_init+0x204>
 801e74e:	9822      	ldr	r0, [sp, #136]	; 0x88
 801e750:	2800      	cmp	r0, #0
 801e752:	f040 80d5 	bne.w	801e900 <rcl_node_init+0x258>
 801e756:	f8d9 3000 	ldr.w	r3, [r9]
 801e75a:	2078      	movs	r0, #120	; 0x78
 801e75c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801e760:	4798      	blx	r3
 801e762:	4682      	mov	sl, r0
 801e764:	6068      	str	r0, [r5, #4]
 801e766:	2800      	cmp	r0, #0
 801e768:	f000 80cf 	beq.w	801e90a <rcl_node_init+0x262>
 801e76c:	2200      	movs	r2, #0
 801e76e:	2300      	movs	r3, #0
 801e770:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
 801e774:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
 801e778:	a808      	add	r0, sp, #32
 801e77a:	f000 f901 	bl	801e980 <rcl_node_get_default_options>
 801e77e:	a908      	add	r1, sp, #32
 801e780:	4650      	mov	r0, sl
 801e782:	2268      	movs	r2, #104	; 0x68
 801e784:	f003 f97c 	bl	8021a80 <memcpy>
 801e788:	6869      	ldr	r1, [r5, #4]
 801e78a:	4648      	mov	r0, r9
 801e78c:	f8c5 8000 	str.w	r8, [r5]
 801e790:	f000 f904 	bl	801e99c <rcl_node_options_copy>
 801e794:	2800      	cmp	r0, #0
 801e796:	d159      	bne.n	801e84c <rcl_node_init+0x1a4>
 801e798:	4630      	mov	r0, r6
 801e79a:	f7e1 fd93 	bl	80002c4 <strlen>
 801e79e:	4430      	add	r0, r6
 801e7a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e7a4:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801e7a8:	2b2f      	cmp	r3, #47	; 0x2f
 801e7aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e7ae:	bf0c      	ite	eq
 801e7b0:	495c      	ldreq	r1, [pc, #368]	; (801e924 <rcl_node_init+0x27c>)
 801e7b2:	495d      	ldrne	r1, [pc, #372]	; (801e928 <rcl_node_init+0x280>)
 801e7b4:	9300      	str	r3, [sp, #0]
 801e7b6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801e7ba:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801e7be:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 801e7c2:	f8d5 a004 	ldr.w	sl, [r5, #4]
 801e7c6:	f000 fca7 	bl	801f118 <rcutils_format_string_limit>
 801e7ca:	682b      	ldr	r3, [r5, #0]
 801e7cc:	4639      	mov	r1, r7
 801e7ce:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 801e7d2:	4632      	mov	r2, r6
 801e7d4:	6818      	ldr	r0, [r3, #0]
 801e7d6:	686f      	ldr	r7, [r5, #4]
 801e7d8:	3028      	adds	r0, #40	; 0x28
 801e7da:	f001 faa1 	bl	801fd20 <rmw_create_node>
 801e7de:	686b      	ldr	r3, [r5, #4]
 801e7e0:	66b8      	str	r0, [r7, #104]	; 0x68
 801e7e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801e7e4:	2800      	cmp	r0, #0
 801e7e6:	d033      	beq.n	801e850 <rcl_node_init+0x1a8>
 801e7e8:	f001 fae8 	bl	801fdbc <rmw_node_get_graph_guard_condition>
 801e7ec:	4682      	mov	sl, r0
 801e7ee:	b368      	cbz	r0, 801e84c <rcl_node_init+0x1a4>
 801e7f0:	f8d9 3000 	ldr.w	r3, [r9]
 801e7f4:	2008      	movs	r0, #8
 801e7f6:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801e7fa:	686f      	ldr	r7, [r5, #4]
 801e7fc:	4798      	blx	r3
 801e7fe:	686b      	ldr	r3, [r5, #4]
 801e800:	66f8      	str	r0, [r7, #108]	; 0x6c
 801e802:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 801e806:	f1bb 0f00 	cmp.w	fp, #0
 801e80a:	d021      	beq.n	801e850 <rcl_node_init+0x1a8>
 801e80c:	a806      	add	r0, sp, #24
 801e80e:	af23      	add	r7, sp, #140	; 0x8c
 801e810:	f002 f8ba 	bl	8020988 <rcl_get_zero_initialized_guard_condition>
 801e814:	a806      	add	r0, sp, #24
 801e816:	686b      	ldr	r3, [r5, #4]
 801e818:	46cc      	mov	ip, r9
 801e81a:	c803      	ldmia	r0, {r0, r1}
 801e81c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 801e820:	e88b 0003 	stmia.w	fp, {r0, r1}
 801e824:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e828:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801e82a:	f8dc c000 	ldr.w	ip, [ip]
 801e82e:	ab28      	add	r3, sp, #160	; 0xa0
 801e830:	f8c7 c000 	str.w	ip, [r7]
 801e834:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 801e838:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801e83c:	4651      	mov	r1, sl
 801e83e:	4670      	mov	r0, lr
 801e840:	4642      	mov	r2, r8
 801e842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e844:	f002 f8aa 	bl	802099c <rcl_guard_condition_init_from_rmw>
 801e848:	4682      	mov	sl, r0
 801e84a:	b328      	cbz	r0, 801e898 <rcl_node_init+0x1f0>
 801e84c:	686b      	ldr	r3, [r5, #4]
 801e84e:	b1f3      	cbz	r3, 801e88e <rcl_node_init+0x1e6>
 801e850:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801e852:	b128      	cbz	r0, 801e860 <rcl_node_init+0x1b8>
 801e854:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e858:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801e85c:	4798      	blx	r3
 801e85e:	686b      	ldr	r3, [r5, #4]
 801e860:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801e862:	b110      	cbz	r0, 801e86a <rcl_node_init+0x1c2>
 801e864:	f001 faa8 	bl	801fdb8 <rmw_destroy_node>
 801e868:	686b      	ldr	r3, [r5, #4]
 801e86a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 801e86c:	b148      	cbz	r0, 801e882 <rcl_node_init+0x1da>
 801e86e:	f002 f8e9 	bl	8020a44 <rcl_guard_condition_fini>
 801e872:	686a      	ldr	r2, [r5, #4]
 801e874:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e878:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 801e87a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801e87e:	4798      	blx	r3
 801e880:	686b      	ldr	r3, [r5, #4]
 801e882:	4618      	mov	r0, r3
 801e884:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801e888:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e88c:	4798      	blx	r3
 801e88e:	2300      	movs	r3, #0
 801e890:	f04f 0a01 	mov.w	sl, #1
 801e894:	e9c5 3300 	strd	r3, r3, [r5]
 801e898:	b144      	cbz	r4, 801e8ac <rcl_node_init+0x204>
 801e89a:	4630      	mov	r0, r6
 801e89c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e8a0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801e8a4:	4798      	blx	r3
 801e8a6:	e001      	b.n	801e8ac <rcl_node_init+0x204>
 801e8a8:	f04f 0a0b 	mov.w	sl, #11
 801e8ac:	4650      	mov	r0, sl
 801e8ae:	b029      	add	sp, #164	; 0xa4
 801e8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8b4:	f04f 0a65 	mov.w	sl, #101	; 0x65
 801e8b8:	e7f8      	b.n	801e8ac <rcl_node_init+0x204>
 801e8ba:	7833      	ldrb	r3, [r6, #0]
 801e8bc:	2b2f      	cmp	r3, #47	; 0x2f
 801e8be:	f43f af3d 	beq.w	801e73c <rcl_node_init+0x94>
 801e8c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e8c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e8ca:	4918      	ldr	r1, [pc, #96]	; (801e92c <rcl_node_init+0x284>)
 801e8cc:	e9cd 3200 	strd	r3, r2, [sp]
 801e8d0:	e9cd 1602 	strd	r1, r6, [sp, #8]
 801e8d4:	e899 000f 	ldmia.w	r9, {r0, r1, r2, r3}
 801e8d8:	f000 fc1e 	bl	801f118 <rcutils_format_string_limit>
 801e8dc:	4606      	mov	r6, r0
 801e8de:	b1e0      	cbz	r0, 801e91a <rcl_node_init+0x272>
 801e8e0:	2200      	movs	r2, #0
 801e8e2:	a922      	add	r1, sp, #136	; 0x88
 801e8e4:	9222      	str	r2, [sp, #136]	; 0x88
 801e8e6:	f001 f855 	bl	801f994 <rmw_validate_namespace>
 801e8ea:	4682      	mov	sl, r0
 801e8ec:	2800      	cmp	r0, #0
 801e8ee:	d1d4      	bne.n	801e89a <rcl_node_init+0x1f2>
 801e8f0:	465c      	mov	r4, fp
 801e8f2:	e72c      	b.n	801e74e <rcl_node_init+0xa6>
 801e8f4:	f04f 0a64 	mov.w	sl, #100	; 0x64
 801e8f8:	4650      	mov	r0, sl
 801e8fa:	b029      	add	sp, #164	; 0xa4
 801e8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e900:	f04f 0aca 	mov.w	sl, #202	; 0xca
 801e904:	f001 f858 	bl	801f9b8 <rmw_namespace_validation_result_string>
 801e908:	e7c6      	b.n	801e898 <rcl_node_init+0x1f0>
 801e90a:	f04f 0a0a 	mov.w	sl, #10
 801e90e:	e7c3      	b.n	801e898 <rcl_node_init+0x1f0>
 801e910:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 801e914:	f001 f8ac 	bl	801fa70 <rmw_node_name_validation_result_string>
 801e918:	e7c8      	b.n	801e8ac <rcl_node_init+0x204>
 801e91a:	f04f 0a0a 	mov.w	sl, #10
 801e91e:	e7c5      	b.n	801e8ac <rcl_node_init+0x204>
 801e920:	080266c4 	.word	0x080266c4
 801e924:	080263d0 	.word	0x080263d0
 801e928:	080266cc 	.word	0x080266cc
 801e92c:	080266c8 	.word	0x080266c8

0801e930 <rcl_node_is_valid>:
 801e930:	b130      	cbz	r0, 801e940 <rcl_node_is_valid+0x10>
 801e932:	6843      	ldr	r3, [r0, #4]
 801e934:	b123      	cbz	r3, 801e940 <rcl_node_is_valid+0x10>
 801e936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e938:	b113      	cbz	r3, 801e940 <rcl_node_is_valid+0x10>
 801e93a:	6800      	ldr	r0, [r0, #0]
 801e93c:	f7ff bc14 	b.w	801e168 <rcl_context_is_valid>
 801e940:	2000      	movs	r0, #0
 801e942:	4770      	bx	lr

0801e944 <rcl_node_get_name>:
 801e944:	b120      	cbz	r0, 801e950 <rcl_node_get_name+0xc>
 801e946:	6840      	ldr	r0, [r0, #4]
 801e948:	b110      	cbz	r0, 801e950 <rcl_node_get_name+0xc>
 801e94a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e94c:	b100      	cbz	r0, 801e950 <rcl_node_get_name+0xc>
 801e94e:	6880      	ldr	r0, [r0, #8]
 801e950:	4770      	bx	lr
 801e952:	bf00      	nop

0801e954 <rcl_node_get_namespace>:
 801e954:	b120      	cbz	r0, 801e960 <rcl_node_get_namespace+0xc>
 801e956:	6840      	ldr	r0, [r0, #4]
 801e958:	b110      	cbz	r0, 801e960 <rcl_node_get_namespace+0xc>
 801e95a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e95c:	b100      	cbz	r0, 801e960 <rcl_node_get_namespace+0xc>
 801e95e:	68c0      	ldr	r0, [r0, #12]
 801e960:	4770      	bx	lr
 801e962:	bf00      	nop

0801e964 <rcl_node_get_options>:
 801e964:	b128      	cbz	r0, 801e972 <rcl_node_get_options+0xe>
 801e966:	6840      	ldr	r0, [r0, #4]
 801e968:	b118      	cbz	r0, 801e972 <rcl_node_get_options+0xe>
 801e96a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	bf08      	it	eq
 801e970:	2000      	moveq	r0, #0
 801e972:	4770      	bx	lr

0801e974 <rcl_node_get_rmw_handle>:
 801e974:	b110      	cbz	r0, 801e97c <rcl_node_get_rmw_handle+0x8>
 801e976:	6840      	ldr	r0, [r0, #4]
 801e978:	b100      	cbz	r0, 801e97c <rcl_node_get_rmw_handle+0x8>
 801e97a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e97c:	4770      	bx	lr
 801e97e:	bf00      	nop

0801e980 <rcl_node_get_default_options>:
 801e980:	b510      	push	{r4, lr}
 801e982:	4604      	mov	r4, r0
 801e984:	2268      	movs	r2, #104	; 0x68
 801e986:	2100      	movs	r1, #0
 801e988:	f003 f8a2 	bl	8021ad0 <memset>
 801e98c:	4620      	mov	r0, r4
 801e98e:	f7f8 fa53 	bl	8016e38 <rcutils_get_default_allocator>
 801e992:	2301      	movs	r3, #1
 801e994:	4620      	mov	r0, r4
 801e996:	7523      	strb	r3, [r4, #20]
 801e998:	bd10      	pop	{r4, pc}
 801e99a:	bf00      	nop

0801e99c <rcl_node_options_copy>:
 801e99c:	2800      	cmp	r0, #0
 801e99e:	bf18      	it	ne
 801e9a0:	4288      	cmpne	r0, r1
 801e9a2:	d021      	beq.n	801e9e8 <rcl_node_options_copy+0x4c>
 801e9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e9a8:	fab1 f881 	clz	r8, r1
 801e9ac:	460c      	mov	r4, r1
 801e9ae:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e9b2:	b1b1      	cbz	r1, 801e9e2 <rcl_node_options_copy+0x46>
 801e9b4:	4607      	mov	r7, r0
 801e9b6:	f890 c014 	ldrb.w	ip, [r0, #20]
 801e9ba:	4605      	mov	r5, r0
 801e9bc:	460e      	mov	r6, r1
 801e9be:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801e9c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801e9c2:	7d6b      	ldrb	r3, [r5, #21]
 801e9c4:	f105 0118 	add.w	r1, r5, #24
 801e9c8:	683d      	ldr	r5, [r7, #0]
 801e9ca:	f104 0018 	add.w	r0, r4, #24
 801e9ce:	2250      	movs	r2, #80	; 0x50
 801e9d0:	6035      	str	r5, [r6, #0]
 801e9d2:	f884 c014 	strb.w	ip, [r4, #20]
 801e9d6:	7563      	strb	r3, [r4, #21]
 801e9d8:	f003 f852 	bl	8021a80 <memcpy>
 801e9dc:	4640      	mov	r0, r8
 801e9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9e2:	200b      	movs	r0, #11
 801e9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9e8:	200b      	movs	r0, #11
 801e9ea:	4770      	bx	lr

0801e9ec <rcl_node_resolve_name>:
 801e9ec:	b082      	sub	sp, #8
 801e9ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9f2:	b091      	sub	sp, #68	; 0x44
 801e9f4:	460c      	mov	r4, r1
 801e9f6:	a91a      	add	r1, sp, #104	; 0x68
 801e9f8:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801e9fc:	e881 000c 	stmia.w	r1, {r2, r3}
 801ea00:	2800      	cmp	r0, #0
 801ea02:	d03d      	beq.n	801ea80 <rcl_node_resolve_name+0x94>
 801ea04:	4607      	mov	r7, r0
 801ea06:	f7ff ffad 	bl	801e964 <rcl_node_get_options>
 801ea0a:	2800      	cmp	r0, #0
 801ea0c:	d03b      	beq.n	801ea86 <rcl_node_resolve_name+0x9a>
 801ea0e:	4638      	mov	r0, r7
 801ea10:	ad0b      	add	r5, sp, #44	; 0x2c
 801ea12:	f7ff ff97 	bl	801e944 <rcl_node_get_name>
 801ea16:	4606      	mov	r6, r0
 801ea18:	4638      	mov	r0, r7
 801ea1a:	f7ff ff9b 	bl	801e954 <rcl_node_get_namespace>
 801ea1e:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 801ea22:	46ac      	mov	ip, r5
 801ea24:	4607      	mov	r7, r0
 801ea26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ea2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ea2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ea30:	b333      	cbz	r3, 801ea80 <rcl_node_resolve_name+0x94>
 801ea32:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801ea36:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 801ea3a:	f000 fcf7 	bl	801f42c <rcutils_get_zero_initialized_string_map>
 801ea3e:	ab10      	add	r3, sp, #64	; 0x40
 801ea40:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801ea44:	9008      	str	r0, [sp, #32]
 801ea46:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801ea4a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801ea4e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ea52:	a808      	add	r0, sp, #32
 801ea54:	2100      	movs	r1, #0
 801ea56:	e895 000c 	ldmia.w	r5, {r2, r3}
 801ea5a:	f000 fd61 	bl	801f520 <rcutils_string_map_init>
 801ea5e:	4683      	mov	fp, r0
 801ea60:	b1a0      	cbz	r0, 801ea8c <rcl_node_resolve_name+0xa0>
 801ea62:	f7f8 fa05 	bl	8016e70 <rcutils_get_error_string>
 801ea66:	f7f8 fa19 	bl	8016e9c <rcutils_reset_error>
 801ea6a:	f1bb 0f0a 	cmp.w	fp, #10
 801ea6e:	bf18      	it	ne
 801ea70:	f04f 0b01 	movne.w	fp, #1
 801ea74:	4658      	mov	r0, fp
 801ea76:	b011      	add	sp, #68	; 0x44
 801ea78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea7c:	b002      	add	sp, #8
 801ea7e:	4770      	bx	lr
 801ea80:	f04f 0b0b 	mov.w	fp, #11
 801ea84:	e7f6      	b.n	801ea74 <rcl_node_resolve_name+0x88>
 801ea86:	f04f 0b01 	mov.w	fp, #1
 801ea8a:	e7f3      	b.n	801ea74 <rcl_node_resolve_name+0x88>
 801ea8c:	a808      	add	r0, sp, #32
 801ea8e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801ea92:	f001 ff73 	bl	802097c <rcl_get_default_topic_name_substitutions>
 801ea96:	f8cd b01c 	str.w	fp, [sp, #28]
 801ea9a:	4683      	mov	fp, r0
 801ea9c:	b180      	cbz	r0, 801eac0 <rcl_node_resolve_name+0xd4>
 801ea9e:	280a      	cmp	r0, #10
 801eaa0:	a808      	add	r0, sp, #32
 801eaa2:	bf18      	it	ne
 801eaa4:	f04f 0b01 	movne.w	fp, #1
 801eaa8:	f000 fd78 	bl	801f59c <rcutils_string_map_fini>
 801eaac:	4604      	mov	r4, r0
 801eaae:	2800      	cmp	r0, #0
 801eab0:	d15b      	bne.n	801eb6a <rcl_node_resolve_name+0x17e>
 801eab2:	4651      	mov	r1, sl
 801eab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eab6:	47c8      	blx	r9
 801eab8:	4651      	mov	r1, sl
 801eaba:	4620      	mov	r0, r4
 801eabc:	47c8      	blx	r9
 801eabe:	e7d9      	b.n	801ea74 <rcl_node_resolve_name+0x88>
 801eac0:	ab09      	add	r3, sp, #36	; 0x24
 801eac2:	46ec      	mov	ip, sp
 801eac4:	9305      	str	r3, [sp, #20]
 801eac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801eac8:	682d      	ldr	r5, [r5, #0]
 801eaca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801eace:	463a      	mov	r2, r7
 801ead0:	4631      	mov	r1, r6
 801ead2:	4620      	mov	r0, r4
 801ead4:	ab08      	add	r3, sp, #32
 801ead6:	f8cc 5000 	str.w	r5, [ip]
 801eada:	f001 fdf3 	bl	80206c4 <rcl_expand_topic_name>
 801eade:	4683      	mov	fp, r0
 801eae0:	b9d8      	cbnz	r0, 801eb1a <rcl_node_resolve_name+0x12e>
 801eae2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801eae4:	4602      	mov	r2, r0
 801eae6:	9009      	str	r0, [sp, #36]	; 0x24
 801eae8:	a90a      	add	r1, sp, #40	; 0x28
 801eaea:	4620      	mov	r0, r4
 801eaec:	f000 fe7a 	bl	801f7e4 <rmw_validate_full_topic_name>
 801eaf0:	bb50      	cbnz	r0, 801eb48 <rcl_node_resolve_name+0x15c>
 801eaf2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801eaf4:	2d00      	cmp	r5, #0
 801eaf6:	d140      	bne.n	801eb7a <rcl_node_resolve_name+0x18e>
 801eaf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eafa:	a808      	add	r0, sp, #32
 801eafc:	601c      	str	r4, [r3, #0]
 801eafe:	f000 fd4d 	bl	801f59c <rcutils_string_map_fini>
 801eb02:	4683      	mov	fp, r0
 801eb04:	2800      	cmp	r0, #0
 801eb06:	d043      	beq.n	801eb90 <rcl_node_resolve_name+0x1a4>
 801eb08:	f7f8 f9b2 	bl	8016e70 <rcutils_get_error_string>
 801eb0c:	46a8      	mov	r8, r5
 801eb0e:	f04f 0b01 	mov.w	fp, #1
 801eb12:	462c      	mov	r4, r5
 801eb14:	f7f8 f9c2 	bl	8016e9c <rcutils_reset_error>
 801eb18:	e00a      	b.n	801eb30 <rcl_node_resolve_name+0x144>
 801eb1a:	2867      	cmp	r0, #103	; 0x67
 801eb1c:	bf14      	ite	ne
 801eb1e:	f04f 0800 	movne.w	r8, #0
 801eb22:	f008 0801 	andeq.w	r8, r8, #1
 801eb26:	9c07      	ldr	r4, [sp, #28]
 801eb28:	a808      	add	r0, sp, #32
 801eb2a:	f000 fd37 	bl	801f59c <rcutils_string_map_fini>
 801eb2e:	bb50      	cbnz	r0, 801eb86 <rcl_node_resolve_name+0x19a>
 801eb30:	4651      	mov	r1, sl
 801eb32:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eb34:	47c8      	blx	r9
 801eb36:	4651      	mov	r1, sl
 801eb38:	4620      	mov	r0, r4
 801eb3a:	47c8      	blx	r9
 801eb3c:	f1b8 0f00 	cmp.w	r8, #0
 801eb40:	bf18      	it	ne
 801eb42:	f04f 0b68 	movne.w	fp, #104	; 0x68
 801eb46:	e795      	b.n	801ea74 <rcl_node_resolve_name+0x88>
 801eb48:	f7f8 f992 	bl	8016e70 <rcutils_get_error_string>
 801eb4c:	f7f8 f9a6 	bl	8016e9c <rcutils_reset_error>
 801eb50:	a808      	add	r0, sp, #32
 801eb52:	f000 fd23 	bl	801f59c <rcutils_string_map_fini>
 801eb56:	b998      	cbnz	r0, 801eb80 <rcl_node_resolve_name+0x194>
 801eb58:	4651      	mov	r1, sl
 801eb5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eb5c:	47c8      	blx	r9
 801eb5e:	4651      	mov	r1, sl
 801eb60:	4620      	mov	r0, r4
 801eb62:	f04f 0b01 	mov.w	fp, #1
 801eb66:	47c8      	blx	r9
 801eb68:	e784      	b.n	801ea74 <rcl_node_resolve_name+0x88>
 801eb6a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801eb6e:	f7f8 f97f 	bl	8016e70 <rcutils_get_error_string>
 801eb72:	f7f8 f993 	bl	8016e9c <rcutils_reset_error>
 801eb76:	4644      	mov	r4, r8
 801eb78:	e7da      	b.n	801eb30 <rcl_node_resolve_name+0x144>
 801eb7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801eb7e:	e7d3      	b.n	801eb28 <rcl_node_resolve_name+0x13c>
 801eb80:	46d8      	mov	r8, fp
 801eb82:	f04f 0b01 	mov.w	fp, #1
 801eb86:	f7f8 f973 	bl	8016e70 <rcutils_get_error_string>
 801eb8a:	f7f8 f987 	bl	8016e9c <rcutils_reset_error>
 801eb8e:	e7cf      	b.n	801eb30 <rcl_node_resolve_name+0x144>
 801eb90:	4651      	mov	r1, sl
 801eb92:	9809      	ldr	r0, [sp, #36]	; 0x24
 801eb94:	47c8      	blx	r9
 801eb96:	4651      	mov	r1, sl
 801eb98:	4658      	mov	r0, fp
 801eb9a:	47c8      	blx	r9
 801eb9c:	e76a      	b.n	801ea74 <rcl_node_resolve_name+0x88>
 801eb9e:	bf00      	nop

0801eba0 <exact_match_lookup>:
 801eba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eba2:	f102 0608 	add.w	r6, r2, #8
 801eba6:	460b      	mov	r3, r1
 801eba8:	b085      	sub	sp, #20
 801ebaa:	4614      	mov	r4, r2
 801ebac:	4607      	mov	r7, r0
 801ebae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801ebb2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ebb6:	4618      	mov	r0, r3
 801ebb8:	4918      	ldr	r1, [pc, #96]	; (801ec1c <exact_match_lookup+0x7c>)
 801ebba:	e894 000c 	ldmia.w	r4, {r2, r3}
 801ebbe:	f000 fa9b 	bl	801f0f8 <rcutils_join_path>
 801ebc2:	783b      	ldrb	r3, [r7, #0]
 801ebc4:	4605      	mov	r5, r0
 801ebc6:	2b2f      	cmp	r3, #47	; 0x2f
 801ebc8:	d022      	beq.n	801ec10 <exact_match_lookup+0x70>
 801ebca:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 801ebce:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ebd2:	1c78      	adds	r0, r7, #1
 801ebd4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ebd8:	f000 fa94 	bl	801f104 <rcutils_to_native_path>
 801ebdc:	4603      	mov	r3, r0
 801ebde:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801ebe2:	461e      	mov	r6, r3
 801ebe4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ebe8:	4619      	mov	r1, r3
 801ebea:	4628      	mov	r0, r5
 801ebec:	e894 000c 	ldmia.w	r4, {r2, r3}
 801ebf0:	f000 fa82 	bl	801f0f8 <rcutils_join_path>
 801ebf4:	4603      	mov	r3, r0
 801ebf6:	4630      	mov	r0, r6
 801ebf8:	6862      	ldr	r2, [r4, #4]
 801ebfa:	461e      	mov	r6, r3
 801ebfc:	6921      	ldr	r1, [r4, #16]
 801ebfe:	4790      	blx	r2
 801ec00:	4628      	mov	r0, r5
 801ec02:	4635      	mov	r5, r6
 801ec04:	6863      	ldr	r3, [r4, #4]
 801ec06:	6921      	ldr	r1, [r4, #16]
 801ec08:	4798      	blx	r3
 801ec0a:	4628      	mov	r0, r5
 801ec0c:	b005      	add	sp, #20
 801ec0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec10:	787b      	ldrb	r3, [r7, #1]
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	d1d9      	bne.n	801ebca <exact_match_lookup+0x2a>
 801ec16:	4628      	mov	r0, r5
 801ec18:	b005      	add	sp, #20
 801ec1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec1c:	08026718 	.word	0x08026718

0801ec20 <rcl_get_secure_root>:
 801ec20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ec24:	b085      	sub	sp, #20
 801ec26:	b168      	cbz	r0, 801ec44 <rcl_get_secure_root+0x24>
 801ec28:	4607      	mov	r7, r0
 801ec2a:	4608      	mov	r0, r1
 801ec2c:	460c      	mov	r4, r1
 801ec2e:	f7f8 f911 	bl	8016e54 <rcutils_allocator_is_valid>
 801ec32:	b138      	cbz	r0, 801ec44 <rcl_get_secure_root+0x24>
 801ec34:	2300      	movs	r3, #0
 801ec36:	482d      	ldr	r0, [pc, #180]	; (801ecec <rcl_get_secure_root+0xcc>)
 801ec38:	a903      	add	r1, sp, #12
 801ec3a:	9303      	str	r3, [sp, #12]
 801ec3c:	f000 faa6 	bl	801f18c <rcutils_get_env>
 801ec40:	4605      	mov	r5, r0
 801ec42:	b120      	cbz	r0, 801ec4e <rcl_get_secure_root+0x2e>
 801ec44:	2500      	movs	r5, #0
 801ec46:	4628      	mov	r0, r5
 801ec48:	b005      	add	sp, #20
 801ec4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec4e:	9b03      	ldr	r3, [sp, #12]
 801ec50:	781a      	ldrb	r2, [r3, #0]
 801ec52:	2a00      	cmp	r2, #0
 801ec54:	d0f6      	beq.n	801ec44 <rcl_get_secure_root+0x24>
 801ec56:	f104 090c 	add.w	r9, r4, #12
 801ec5a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801ec5e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ec62:	4618      	mov	r0, r3
 801ec64:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ec68:	f000 fba2 	bl	801f3b0 <rcutils_strdup>
 801ec6c:	4680      	mov	r8, r0
 801ec6e:	2800      	cmp	r0, #0
 801ec70:	d0e8      	beq.n	801ec44 <rcl_get_secure_root+0x24>
 801ec72:	a903      	add	r1, sp, #12
 801ec74:	481e      	ldr	r0, [pc, #120]	; (801ecf0 <rcl_get_secure_root+0xd0>)
 801ec76:	9503      	str	r5, [sp, #12]
 801ec78:	f000 fa88 	bl	801f18c <rcutils_get_env>
 801ec7c:	b160      	cbz	r0, 801ec98 <rcl_get_secure_root+0x78>
 801ec7e:	2600      	movs	r6, #0
 801ec80:	4630      	mov	r0, r6
 801ec82:	6863      	ldr	r3, [r4, #4]
 801ec84:	6921      	ldr	r1, [r4, #16]
 801ec86:	4798      	blx	r3
 801ec88:	4640      	mov	r0, r8
 801ec8a:	6863      	ldr	r3, [r4, #4]
 801ec8c:	6921      	ldr	r1, [r4, #16]
 801ec8e:	4798      	blx	r3
 801ec90:	4628      	mov	r0, r5
 801ec92:	b005      	add	sp, #20
 801ec94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ec98:	9b03      	ldr	r3, [sp, #12]
 801ec9a:	781e      	ldrb	r6, [r3, #0]
 801ec9c:	b1f6      	cbz	r6, 801ecdc <rcl_get_secure_root+0xbc>
 801ec9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 801eca2:	e88d 0003 	stmia.w	sp, {r0, r1}
 801eca6:	4618      	mov	r0, r3
 801eca8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801ecac:	f000 fb80 	bl	801f3b0 <rcutils_strdup>
 801ecb0:	4606      	mov	r6, r0
 801ecb2:	2800      	cmp	r0, #0
 801ecb4:	d0e3      	beq.n	801ec7e <rcl_get_secure_root+0x5e>
 801ecb6:	4622      	mov	r2, r4
 801ecb8:	4641      	mov	r1, r8
 801ecba:	f7ff ff71 	bl	801eba0 <exact_match_lookup>
 801ecbe:	4605      	mov	r5, r0
 801ecc0:	2d00      	cmp	r5, #0
 801ecc2:	d0dd      	beq.n	801ec80 <rcl_get_secure_root+0x60>
 801ecc4:	4628      	mov	r0, r5
 801ecc6:	f000 fa15 	bl	801f0f4 <rcutils_is_directory>
 801ecca:	4603      	mov	r3, r0
 801eccc:	2800      	cmp	r0, #0
 801ecce:	d1d7      	bne.n	801ec80 <rcl_get_secure_root+0x60>
 801ecd0:	4628      	mov	r0, r5
 801ecd2:	6921      	ldr	r1, [r4, #16]
 801ecd4:	461d      	mov	r5, r3
 801ecd6:	6863      	ldr	r3, [r4, #4]
 801ecd8:	4798      	blx	r3
 801ecda:	e7d1      	b.n	801ec80 <rcl_get_secure_root+0x60>
 801ecdc:	4638      	mov	r0, r7
 801ecde:	4622      	mov	r2, r4
 801ece0:	4641      	mov	r1, r8
 801ece2:	f7ff ff5d 	bl	801eba0 <exact_match_lookup>
 801ece6:	4605      	mov	r5, r0
 801ece8:	e7ea      	b.n	801ecc0 <rcl_get_secure_root+0xa0>
 801ecea:	bf00      	nop
 801ecec:	08026724 	.word	0x08026724
 801ecf0:	0802673c 	.word	0x0802673c

0801ecf4 <rcl_get_security_options_from_environment>:
 801ecf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ecf8:	b082      	sub	sp, #8
 801ecfa:	2300      	movs	r3, #0
 801ecfc:	4606      	mov	r6, r0
 801ecfe:	460f      	mov	r7, r1
 801ed00:	4821      	ldr	r0, [pc, #132]	; (801ed88 <rcl_get_security_options_from_environment+0x94>)
 801ed02:	a901      	add	r1, sp, #4
 801ed04:	4690      	mov	r8, r2
 801ed06:	9301      	str	r3, [sp, #4]
 801ed08:	f000 fa40 	bl	801f18c <rcutils_get_env>
 801ed0c:	b120      	cbz	r0, 801ed18 <rcl_get_security_options_from_environment+0x24>
 801ed0e:	2501      	movs	r5, #1
 801ed10:	4628      	mov	r0, r5
 801ed12:	b002      	add	sp, #8
 801ed14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed18:	4604      	mov	r4, r0
 801ed1a:	491c      	ldr	r1, [pc, #112]	; (801ed8c <rcl_get_security_options_from_environment+0x98>)
 801ed1c:	9801      	ldr	r0, [sp, #4]
 801ed1e:	f7e1 fac7 	bl	80002b0 <strcmp>
 801ed22:	4605      	mov	r5, r0
 801ed24:	b9f0      	cbnz	r0, 801ed64 <rcl_get_security_options_from_environment+0x70>
 801ed26:	9001      	str	r0, [sp, #4]
 801ed28:	f1b8 0f00 	cmp.w	r8, #0
 801ed2c:	d021      	beq.n	801ed72 <rcl_get_security_options_from_environment+0x7e>
 801ed2e:	a901      	add	r1, sp, #4
 801ed30:	4817      	ldr	r0, [pc, #92]	; (801ed90 <rcl_get_security_options_from_environment+0x9c>)
 801ed32:	f000 fa2b 	bl	801f18c <rcutils_get_env>
 801ed36:	2800      	cmp	r0, #0
 801ed38:	d1e9      	bne.n	801ed0e <rcl_get_security_options_from_environment+0x1a>
 801ed3a:	4916      	ldr	r1, [pc, #88]	; (801ed94 <rcl_get_security_options_from_environment+0xa0>)
 801ed3c:	9801      	ldr	r0, [sp, #4]
 801ed3e:	f7e1 fab7 	bl	80002b0 <strcmp>
 801ed42:	4603      	mov	r3, r0
 801ed44:	4639      	mov	r1, r7
 801ed46:	4630      	mov	r0, r6
 801ed48:	fab3 f383 	clz	r3, r3
 801ed4c:	095b      	lsrs	r3, r3, #5
 801ed4e:	f888 3000 	strb.w	r3, [r8]
 801ed52:	f7ff ff65 	bl	801ec20 <rcl_get_secure_root>
 801ed56:	b170      	cbz	r0, 801ed76 <rcl_get_security_options_from_environment+0x82>
 801ed58:	f8c8 0004 	str.w	r0, [r8, #4]
 801ed5c:	4628      	mov	r0, r5
 801ed5e:	b002      	add	sp, #8
 801ed60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed64:	4625      	mov	r5, r4
 801ed66:	f888 4000 	strb.w	r4, [r8]
 801ed6a:	4628      	mov	r0, r5
 801ed6c:	b002      	add	sp, #8
 801ed6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed72:	250b      	movs	r5, #11
 801ed74:	e7cc      	b.n	801ed10 <rcl_get_security_options_from_environment+0x1c>
 801ed76:	f898 5000 	ldrb.w	r5, [r8]
 801ed7a:	f1a5 0501 	sub.w	r5, r5, #1
 801ed7e:	fab5 f585 	clz	r5, r5
 801ed82:	096d      	lsrs	r5, r5, #5
 801ed84:	e7c4      	b.n	801ed10 <rcl_get_security_options_from_environment+0x1c>
 801ed86:	bf00      	nop
 801ed88:	080266dc 	.word	0x080266dc
 801ed8c:	080266f0 	.word	0x080266f0
 801ed90:	080266f8 	.word	0x080266f8
 801ed94:	08026710 	.word	0x08026710

0801ed98 <rcl_get_system_time>:
 801ed98:	4608      	mov	r0, r1
 801ed9a:	f000 bc79 	b.w	801f690 <rcutils_system_time_now>
 801ed9e:	bf00      	nop

0801eda0 <rcl_get_steady_time>:
 801eda0:	4608      	mov	r0, r1
 801eda2:	f000 bc9d 	b.w	801f6e0 <rcutils_steady_time_now>
 801eda6:	bf00      	nop

0801eda8 <rcl_get_ros_time>:
 801eda8:	7a03      	ldrb	r3, [r0, #8]
 801edaa:	b510      	push	{r4, lr}
 801edac:	460c      	mov	r4, r1
 801edae:	b143      	cbz	r3, 801edc2 <rcl_get_ros_time+0x1a>
 801edb0:	2105      	movs	r1, #5
 801edb2:	f000 f8fd 	bl	801efb0 <__atomic_load_8>
 801edb6:	4602      	mov	r2, r0
 801edb8:	460b      	mov	r3, r1
 801edba:	2000      	movs	r0, #0
 801edbc:	e9c4 2300 	strd	r2, r3, [r4]
 801edc0:	bd10      	pop	{r4, pc}
 801edc2:	4608      	mov	r0, r1
 801edc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edc8:	f000 bc62 	b.w	801f690 <rcutils_system_time_now>

0801edcc <rcl_clock_init>:
 801edcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edd0:	4605      	mov	r5, r0
 801edd2:	4610      	mov	r0, r2
 801edd4:	4614      	mov	r4, r2
 801edd6:	460e      	mov	r6, r1
 801edd8:	f7f8 f83c 	bl	8016e54 <rcutils_allocator_is_valid>
 801eddc:	b128      	cbz	r0, 801edea <rcl_clock_init+0x1e>
 801edde:	2d03      	cmp	r5, #3
 801ede0:	d803      	bhi.n	801edea <rcl_clock_init+0x1e>
 801ede2:	e8df f005 	tbb	[pc, r5]
 801ede6:	3321      	.short	0x3321
 801ede8:	065c      	.short	0x065c
 801edea:	250b      	movs	r5, #11
 801edec:	4628      	mov	r0, r5
 801edee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801edf2:	2c00      	cmp	r4, #0
 801edf4:	d0f9      	beq.n	801edea <rcl_clock_init+0x1e>
 801edf6:	fab6 f386 	clz	r3, r6
 801edfa:	095b      	lsrs	r3, r3, #5
 801edfc:	2e00      	cmp	r6, #0
 801edfe:	d0f4      	beq.n	801edea <rcl_clock_init+0x1e>
 801ee00:	7033      	strb	r3, [r6, #0]
 801ee02:	461d      	mov	r5, r3
 801ee04:	6133      	str	r3, [r6, #16]
 801ee06:	f106 0714 	add.w	r7, r6, #20
 801ee0a:	f04f 0c03 	mov.w	ip, #3
 801ee0e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801ee12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ee14:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ee16:	4b30      	ldr	r3, [pc, #192]	; (801eed8 <rcl_clock_init+0x10c>)
 801ee18:	4628      	mov	r0, r5
 801ee1a:	6822      	ldr	r2, [r4, #0]
 801ee1c:	603a      	str	r2, [r7, #0]
 801ee1e:	60f3      	str	r3, [r6, #12]
 801ee20:	f886 c000 	strb.w	ip, [r6]
 801ee24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee28:	2e00      	cmp	r6, #0
 801ee2a:	d0de      	beq.n	801edea <rcl_clock_init+0x1e>
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	f106 0714 	add.w	r7, r6, #20
 801ee32:	7033      	strb	r3, [r6, #0]
 801ee34:	461d      	mov	r5, r3
 801ee36:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801ee3a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801ee3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ee40:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ee42:	6823      	ldr	r3, [r4, #0]
 801ee44:	4628      	mov	r0, r5
 801ee46:	603b      	str	r3, [r7, #0]
 801ee48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee4c:	2c00      	cmp	r4, #0
 801ee4e:	d0cc      	beq.n	801edea <rcl_clock_init+0x1e>
 801ee50:	fab6 f586 	clz	r5, r6
 801ee54:	096d      	lsrs	r5, r5, #5
 801ee56:	2e00      	cmp	r6, #0
 801ee58:	d0c7      	beq.n	801edea <rcl_clock_init+0x1e>
 801ee5a:	46a4      	mov	ip, r4
 801ee5c:	7035      	strb	r5, [r6, #0]
 801ee5e:	f106 0714 	add.w	r7, r6, #20
 801ee62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ee66:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801ee6a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801ee6e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ee70:	f8dc 2000 	ldr.w	r2, [ip]
 801ee74:	2010      	movs	r0, #16
 801ee76:	6823      	ldr	r3, [r4, #0]
 801ee78:	603a      	str	r2, [r7, #0]
 801ee7a:	6921      	ldr	r1, [r4, #16]
 801ee7c:	4798      	blx	r3
 801ee7e:	6130      	str	r0, [r6, #16]
 801ee80:	b340      	cbz	r0, 801eed4 <rcl_clock_init+0x108>
 801ee82:	f04f 0800 	mov.w	r8, #0
 801ee86:	f04f 0900 	mov.w	r9, #0
 801ee8a:	4a14      	ldr	r2, [pc, #80]	; (801eedc <rcl_clock_init+0x110>)
 801ee8c:	2301      	movs	r3, #1
 801ee8e:	7205      	strb	r5, [r0, #8]
 801ee90:	e9c0 8900 	strd	r8, r9, [r0]
 801ee94:	4628      	mov	r0, r5
 801ee96:	60f2      	str	r2, [r6, #12]
 801ee98:	7033      	strb	r3, [r6, #0]
 801ee9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee9e:	2c00      	cmp	r4, #0
 801eea0:	d0a3      	beq.n	801edea <rcl_clock_init+0x1e>
 801eea2:	fab6 f386 	clz	r3, r6
 801eea6:	095b      	lsrs	r3, r3, #5
 801eea8:	2e00      	cmp	r6, #0
 801eeaa:	d09e      	beq.n	801edea <rcl_clock_init+0x1e>
 801eeac:	7033      	strb	r3, [r6, #0]
 801eeae:	461d      	mov	r5, r3
 801eeb0:	6133      	str	r3, [r6, #16]
 801eeb2:	f106 0714 	add.w	r7, r6, #20
 801eeb6:	f04f 0c02 	mov.w	ip, #2
 801eeba:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801eebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801eec0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801eec2:	4b07      	ldr	r3, [pc, #28]	; (801eee0 <rcl_clock_init+0x114>)
 801eec4:	4628      	mov	r0, r5
 801eec6:	6822      	ldr	r2, [r4, #0]
 801eec8:	603a      	str	r2, [r7, #0]
 801eeca:	60f3      	str	r3, [r6, #12]
 801eecc:	f886 c000 	strb.w	ip, [r6]
 801eed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eed4:	250a      	movs	r5, #10
 801eed6:	e789      	b.n	801edec <rcl_clock_init+0x20>
 801eed8:	0801eda1 	.word	0x0801eda1
 801eedc:	0801eda9 	.word	0x0801eda9
 801eee0:	0801ed99 	.word	0x0801ed99

0801eee4 <rcl_validate_enclave_name_with_size>:
 801eee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eee6:	b0c3      	sub	sp, #268	; 0x10c
 801eee8:	b1a8      	cbz	r0, 801ef16 <rcl_validate_enclave_name_with_size+0x32>
 801eeea:	4615      	mov	r5, r2
 801eeec:	b19a      	cbz	r2, 801ef16 <rcl_validate_enclave_name_with_size+0x32>
 801eeee:	461f      	mov	r7, r3
 801eef0:	466a      	mov	r2, sp
 801eef2:	ab01      	add	r3, sp, #4
 801eef4:	460e      	mov	r6, r1
 801eef6:	f000 fcfd 	bl	801f8f4 <rmw_validate_namespace_with_size>
 801eefa:	4604      	mov	r4, r0
 801eefc:	b9b0      	cbnz	r0, 801ef2c <rcl_validate_enclave_name_with_size+0x48>
 801eefe:	9b00      	ldr	r3, [sp, #0]
 801ef00:	b16b      	cbz	r3, 801ef1e <rcl_validate_enclave_name_with_size+0x3a>
 801ef02:	2b07      	cmp	r3, #7
 801ef04:	d018      	beq.n	801ef38 <rcl_validate_enclave_name_with_size+0x54>
 801ef06:	1e5a      	subs	r2, r3, #1
 801ef08:	2a05      	cmp	r2, #5
 801ef0a:	d835      	bhi.n	801ef78 <rcl_validate_enclave_name_with_size+0x94>
 801ef0c:	e8df f002 	tbb	[pc, r2]
 801ef10:	2e2b2825 	.word	0x2e2b2825
 801ef14:	1c31      	.short	0x1c31
 801ef16:	240b      	movs	r4, #11
 801ef18:	4620      	mov	r0, r4
 801ef1a:	b043      	add	sp, #268	; 0x10c
 801ef1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef1e:	2b07      	cmp	r3, #7
 801ef20:	d00a      	beq.n	801ef38 <rcl_validate_enclave_name_with_size+0x54>
 801ef22:	2300      	movs	r3, #0
 801ef24:	4620      	mov	r0, r4
 801ef26:	602b      	str	r3, [r5, #0]
 801ef28:	b043      	add	sp, #268	; 0x10c
 801ef2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef2c:	f7ff f8f8 	bl	801e120 <rcl_convert_rmw_ret_to_rcl_ret>
 801ef30:	4604      	mov	r4, r0
 801ef32:	4620      	mov	r0, r4
 801ef34:	b043      	add	sp, #268	; 0x10c
 801ef36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef38:	2eff      	cmp	r6, #255	; 0xff
 801ef3a:	d9f2      	bls.n	801ef22 <rcl_validate_enclave_name_with_size+0x3e>
 801ef3c:	602b      	str	r3, [r5, #0]
 801ef3e:	2f00      	cmp	r7, #0
 801ef40:	d0ea      	beq.n	801ef18 <rcl_validate_enclave_name_with_size+0x34>
 801ef42:	23fe      	movs	r3, #254	; 0xfe
 801ef44:	603b      	str	r3, [r7, #0]
 801ef46:	e7e7      	b.n	801ef18 <rcl_validate_enclave_name_with_size+0x34>
 801ef48:	2306      	movs	r3, #6
 801ef4a:	602b      	str	r3, [r5, #0]
 801ef4c:	2f00      	cmp	r7, #0
 801ef4e:	d0e3      	beq.n	801ef18 <rcl_validate_enclave_name_with_size+0x34>
 801ef50:	9b01      	ldr	r3, [sp, #4]
 801ef52:	4620      	mov	r0, r4
 801ef54:	603b      	str	r3, [r7, #0]
 801ef56:	b043      	add	sp, #268	; 0x10c
 801ef58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef5a:	2301      	movs	r3, #1
 801ef5c:	602b      	str	r3, [r5, #0]
 801ef5e:	e7f5      	b.n	801ef4c <rcl_validate_enclave_name_with_size+0x68>
 801ef60:	2302      	movs	r3, #2
 801ef62:	602b      	str	r3, [r5, #0]
 801ef64:	e7f2      	b.n	801ef4c <rcl_validate_enclave_name_with_size+0x68>
 801ef66:	2303      	movs	r3, #3
 801ef68:	602b      	str	r3, [r5, #0]
 801ef6a:	e7ef      	b.n	801ef4c <rcl_validate_enclave_name_with_size+0x68>
 801ef6c:	2304      	movs	r3, #4
 801ef6e:	602b      	str	r3, [r5, #0]
 801ef70:	e7ec      	b.n	801ef4c <rcl_validate_enclave_name_with_size+0x68>
 801ef72:	2305      	movs	r3, #5
 801ef74:	602b      	str	r3, [r5, #0]
 801ef76:	e7e9      	b.n	801ef4c <rcl_validate_enclave_name_with_size+0x68>
 801ef78:	4a03      	ldr	r2, [pc, #12]	; (801ef88 <rcl_validate_enclave_name_with_size+0xa4>)
 801ef7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ef7e:	a802      	add	r0, sp, #8
 801ef80:	2401      	movs	r4, #1
 801ef82:	f000 f9c1 	bl	801f308 <rcutils_snprintf>
 801ef86:	e7c7      	b.n	801ef18 <rcl_validate_enclave_name_with_size+0x34>
 801ef88:	0802675c 	.word	0x0802675c

0801ef8c <rcl_validate_enclave_name>:
 801ef8c:	b168      	cbz	r0, 801efaa <rcl_validate_enclave_name+0x1e>
 801ef8e:	b570      	push	{r4, r5, r6, lr}
 801ef90:	460d      	mov	r5, r1
 801ef92:	4616      	mov	r6, r2
 801ef94:	4604      	mov	r4, r0
 801ef96:	f7e1 f995 	bl	80002c4 <strlen>
 801ef9a:	4633      	mov	r3, r6
 801ef9c:	4601      	mov	r1, r0
 801ef9e:	462a      	mov	r2, r5
 801efa0:	4620      	mov	r0, r4
 801efa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801efa6:	f7ff bf9d 	b.w	801eee4 <rcl_validate_enclave_name_with_size>
 801efaa:	200b      	movs	r0, #11
 801efac:	4770      	bx	lr
 801efae:	bf00      	nop

0801efb0 <__atomic_load_8>:
 801efb0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801efb4:	4b15      	ldr	r3, [pc, #84]	; (801f00c <__atomic_load_8+0x5c>)
 801efb6:	4a16      	ldr	r2, [pc, #88]	; (801f010 <__atomic_load_8+0x60>)
 801efb8:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 801efbc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801efc0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801efc4:	fb03 f301 	mul.w	r3, r3, r1
 801efc8:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 801efcc:	fba2 1203 	umull	r1, r2, r2, r3
 801efd0:	0912      	lsrs	r2, r2, #4
 801efd2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801efd6:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 801efda:	b430      	push	{r4, r5}
 801efdc:	1a9b      	subs	r3, r3, r2
 801efde:	4c0d      	ldr	r4, [pc, #52]	; (801f014 <__atomic_load_8+0x64>)
 801efe0:	f04f 0501 	mov.w	r5, #1
 801efe4:	18e1      	adds	r1, r4, r3
 801efe6:	e8d1 2f4f 	ldrexb	r2, [r1]
 801efea:	e8c1 5f4c 	strexb	ip, r5, [r1]
 801efee:	f1bc 0f00 	cmp.w	ip, #0
 801eff2:	d1f8      	bne.n	801efe6 <__atomic_load_8+0x36>
 801eff4:	b2d2      	uxtb	r2, r2
 801eff6:	f3bf 8f5b 	dmb	ish
 801effa:	2a00      	cmp	r2, #0
 801effc:	d1f3      	bne.n	801efe6 <__atomic_load_8+0x36>
 801effe:	e9d0 0100 	ldrd	r0, r1, [r0]
 801f002:	f3bf 8f5b 	dmb	ish
 801f006:	54e2      	strb	r2, [r4, r3]
 801f008:	bc30      	pop	{r4, r5}
 801f00a:	4770      	bx	lr
 801f00c:	27d4eb2d 	.word	0x27d4eb2d
 801f010:	b21642c9 	.word	0xb21642c9
 801f014:	20044028 	.word	0x20044028

0801f018 <__atomic_store_8>:
 801f018:	b4f0      	push	{r4, r5, r6, r7}
 801f01a:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 801f01e:	4915      	ldr	r1, [pc, #84]	; (801f074 <__atomic_store_8+0x5c>)
 801f020:	4c15      	ldr	r4, [pc, #84]	; (801f078 <__atomic_store_8+0x60>)
 801f022:	f04f 0701 	mov.w	r7, #1
 801f026:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 801f02a:	4e14      	ldr	r6, [pc, #80]	; (801f07c <__atomic_store_8+0x64>)
 801f02c:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 801f030:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 801f034:	fb01 f105 	mul.w	r1, r1, r5
 801f038:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801f03c:	fba4 5401 	umull	r5, r4, r4, r1
 801f040:	0924      	lsrs	r4, r4, #4
 801f042:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801f046:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801f04a:	1b09      	subs	r1, r1, r4
 801f04c:	1875      	adds	r5, r6, r1
 801f04e:	e8d5 4f4f 	ldrexb	r4, [r5]
 801f052:	e8c5 7f4c 	strexb	ip, r7, [r5]
 801f056:	f1bc 0f00 	cmp.w	ip, #0
 801f05a:	d1f8      	bne.n	801f04e <__atomic_store_8+0x36>
 801f05c:	b2e4      	uxtb	r4, r4
 801f05e:	f3bf 8f5b 	dmb	ish
 801f062:	2c00      	cmp	r4, #0
 801f064:	d1f3      	bne.n	801f04e <__atomic_store_8+0x36>
 801f066:	e9c0 2300 	strd	r2, r3, [r0]
 801f06a:	f3bf 8f5b 	dmb	ish
 801f06e:	5474      	strb	r4, [r6, r1]
 801f070:	bcf0      	pop	{r4, r5, r6, r7}
 801f072:	4770      	bx	lr
 801f074:	27d4eb2d 	.word	0x27d4eb2d
 801f078:	b21642c9 	.word	0xb21642c9
 801f07c:	20044028 	.word	0x20044028

0801f080 <__atomic_fetch_add_8>:
 801f080:	b4f0      	push	{r4, r5, r6, r7}
 801f082:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 801f086:	4c18      	ldr	r4, [pc, #96]	; (801f0e8 <__atomic_fetch_add_8+0x68>)
 801f088:	4918      	ldr	r1, [pc, #96]	; (801f0ec <__atomic_fetch_add_8+0x6c>)
 801f08a:	4606      	mov	r6, r0
 801f08c:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 801f090:	4f17      	ldr	r7, [pc, #92]	; (801f0f0 <__atomic_fetch_add_8+0x70>)
 801f092:	f04f 0001 	mov.w	r0, #1
 801f096:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 801f09a:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 801f09e:	fb04 f505 	mul.w	r5, r4, r5
 801f0a2:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 801f0a6:	fba1 4105 	umull	r4, r1, r1, r5
 801f0aa:	0909      	lsrs	r1, r1, #4
 801f0ac:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801f0b0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 801f0b4:	1a6c      	subs	r4, r5, r1
 801f0b6:	1939      	adds	r1, r7, r4
 801f0b8:	e8d1 5f4f 	ldrexb	r5, [r1]
 801f0bc:	e8c1 0f4c 	strexb	ip, r0, [r1]
 801f0c0:	f1bc 0f00 	cmp.w	ip, #0
 801f0c4:	d1f8      	bne.n	801f0b8 <__atomic_fetch_add_8+0x38>
 801f0c6:	b2ed      	uxtb	r5, r5
 801f0c8:	f3bf 8f5b 	dmb	ish
 801f0cc:	2d00      	cmp	r5, #0
 801f0ce:	d1f3      	bne.n	801f0b8 <__atomic_fetch_add_8+0x38>
 801f0d0:	e9d6 0100 	ldrd	r0, r1, [r6]
 801f0d4:	1882      	adds	r2, r0, r2
 801f0d6:	eb41 0303 	adc.w	r3, r1, r3
 801f0da:	e9c6 2300 	strd	r2, r3, [r6]
 801f0de:	f3bf 8f5b 	dmb	ish
 801f0e2:	553d      	strb	r5, [r7, r4]
 801f0e4:	bcf0      	pop	{r4, r5, r6, r7}
 801f0e6:	4770      	bx	lr
 801f0e8:	27d4eb2d 	.word	0x27d4eb2d
 801f0ec:	b21642c9 	.word	0xb21642c9
 801f0f0:	20044028 	.word	0x20044028

0801f0f4 <rcutils_is_directory>:
 801f0f4:	2000      	movs	r0, #0
 801f0f6:	4770      	bx	lr

0801f0f8 <rcutils_join_path>:
 801f0f8:	b082      	sub	sp, #8
 801f0fa:	2000      	movs	r0, #0
 801f0fc:	e88d 000c 	stmia.w	sp, {r2, r3}
 801f100:	b002      	add	sp, #8
 801f102:	4770      	bx	lr

0801f104 <rcutils_to_native_path>:
 801f104:	b084      	sub	sp, #16
 801f106:	2000      	movs	r0, #0
 801f108:	b410      	push	{r4}
 801f10a:	ac02      	add	r4, sp, #8
 801f10c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801f110:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f114:	b004      	add	sp, #16
 801f116:	4770      	bx	lr

0801f118 <rcutils_format_string_limit>:
 801f118:	b40f      	push	{r0, r1, r2, r3}
 801f11a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f11c:	b083      	sub	sp, #12
 801f11e:	ac08      	add	r4, sp, #32
 801f120:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801f122:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801f126:	b326      	cbz	r6, 801f172 <rcutils_format_string_limit+0x5a>
 801f128:	a808      	add	r0, sp, #32
 801f12a:	f7f7 fe93 	bl	8016e54 <rcutils_allocator_is_valid>
 801f12e:	b300      	cbz	r0, 801f172 <rcutils_format_string_limit+0x5a>
 801f130:	2100      	movs	r1, #0
 801f132:	ab0f      	add	r3, sp, #60	; 0x3c
 801f134:	4632      	mov	r2, r6
 801f136:	4608      	mov	r0, r1
 801f138:	e9cd 3300 	strd	r3, r3, [sp]
 801f13c:	f000 f912 	bl	801f364 <rcutils_vsnprintf>
 801f140:	1c43      	adds	r3, r0, #1
 801f142:	4605      	mov	r5, r0
 801f144:	d015      	beq.n	801f172 <rcutils_format_string_limit+0x5a>
 801f146:	1c47      	adds	r7, r0, #1
 801f148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f14a:	429f      	cmp	r7, r3
 801f14c:	d901      	bls.n	801f152 <rcutils_format_string_limit+0x3a>
 801f14e:	1e5d      	subs	r5, r3, #1
 801f150:	461f      	mov	r7, r3
 801f152:	9b08      	ldr	r3, [sp, #32]
 801f154:	4638      	mov	r0, r7
 801f156:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f158:	4798      	blx	r3
 801f15a:	4604      	mov	r4, r0
 801f15c:	b148      	cbz	r0, 801f172 <rcutils_format_string_limit+0x5a>
 801f15e:	4632      	mov	r2, r6
 801f160:	4639      	mov	r1, r7
 801f162:	9b01      	ldr	r3, [sp, #4]
 801f164:	f000 f8fe 	bl	801f364 <rcutils_vsnprintf>
 801f168:	2800      	cmp	r0, #0
 801f16a:	db09      	blt.n	801f180 <rcutils_format_string_limit+0x68>
 801f16c:	2300      	movs	r3, #0
 801f16e:	5563      	strb	r3, [r4, r5]
 801f170:	e000      	b.n	801f174 <rcutils_format_string_limit+0x5c>
 801f172:	2400      	movs	r4, #0
 801f174:	4620      	mov	r0, r4
 801f176:	b003      	add	sp, #12
 801f178:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f17c:	b004      	add	sp, #16
 801f17e:	4770      	bx	lr
 801f180:	4620      	mov	r0, r4
 801f182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f184:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f186:	2400      	movs	r4, #0
 801f188:	4798      	blx	r3
 801f18a:	e7f3      	b.n	801f174 <rcutils_format_string_limit+0x5c>

0801f18c <rcutils_get_env>:
 801f18c:	b168      	cbz	r0, 801f1aa <rcutils_get_env+0x1e>
 801f18e:	b510      	push	{r4, lr}
 801f190:	460c      	mov	r4, r1
 801f192:	b129      	cbz	r1, 801f1a0 <rcutils_get_env+0x14>
 801f194:	f002 fbe4 	bl	8021960 <getenv>
 801f198:	b120      	cbz	r0, 801f1a4 <rcutils_get_env+0x18>
 801f19a:	6020      	str	r0, [r4, #0]
 801f19c:	2000      	movs	r0, #0
 801f19e:	bd10      	pop	{r4, pc}
 801f1a0:	4803      	ldr	r0, [pc, #12]	; (801f1b0 <rcutils_get_env+0x24>)
 801f1a2:	bd10      	pop	{r4, pc}
 801f1a4:	4b03      	ldr	r3, [pc, #12]	; (801f1b4 <rcutils_get_env+0x28>)
 801f1a6:	6023      	str	r3, [r4, #0]
 801f1a8:	bd10      	pop	{r4, pc}
 801f1aa:	4803      	ldr	r0, [pc, #12]	; (801f1b8 <rcutils_get_env+0x2c>)
 801f1ac:	4770      	bx	lr
 801f1ae:	bf00      	nop
 801f1b0:	080267d8 	.word	0x080267d8
 801f1b4:	080268fc 	.word	0x080268fc
 801f1b8:	080267bc 	.word	0x080267bc

0801f1bc <rcutils_repl_str>:
 801f1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1c0:	ed2d 8b02 	vpush	{d8}
 801f1c4:	b087      	sub	sp, #28
 801f1c6:	2600      	movs	r6, #0
 801f1c8:	4680      	mov	r8, r0
 801f1ca:	468a      	mov	sl, r1
 801f1cc:	9001      	str	r0, [sp, #4]
 801f1ce:	4608      	mov	r0, r1
 801f1d0:	ee08 2a10 	vmov	s16, r2
 801f1d4:	4699      	mov	r9, r3
 801f1d6:	4637      	mov	r7, r6
 801f1d8:	f7e1 f874 	bl	80002c4 <strlen>
 801f1dc:	46b3      	mov	fp, r6
 801f1de:	2510      	movs	r5, #16
 801f1e0:	9002      	str	r0, [sp, #8]
 801f1e2:	e01d      	b.n	801f220 <rcutils_repl_str+0x64>
 801f1e4:	f10b 0b01 	add.w	fp, fp, #1
 801f1e8:	9b02      	ldr	r3, [sp, #8]
 801f1ea:	455e      	cmp	r6, fp
 801f1ec:	eb04 0803 	add.w	r8, r4, r3
 801f1f0:	d210      	bcs.n	801f214 <rcutils_repl_str+0x58>
 801f1f2:	442e      	add	r6, r5
 801f1f4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801f1f8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801f1fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f200:	00b1      	lsls	r1, r6, #2
 801f202:	4798      	blx	r3
 801f204:	2800      	cmp	r0, #0
 801f206:	d07c      	beq.n	801f302 <rcutils_repl_str+0x146>
 801f208:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801f20c:	4607      	mov	r7, r0
 801f20e:	bf28      	it	cs
 801f210:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 801f214:	9b01      	ldr	r3, [sp, #4]
 801f216:	1ae4      	subs	r4, r4, r3
 801f218:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801f21c:	f843 4c04 	str.w	r4, [r3, #-4]
 801f220:	4651      	mov	r1, sl
 801f222:	4640      	mov	r0, r8
 801f224:	f002 ffb2 	bl	802218c <strstr>
 801f228:	4604      	mov	r4, r0
 801f22a:	4638      	mov	r0, r7
 801f22c:	2c00      	cmp	r4, #0
 801f22e:	d1d9      	bne.n	801f1e4 <rcutils_repl_str+0x28>
 801f230:	4640      	mov	r0, r8
 801f232:	f7e1 f847 	bl	80002c4 <strlen>
 801f236:	9b01      	ldr	r3, [sp, #4]
 801f238:	eba8 0803 	sub.w	r8, r8, r3
 801f23c:	eb08 0500 	add.w	r5, r8, r0
 801f240:	9504      	str	r5, [sp, #16]
 801f242:	f1bb 0f00 	cmp.w	fp, #0
 801f246:	d03b      	beq.n	801f2c0 <rcutils_repl_str+0x104>
 801f248:	ee18 0a10 	vmov	r0, s16
 801f24c:	f7e1 f83a 	bl	80002c4 <strlen>
 801f250:	9a02      	ldr	r2, [sp, #8]
 801f252:	f8d9 3000 	ldr.w	r3, [r9]
 801f256:	4606      	mov	r6, r0
 801f258:	1a82      	subs	r2, r0, r2
 801f25a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801f25e:	fb0b 5202 	mla	r2, fp, r2, r5
 801f262:	1c50      	adds	r0, r2, #1
 801f264:	9205      	str	r2, [sp, #20]
 801f266:	4798      	blx	r3
 801f268:	4682      	mov	sl, r0
 801f26a:	2800      	cmp	r0, #0
 801f26c:	d049      	beq.n	801f302 <rcutils_repl_str+0x146>
 801f26e:	683a      	ldr	r2, [r7, #0]
 801f270:	46b8      	mov	r8, r7
 801f272:	9901      	ldr	r1, [sp, #4]
 801f274:	f002 fc04 	bl	8021a80 <memcpy>
 801f278:	683d      	ldr	r5, [r7, #0]
 801f27a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801f27e:	4455      	add	r5, sl
 801f280:	9303      	str	r3, [sp, #12]
 801f282:	4632      	mov	r2, r6
 801f284:	ee18 1a10 	vmov	r1, s16
 801f288:	4628      	mov	r0, r5
 801f28a:	4435      	add	r5, r6
 801f28c:	f002 fbf8 	bl	8021a80 <memcpy>
 801f290:	9b02      	ldr	r3, [sp, #8]
 801f292:	f858 2b04 	ldr.w	r2, [r8], #4
 801f296:	4628      	mov	r0, r5
 801f298:	441a      	add	r2, r3
 801f29a:	9b01      	ldr	r3, [sp, #4]
 801f29c:	1899      	adds	r1, r3, r2
 801f29e:	9b03      	ldr	r3, [sp, #12]
 801f2a0:	429c      	cmp	r4, r3
 801f2a2:	d025      	beq.n	801f2f0 <rcutils_repl_str+0x134>
 801f2a4:	f8d8 3000 	ldr.w	r3, [r8]
 801f2a8:	3401      	adds	r4, #1
 801f2aa:	1a9a      	subs	r2, r3, r2
 801f2ac:	4415      	add	r5, r2
 801f2ae:	f002 fbe7 	bl	8021a80 <memcpy>
 801f2b2:	455c      	cmp	r4, fp
 801f2b4:	d3e5      	bcc.n	801f282 <rcutils_repl_str+0xc6>
 801f2b6:	2300      	movs	r3, #0
 801f2b8:	9a05      	ldr	r2, [sp, #20]
 801f2ba:	f80a 3002 	strb.w	r3, [sl, r2]
 801f2be:	e00b      	b.n	801f2d8 <rcutils_repl_str+0x11c>
 801f2c0:	4628      	mov	r0, r5
 801f2c2:	f8d9 3000 	ldr.w	r3, [r9]
 801f2c6:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801f2ca:	3001      	adds	r0, #1
 801f2cc:	4798      	blx	r3
 801f2ce:	4682      	mov	sl, r0
 801f2d0:	b110      	cbz	r0, 801f2d8 <rcutils_repl_str+0x11c>
 801f2d2:	9901      	ldr	r1, [sp, #4]
 801f2d4:	f002 ff3e 	bl	8022154 <strcpy>
 801f2d8:	4638      	mov	r0, r7
 801f2da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f2de:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801f2e2:	4798      	blx	r3
 801f2e4:	4650      	mov	r0, sl
 801f2e6:	b007      	add	sp, #28
 801f2e8:	ecbd 8b02 	vpop	{d8}
 801f2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2f0:	9b04      	ldr	r3, [sp, #16]
 801f2f2:	3401      	adds	r4, #1
 801f2f4:	1a9a      	subs	r2, r3, r2
 801f2f6:	4415      	add	r5, r2
 801f2f8:	f002 fbc2 	bl	8021a80 <memcpy>
 801f2fc:	455c      	cmp	r4, fp
 801f2fe:	d3c0      	bcc.n	801f282 <rcutils_repl_str+0xc6>
 801f300:	e7d9      	b.n	801f2b6 <rcutils_repl_str+0xfa>
 801f302:	f04f 0a00 	mov.w	sl, #0
 801f306:	e7e7      	b.n	801f2d8 <rcutils_repl_str+0x11c>

0801f308 <rcutils_snprintf>:
 801f308:	b40c      	push	{r2, r3}
 801f30a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f30c:	b083      	sub	sp, #12
 801f30e:	ab08      	add	r3, sp, #32
 801f310:	f853 2b04 	ldr.w	r2, [r3], #4
 801f314:	9301      	str	r3, [sp, #4]
 801f316:	b1e2      	cbz	r2, 801f352 <rcutils_snprintf+0x4a>
 801f318:	fab0 f680 	clz	r6, r0
 801f31c:	fab1 f781 	clz	r7, r1
 801f320:	ea50 0401 	orrs.w	r4, r0, r1
 801f324:	ea4f 1656 	mov.w	r6, r6, lsr #5
 801f328:	ea4f 1757 	mov.w	r7, r7, lsr #5
 801f32c:	d008      	beq.n	801f340 <rcutils_snprintf+0x38>
 801f32e:	b986      	cbnz	r6, 801f352 <rcutils_snprintf+0x4a>
 801f330:	b97f      	cbnz	r7, 801f352 <rcutils_snprintf+0x4a>
 801f332:	f002 ffe9 	bl	8022308 <vsniprintf>
 801f336:	b003      	add	sp, #12
 801f338:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f33c:	b002      	add	sp, #8
 801f33e:	4770      	bx	lr
 801f340:	4621      	mov	r1, r4
 801f342:	4620      	mov	r0, r4
 801f344:	f002 ffe0 	bl	8022308 <vsniprintf>
 801f348:	b003      	add	sp, #12
 801f34a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f34e:	b002      	add	sp, #8
 801f350:	4770      	bx	lr
 801f352:	4b03      	ldr	r3, [pc, #12]	; (801f360 <rcutils_snprintf+0x58>)
 801f354:	2216      	movs	r2, #22
 801f356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f35a:	601a      	str	r2, [r3, #0]
 801f35c:	e7eb      	b.n	801f336 <rcutils_snprintf+0x2e>
 801f35e:	bf00      	nop
 801f360:	20044078 	.word	0x20044078

0801f364 <rcutils_vsnprintf>:
 801f364:	b1e2      	cbz	r2, 801f3a0 <rcutils_vsnprintf+0x3c>
 801f366:	b4f0      	push	{r4, r5, r6, r7}
 801f368:	fab0 f680 	clz	r6, r0
 801f36c:	fab1 f781 	clz	r7, r1
 801f370:	ea50 0401 	orrs.w	r4, r0, r1
 801f374:	ea4f 1656 	mov.w	r6, r6, lsr #5
 801f378:	ea4f 1757 	mov.w	r7, r7, lsr #5
 801f37c:	d004      	beq.n	801f388 <rcutils_vsnprintf+0x24>
 801f37e:	b946      	cbnz	r6, 801f392 <rcutils_vsnprintf+0x2e>
 801f380:	b93f      	cbnz	r7, 801f392 <rcutils_vsnprintf+0x2e>
 801f382:	bcf0      	pop	{r4, r5, r6, r7}
 801f384:	f002 bfc0 	b.w	8022308 <vsniprintf>
 801f388:	4621      	mov	r1, r4
 801f38a:	4620      	mov	r0, r4
 801f38c:	bcf0      	pop	{r4, r5, r6, r7}
 801f38e:	f002 bfbb 	b.w	8022308 <vsniprintf>
 801f392:	4b06      	ldr	r3, [pc, #24]	; (801f3ac <rcutils_vsnprintf+0x48>)
 801f394:	2216      	movs	r2, #22
 801f396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f39a:	601a      	str	r2, [r3, #0]
 801f39c:	bcf0      	pop	{r4, r5, r6, r7}
 801f39e:	4770      	bx	lr
 801f3a0:	4b02      	ldr	r3, [pc, #8]	; (801f3ac <rcutils_vsnprintf+0x48>)
 801f3a2:	2216      	movs	r2, #22
 801f3a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f3a8:	601a      	str	r2, [r3, #0]
 801f3aa:	4770      	bx	lr
 801f3ac:	20044078 	.word	0x20044078

0801f3b0 <rcutils_strdup>:
 801f3b0:	b084      	sub	sp, #16
 801f3b2:	b570      	push	{r4, r5, r6, lr}
 801f3b4:	b082      	sub	sp, #8
 801f3b6:	4605      	mov	r5, r0
 801f3b8:	ac07      	add	r4, sp, #28
 801f3ba:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801f3be:	b1b0      	cbz	r0, 801f3ee <rcutils_strdup+0x3e>
 801f3c0:	f7e0 ff80 	bl	80002c4 <strlen>
 801f3c4:	1c42      	adds	r2, r0, #1
 801f3c6:	9b07      	ldr	r3, [sp, #28]
 801f3c8:	4606      	mov	r6, r0
 801f3ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f3cc:	4610      	mov	r0, r2
 801f3ce:	9201      	str	r2, [sp, #4]
 801f3d0:	4798      	blx	r3
 801f3d2:	4604      	mov	r4, r0
 801f3d4:	b128      	cbz	r0, 801f3e2 <rcutils_strdup+0x32>
 801f3d6:	9a01      	ldr	r2, [sp, #4]
 801f3d8:	4629      	mov	r1, r5
 801f3da:	f002 fb51 	bl	8021a80 <memcpy>
 801f3de:	2300      	movs	r3, #0
 801f3e0:	55a3      	strb	r3, [r4, r6]
 801f3e2:	4620      	mov	r0, r4
 801f3e4:	b002      	add	sp, #8
 801f3e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f3ea:	b004      	add	sp, #16
 801f3ec:	4770      	bx	lr
 801f3ee:	4604      	mov	r4, r0
 801f3f0:	e7f7      	b.n	801f3e2 <rcutils_strdup+0x32>
 801f3f2:	bf00      	nop

0801f3f4 <rcutils_strndup>:
 801f3f4:	b082      	sub	sp, #8
 801f3f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3f8:	ac06      	add	r4, sp, #24
 801f3fa:	4605      	mov	r5, r0
 801f3fc:	e884 000c 	stmia.w	r4, {r2, r3}
 801f400:	b188      	cbz	r0, 801f426 <rcutils_strndup+0x32>
 801f402:	1c4f      	adds	r7, r1, #1
 801f404:	460e      	mov	r6, r1
 801f406:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f408:	4638      	mov	r0, r7
 801f40a:	4790      	blx	r2
 801f40c:	4604      	mov	r4, r0
 801f40e:	b128      	cbz	r0, 801f41c <rcutils_strndup+0x28>
 801f410:	463a      	mov	r2, r7
 801f412:	4629      	mov	r1, r5
 801f414:	f002 fb34 	bl	8021a80 <memcpy>
 801f418:	2300      	movs	r3, #0
 801f41a:	55a3      	strb	r3, [r4, r6]
 801f41c:	4620      	mov	r0, r4
 801f41e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f422:	b002      	add	sp, #8
 801f424:	4770      	bx	lr
 801f426:	4604      	mov	r4, r0
 801f428:	e7f8      	b.n	801f41c <rcutils_strndup+0x28>
 801f42a:	bf00      	nop

0801f42c <rcutils_get_zero_initialized_string_map>:
 801f42c:	4b01      	ldr	r3, [pc, #4]	; (801f434 <rcutils_get_zero_initialized_string_map+0x8>)
 801f42e:	2000      	movs	r0, #0
 801f430:	6018      	str	r0, [r3, #0]
 801f432:	4770      	bx	lr
 801f434:	20044040 	.word	0x20044040

0801f438 <rcutils_string_map_reserve>:
 801f438:	2800      	cmp	r0, #0
 801f43a:	d061      	beq.n	801f500 <rcutils_string_map_reserve+0xc8>
 801f43c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f440:	6805      	ldr	r5, [r0, #0]
 801f442:	b083      	sub	sp, #12
 801f444:	4606      	mov	r6, r0
 801f446:	460c      	mov	r4, r1
 801f448:	b12d      	cbz	r5, 801f456 <rcutils_string_map_reserve+0x1e>
 801f44a:	68eb      	ldr	r3, [r5, #12]
 801f44c:	42a3      	cmp	r3, r4
 801f44e:	d906      	bls.n	801f45e <rcutils_string_map_reserve+0x26>
 801f450:	461c      	mov	r4, r3
 801f452:	2d00      	cmp	r5, #0
 801f454:	d1f9      	bne.n	801f44a <rcutils_string_map_reserve+0x12>
 801f456:	201f      	movs	r0, #31
 801f458:	b003      	add	sp, #12
 801f45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f45e:	68ab      	ldr	r3, [r5, #8]
 801f460:	42a3      	cmp	r3, r4
 801f462:	d049      	beq.n	801f4f8 <rcutils_string_map_reserve+0xc0>
 801f464:	6a2f      	ldr	r7, [r5, #32]
 801f466:	2c00      	cmp	r4, #0
 801f468:	d035      	beq.n	801f4d6 <rcutils_string_map_reserve+0x9e>
 801f46a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801f46e:	d245      	bcs.n	801f4fc <rcutils_string_map_reserve+0xc4>
 801f470:	ea4f 0884 	mov.w	r8, r4, lsl #2
 801f474:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801f478:	6828      	ldr	r0, [r5, #0]
 801f47a:	463a      	mov	r2, r7
 801f47c:	4641      	mov	r1, r8
 801f47e:	47c8      	blx	r9
 801f480:	2800      	cmp	r0, #0
 801f482:	d03b      	beq.n	801f4fc <rcutils_string_map_reserve+0xc4>
 801f484:	6833      	ldr	r3, [r6, #0]
 801f486:	463a      	mov	r2, r7
 801f488:	4641      	mov	r1, r8
 801f48a:	6018      	str	r0, [r3, #0]
 801f48c:	6858      	ldr	r0, [r3, #4]
 801f48e:	47c8      	blx	r9
 801f490:	2800      	cmp	r0, #0
 801f492:	d033      	beq.n	801f4fc <rcutils_string_map_reserve+0xc4>
 801f494:	6835      	ldr	r5, [r6, #0]
 801f496:	68ab      	ldr	r3, [r5, #8]
 801f498:	6068      	str	r0, [r5, #4]
 801f49a:	42a3      	cmp	r3, r4
 801f49c:	d227      	bcs.n	801f4ee <rcutils_string_map_reserve+0xb6>
 801f49e:	682a      	ldr	r2, [r5, #0]
 801f4a0:	eb00 0108 	add.w	r1, r0, r8
 801f4a4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801f4a8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 801f4ac:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801f4b0:	428f      	cmp	r7, r1
 801f4b2:	d203      	bcs.n	801f4bc <rcutils_string_map_reserve+0x84>
 801f4b4:	eb02 0108 	add.w	r1, r2, r8
 801f4b8:	428e      	cmp	r6, r1
 801f4ba:	d323      	bcc.n	801f504 <rcutils_string_map_reserve+0xcc>
 801f4bc:	1ae3      	subs	r3, r4, r3
 801f4be:	4638      	mov	r0, r7
 801f4c0:	2100      	movs	r1, #0
 801f4c2:	009a      	lsls	r2, r3, #2
 801f4c4:	9201      	str	r2, [sp, #4]
 801f4c6:	f002 fb03 	bl	8021ad0 <memset>
 801f4ca:	9a01      	ldr	r2, [sp, #4]
 801f4cc:	4630      	mov	r0, r6
 801f4ce:	2100      	movs	r1, #0
 801f4d0:	f002 fafe 	bl	8021ad0 <memset>
 801f4d4:	e00b      	b.n	801f4ee <rcutils_string_map_reserve+0xb6>
 801f4d6:	f8d5 8014 	ldr.w	r8, [r5, #20]
 801f4da:	4639      	mov	r1, r7
 801f4dc:	6828      	ldr	r0, [r5, #0]
 801f4de:	47c0      	blx	r8
 801f4e0:	6833      	ldr	r3, [r6, #0]
 801f4e2:	4639      	mov	r1, r7
 801f4e4:	6858      	ldr	r0, [r3, #4]
 801f4e6:	601c      	str	r4, [r3, #0]
 801f4e8:	47c0      	blx	r8
 801f4ea:	6835      	ldr	r5, [r6, #0]
 801f4ec:	606c      	str	r4, [r5, #4]
 801f4ee:	2000      	movs	r0, #0
 801f4f0:	60ac      	str	r4, [r5, #8]
 801f4f2:	b003      	add	sp, #12
 801f4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f4f8:	2000      	movs	r0, #0
 801f4fa:	e7ad      	b.n	801f458 <rcutils_string_map_reserve+0x20>
 801f4fc:	200a      	movs	r0, #10
 801f4fe:	e7ab      	b.n	801f458 <rcutils_string_map_reserve+0x20>
 801f500:	200b      	movs	r0, #11
 801f502:	4770      	bx	lr
 801f504:	1f13      	subs	r3, r2, #4
 801f506:	f1ac 0c04 	sub.w	ip, ip, #4
 801f50a:	4498      	add	r8, r3
 801f50c:	4460      	add	r0, ip
 801f50e:	4462      	add	r2, ip
 801f510:	2300      	movs	r3, #0
 801f512:	f842 3f04 	str.w	r3, [r2, #4]!
 801f516:	4542      	cmp	r2, r8
 801f518:	f840 3f04 	str.w	r3, [r0, #4]!
 801f51c:	d1f9      	bne.n	801f512 <rcutils_string_map_reserve+0xda>
 801f51e:	e7e6      	b.n	801f4ee <rcutils_string_map_reserve+0xb6>

0801f520 <rcutils_string_map_init>:
 801f520:	b082      	sub	sp, #8
 801f522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f524:	ac06      	add	r4, sp, #24
 801f526:	e884 000c 	stmia.w	r4, {r2, r3}
 801f52a:	b378      	cbz	r0, 801f58c <rcutils_string_map_init+0x6c>
 801f52c:	6806      	ldr	r6, [r0, #0]
 801f52e:	4604      	mov	r4, r0
 801f530:	b12e      	cbz	r6, 801f53e <rcutils_string_map_init+0x1e>
 801f532:	251e      	movs	r5, #30
 801f534:	4628      	mov	r0, r5
 801f536:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f53a:	b002      	add	sp, #8
 801f53c:	4770      	bx	lr
 801f53e:	a806      	add	r0, sp, #24
 801f540:	460d      	mov	r5, r1
 801f542:	f7f7 fc87 	bl	8016e54 <rcutils_allocator_is_valid>
 801f546:	b308      	cbz	r0, 801f58c <rcutils_string_map_init+0x6c>
 801f548:	9b06      	ldr	r3, [sp, #24]
 801f54a:	2024      	movs	r0, #36	; 0x24
 801f54c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f54e:	4798      	blx	r3
 801f550:	6020      	str	r0, [r4, #0]
 801f552:	b308      	cbz	r0, 801f598 <rcutils_string_map_init+0x78>
 801f554:	f10d 0c18 	add.w	ip, sp, #24
 801f558:	f100 0710 	add.w	r7, r0, #16
 801f55c:	e9c0 6600 	strd	r6, r6, [r0]
 801f560:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801f564:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801f568:	f8dc c000 	ldr.w	ip, [ip]
 801f56c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801f56e:	4629      	mov	r1, r5
 801f570:	4620      	mov	r0, r4
 801f572:	f8c7 c000 	str.w	ip, [r7]
 801f576:	f7ff ff5f 	bl	801f438 <rcutils_string_map_reserve>
 801f57a:	4605      	mov	r5, r0
 801f57c:	2800      	cmp	r0, #0
 801f57e:	d0d9      	beq.n	801f534 <rcutils_string_map_init+0x14>
 801f580:	9b07      	ldr	r3, [sp, #28]
 801f582:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f584:	6820      	ldr	r0, [r4, #0]
 801f586:	4798      	blx	r3
 801f588:	6026      	str	r6, [r4, #0]
 801f58a:	e7d3      	b.n	801f534 <rcutils_string_map_init+0x14>
 801f58c:	250b      	movs	r5, #11
 801f58e:	4628      	mov	r0, r5
 801f590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f594:	b002      	add	sp, #8
 801f596:	4770      	bx	lr
 801f598:	250a      	movs	r5, #10
 801f59a:	e7cb      	b.n	801f534 <rcutils_string_map_init+0x14>

0801f59c <rcutils_string_map_fini>:
 801f59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5a0:	b082      	sub	sp, #8
 801f5a2:	2800      	cmp	r0, #0
 801f5a4:	d039      	beq.n	801f61a <rcutils_string_map_fini+0x7e>
 801f5a6:	6804      	ldr	r4, [r0, #0]
 801f5a8:	4606      	mov	r6, r0
 801f5aa:	2c00      	cmp	r4, #0
 801f5ac:	d031      	beq.n	801f612 <rcutils_string_map_fini+0x76>
 801f5ae:	68a3      	ldr	r3, [r4, #8]
 801f5b0:	b323      	cbz	r3, 801f5fc <rcutils_string_map_fini+0x60>
 801f5b2:	2500      	movs	r5, #0
 801f5b4:	6822      	ldr	r2, [r4, #0]
 801f5b6:	46a8      	mov	r8, r5
 801f5b8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801f5bc:	b1d8      	cbz	r0, 801f5f6 <rcutils_string_map_fini+0x5a>
 801f5be:	6a21      	ldr	r1, [r4, #32]
 801f5c0:	6967      	ldr	r7, [r4, #20]
 801f5c2:	9101      	str	r1, [sp, #4]
 801f5c4:	47b8      	blx	r7
 801f5c6:	9901      	ldr	r1, [sp, #4]
 801f5c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 801f5cc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801f5d0:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801f5d4:	47b8      	blx	r7
 801f5d6:	68e3      	ldr	r3, [r4, #12]
 801f5d8:	6862      	ldr	r2, [r4, #4]
 801f5da:	3b01      	subs	r3, #1
 801f5dc:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 801f5e0:	3501      	adds	r5, #1
 801f5e2:	60e3      	str	r3, [r4, #12]
 801f5e4:	6834      	ldr	r4, [r6, #0]
 801f5e6:	68a3      	ldr	r3, [r4, #8]
 801f5e8:	429d      	cmp	r5, r3
 801f5ea:	d207      	bcs.n	801f5fc <rcutils_string_map_fini+0x60>
 801f5ec:	6822      	ldr	r2, [r4, #0]
 801f5ee:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801f5f2:	2800      	cmp	r0, #0
 801f5f4:	d1e3      	bne.n	801f5be <rcutils_string_map_fini+0x22>
 801f5f6:	3501      	adds	r5, #1
 801f5f8:	429d      	cmp	r5, r3
 801f5fa:	d3dd      	bcc.n	801f5b8 <rcutils_string_map_fini+0x1c>
 801f5fc:	2100      	movs	r1, #0
 801f5fe:	4630      	mov	r0, r6
 801f600:	f7ff ff1a 	bl	801f438 <rcutils_string_map_reserve>
 801f604:	4604      	mov	r4, r0
 801f606:	b920      	cbnz	r0, 801f612 <rcutils_string_map_fini+0x76>
 801f608:	6830      	ldr	r0, [r6, #0]
 801f60a:	6943      	ldr	r3, [r0, #20]
 801f60c:	6a01      	ldr	r1, [r0, #32]
 801f60e:	4798      	blx	r3
 801f610:	6034      	str	r4, [r6, #0]
 801f612:	4620      	mov	r0, r4
 801f614:	b002      	add	sp, #8
 801f616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f61a:	240b      	movs	r4, #11
 801f61c:	4620      	mov	r0, r4
 801f61e:	b002      	add	sp, #8
 801f620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f624 <rcutils_string_map_getn>:
 801f624:	b398      	cbz	r0, 801f68e <rcutils_string_map_getn+0x6a>
 801f626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f62a:	f8d0 9000 	ldr.w	r9, [r0]
 801f62e:	b082      	sub	sp, #8
 801f630:	f1b9 0f00 	cmp.w	r9, #0
 801f634:	d020      	beq.n	801f678 <rcutils_string_map_getn+0x54>
 801f636:	fab1 f581 	clz	r5, r1
 801f63a:	460e      	mov	r6, r1
 801f63c:	096d      	lsrs	r5, r5, #5
 801f63e:	b1d9      	cbz	r1, 801f678 <rcutils_string_map_getn+0x54>
 801f640:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801f644:	f8d9 7000 	ldr.w	r7, [r9]
 801f648:	b1b4      	cbz	r4, 801f678 <rcutils_string_map_getn+0x54>
 801f64a:	4690      	mov	r8, r2
 801f64c:	3f04      	subs	r7, #4
 801f64e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 801f652:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 801f656:	3501      	adds	r5, #1
 801f658:	4608      	mov	r0, r1
 801f65a:	9101      	str	r1, [sp, #4]
 801f65c:	b151      	cbz	r1, 801f674 <rcutils_string_map_getn+0x50>
 801f65e:	f7e0 fe31 	bl	80002c4 <strlen>
 801f662:	4602      	mov	r2, r0
 801f664:	9901      	ldr	r1, [sp, #4]
 801f666:	4630      	mov	r0, r6
 801f668:	4542      	cmp	r2, r8
 801f66a:	bf38      	it	cc
 801f66c:	4642      	movcc	r2, r8
 801f66e:	f002 fd79 	bl	8022164 <strncmp>
 801f672:	b128      	cbz	r0, 801f680 <rcutils_string_map_getn+0x5c>
 801f674:	42ac      	cmp	r4, r5
 801f676:	d1ea      	bne.n	801f64e <rcutils_string_map_getn+0x2a>
 801f678:	2000      	movs	r0, #0
 801f67a:	b002      	add	sp, #8
 801f67c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f680:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801f684:	f853 000a 	ldr.w	r0, [r3, sl]
 801f688:	b002      	add	sp, #8
 801f68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f68e:	4770      	bx	lr

0801f690 <rcutils_system_time_now>:
 801f690:	b310      	cbz	r0, 801f6d8 <rcutils_system_time_now+0x48>
 801f692:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f694:	b085      	sub	sp, #20
 801f696:	4604      	mov	r4, r0
 801f698:	2001      	movs	r0, #1
 801f69a:	4669      	mov	r1, sp
 801f69c:	f7e2 ff7c 	bl	8002598 <clock_gettime>
 801f6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f6a4:	2a00      	cmp	r2, #0
 801f6a6:	f173 0100 	sbcs.w	r1, r3, #0
 801f6aa:	db12      	blt.n	801f6d2 <rcutils_system_time_now+0x42>
 801f6ac:	ea52 0103 	orrs.w	r1, r2, r3
 801f6b0:	9d02      	ldr	r5, [sp, #8]
 801f6b2:	d101      	bne.n	801f6b8 <rcutils_system_time_now+0x28>
 801f6b4:	2d00      	cmp	r5, #0
 801f6b6:	db0c      	blt.n	801f6d2 <rcutils_system_time_now+0x42>
 801f6b8:	4908      	ldr	r1, [pc, #32]	; (801f6dc <rcutils_system_time_now+0x4c>)
 801f6ba:	2000      	movs	r0, #0
 801f6bc:	fba2 6701 	umull	r6, r7, r2, r1
 801f6c0:	1976      	adds	r6, r6, r5
 801f6c2:	fb01 7703 	mla	r7, r1, r3, r7
 801f6c6:	eb47 77e5 	adc.w	r7, r7, r5, asr #31
 801f6ca:	e9c4 6700 	strd	r6, r7, [r4]
 801f6ce:	b005      	add	sp, #20
 801f6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6d2:	2002      	movs	r0, #2
 801f6d4:	b005      	add	sp, #20
 801f6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f6d8:	200b      	movs	r0, #11
 801f6da:	4770      	bx	lr
 801f6dc:	3b9aca00 	.word	0x3b9aca00

0801f6e0 <rcutils_steady_time_now>:
 801f6e0:	b310      	cbz	r0, 801f728 <rcutils_steady_time_now+0x48>
 801f6e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f6e4:	b085      	sub	sp, #20
 801f6e6:	4604      	mov	r4, r0
 801f6e8:	2000      	movs	r0, #0
 801f6ea:	4669      	mov	r1, sp
 801f6ec:	f7e2 ff54 	bl	8002598 <clock_gettime>
 801f6f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f6f4:	2a00      	cmp	r2, #0
 801f6f6:	f173 0100 	sbcs.w	r1, r3, #0
 801f6fa:	db12      	blt.n	801f722 <rcutils_steady_time_now+0x42>
 801f6fc:	ea52 0103 	orrs.w	r1, r2, r3
 801f700:	9d02      	ldr	r5, [sp, #8]
 801f702:	d101      	bne.n	801f708 <rcutils_steady_time_now+0x28>
 801f704:	2d00      	cmp	r5, #0
 801f706:	db0c      	blt.n	801f722 <rcutils_steady_time_now+0x42>
 801f708:	4908      	ldr	r1, [pc, #32]	; (801f72c <rcutils_steady_time_now+0x4c>)
 801f70a:	2000      	movs	r0, #0
 801f70c:	fba2 6701 	umull	r6, r7, r2, r1
 801f710:	1976      	adds	r6, r6, r5
 801f712:	fb01 7703 	mla	r7, r1, r3, r7
 801f716:	eb47 77e5 	adc.w	r7, r7, r5, asr #31
 801f71a:	e9c4 6700 	strd	r6, r7, [r4]
 801f71e:	b005      	add	sp, #20
 801f720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f722:	2002      	movs	r0, #2
 801f724:	b005      	add	sp, #20
 801f726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f728:	200b      	movs	r0, #11
 801f72a:	4770      	bx	lr
 801f72c:	3b9aca00 	.word	0x3b9aca00

0801f730 <rmw_allocate>:
 801f730:	b530      	push	{r4, r5, lr}
 801f732:	b087      	sub	sp, #28
 801f734:	4605      	mov	r5, r0
 801f736:	a801      	add	r0, sp, #4
 801f738:	f7f7 fb7e 	bl	8016e38 <rcutils_get_default_allocator>
 801f73c:	9b01      	ldr	r3, [sp, #4]
 801f73e:	4628      	mov	r0, r5
 801f740:	9905      	ldr	r1, [sp, #20]
 801f742:	4798      	blx	r3
 801f744:	4604      	mov	r4, r0
 801f746:	b118      	cbz	r0, 801f750 <rmw_allocate+0x20>
 801f748:	462a      	mov	r2, r5
 801f74a:	2100      	movs	r1, #0
 801f74c:	f002 f9c0 	bl	8021ad0 <memset>
 801f750:	4620      	mov	r0, r4
 801f752:	b007      	add	sp, #28
 801f754:	bd30      	pop	{r4, r5, pc}
 801f756:	bf00      	nop

0801f758 <rmw_free>:
 801f758:	b510      	push	{r4, lr}
 801f75a:	b086      	sub	sp, #24
 801f75c:	4604      	mov	r4, r0
 801f75e:	a801      	add	r0, sp, #4
 801f760:	f7f7 fb6a 	bl	8016e38 <rcutils_get_default_allocator>
 801f764:	4620      	mov	r0, r4
 801f766:	9905      	ldr	r1, [sp, #20]
 801f768:	9b02      	ldr	r3, [sp, #8]
 801f76a:	b006      	add	sp, #24
 801f76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f770:	4718      	bx	r3
 801f772:	bf00      	nop

0801f774 <rmw_node_allocate>:
 801f774:	b500      	push	{lr}
 801f776:	b087      	sub	sp, #28
 801f778:	a801      	add	r0, sp, #4
 801f77a:	f7f7 fb5d 	bl	8016e38 <rcutils_get_default_allocator>
 801f77e:	9b01      	ldr	r3, [sp, #4]
 801f780:	9905      	ldr	r1, [sp, #20]
 801f782:	2014      	movs	r0, #20
 801f784:	4798      	blx	r3
 801f786:	b128      	cbz	r0, 801f794 <rmw_node_allocate+0x20>
 801f788:	2300      	movs	r3, #0
 801f78a:	6003      	str	r3, [r0, #0]
 801f78c:	6043      	str	r3, [r0, #4]
 801f78e:	6083      	str	r3, [r0, #8]
 801f790:	60c3      	str	r3, [r0, #12]
 801f792:	6103      	str	r3, [r0, #16]
 801f794:	b007      	add	sp, #28
 801f796:	f85d fb04 	ldr.w	pc, [sp], #4
 801f79a:	bf00      	nop

0801f79c <rmw_get_zero_initialized_context>:
 801f79c:	b5d0      	push	{r4, r6, r7, lr}
 801f79e:	4604      	mov	r4, r0
 801f7a0:	3010      	adds	r0, #16
 801f7a2:	f000 f80b 	bl	801f7bc <rmw_get_zero_initialized_init_options>
 801f7a6:	2600      	movs	r6, #0
 801f7a8:	2300      	movs	r3, #0
 801f7aa:	2700      	movs	r7, #0
 801f7ac:	4620      	mov	r0, r4
 801f7ae:	60a3      	str	r3, [r4, #8]
 801f7b0:	e9c4 6700 	strd	r6, r7, [r4]
 801f7b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f7b8:	bdd0      	pop	{r4, r6, r7, pc}
 801f7ba:	bf00      	nop

0801f7bc <rmw_get_zero_initialized_init_options>:
 801f7bc:	b510      	push	{r4, lr}
 801f7be:	4604      	mov	r4, r0
 801f7c0:	2238      	movs	r2, #56	; 0x38
 801f7c2:	2100      	movs	r1, #0
 801f7c4:	f002 f984 	bl	8021ad0 <memset>
 801f7c8:	f104 0010 	add.w	r0, r4, #16
 801f7cc:	f000 f806 	bl	801f7dc <rmw_get_default_security_options>
 801f7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f7d4:	4620      	mov	r0, r4
 801f7d6:	60e3      	str	r3, [r4, #12]
 801f7d8:	bd10      	pop	{r4, pc}
 801f7da:	bf00      	nop

0801f7dc <rmw_get_default_security_options>:
 801f7dc:	2200      	movs	r2, #0
 801f7de:	7002      	strb	r2, [r0, #0]
 801f7e0:	6042      	str	r2, [r0, #4]
 801f7e2:	4770      	bx	lr

0801f7e4 <rmw_validate_full_topic_name>:
 801f7e4:	2800      	cmp	r0, #0
 801f7e6:	d064      	beq.n	801f8b2 <rmw_validate_full_topic_name+0xce>
 801f7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f7ec:	460d      	mov	r5, r1
 801f7ee:	2900      	cmp	r1, #0
 801f7f0:	d061      	beq.n	801f8b6 <rmw_validate_full_topic_name+0xd2>
 801f7f2:	4616      	mov	r6, r2
 801f7f4:	4604      	mov	r4, r0
 801f7f6:	f7e0 fd65 	bl	80002c4 <strlen>
 801f7fa:	b148      	cbz	r0, 801f810 <rmw_validate_full_topic_name+0x2c>
 801f7fc:	7823      	ldrb	r3, [r4, #0]
 801f7fe:	2b2f      	cmp	r3, #47	; 0x2f
 801f800:	d00d      	beq.n	801f81e <rmw_validate_full_topic_name+0x3a>
 801f802:	2302      	movs	r3, #2
 801f804:	602b      	str	r3, [r5, #0]
 801f806:	b13e      	cbz	r6, 801f818 <rmw_validate_full_topic_name+0x34>
 801f808:	2000      	movs	r0, #0
 801f80a:	6030      	str	r0, [r6, #0]
 801f80c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f810:	2301      	movs	r3, #1
 801f812:	602b      	str	r3, [r5, #0]
 801f814:	2e00      	cmp	r6, #0
 801f816:	d1f7      	bne.n	801f808 <rmw_validate_full_topic_name+0x24>
 801f818:	2000      	movs	r0, #0
 801f81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f81e:	1e47      	subs	r7, r0, #1
 801f820:	5de3      	ldrb	r3, [r4, r7]
 801f822:	2b2f      	cmp	r3, #47	; 0x2f
 801f824:	d049      	beq.n	801f8ba <rmw_validate_full_topic_name+0xd6>
 801f826:	1e62      	subs	r2, r4, #1
 801f828:	f1c4 0e01 	rsb	lr, r4, #1
 801f82c:	eb02 0900 	add.w	r9, r2, r0
 801f830:	eb0e 0802 	add.w	r8, lr, r2
 801f834:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801f838:	f023 0120 	bic.w	r1, r3, #32
 801f83c:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801f840:	3941      	subs	r1, #65	; 0x41
 801f842:	2919      	cmp	r1, #25
 801f844:	d910      	bls.n	801f868 <rmw_validate_full_topic_name+0x84>
 801f846:	f1bc 0f0a 	cmp.w	ip, #10
 801f84a:	d90d      	bls.n	801f868 <rmw_validate_full_topic_name+0x84>
 801f84c:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801f850:	fab3 f383 	clz	r3, r3
 801f854:	095b      	lsrs	r3, r3, #5
 801f856:	b93b      	cbnz	r3, 801f868 <rmw_validate_full_topic_name+0x84>
 801f858:	2204      	movs	r2, #4
 801f85a:	602a      	str	r2, [r5, #0]
 801f85c:	2e00      	cmp	r6, #0
 801f85e:	d0db      	beq.n	801f818 <rmw_validate_full_topic_name+0x34>
 801f860:	4618      	mov	r0, r3
 801f862:	f8c6 8000 	str.w	r8, [r6]
 801f866:	e7d1      	b.n	801f80c <rmw_validate_full_topic_name+0x28>
 801f868:	454a      	cmp	r2, r9
 801f86a:	d1e1      	bne.n	801f830 <rmw_validate_full_topic_name+0x4c>
 801f86c:	2200      	movs	r2, #0
 801f86e:	f107 0801 	add.w	r8, r7, #1
 801f872:	f8df e07c 	ldr.w	lr, [pc, #124]	; 801f8f0 <rmw_validate_full_topic_name+0x10c>
 801f876:	e004      	b.n	801f882 <rmw_validate_full_topic_name+0x9e>
 801f878:	4288      	cmp	r0, r1
 801f87a:	f104 0401 	add.w	r4, r4, #1
 801f87e:	461a      	mov	r2, r3
 801f880:	d924      	bls.n	801f8cc <rmw_validate_full_topic_name+0xe8>
 801f882:	4297      	cmp	r7, r2
 801f884:	f102 0301 	add.w	r3, r2, #1
 801f888:	d01d      	beq.n	801f8c6 <rmw_validate_full_topic_name+0xe2>
 801f88a:	f894 c000 	ldrb.w	ip, [r4]
 801f88e:	4619      	mov	r1, r3
 801f890:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 801f894:	d1f0      	bne.n	801f878 <rmw_validate_full_topic_name+0x94>
 801f896:	7862      	ldrb	r2, [r4, #1]
 801f898:	2a2f      	cmp	r2, #47	; 0x2f
 801f89a:	d024      	beq.n	801f8e6 <rmw_validate_full_topic_name+0x102>
 801f89c:	f812 200e 	ldrb.w	r2, [r2, lr]
 801f8a0:	0752      	lsls	r2, r2, #29
 801f8a2:	d5e9      	bpl.n	801f878 <rmw_validate_full_topic_name+0x94>
 801f8a4:	2206      	movs	r2, #6
 801f8a6:	602a      	str	r2, [r5, #0]
 801f8a8:	2e00      	cmp	r6, #0
 801f8aa:	d0b5      	beq.n	801f818 <rmw_validate_full_topic_name+0x34>
 801f8ac:	2000      	movs	r0, #0
 801f8ae:	6033      	str	r3, [r6, #0]
 801f8b0:	e7ac      	b.n	801f80c <rmw_validate_full_topic_name+0x28>
 801f8b2:	200b      	movs	r0, #11
 801f8b4:	4770      	bx	lr
 801f8b6:	200b      	movs	r0, #11
 801f8b8:	e7a8      	b.n	801f80c <rmw_validate_full_topic_name+0x28>
 801f8ba:	2303      	movs	r3, #3
 801f8bc:	602b      	str	r3, [r5, #0]
 801f8be:	2e00      	cmp	r6, #0
 801f8c0:	d0aa      	beq.n	801f818 <rmw_validate_full_topic_name+0x34>
 801f8c2:	6037      	str	r7, [r6, #0]
 801f8c4:	e7a8      	b.n	801f818 <rmw_validate_full_topic_name+0x34>
 801f8c6:	4641      	mov	r1, r8
 801f8c8:	1c7b      	adds	r3, r7, #1
 801f8ca:	e7d5      	b.n	801f878 <rmw_validate_full_topic_name+0x94>
 801f8cc:	28f7      	cmp	r0, #247	; 0xf7
 801f8ce:	d802      	bhi.n	801f8d6 <rmw_validate_full_topic_name+0xf2>
 801f8d0:	2000      	movs	r0, #0
 801f8d2:	6028      	str	r0, [r5, #0]
 801f8d4:	e79a      	b.n	801f80c <rmw_validate_full_topic_name+0x28>
 801f8d6:	2307      	movs	r3, #7
 801f8d8:	602b      	str	r3, [r5, #0]
 801f8da:	2e00      	cmp	r6, #0
 801f8dc:	d09c      	beq.n	801f818 <rmw_validate_full_topic_name+0x34>
 801f8de:	23f6      	movs	r3, #246	; 0xf6
 801f8e0:	2000      	movs	r0, #0
 801f8e2:	6033      	str	r3, [r6, #0]
 801f8e4:	e792      	b.n	801f80c <rmw_validate_full_topic_name+0x28>
 801f8e6:	2205      	movs	r2, #5
 801f8e8:	602a      	str	r2, [r5, #0]
 801f8ea:	2e00      	cmp	r6, #0
 801f8ec:	d1de      	bne.n	801f8ac <rmw_validate_full_topic_name+0xc8>
 801f8ee:	e793      	b.n	801f818 <rmw_validate_full_topic_name+0x34>
 801f8f0:	08026cc5 	.word	0x08026cc5

0801f8f4 <rmw_validate_namespace_with_size>:
 801f8f4:	2800      	cmp	r0, #0
 801f8f6:	d041      	beq.n	801f97c <rmw_validate_namespace_with_size+0x88>
 801f8f8:	b5e0      	push	{r5, r6, r7, lr}
 801f8fa:	4615      	mov	r5, r2
 801f8fc:	b0c2      	sub	sp, #264	; 0x108
 801f8fe:	b35a      	cbz	r2, 801f958 <rmw_validate_namespace_with_size+0x64>
 801f900:	2901      	cmp	r1, #1
 801f902:	460e      	mov	r6, r1
 801f904:	461f      	mov	r7, r3
 801f906:	d102      	bne.n	801f90e <rmw_validate_namespace_with_size+0x1a>
 801f908:	7802      	ldrb	r2, [r0, #0]
 801f90a:	2a2f      	cmp	r2, #47	; 0x2f
 801f90c:	d019      	beq.n	801f942 <rmw_validate_namespace_with_size+0x4e>
 801f90e:	aa01      	add	r2, sp, #4
 801f910:	4669      	mov	r1, sp
 801f912:	f7ff ff67 	bl	801f7e4 <rmw_validate_full_topic_name>
 801f916:	b980      	cbnz	r0, 801f93a <rmw_validate_namespace_with_size+0x46>
 801f918:	9b00      	ldr	r3, [sp, #0]
 801f91a:	b183      	cbz	r3, 801f93e <rmw_validate_namespace_with_size+0x4a>
 801f91c:	2b07      	cmp	r3, #7
 801f91e:	d00e      	beq.n	801f93e <rmw_validate_namespace_with_size+0x4a>
 801f920:	1e59      	subs	r1, r3, #1
 801f922:	2905      	cmp	r1, #5
 801f924:	d82c      	bhi.n	801f980 <rmw_validate_namespace_with_size+0x8c>
 801f926:	e8df f001 	tbb	[pc, r1]
 801f92a:	201d      	.short	0x201d
 801f92c:	1a032623 	.word	0x1a032623
 801f930:	2305      	movs	r3, #5
 801f932:	602b      	str	r3, [r5, #0]
 801f934:	b10f      	cbz	r7, 801f93a <rmw_validate_namespace_with_size+0x46>
 801f936:	9b01      	ldr	r3, [sp, #4]
 801f938:	603b      	str	r3, [r7, #0]
 801f93a:	b042      	add	sp, #264	; 0x108
 801f93c:	bde0      	pop	{r5, r6, r7, pc}
 801f93e:	2ef5      	cmp	r6, #245	; 0xf5
 801f940:	d803      	bhi.n	801f94a <rmw_validate_namespace_with_size+0x56>
 801f942:	2000      	movs	r0, #0
 801f944:	6028      	str	r0, [r5, #0]
 801f946:	b042      	add	sp, #264	; 0x108
 801f948:	bde0      	pop	{r5, r6, r7, pc}
 801f94a:	2307      	movs	r3, #7
 801f94c:	602b      	str	r3, [r5, #0]
 801f94e:	2f00      	cmp	r7, #0
 801f950:	d0f3      	beq.n	801f93a <rmw_validate_namespace_with_size+0x46>
 801f952:	23f4      	movs	r3, #244	; 0xf4
 801f954:	603b      	str	r3, [r7, #0]
 801f956:	e7f0      	b.n	801f93a <rmw_validate_namespace_with_size+0x46>
 801f958:	200b      	movs	r0, #11
 801f95a:	b042      	add	sp, #264	; 0x108
 801f95c:	bde0      	pop	{r5, r6, r7, pc}
 801f95e:	2306      	movs	r3, #6
 801f960:	602b      	str	r3, [r5, #0]
 801f962:	e7e7      	b.n	801f934 <rmw_validate_namespace_with_size+0x40>
 801f964:	2301      	movs	r3, #1
 801f966:	602b      	str	r3, [r5, #0]
 801f968:	e7e4      	b.n	801f934 <rmw_validate_namespace_with_size+0x40>
 801f96a:	2302      	movs	r3, #2
 801f96c:	602b      	str	r3, [r5, #0]
 801f96e:	e7e1      	b.n	801f934 <rmw_validate_namespace_with_size+0x40>
 801f970:	2303      	movs	r3, #3
 801f972:	602b      	str	r3, [r5, #0]
 801f974:	e7de      	b.n	801f934 <rmw_validate_namespace_with_size+0x40>
 801f976:	2304      	movs	r3, #4
 801f978:	602b      	str	r3, [r5, #0]
 801f97a:	e7db      	b.n	801f934 <rmw_validate_namespace_with_size+0x40>
 801f97c:	200b      	movs	r0, #11
 801f97e:	4770      	bx	lr
 801f980:	4a03      	ldr	r2, [pc, #12]	; (801f990 <rmw_validate_namespace_with_size+0x9c>)
 801f982:	f44f 7180 	mov.w	r1, #256	; 0x100
 801f986:	a802      	add	r0, sp, #8
 801f988:	f7ff fcbe 	bl	801f308 <rcutils_snprintf>
 801f98c:	2001      	movs	r0, #1
 801f98e:	e7d4      	b.n	801f93a <rmw_validate_namespace_with_size+0x46>
 801f990:	080267f4 	.word	0x080267f4

0801f994 <rmw_validate_namespace>:
 801f994:	b168      	cbz	r0, 801f9b2 <rmw_validate_namespace+0x1e>
 801f996:	b570      	push	{r4, r5, r6, lr}
 801f998:	460d      	mov	r5, r1
 801f99a:	4616      	mov	r6, r2
 801f99c:	4604      	mov	r4, r0
 801f99e:	f7e0 fc91 	bl	80002c4 <strlen>
 801f9a2:	4633      	mov	r3, r6
 801f9a4:	4601      	mov	r1, r0
 801f9a6:	462a      	mov	r2, r5
 801f9a8:	4620      	mov	r0, r4
 801f9aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f9ae:	f7ff bfa1 	b.w	801f8f4 <rmw_validate_namespace_with_size>
 801f9b2:	200b      	movs	r0, #11
 801f9b4:	4770      	bx	lr
 801f9b6:	bf00      	nop

0801f9b8 <rmw_namespace_validation_result_string>:
 801f9b8:	2807      	cmp	r0, #7
 801f9ba:	d803      	bhi.n	801f9c4 <rmw_namespace_validation_result_string+0xc>
 801f9bc:	4b02      	ldr	r3, [pc, #8]	; (801f9c8 <rmw_namespace_validation_result_string+0x10>)
 801f9be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801f9c2:	4770      	bx	lr
 801f9c4:	4801      	ldr	r0, [pc, #4]	; (801f9cc <rmw_namespace_validation_result_string+0x14>)
 801f9c6:	4770      	bx	lr
 801f9c8:	080269ec 	.word	0x080269ec
 801f9cc:	08026844 	.word	0x08026844

0801f9d0 <rmw_validate_node_name>:
 801f9d0:	2800      	cmp	r0, #0
 801f9d2:	d039      	beq.n	801fa48 <rmw_validate_node_name+0x78>
 801f9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9d8:	460f      	mov	r7, r1
 801f9da:	b3b9      	cbz	r1, 801fa4c <rmw_validate_node_name+0x7c>
 801f9dc:	4615      	mov	r5, r2
 801f9de:	4604      	mov	r4, r0
 801f9e0:	f7e0 fc70 	bl	80002c4 <strlen>
 801f9e4:	b308      	cbz	r0, 801fa2a <rmw_validate_node_name+0x5a>
 801f9e6:	1e63      	subs	r3, r4, #1
 801f9e8:	f1c4 0e01 	rsb	lr, r4, #1
 801f9ec:	eb03 0c00 	add.w	ip, r3, r0
 801f9f0:	eb0e 0803 	add.w	r8, lr, r3
 801f9f4:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801f9f8:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 801f9fc:	f026 0220 	bic.w	r2, r6, #32
 801fa00:	2909      	cmp	r1, #9
 801fa02:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 801fa06:	d903      	bls.n	801fa10 <rmw_validate_node_name+0x40>
 801fa08:	2a19      	cmp	r2, #25
 801fa0a:	d901      	bls.n	801fa10 <rmw_validate_node_name+0x40>
 801fa0c:	2e5f      	cmp	r6, #95	; 0x5f
 801fa0e:	d113      	bne.n	801fa38 <rmw_validate_node_name+0x68>
 801fa10:	459c      	cmp	ip, r3
 801fa12:	d1ed      	bne.n	801f9f0 <rmw_validate_node_name+0x20>
 801fa14:	7822      	ldrb	r2, [r4, #0]
 801fa16:	4b15      	ldr	r3, [pc, #84]	; (801fa6c <rmw_validate_node_name+0x9c>)
 801fa18:	5cd3      	ldrb	r3, [r2, r3]
 801fa1a:	f013 0304 	ands.w	r3, r3, #4
 801fa1e:	d11f      	bne.n	801fa60 <rmw_validate_node_name+0x90>
 801fa20:	28ff      	cmp	r0, #255	; 0xff
 801fa22:	d815      	bhi.n	801fa50 <rmw_validate_node_name+0x80>
 801fa24:	4618      	mov	r0, r3
 801fa26:	603b      	str	r3, [r7, #0]
 801fa28:	e00c      	b.n	801fa44 <rmw_validate_node_name+0x74>
 801fa2a:	2301      	movs	r3, #1
 801fa2c:	603b      	str	r3, [r7, #0]
 801fa2e:	b145      	cbz	r5, 801fa42 <rmw_validate_node_name+0x72>
 801fa30:	2000      	movs	r0, #0
 801fa32:	6028      	str	r0, [r5, #0]
 801fa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa38:	2302      	movs	r3, #2
 801fa3a:	603b      	str	r3, [r7, #0]
 801fa3c:	b10d      	cbz	r5, 801fa42 <rmw_validate_node_name+0x72>
 801fa3e:	f8c5 8000 	str.w	r8, [r5]
 801fa42:	2000      	movs	r0, #0
 801fa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa48:	200b      	movs	r0, #11
 801fa4a:	4770      	bx	lr
 801fa4c:	200b      	movs	r0, #11
 801fa4e:	e7f9      	b.n	801fa44 <rmw_validate_node_name+0x74>
 801fa50:	2204      	movs	r2, #4
 801fa52:	603a      	str	r2, [r7, #0]
 801fa54:	2d00      	cmp	r5, #0
 801fa56:	d0f4      	beq.n	801fa42 <rmw_validate_node_name+0x72>
 801fa58:	22fe      	movs	r2, #254	; 0xfe
 801fa5a:	4618      	mov	r0, r3
 801fa5c:	602a      	str	r2, [r5, #0]
 801fa5e:	e7f1      	b.n	801fa44 <rmw_validate_node_name+0x74>
 801fa60:	2303      	movs	r3, #3
 801fa62:	603b      	str	r3, [r7, #0]
 801fa64:	2d00      	cmp	r5, #0
 801fa66:	d1e3      	bne.n	801fa30 <rmw_validate_node_name+0x60>
 801fa68:	e7eb      	b.n	801fa42 <rmw_validate_node_name+0x72>
 801fa6a:	bf00      	nop
 801fa6c:	08026cc5 	.word	0x08026cc5

0801fa70 <rmw_node_name_validation_result_string>:
 801fa70:	2804      	cmp	r0, #4
 801fa72:	d803      	bhi.n	801fa7c <rmw_node_name_validation_result_string+0xc>
 801fa74:	4b02      	ldr	r3, [pc, #8]	; (801fa80 <rmw_node_name_validation_result_string+0x10>)
 801fa76:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801fa7a:	4770      	bx	lr
 801fa7c:	4801      	ldr	r0, [pc, #4]	; (801fa84 <rmw_node_name_validation_result_string+0x14>)
 801fa7e:	4770      	bx	lr
 801fa80:	08026af8 	.word	0x08026af8
 801fa84:	08026a0c 	.word	0x08026a0c

0801fa88 <get_memory>:
 801fa88:	b538      	push	{r3, r4, r5, lr}
 801fa8a:	4604      	mov	r4, r0
 801fa8c:	f7f6 ff8f 	bl	80169ae <sys_mutex_lock>
 801fa90:	68a5      	ldr	r5, [r4, #8]
 801fa92:	b15d      	cbz	r5, 801faac <get_memory+0x24>
 801fa94:	686b      	ldr	r3, [r5, #4]
 801fa96:	60a3      	str	r3, [r4, #8]
 801fa98:	b10b      	cbz	r3, 801fa9e <get_memory+0x16>
 801fa9a:	2200      	movs	r2, #0
 801fa9c:	601a      	str	r2, [r3, #0]
 801fa9e:	6863      	ldr	r3, [r4, #4]
 801faa0:	606b      	str	r3, [r5, #4]
 801faa2:	b103      	cbz	r3, 801faa6 <get_memory+0x1e>
 801faa4:	601d      	str	r5, [r3, #0]
 801faa6:	2300      	movs	r3, #0
 801faa8:	602b      	str	r3, [r5, #0]
 801faaa:	6065      	str	r5, [r4, #4]
 801faac:	4620      	mov	r0, r4
 801faae:	f7f6 ff8d 	bl	80169cc <sys_mutex_unlock>
 801fab2:	4628      	mov	r0, r5
 801fab4:	bd38      	pop	{r3, r4, r5, pc}
 801fab6:	bf00      	nop

0801fab8 <put_memory>:
 801fab8:	b538      	push	{r3, r4, r5, lr}
 801faba:	460c      	mov	r4, r1
 801fabc:	4605      	mov	r5, r0
 801fabe:	f7f6 ff76 	bl	80169ae <sys_mutex_lock>
 801fac2:	6823      	ldr	r3, [r4, #0]
 801fac4:	b10b      	cbz	r3, 801faca <put_memory+0x12>
 801fac6:	6862      	ldr	r2, [r4, #4]
 801fac8:	605a      	str	r2, [r3, #4]
 801faca:	6862      	ldr	r2, [r4, #4]
 801facc:	b102      	cbz	r2, 801fad0 <put_memory+0x18>
 801face:	6013      	str	r3, [r2, #0]
 801fad0:	686b      	ldr	r3, [r5, #4]
 801fad2:	42a3      	cmp	r3, r4
 801fad4:	68ab      	ldr	r3, [r5, #8]
 801fad6:	bf08      	it	eq
 801fad8:	606a      	streq	r2, [r5, #4]
 801fada:	6063      	str	r3, [r4, #4]
 801fadc:	b103      	cbz	r3, 801fae0 <put_memory+0x28>
 801fade:	601c      	str	r4, [r3, #0]
 801fae0:	2300      	movs	r3, #0
 801fae2:	4628      	mov	r0, r5
 801fae4:	6023      	str	r3, [r4, #0]
 801fae6:	60ac      	str	r4, [r5, #8]
 801fae8:	f7f6 ff70 	bl	80169cc <sys_mutex_unlock>
 801faec:	bd38      	pop	{r3, r4, r5, pc}
 801faee:	bf00      	nop

0801faf0 <rmw_get_implementation_identifier>:
 801faf0:	4b01      	ldr	r3, [pc, #4]	; (801faf8 <rmw_get_implementation_identifier+0x8>)
 801faf2:	6818      	ldr	r0, [r3, #0]
 801faf4:	4770      	bx	lr
 801faf6:	bf00      	nop
 801faf8:	08026b80 	.word	0x08026b80

0801fafc <_Z10matchedPubPv>:
 801fafc:	4770      	bx	lr
 801fafe:	bf00      	nop

0801fb00 <_Z10matchedSubPv>:
 801fb00:	4770      	bx	lr
 801fb02:	bf00      	nop

0801fb04 <rmw_init_options_init>:
 801fb04:	b084      	sub	sp, #16
 801fb06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb0a:	ac09      	add	r4, sp, #36	; 0x24
 801fb0c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801fb10:	b300      	cbz	r0, 801fb54 <rmw_init_options_init+0x50>
 801fb12:	4605      	mov	r5, r0
 801fb14:	4620      	mov	r0, r4
 801fb16:	f7f7 f99d 	bl	8016e54 <rcutils_allocator_is_valid>
 801fb1a:	b1d8      	cbz	r0, 801fb54 <rmw_init_options_init+0x50>
 801fb1c:	68af      	ldr	r7, [r5, #8]
 801fb1e:	b9cf      	cbnz	r7, 801fb54 <rmw_init_options_init+0x50>
 801fb20:	4b10      	ldr	r3, [pc, #64]	; (801fb64 <rmw_init_options_init+0x60>)
 801fb22:	f04f 0800 	mov.w	r8, #0
 801fb26:	f04f 0900 	mov.w	r9, #0
 801fb2a:	f105 0620 	add.w	r6, r5, #32
 801fb2e:	681b      	ldr	r3, [r3, #0]
 801fb30:	46bc      	mov	ip, r7
 801fb32:	f8df e034 	ldr.w	lr, [pc, #52]	; 801fb68 <rmw_init_options_init+0x64>
 801fb36:	60ab      	str	r3, [r5, #8]
 801fb38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801fb3a:	6824      	ldr	r4, [r4, #0]
 801fb3c:	e9c5 8900 	strd	r8, r9, [r5]
 801fb40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801fb42:	6034      	str	r4, [r6, #0]
 801fb44:	4660      	mov	r0, ip
 801fb46:	60ef      	str	r7, [r5, #12]
 801fb48:	f8c5 e01c 	str.w	lr, [r5, #28]
 801fb4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb50:	b004      	add	sp, #16
 801fb52:	4770      	bx	lr
 801fb54:	f04f 0c0b 	mov.w	ip, #11
 801fb58:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb5c:	4660      	mov	r0, ip
 801fb5e:	b004      	add	sp, #16
 801fb60:	4770      	bx	lr
 801fb62:	bf00      	nop
 801fb64:	08026b80 	.word	0x08026b80
 801fb68:	080266c4 	.word	0x080266c4

0801fb6c <rmw_init_options_copy>:
 801fb6c:	b110      	cbz	r0, 801fb74 <rmw_init_options_copy+0x8>
 801fb6e:	b109      	cbz	r1, 801fb74 <rmw_init_options_copy+0x8>
 801fb70:	688b      	ldr	r3, [r1, #8]
 801fb72:	b10b      	cbz	r3, 801fb78 <rmw_init_options_copy+0xc>
 801fb74:	200b      	movs	r0, #11
 801fb76:	4770      	bx	lr
 801fb78:	b470      	push	{r4, r5, r6}
 801fb7a:	4603      	mov	r3, r0
 801fb7c:	f100 0630 	add.w	r6, r0, #48	; 0x30
 801fb80:	681d      	ldr	r5, [r3, #0]
 801fb82:	3310      	adds	r3, #16
 801fb84:	f853 4c0c 	ldr.w	r4, [r3, #-12]
 801fb88:	3110      	adds	r1, #16
 801fb8a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 801fb8e:	f853 2c04 	ldr.w	r2, [r3, #-4]
 801fb92:	42b3      	cmp	r3, r6
 801fb94:	f841 5c10 	str.w	r5, [r1, #-16]
 801fb98:	f841 4c0c 	str.w	r4, [r1, #-12]
 801fb9c:	f841 0c08 	str.w	r0, [r1, #-8]
 801fba0:	f841 2c04 	str.w	r2, [r1, #-4]
 801fba4:	d1ec      	bne.n	801fb80 <rmw_init_options_copy+0x14>
 801fba6:	681a      	ldr	r2, [r3, #0]
 801fba8:	2000      	movs	r0, #0
 801fbaa:	685b      	ldr	r3, [r3, #4]
 801fbac:	600a      	str	r2, [r1, #0]
 801fbae:	604b      	str	r3, [r1, #4]
 801fbb0:	bc70      	pop	{r4, r5, r6}
 801fbb2:	4770      	bx	lr

0801fbb4 <rmw_init_options_fini>:
 801fbb4:	b570      	push	{r4, r5, r6, lr}
 801fbb6:	b08e      	sub	sp, #56	; 0x38
 801fbb8:	b1b0      	cbz	r0, 801fbe8 <rmw_init_options_fini+0x34>
 801fbba:	4604      	mov	r4, r0
 801fbbc:	3020      	adds	r0, #32
 801fbbe:	f7f7 f949 	bl	8016e54 <rcutils_allocator_is_valid>
 801fbc2:	b188      	cbz	r0, 801fbe8 <rmw_init_options_fini+0x34>
 801fbc4:	466d      	mov	r5, sp
 801fbc6:	4668      	mov	r0, sp
 801fbc8:	f7ff fdf8 	bl	801f7bc <rmw_get_zero_initialized_init_options>
 801fbcc:	2600      	movs	r6, #0
 801fbce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fbd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fbd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fbd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fbd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801fbd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801fbda:	e895 0003 	ldmia.w	r5, {r0, r1}
 801fbde:	e884 0003 	stmia.w	r4, {r0, r1}
 801fbe2:	4630      	mov	r0, r6
 801fbe4:	b00e      	add	sp, #56	; 0x38
 801fbe6:	bd70      	pop	{r4, r5, r6, pc}
 801fbe8:	260b      	movs	r6, #11
 801fbea:	4630      	mov	r0, r6
 801fbec:	b00e      	add	sp, #56	; 0x38
 801fbee:	bd70      	pop	{r4, r5, r6, pc}

0801fbf0 <rmw_init>:
 801fbf0:	2900      	cmp	r1, #0
 801fbf2:	d066      	beq.n	801fcc2 <rmw_init+0xd2>
 801fbf4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801fbf8:	fab0 f680 	clz	r6, r0
 801fbfc:	4605      	mov	r5, r0
 801fbfe:	0976      	lsrs	r6, r6, #5
 801fc00:	2800      	cmp	r0, #0
 801fc02:	d05b      	beq.n	801fcbc <rmw_init+0xcc>
 801fc04:	460c      	mov	r4, r1
 801fc06:	4933      	ldr	r1, [pc, #204]	; (801fcd4 <rmw_init+0xe4>)
 801fc08:	68c3      	ldr	r3, [r0, #12]
 801fc0a:	2201      	movs	r2, #1
 801fc0c:	6809      	ldr	r1, [r1, #0]
 801fc0e:	e9d0 8900 	ldrd	r8, r9, [r0]
 801fc12:	64a3      	str	r3, [r4, #72]	; 0x48
 801fc14:	4830      	ldr	r0, [pc, #192]	; (801fcd8 <rmw_init+0xe8>)
 801fc16:	60a1      	str	r1, [r4, #8]
 801fc18:	4930      	ldr	r1, [pc, #192]	; (801fcdc <rmw_init+0xec>)
 801fc1a:	e9c4 8900 	strd	r8, r9, [r4]
 801fc1e:	f7f7 fac9 	bl	80171b4 <rmw_ertps_init_session_memory>
 801fc22:	220a      	movs	r2, #10
 801fc24:	492e      	ldr	r1, [pc, #184]	; (801fce0 <rmw_init+0xf0>)
 801fc26:	482f      	ldr	r0, [pc, #188]	; (801fce4 <rmw_init+0xf4>)
 801fc28:	f7f7 fae4 	bl	80171f4 <rmw_ertps_init_static_input_buffer_memory>
 801fc2c:	482a      	ldr	r0, [pc, #168]	; (801fcd8 <rmw_init+0xe8>)
 801fc2e:	f7ff ff2b 	bl	801fa88 <get_memory>
 801fc32:	4603      	mov	r3, r0
 801fc34:	2800      	cmp	r0, #0
 801fc36:	d03e      	beq.n	801fcb6 <rmw_init+0xc6>
 801fc38:	4631      	mov	r1, r6
 801fc3a:	482b      	ldr	r0, [pc, #172]	; (801fce8 <rmw_init+0xf8>)
 801fc3c:	689e      	ldr	r6, [r3, #8]
 801fc3e:	f7f6 fe05 	bl	801684c <sys_sem_new>
 801fc42:	f649 60a0 	movw	r0, #40608	; 0x9ea0
 801fc46:	f001 fbb1 	bl	80213ac <_Znwj>
 801fc4a:	7b29      	ldrb	r1, [r5, #12]
 801fc4c:	4605      	mov	r5, r0
 801fc4e:	f7f7 ff57 	bl	8017b00 <_ZN4rtps6DomainC1Eh>
 801fc52:	4628      	mov	r0, r5
 801fc54:	6135      	str	r5, [r6, #16]
 801fc56:	f7f9 faf3 	bl	8019240 <_ZN4rtps6Domain17createParticipantEv>
 801fc5a:	4603      	mov	r3, r0
 801fc5c:	6930      	ldr	r0, [r6, #16]
 801fc5e:	6173      	str	r3, [r6, #20]
 801fc60:	64e6      	str	r6, [r4, #76]	; 0x4c
 801fc62:	f7f8 fc1d 	bl	80184a0 <_ZN4rtps6Domain12completeInitEv>
 801fc66:	b330      	cbz	r0, 801fcb6 <rmw_init+0xc6>
 801fc68:	2201      	movs	r2, #1
 801fc6a:	4920      	ldr	r1, [pc, #128]	; (801fcec <rmw_init+0xfc>)
 801fc6c:	4820      	ldr	r0, [pc, #128]	; (801fcf0 <rmw_init+0x100>)
 801fc6e:	f7f7 fa81 	bl	8017174 <rmw_ertps_init_node_memory>
 801fc72:	2202      	movs	r2, #2
 801fc74:	491f      	ldr	r1, [pc, #124]	; (801fcf4 <rmw_init+0x104>)
 801fc76:	4820      	ldr	r0, [pc, #128]	; (801fcf8 <rmw_init+0x108>)
 801fc78:	f7f7 fa5c 	bl	8017134 <rmw_ertps_init_subscription_memory>
 801fc7c:	2202      	movs	r2, #2
 801fc7e:	491f      	ldr	r1, [pc, #124]	; (801fcfc <rmw_init+0x10c>)
 801fc80:	481f      	ldr	r0, [pc, #124]	; (801fd00 <rmw_init+0x110>)
 801fc82:	f7f7 fa37 	bl	80170f4 <rmw_ertps_init_publisher_memory>
 801fc86:	2201      	movs	r2, #1
 801fc88:	491e      	ldr	r1, [pc, #120]	; (801fd04 <rmw_init+0x114>)
 801fc8a:	481f      	ldr	r0, [pc, #124]	; (801fd08 <rmw_init+0x118>)
 801fc8c:	f7f7 f9f2 	bl	8017074 <rmw_ertps_init_service_memory>
 801fc90:	481e      	ldr	r0, [pc, #120]	; (801fd0c <rmw_init+0x11c>)
 801fc92:	2201      	movs	r2, #1
 801fc94:	491e      	ldr	r1, [pc, #120]	; (801fd10 <rmw_init+0x120>)
 801fc96:	f7f7 fa0d 	bl	80170b4 <rmw_ertps_init_client_memory>
 801fc9a:	6970      	ldr	r0, [r6, #20]
 801fc9c:	b158      	cbz	r0, 801fcb6 <rmw_init+0xc6>
 801fc9e:	2200      	movs	r2, #0
 801fca0:	491c      	ldr	r1, [pc, #112]	; (801fd14 <rmw_init+0x124>)
 801fca2:	f7fb f98f 	bl	801afc4 <_ZN4rtps11Participant37registerOnNewPublisherMatchedCallbackEPFvPvES1_>
 801fca6:	6970      	ldr	r0, [r6, #20]
 801fca8:	2200      	movs	r2, #0
 801fcaa:	491b      	ldr	r1, [pc, #108]	; (801fd18 <rmw_init+0x128>)
 801fcac:	f7fb f996 	bl	801afdc <_ZN4rtps11Participant38registerOnNewSubscriberMatchedCallbackEPFvPvES1_>
 801fcb0:	2000      	movs	r0, #0
 801fcb2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801fcb6:	2001      	movs	r0, #1
 801fcb8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801fcbc:	200b      	movs	r0, #11
 801fcbe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801fcc2:	200b      	movs	r0, #11
 801fcc4:	4770      	bx	lr
 801fcc6:	4628      	mov	r0, r5
 801fcc8:	f649 61a0 	movw	r1, #40608	; 0x9ea0
 801fccc:	f000 ffdc 	bl	8020c88 <_ZdlPvj>
 801fcd0:	f000 ffdc 	bl	8020c8c <__cxa_end_cleanup>
 801fcd4:	08026b80 	.word	0x08026b80
 801fcd8:	20043fdc 	.word	0x20043fdc
 801fcdc:	200414a8 	.word	0x200414a8
 801fce0:	200414cc 	.word	0x200414cc
 801fce4:	20043ff0 	.word	0x20043ff0
 801fce8:	20044044 	.word	0x20044044
 801fcec:	20041338 	.word	0x20041338
 801fcf0:	20043fa0 	.word	0x20043fa0
 801fcf4:	20043eb0 	.word	0x20043eb0
 801fcf8:	20044004 	.word	0x20044004
 801fcfc:	20041350 	.word	0x20041350
 801fd00:	20043fb4 	.word	0x20043fb4
 801fd04:	20041430 	.word	0x20041430
 801fd08:	20043fc8 	.word	0x20043fc8
 801fd0c:	200412ac 	.word	0x200412ac
 801fd10:	200412c0 	.word	0x200412c0
 801fd14:	0801fafd 	.word	0x0801fafd
 801fd18:	0801fb01 	.word	0x0801fb01

0801fd1c <rmw_context_fini>:
 801fd1c:	2003      	movs	r0, #3
 801fd1e:	4770      	bx	lr

0801fd20 <rmw_create_node>:
 801fd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd22:	2900      	cmp	r1, #0
 801fd24:	d042      	beq.n	801fdac <rmw_create_node+0x8c>
 801fd26:	780b      	ldrb	r3, [r1, #0]
 801fd28:	460c      	mov	r4, r1
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d03e      	beq.n	801fdac <rmw_create_node+0x8c>
 801fd2e:	4616      	mov	r6, r2
 801fd30:	2a00      	cmp	r2, #0
 801fd32:	d03b      	beq.n	801fdac <rmw_create_node+0x8c>
 801fd34:	7813      	ldrb	r3, [r2, #0]
 801fd36:	2b00      	cmp	r3, #0
 801fd38:	d038      	beq.n	801fdac <rmw_create_node+0x8c>
 801fd3a:	4605      	mov	r5, r0
 801fd3c:	b3b0      	cbz	r0, 801fdac <rmw_create_node+0x8c>
 801fd3e:	481d      	ldr	r0, [pc, #116]	; (801fdb4 <rmw_create_node+0x94>)
 801fd40:	f7ff fea2 	bl	801fa88 <get_memory>
 801fd44:	b390      	cbz	r0, 801fdac <rmw_create_node+0x8c>
 801fd46:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fd48:	6887      	ldr	r7, [r0, #8]
 801fd4a:	617b      	str	r3, [r7, #20]
 801fd4c:	f7ff fd12 	bl	801f774 <rmw_node_allocate>
 801fd50:	4605      	mov	r5, r0
 801fd52:	b358      	cbz	r0, 801fdac <rmw_create_node+0x8c>
 801fd54:	6138      	str	r0, [r7, #16]
 801fd56:	f7ff fecb 	bl	801faf0 <rmw_get_implementation_identifier>
 801fd5a:	4603      	mov	r3, r0
 801fd5c:	606f      	str	r7, [r5, #4]
 801fd5e:	4620      	mov	r0, r4
 801fd60:	602b      	str	r3, [r5, #0]
 801fd62:	f7e0 faaf 	bl	80002c4 <strlen>
 801fd66:	3001      	adds	r0, #1
 801fd68:	f7ff fce2 	bl	801f730 <rmw_allocate>
 801fd6c:	4607      	mov	r7, r0
 801fd6e:	60a8      	str	r0, [r5, #8]
 801fd70:	b1e0      	cbz	r0, 801fdac <rmw_create_node+0x8c>
 801fd72:	4620      	mov	r0, r4
 801fd74:	f7e0 faa6 	bl	80002c4 <strlen>
 801fd78:	4602      	mov	r2, r0
 801fd7a:	4621      	mov	r1, r4
 801fd7c:	4638      	mov	r0, r7
 801fd7e:	3201      	adds	r2, #1
 801fd80:	f001 fe7e 	bl	8021a80 <memcpy>
 801fd84:	4630      	mov	r0, r6
 801fd86:	f7e0 fa9d 	bl	80002c4 <strlen>
 801fd8a:	3001      	adds	r0, #1
 801fd8c:	f7ff fcd0 	bl	801f730 <rmw_allocate>
 801fd90:	4604      	mov	r4, r0
 801fd92:	60e8      	str	r0, [r5, #12]
 801fd94:	b150      	cbz	r0, 801fdac <rmw_create_node+0x8c>
 801fd96:	4630      	mov	r0, r6
 801fd98:	f7e0 fa94 	bl	80002c4 <strlen>
 801fd9c:	4602      	mov	r2, r0
 801fd9e:	4631      	mov	r1, r6
 801fda0:	4620      	mov	r0, r4
 801fda2:	3201      	adds	r2, #1
 801fda4:	f001 fe6c 	bl	8021a80 <memcpy>
 801fda8:	4628      	mov	r0, r5
 801fdaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fdac:	2500      	movs	r5, #0
 801fdae:	4628      	mov	r0, r5
 801fdb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fdb2:	bf00      	nop
 801fdb4:	20043fa0 	.word	0x20043fa0

0801fdb8 <rmw_destroy_node>:
 801fdb8:	2003      	movs	r0, #3
 801fdba:	4770      	bx	lr

0801fdbc <rmw_node_get_graph_guard_condition>:
 801fdbc:	6843      	ldr	r3, [r0, #4]
 801fdbe:	6958      	ldr	r0, [r3, #20]
 801fdc0:	3018      	adds	r0, #24
 801fdc2:	4770      	bx	lr

0801fdc4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 801fdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fdc8:	6805      	ldr	r5, [r0, #0]
 801fdca:	4604      	mov	r4, r0
 801fdcc:	460f      	mov	r7, r1
 801fdce:	4628      	mov	r0, r5
 801fdd0:	f7e0 fa6e 	bl	80002b0 <strcmp>
 801fdd4:	b1c8      	cbz	r0, 801fe0a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801fdd6:	4b11      	ldr	r3, [pc, #68]	; (801fe1c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801fdd8:	681b      	ldr	r3, [r3, #0]
 801fdda:	429d      	cmp	r5, r3
 801fddc:	d112      	bne.n	801fe04 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801fdde:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801fde2:	f8d8 4000 	ldr.w	r4, [r8]
 801fde6:	b16c      	cbz	r4, 801fe04 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801fde8:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801fdec:	2500      	movs	r5, #0
 801fdee:	3e04      	subs	r6, #4
 801fdf0:	4639      	mov	r1, r7
 801fdf2:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801fdf6:	f7e0 fa5b 	bl	80002b0 <strcmp>
 801fdfa:	00ab      	lsls	r3, r5, #2
 801fdfc:	3501      	adds	r5, #1
 801fdfe:	b138      	cbz	r0, 801fe10 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801fe00:	42a5      	cmp	r5, r4
 801fe02:	d1f5      	bne.n	801fdf0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801fe04:	2000      	movs	r0, #0
 801fe06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe0a:	4620      	mov	r0, r4
 801fe0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe10:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801fe14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fe18:	58d3      	ldr	r3, [r2, r3]
 801fe1a:	4718      	bx	r3
 801fe1c:	200000b8 	.word	0x200000b8

0801fe20 <std_msgs__msg__Int32__init>:
 801fe20:	3800      	subs	r0, #0
 801fe22:	bf18      	it	ne
 801fe24:	2001      	movne	r0, #1
 801fe26:	4770      	bx	lr

0801fe28 <std_msgs__msg__Int32__fini>:
 801fe28:	4770      	bx	lr
 801fe2a:	bf00      	nop

0801fe2c <_ZN4rtps15MessageReceiverC1EPNS_11ParticipantE>:
 801fe2c:	b410      	push	{r4}
 801fe2e:	4c06      	ldr	r4, [pc, #24]	; (801fe48 <_ZN4rtps15MessageReceiverC1EPNS_11ParticipantE+0x1c>)
 801fe30:	2200      	movs	r2, #0
 801fe32:	6141      	str	r1, [r0, #20]
 801fe34:	8824      	ldrh	r4, [r4, #0]
 801fe36:	6082      	str	r2, [r0, #8]
 801fe38:	8184      	strh	r4, [r0, #12]
 801fe3a:	81c2      	strh	r2, [r0, #14]
 801fe3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801fe40:	7402      	strb	r2, [r0, #16]
 801fe42:	e9c0 2200 	strd	r2, r2, [r0]
 801fe46:	4770      	bx	lr
 801fe48:	08026b24 	.word	0x08026b24

0801fe4c <_ZN4rtps15MessageReceiver13processHeaderERNS_21MessageProcessingInfoE>:
 801fe4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fe4e:	460e      	mov	r6, r1
 801fe50:	b087      	sub	sp, #28
 801fe52:	4605      	mov	r5, r0
 801fe54:	a901      	add	r1, sp, #4
 801fe56:	4630      	mov	r0, r6
 801fe58:	f000 f922 	bl	80200a0 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_6HeaderE>
 801fe5c:	4604      	mov	r4, r0
 801fe5e:	b178      	cbz	r0, 801fe80 <_ZN4rtps15MessageReceiver13processHeaderERNS_21MessageProcessingInfoE+0x34>
 801fe60:	af03      	add	r7, sp, #12
 801fe62:	220c      	movs	r2, #12
 801fe64:	6969      	ldr	r1, [r5, #20]
 801fe66:	4638      	mov	r0, r7
 801fe68:	f001 fdfa 	bl	8021a60 <memcmp>
 801fe6c:	b138      	cbz	r0, 801fe7e <_ZN4rtps15MessageReceiver13processHeaderERNS_21MessageProcessingInfoE+0x32>
 801fe6e:	4b0e      	ldr	r3, [pc, #56]	; (801fea8 <_ZN4rtps15MessageReceiver13processHeaderERNS_21MessageProcessingInfoE+0x5c>)
 801fe70:	9a01      	ldr	r2, [sp, #4]
 801fe72:	429a      	cmp	r2, r3
 801fe74:	d103      	bne.n	801fe7e <_ZN4rtps15MessageReceiver13processHeaderERNS_21MessageProcessingInfoE+0x32>
 801fe76:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801fe7a:	2b02      	cmp	r3, #2
 801fe7c:	d003      	beq.n	801fe86 <_ZN4rtps15MessageReceiver13processHeaderERNS_21MessageProcessingInfoE+0x3a>
 801fe7e:	2400      	movs	r4, #0
 801fe80:	4620      	mov	r0, r4
 801fe82:	b007      	add	sp, #28
 801fe84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fe86:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801fe8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801fe8e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801fe92:	81eb      	strh	r3, [r5, #14]
 801fe94:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801fe98:	88f3      	ldrh	r3, [r6, #6]
 801fe9a:	4620      	mov	r0, r4
 801fe9c:	81af      	strh	r7, [r5, #12]
 801fe9e:	3314      	adds	r3, #20
 801fea0:	80f3      	strh	r3, [r6, #6]
 801fea2:	b007      	add	sp, #28
 801fea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fea6:	bf00      	nop
 801fea8:	53505452 	.word	0x53505452

0801feac <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoERKNS_16SubmessageHeaderE>:
 801feac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801feb0:	b0a0      	sub	sp, #128	; 0x80
 801feb2:	2300      	movs	r3, #0
 801feb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801feb8:	460e      	mov	r6, r1
 801feba:	ac0c      	add	r4, sp, #48	; 0x30
 801febc:	4605      	mov	r5, r0
 801febe:	4608      	mov	r0, r1
 801fec0:	a905      	add	r1, sp, #20
 801fec2:	6063      	str	r3, [r4, #4]
 801fec4:	4690      	mov	r8, r2
 801fec6:	930c      	str	r3, [sp, #48]	; 0x30
 801fec8:	e9cd 7310 	strd	r7, r3, [sp, #64]	; 0x40
 801fecc:	e9c4 3302 	strd	r3, r3, [r4, #8]
 801fed0:	f000 f918 	bl	8020104 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE>
 801fed4:	4607      	mov	r7, r0
 801fed6:	2800      	cmp	r0, #0
 801fed8:	d044      	beq.n	801ff64 <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoERKNS_16SubmessageHeaderE+0xb8>
 801feda:	4b31      	ldr	r3, [pc, #196]	; (801ffa0 <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoERKNS_16SubmessageHeaderE+0xf4>)
 801fedc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fee0:	881a      	ldrh	r2, [r3, #0]
 801fee2:	f8d6 9000 	ldr.w	r9, [r6]
 801fee6:	4291      	cmp	r1, r2
 801fee8:	f8b8 8002 	ldrh.w	r8, [r8, #2]
 801feec:	88f6      	ldrh	r6, [r6, #6]
 801feee:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801fef2:	d03b      	beq.n	801ff6c <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoERKNS_16SubmessageHeaderE+0xc0>
 801fef4:	9907      	ldr	r1, [sp, #28]
 801fef6:	6968      	ldr	r0, [r5, #20]
 801fef8:	f7fb f8ca 	bl	801b090 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE>
 801fefc:	4684      	mov	ip, r0
 801fefe:	f1bc 0f00 	cmp.w	ip, #0
 801ff02:	d02f      	beq.n	801ff64 <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoERKNS_16SubmessageHeaderE+0xb8>
 801ff04:	f64f 72ec 	movw	r2, #65516	; 0xffec
 801ff08:	9808      	ldr	r0, [sp, #32]
 801ff0a:	f10a 0118 	add.w	r1, sl, #24
 801ff0e:	ab01      	add	r3, sp, #4
 801ff10:	eba2 020a 	sub.w	r2, r2, sl
 801ff14:	9004      	str	r0, [sp, #16]
 801ff16:	440e      	add	r6, r1
 801ff18:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ff1a:	4490      	add	r8, r2
 801ff1c:	2101      	movs	r1, #1
 801ff1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ff20:	f10d 0e50 	add.w	lr, sp, #80	; 0x50
 801ff24:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
 801ff28:	444e      	add	r6, r9
 801ff2a:	f8ad 804e 	strh.w	r8, [sp, #78]	; 0x4e
 801ff2e:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801ff32:	9612      	str	r6, [sp, #72]	; 0x48
 801ff34:	e9cd 2018 	strd	r2, r0, [sp, #96]	; 0x60
 801ff38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ff3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ff40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ff42:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801ff46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801ff4a:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 801ff4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801ff52:	aa20      	add	r2, sp, #128	; 0x80
 801ff54:	f8dc 3000 	ldr.w	r3, [ip]
 801ff58:	e902 0003 	stmdb	r2, {r0, r1}
 801ff5c:	681b      	ldr	r3, [r3, #0]
 801ff5e:	4660      	mov	r0, ip
 801ff60:	a912      	add	r1, sp, #72	; 0x48
 801ff62:	4798      	blx	r3
 801ff64:	4638      	mov	r0, r7
 801ff66:	b020      	add	sp, #128	; 0x80
 801ff68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff6c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 801ff70:	789b      	ldrb	r3, [r3, #2]
 801ff72:	429a      	cmp	r2, r3
 801ff74:	d1be      	bne.n	801fef4 <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoERKNS_16SubmessageHeaderE+0x48>
 801ff76:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801ff7a:	2b00      	cmp	r3, #0
 801ff7c:	d1ba      	bne.n	801fef4 <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoERKNS_16SubmessageHeaderE+0x48>
 801ff7e:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
 801ff82:	9b08      	ldr	r3, [sp, #32]
 801ff84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801ff88:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801ff8c:	4661      	mov	r1, ip
 801ff8e:	6968      	ldr	r0, [r5, #20]
 801ff90:	9315      	str	r3, [sp, #84]	; 0x54
 801ff92:	f7fb f8a5 	bl	801b0e0 <_ZNK4rtps11Participant19getReaderByWriterIdERKNS_6Guid_tE>
 801ff96:	4684      	mov	ip, r0
 801ff98:	f1bc 0f00 	cmp.w	ip, #0
 801ff9c:	d1b2      	bne.n	801ff04 <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoERKNS_16SubmessageHeaderE+0x58>
 801ff9e:	e7e1      	b.n	801ff64 <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoERKNS_16SubmessageHeaderE+0xb8>
 801ffa0:	08026b28 	.word	0x08026b28

0801ffa4 <_ZN4rtps15MessageReceiver14processMessageEPKht>:
 801ffa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ffa8:	4c3c      	ldr	r4, [pc, #240]	; (802009c <_ZN4rtps15MessageReceiver14processMessageEPKht+0xf8>)
 801ffaa:	b094      	sub	sp, #80	; 0x50
 801ffac:	2700      	movs	r7, #0
 801ffae:	460b      	mov	r3, r1
 801ffb0:	8821      	ldrh	r1, [r4, #0]
 801ffb2:	4606      	mov	r6, r0
 801ffb4:	6007      	str	r7, [r0, #0]
 801ffb6:	8181      	strh	r1, [r0, #12]
 801ffb8:	a902      	add	r1, sp, #8
 801ffba:	81c7      	strh	r7, [r0, #14]
 801ffbc:	7407      	strb	r7, [r0, #16]
 801ffbe:	9302      	str	r3, [sp, #8]
 801ffc0:	f8ad 200c 	strh.w	r2, [sp, #12]
 801ffc4:	f8ad 700e 	strh.w	r7, [sp, #14]
 801ffc8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ffcc:	f7ff ff3e 	bl	801fe4c <_ZN4rtps15MessageReceiver13processHeaderERNS_21MessageProcessingInfoE>
 801ffd0:	2800      	cmp	r0, #0
 801ffd2:	d05d      	beq.n	8020090 <_ZN4rtps15MessageReceiver14processMessageEPKht+0xec>
 801ffd4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801ffd8:	4680      	mov	r8, r0
 801ffda:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801ffde:	429a      	cmp	r2, r3
 801ffe0:	d258      	bcs.n	8020094 <_ZN4rtps15MessageReceiver14processMessageEPKht+0xf0>
 801ffe2:	2400      	movs	r4, #0
 801ffe4:	2520      	movs	r5, #32
 801ffe6:	e00e      	b.n	8020006 <_ZN4rtps15MessageReceiver14processMessageEPKht+0x62>
 801ffe8:	2b06      	cmp	r3, #6
 801ffea:	d037      	beq.n	802005c <_ZN4rtps15MessageReceiver14processMessageEPKht+0xb8>
 801ffec:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801fff0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801fff4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801fff8:	440b      	add	r3, r1
 801fffa:	3304      	adds	r3, #4
 801fffc:	b29b      	uxth	r3, r3
 801fffe:	429a      	cmp	r2, r3
 8020000:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020004:	d946      	bls.n	8020094 <_ZN4rtps15MessageReceiver14processMessageEPKht+0xf0>
 8020006:	a901      	add	r1, sp, #4
 8020008:	a802      	add	r0, sp, #8
 802000a:	f000 f865 	bl	80200d8 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_16SubmessageHeaderE>
 802000e:	2800      	cmp	r0, #0
 8020010:	d03e      	beq.n	8020090 <_ZN4rtps15MessageReceiver14processMessageEPKht+0xec>
 8020012:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8020016:	2b07      	cmp	r3, #7
 8020018:	d007      	beq.n	802002a <_ZN4rtps15MessageReceiver14processMessageEPKht+0x86>
 802001a:	2b15      	cmp	r3, #21
 802001c:	d1e4      	bne.n	801ffe8 <_ZN4rtps15MessageReceiver14processMessageEPKht+0x44>
 802001e:	aa01      	add	r2, sp, #4
 8020020:	a902      	add	r1, sp, #8
 8020022:	4630      	mov	r0, r6
 8020024:	f7ff ff42 	bl	801feac <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoERKNS_16SubmessageHeaderE>
 8020028:	e7e0      	b.n	801ffec <_ZN4rtps15MessageReceiver14processMessageEPKht+0x48>
 802002a:	a904      	add	r1, sp, #16
 802002c:	a802      	add	r0, sp, #8
 802002e:	f000 f8d1 	bl	80201d4 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_19SubmessageHeartbeatE>
 8020032:	2800      	cmp	r0, #0
 8020034:	d0da      	beq.n	801ffec <_ZN4rtps15MessageReceiver14processMessageEPKht+0x48>
 8020036:	9905      	ldr	r1, [sp, #20]
 8020038:	6970      	ldr	r0, [r6, #20]
 802003a:	f7fb f829 	bl	801b090 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE>
 802003e:	2800      	cmp	r0, #0
 8020040:	d0d4      	beq.n	801ffec <_ZN4rtps15MessageReceiver14processMessageEPKht+0x48>
 8020042:	6803      	ldr	r3, [r0, #0]
 8020044:	4632      	mov	r2, r6
 8020046:	a904      	add	r1, sp, #16
 8020048:	689b      	ldr	r3, [r3, #8]
 802004a:	4798      	blx	r3
 802004c:	2800      	cmp	r0, #0
 802004e:	d0cd      	beq.n	801ffec <_ZN4rtps15MessageReceiver14processMessageEPKht+0x48>
 8020050:	6970      	ldr	r0, [r6, #20]
 8020052:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8020056:	f7fb fb0b 	bl	801b670 <_ZN4rtps11Participant12addHeartbeatENS_12GuidPrefix_tE>
 802005a:	e7c7      	b.n	801ffec <_ZN4rtps15MessageReceiver14processMessageEPKht+0x48>
 802005c:	2100      	movs	r1, #0
 802005e:	2220      	movs	r2, #32
 8020060:	a80a      	add	r0, sp, #40	; 0x28
 8020062:	9707      	str	r7, [sp, #28]
 8020064:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8020068:	f001 fd32 	bl	8021ad0 <memset>
 802006c:	a904      	add	r1, sp, #16
 802006e:	a802      	add	r0, sp, #8
 8020070:	f000 f8e4 	bl	802023c <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE>
 8020074:	2800      	cmp	r0, #0
 8020076:	d0b9      	beq.n	801ffec <_ZN4rtps15MessageReceiver14processMessageEPKht+0x48>
 8020078:	9906      	ldr	r1, [sp, #24]
 802007a:	6970      	ldr	r0, [r6, #20]
 802007c:	f7fa ffe0 	bl	801b040 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE>
 8020080:	2800      	cmp	r0, #0
 8020082:	d0b3      	beq.n	801ffec <_ZN4rtps15MessageReceiver14processMessageEPKht+0x48>
 8020084:	6803      	ldr	r3, [r0, #0]
 8020086:	4632      	mov	r2, r6
 8020088:	a904      	add	r1, sp, #16
 802008a:	699b      	ldr	r3, [r3, #24]
 802008c:	4798      	blx	r3
 802008e:	e7ad      	b.n	801ffec <_ZN4rtps15MessageReceiver14processMessageEPKht+0x48>
 8020090:	f04f 0800 	mov.w	r8, #0
 8020094:	4640      	mov	r0, r8
 8020096:	b014      	add	sp, #80	; 0x50
 8020098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802009c:	08026b24 	.word	0x08026b24

080200a0 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_6HeaderE>:
 80200a0:	88c2      	ldrh	r2, [r0, #6]
 80200a2:	8883      	ldrh	r3, [r0, #4]
 80200a4:	1a9b      	subs	r3, r3, r2
 80200a6:	b29b      	uxth	r3, r3
 80200a8:	2b13      	cmp	r3, #19
 80200aa:	d801      	bhi.n	80200b0 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_6HeaderE+0x10>
 80200ac:	2000      	movs	r0, #0
 80200ae:	4770      	bx	lr
 80200b0:	6803      	ldr	r3, [r0, #0]
 80200b2:	2001      	movs	r0, #1
 80200b4:	b430      	push	{r4, r5}
 80200b6:	589c      	ldr	r4, [r3, r2]
 80200b8:	4413      	add	r3, r2
 80200ba:	600c      	str	r4, [r1, #0]
 80200bc:	461a      	mov	r2, r3
 80200be:	889c      	ldrh	r4, [r3, #4]
 80200c0:	808c      	strh	r4, [r1, #4]
 80200c2:	88db      	ldrh	r3, [r3, #6]
 80200c4:	80cb      	strh	r3, [r1, #6]
 80200c6:	f852 5f08 	ldr.w	r5, [r2, #8]!
 80200ca:	6854      	ldr	r4, [r2, #4]
 80200cc:	6893      	ldr	r3, [r2, #8]
 80200ce:	608d      	str	r5, [r1, #8]
 80200d0:	60cc      	str	r4, [r1, #12]
 80200d2:	610b      	str	r3, [r1, #16]
 80200d4:	bc30      	pop	{r4, r5}
 80200d6:	4770      	bx	lr

080200d8 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_16SubmessageHeaderE>:
 80200d8:	88c2      	ldrh	r2, [r0, #6]
 80200da:	8883      	ldrh	r3, [r0, #4]
 80200dc:	1a9b      	subs	r3, r3, r2
 80200de:	b29b      	uxth	r3, r3
 80200e0:	2b03      	cmp	r3, #3
 80200e2:	d90c      	bls.n	80200fe <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_16SubmessageHeaderE+0x26>
 80200e4:	6803      	ldr	r3, [r0, #0]
 80200e6:	2001      	movs	r0, #1
 80200e8:	b410      	push	{r4}
 80200ea:	5c9c      	ldrb	r4, [r3, r2]
 80200ec:	4413      	add	r3, r2
 80200ee:	700c      	strb	r4, [r1, #0]
 80200f0:	785a      	ldrb	r2, [r3, #1]
 80200f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80200f6:	704a      	strb	r2, [r1, #1]
 80200f8:	885b      	ldrh	r3, [r3, #2]
 80200fa:	804b      	strh	r3, [r1, #2]
 80200fc:	4770      	bx	lr
 80200fe:	2000      	movs	r0, #0
 8020100:	4770      	bx	lr
 8020102:	bf00      	nop

08020104 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE>:
 8020104:	88c2      	ldrh	r2, [r0, #6]
 8020106:	8883      	ldrh	r3, [r0, #4]
 8020108:	1a9b      	subs	r3, r3, r2
 802010a:	b29b      	uxth	r3, r3
 802010c:	2b03      	cmp	r3, #3
 802010e:	d946      	bls.n	802019e <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE+0x9a>
 8020110:	6803      	ldr	r3, [r0, #0]
 8020112:	b4f0      	push	{r4, r5, r6, r7}
 8020114:	5c9c      	ldrb	r4, [r3, r2]
 8020116:	4413      	add	r3, r2
 8020118:	700c      	strb	r4, [r1, #0]
 802011a:	785d      	ldrb	r5, [r3, #1]
 802011c:	704d      	strb	r5, [r1, #1]
 802011e:	885b      	ldrh	r3, [r3, #2]
 8020120:	804b      	strh	r3, [r1, #2]
 8020122:	3303      	adds	r3, #3
 8020124:	88c6      	ldrh	r6, [r0, #6]
 8020126:	8882      	ldrh	r2, [r0, #4]
 8020128:	1b92      	subs	r2, r2, r6
 802012a:	b292      	uxth	r2, r2
 802012c:	4293      	cmp	r3, r2
 802012e:	db02      	blt.n	8020136 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE+0x32>
 8020130:	2000      	movs	r0, #0
 8020132:	bcf0      	pop	{r4, r5, r6, r7}
 8020134:	4770      	bx	lr
 8020136:	6803      	ldr	r3, [r0, #0]
 8020138:	2000      	movs	r0, #0
 802013a:	4433      	add	r3, r6
 802013c:	889a      	ldrh	r2, [r3, #4]
 802013e:	461e      	mov	r6, r3
 8020140:	808a      	strh	r2, [r1, #4]
 8020142:	461a      	mov	r2, r3
 8020144:	88dc      	ldrh	r4, [r3, #6]
 8020146:	80cc      	strh	r4, [r1, #6]
 8020148:	f836 7f08 	ldrh.w	r7, [r6, #8]!
 802014c:	78b4      	ldrb	r4, [r6, #2]
 802014e:	810f      	strh	r7, [r1, #8]
 8020150:	728c      	strb	r4, [r1, #10]
 8020152:	7adc      	ldrb	r4, [r3, #11]
 8020154:	72cc      	strb	r4, [r1, #11]
 8020156:	f832 4f0c 	ldrh.w	r4, [r2, #12]!
 802015a:	7892      	ldrb	r2, [r2, #2]
 802015c:	818c      	strh	r4, [r1, #12]
 802015e:	738a      	strb	r2, [r1, #14]
 8020160:	7bda      	ldrb	r2, [r3, #15]
 8020162:	73ca      	strb	r2, [r1, #15]
 8020164:	691a      	ldr	r2, [r3, #16]
 8020166:	610a      	str	r2, [r1, #16]
 8020168:	695a      	ldr	r2, [r3, #20]
 802016a:	6188      	str	r0, [r1, #24]
 802016c:	614a      	str	r2, [r1, #20]
 802016e:	07aa      	lsls	r2, r5, #30
 8020170:	d512      	bpl.n	8020198 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE+0x94>
 8020172:	3318      	adds	r3, #24
 8020174:	4604      	mov	r4, r0
 8020176:	f248 070f 	movw	r7, #32783	; 0x800f
 802017a:	885d      	ldrh	r5, [r3, #2]
 802017c:	461a      	mov	r2, r3
 802017e:	1de8      	adds	r0, r5, #7
 8020180:	f832 6b04 	ldrh.w	r6, [r2], #4
 8020184:	4420      	add	r0, r4
 8020186:	42be      	cmp	r6, r7
 8020188:	f020 0403 	bic.w	r4, r0, #3
 802018c:	618c      	str	r4, [r1, #24]
 802018e:	d008      	beq.n	80201a2 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE+0x9e>
 8020190:	2e01      	cmp	r6, #1
 8020192:	eb02 0305 	add.w	r3, r2, r5
 8020196:	d1f0      	bne.n	802017a <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE+0x76>
 8020198:	2001      	movs	r0, #1
 802019a:	bcf0      	pop	{r4, r5, r6, r7}
 802019c:	4770      	bx	lr
 802019e:	2000      	movs	r0, #0
 80201a0:	4770      	bx	lr
 80201a2:	6855      	ldr	r5, [r2, #4]
 80201a4:	4618      	mov	r0, r3
 80201a6:	6816      	ldr	r6, [r2, #0]
 80201a8:	331c      	adds	r3, #28
 80201aa:	6892      	ldr	r2, [r2, #8]
 80201ac:	61ce      	str	r6, [r1, #28]
 80201ae:	620d      	str	r5, [r1, #32]
 80201b0:	624a      	str	r2, [r1, #36]	; 0x24
 80201b2:	f830 5f10 	ldrh.w	r5, [r0, #16]!
 80201b6:	7882      	ldrb	r2, [r0, #2]
 80201b8:	850d      	strh	r5, [r1, #40]	; 0x28
 80201ba:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
 80201be:	f813 2c09 	ldrb.w	r2, [r3, #-9]
 80201c2:	f881 202b 	strb.w	r2, [r1, #43]	; 0x2b
 80201c6:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80201ca:	62ca      	str	r2, [r1, #44]	; 0x2c
 80201cc:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80201d0:	630a      	str	r2, [r1, #48]	; 0x30
 80201d2:	e7d2      	b.n	802017a <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE+0x76>

080201d4 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_19SubmessageHeartbeatE>:
 80201d4:	8882      	ldrh	r2, [r0, #4]
 80201d6:	b430      	push	{r4, r5}
 80201d8:	88c4      	ldrh	r4, [r0, #6]
 80201da:	1b12      	subs	r2, r2, r4
 80201dc:	b292      	uxth	r2, r2
 80201de:	2a1f      	cmp	r2, #31
 80201e0:	d802      	bhi.n	80201e8 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_19SubmessageHeartbeatE+0x14>
 80201e2:	2000      	movs	r0, #0
 80201e4:	bc30      	pop	{r4, r5}
 80201e6:	4770      	bx	lr
 80201e8:	6802      	ldr	r2, [r0, #0]
 80201ea:	4603      	mov	r3, r0
 80201ec:	2001      	movs	r0, #1
 80201ee:	5d15      	ldrb	r5, [r2, r4]
 80201f0:	4414      	add	r4, r2
 80201f2:	700d      	strb	r5, [r1, #0]
 80201f4:	7862      	ldrb	r2, [r4, #1]
 80201f6:	704a      	strb	r2, [r1, #1]
 80201f8:	8862      	ldrh	r2, [r4, #2]
 80201fa:	804a      	strh	r2, [r1, #2]
 80201fc:	88da      	ldrh	r2, [r3, #6]
 80201fe:	681b      	ldr	r3, [r3, #0]
 8020200:	4413      	add	r3, r2
 8020202:	461c      	mov	r4, r3
 8020204:	461a      	mov	r2, r3
 8020206:	f834 5f04 	ldrh.w	r5, [r4, #4]!
 802020a:	78a4      	ldrb	r4, [r4, #2]
 802020c:	808d      	strh	r5, [r1, #4]
 802020e:	718c      	strb	r4, [r1, #6]
 8020210:	79dc      	ldrb	r4, [r3, #7]
 8020212:	71cc      	strb	r4, [r1, #7]
 8020214:	f832 4f08 	ldrh.w	r4, [r2, #8]!
 8020218:	7892      	ldrb	r2, [r2, #2]
 802021a:	810c      	strh	r4, [r1, #8]
 802021c:	728a      	strb	r2, [r1, #10]
 802021e:	7ada      	ldrb	r2, [r3, #11]
 8020220:	72ca      	strb	r2, [r1, #11]
 8020222:	68da      	ldr	r2, [r3, #12]
 8020224:	60ca      	str	r2, [r1, #12]
 8020226:	691a      	ldr	r2, [r3, #16]
 8020228:	610a      	str	r2, [r1, #16]
 802022a:	695a      	ldr	r2, [r3, #20]
 802022c:	614a      	str	r2, [r1, #20]
 802022e:	699a      	ldr	r2, [r3, #24]
 8020230:	618a      	str	r2, [r1, #24]
 8020232:	69db      	ldr	r3, [r3, #28]
 8020234:	61cb      	str	r3, [r1, #28]
 8020236:	bc30      	pop	{r4, r5}
 8020238:	4770      	bx	lr
 802023a:	bf00      	nop

0802023c <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE>:
 802023c:	88c2      	ldrh	r2, [r0, #6]
 802023e:	b570      	push	{r4, r5, r6, lr}
 8020240:	460c      	mov	r4, r1
 8020242:	8881      	ldrh	r1, [r0, #4]
 8020244:	1a89      	subs	r1, r1, r2
 8020246:	b289      	uxth	r1, r1
 8020248:	290f      	cmp	r1, #15
 802024a:	d801      	bhi.n	8020250 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x14>
 802024c:	2000      	movs	r0, #0
 802024e:	bd70      	pop	{r4, r5, r6, pc}
 8020250:	6803      	ldr	r3, [r0, #0]
 8020252:	5c9d      	ldrb	r5, [r3, r2]
 8020254:	4413      	add	r3, r2
 8020256:	7025      	strb	r5, [r4, #0]
 8020258:	785a      	ldrb	r2, [r3, #1]
 802025a:	7062      	strb	r2, [r4, #1]
 802025c:	885b      	ldrh	r3, [r3, #2]
 802025e:	8063      	strh	r3, [r4, #2]
 8020260:	88c2      	ldrh	r2, [r0, #6]
 8020262:	6803      	ldr	r3, [r0, #0]
 8020264:	4413      	add	r3, r2
 8020266:	461a      	mov	r2, r3
 8020268:	4618      	mov	r0, r3
 802026a:	f103 0518 	add.w	r5, r3, #24
 802026e:	f832 6f04 	ldrh.w	r6, [r2, #4]!
 8020272:	7892      	ldrb	r2, [r2, #2]
 8020274:	80a6      	strh	r6, [r4, #4]
 8020276:	71a2      	strb	r2, [r4, #6]
 8020278:	79da      	ldrb	r2, [r3, #7]
 802027a:	71e2      	strb	r2, [r4, #7]
 802027c:	f830 6f08 	ldrh.w	r6, [r0, #8]!
 8020280:	7882      	ldrb	r2, [r0, #2]
 8020282:	8126      	strh	r6, [r4, #8]
 8020284:	72a2      	strb	r2, [r4, #10]
 8020286:	7ada      	ldrb	r2, [r3, #11]
 8020288:	72e2      	strb	r2, [r4, #11]
 802028a:	68da      	ldr	r2, [r3, #12]
 802028c:	60e2      	str	r2, [r4, #12]
 802028e:	691a      	ldr	r2, [r3, #16]
 8020290:	6122      	str	r2, [r4, #16]
 8020292:	695a      	ldr	r2, [r3, #20]
 8020294:	6162      	str	r2, [r4, #20]
 8020296:	b152      	cbz	r2, 80202ae <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x72>
 8020298:	0952      	lsrs	r2, r2, #5
 802029a:	3201      	adds	r2, #1
 802029c:	0092      	lsls	r2, r2, #2
 802029e:	f102 031c 	add.w	r3, r2, #28
 80202a2:	b29b      	uxth	r3, r3
 80202a4:	4299      	cmp	r1, r3
 80202a6:	d3d1      	bcc.n	802024c <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x10>
 80202a8:	2a08      	cmp	r2, #8
 80202aa:	d906      	bls.n	80202ba <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x7e>
 80202ac:	e7fe      	b.n	80202ac <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x70>
 80202ae:	291b      	cmp	r1, #27
 80202b0:	d9cc      	bls.n	802024c <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x10>
 80202b2:	682b      	ldr	r3, [r5, #0]
 80202b4:	2001      	movs	r0, #1
 80202b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80202b8:	bd70      	pop	{r4, r5, r6, pc}
 80202ba:	4629      	mov	r1, r5
 80202bc:	f104 0018 	add.w	r0, r4, #24
 80202c0:	4415      	add	r5, r2
 80202c2:	f001 fbdd 	bl	8021a80 <memcpy>
 80202c6:	e7f4      	b.n	80202b2 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x76>

080202c8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer>:
 80202c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202cc:	2501      	movs	r5, #1
 80202ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80202d2:	f04f 0c00 	mov.w	ip, #0
 80202d6:	b085      	sub	sp, #20
 80202d8:	f8c0 51fc 	str.w	r5, [r0, #508]	; 0x1fc
 80202dc:	4683      	mov	fp, r0
 80202de:	460c      	mov	r4, r1
 80202e0:	1c86      	adds	r6, r0, #2
 80202e2:	f500 7a86 	add.w	sl, r0, #268	; 0x10c
 80202e6:	f100 0994 	add.w	r9, r0, #148	; 0x94
 80202ea:	f100 081c 	add.w	r8, r0, #28
 80202ee:	f500 77c2 	add.w	r7, r0, #388	; 0x184
 80202f2:	f100 0518 	add.w	r5, r0, #24
 80202f6:	f8c0 c002 	str.w	ip, [r0, #2]
 80202fa:	f8c0 c006 	str.w	ip, [r0, #6]
 80202fe:	f8c0 c00a 	str.w	ip, [r0, #10]
 8020302:	f8c0 c00e 	str.w	ip, [r0, #14]
 8020306:	f880 c014 	strb.w	ip, [r0, #20]
 802030a:	61c2      	str	r2, [r0, #28]
 802030c:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
 8020310:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8020314:	f8c0 2184 	str.w	r2, [r0, #388]	; 0x184
 8020318:	6342      	str	r2, [r0, #52]	; 0x34
 802031a:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
 802031e:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
 8020322:	f8c0 219c 	str.w	r2, [r0, #412]	; 0x19c
 8020326:	64c2      	str	r2, [r0, #76]	; 0x4c
 8020328:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
 802032c:	f8c0 213c 	str.w	r2, [r0, #316]	; 0x13c
 8020330:	f8c0 21b4 	str.w	r2, [r0, #436]	; 0x1b4
 8020334:	6642      	str	r2, [r0, #100]	; 0x64
 8020336:	f8c0 20dc 	str.w	r2, [r0, #220]	; 0xdc
 802033a:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
 802033e:	f8c0 21cc 	str.w	r2, [r0, #460]	; 0x1cc
 8020342:	67c2      	str	r2, [r0, #124]	; 0x7c
 8020344:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
 8020348:	f8c0 216c 	str.w	r2, [r0, #364]	; 0x16c
 802034c:	f8c0 21e4 	str.w	r2, [r0, #484]	; 0x1e4
 8020350:	4620      	mov	r0, r4
 8020352:	f7fd fea3 	bl	801e09c <ucdr_buffer_remaining>
 8020356:	2803      	cmp	r0, #3
 8020358:	f240 813e 	bls.w	80205d8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x310>
 802035c:	a903      	add	r1, sp, #12
 802035e:	4620      	mov	r0, r4
 8020360:	f7fd fb58 	bl	801da14 <ucdr_deserialize_uint16_t>
 8020364:	f10d 010e 	add.w	r1, sp, #14
 8020368:	4620      	mov	r0, r4
 802036a:	f7fd fb53 	bl	801da14 <ucdr_deserialize_uint16_t>
 802036e:	4620      	mov	r0, r4
 8020370:	f7fd fe94 	bl	801e09c <ucdr_buffer_remaining>
 8020374:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8020378:	4281      	cmp	r1, r0
 802037a:	f200 8091 	bhi.w	80204a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1d8>
 802037e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8020382:	2a70      	cmp	r2, #112	; 0x70
 8020384:	f200 808c 	bhi.w	80204a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1d8>
 8020388:	e8df f012 	tbh	[pc, r2, lsl #1]
 802038c:	0126008e 	.word	0x0126008e
 8020390:	008a009b 	.word	0x008a009b
 8020394:	008a008a 	.word	0x008a008a
 8020398:	008a008a 	.word	0x008a008a
 802039c:	008a008a 	.word	0x008a008a
 80203a0:	008a008a 	.word	0x008a008a
 80203a4:	008a008a 	.word	0x008a008a
 80203a8:	008a008a 	.word	0x008a008a
 80203ac:	008a008a 	.word	0x008a008a
 80203b0:	008a008a 	.word	0x008a008a
 80203b4:	00a6008a 	.word	0x00a6008a
 80203b8:	008a00b4 	.word	0x008a00b4
 80203bc:	008a008a 	.word	0x008a008a
 80203c0:	008a008a 	.word	0x008a008a
 80203c4:	008a008a 	.word	0x008a008a
 80203c8:	008a008a 	.word	0x008a008a
 80203cc:	008a008a 	.word	0x008a008a
 80203d0:	008a008a 	.word	0x008a008a
 80203d4:	008a008a 	.word	0x008a008a
 80203d8:	008a008a 	.word	0x008a008a
 80203dc:	008a008a 	.word	0x008a008a
 80203e0:	008a008a 	.word	0x008a008a
 80203e4:	008a008e 	.word	0x008a008e
 80203e8:	008a008a 	.word	0x008a008a
 80203ec:	00bb008a 	.word	0x00bb008a
 80203f0:	007100d5 	.word	0x007100d5
 80203f4:	008a008a 	.word	0x008a008a
 80203f8:	008a008a 	.word	0x008a008a
 80203fc:	008a008a 	.word	0x008a008a
 8020400:	008a008a 	.word	0x008a008a
 8020404:	008a008a 	.word	0x008a008a
 8020408:	008a008a 	.word	0x008a008a
 802040c:	008a008a 	.word	0x008a008a
 8020410:	00ed008a 	.word	0x00ed008a
 8020414:	008a008a 	.word	0x008a008a
 8020418:	008a008a 	.word	0x008a008a
 802041c:	008a00f3 	.word	0x008a00f3
 8020420:	008a008a 	.word	0x008a008a
 8020424:	008a008a 	.word	0x008a008a
 8020428:	008a008a 	.word	0x008a008a
 802042c:	008a0115 	.word	0x008a0115
 8020430:	008a008a 	.word	0x008a008a
 8020434:	008a008a 	.word	0x008a008a
 8020438:	008a008a 	.word	0x008a008a
 802043c:	008e0096 	.word	0x008e0096
 8020440:	008a008a 	.word	0x008a008a
 8020444:	008a008a 	.word	0x008a008a
 8020448:	008a008a 	.word	0x008a008a
 802044c:	008a008a 	.word	0x008a008a
 8020450:	008a008e 	.word	0x008a008e
 8020454:	008a008a 	.word	0x008a008a
 8020458:	008a008a 	.word	0x008a008a
 802045c:	008a008a 	.word	0x008a008a
 8020460:	008a008a 	.word	0x008a008a
 8020464:	008a008a 	.word	0x008a008a
 8020468:	008a008a 	.word	0x008a008a
 802046c:	0091      	.short	0x0091
 802046e:	f8db 2094 	ldr.w	r2, [fp, #148]	; 0x94
 8020472:	3201      	adds	r2, #1
 8020474:	f000 80be 	beq.w	80205f4 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x32c>
 8020478:	f8db 20ac 	ldr.w	r2, [fp, #172]	; 0xac
 802047c:	3201      	adds	r2, #1
 802047e:	f000 80c2 	beq.w	8020606 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x33e>
 8020482:	f8db 20c4 	ldr.w	r2, [fp, #196]	; 0xc4
 8020486:	3201      	adds	r2, #1
 8020488:	f000 80e5 	beq.w	8020656 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x38e>
 802048c:	f8db 20dc 	ldr.w	r2, [fp, #220]	; 0xdc
 8020490:	3201      	adds	r2, #1
 8020492:	f000 80dc 	beq.w	802064e <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x386>
 8020496:	f8db 20f4 	ldr.w	r2, [fp, #244]	; 0xf4
 802049a:	3201      	adds	r2, #1
 802049c:	f000 80a0 	beq.w	80205e0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x318>
 80204a0:	2000      	movs	r0, #0
 80204a2:	b005      	add	sp, #20
 80204a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204a8:	4620      	mov	r0, r4
 80204aa:	f7fd fe19 	bl	801e0e0 <ucdr_advance_buffer>
 80204ae:	2104      	movs	r1, #4
 80204b0:	4620      	mov	r0, r4
 80204b2:	f7fd fddd 	bl	801e070 <ucdr_align_to>
 80204b6:	e74b      	b.n	8020350 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x88>
 80204b8:	4629      	mov	r1, r5
 80204ba:	4620      	mov	r0, r4
 80204bc:	f7fd fbb6 	bl	801dc2c <ucdr_deserialize_uint32_t>
 80204c0:	e7f5      	b.n	80204ae <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1e6>
 80204c2:	f50b 7100 	add.w	r1, fp, #512	; 0x200
 80204c6:	4620      	mov	r0, r4
 80204c8:	f7fd fcd8 	bl	801de7c <ucdr_deserialize_int32_t>
 80204cc:	f50b 7101 	add.w	r1, fp, #516	; 0x204
 80204d0:	4620      	mov	r0, r4
 80204d2:	f7fd fbab 	bl	801dc2c <ucdr_deserialize_uint32_t>
 80204d6:	e7ea      	b.n	80204ae <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1e6>
 80204d8:	4659      	mov	r1, fp
 80204da:	4620      	mov	r0, r4
 80204dc:	f7fd fa04 	bl	801d8e8 <ucdr_deserialize_uint8_t>
 80204e0:	f89b 2000 	ldrb.w	r2, [fp]
 80204e4:	2a01      	cmp	r2, #1
 80204e6:	d9db      	bls.n	80204a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1d8>
 80204e8:	f10b 0101 	add.w	r1, fp, #1
 80204ec:	4620      	mov	r0, r4
 80204ee:	f7fd f9fb 	bl	801d8e8 <ucdr_deserialize_uint8_t>
 80204f2:	e7dc      	b.n	80204ae <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1e6>
 80204f4:	2202      	movs	r2, #2
 80204f6:	f10b 0112 	add.w	r1, fp, #18
 80204fa:	4620      	mov	r0, r4
 80204fc:	f7fd f992 	bl	801d824 <ucdr_deserialize_array_uint8_t>
 8020500:	e7d5      	b.n	80204ae <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1e6>
 8020502:	f8db 210c 	ldr.w	r2, [fp, #268]	; 0x10c
 8020506:	3201      	adds	r2, #1
 8020508:	d071      	beq.n	80205ee <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x326>
 802050a:	f8db 2124 	ldr.w	r2, [fp, #292]	; 0x124
 802050e:	3201      	adds	r2, #1
 8020510:	d075      	beq.n	80205fe <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x336>
 8020512:	f8db 213c 	ldr.w	r2, [fp, #316]	; 0x13c
 8020516:	3201      	adds	r2, #1
 8020518:	f000 808d 	beq.w	8020636 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x36e>
 802051c:	f8db 2154 	ldr.w	r2, [fp, #340]	; 0x154
 8020520:	3201      	adds	r2, #1
 8020522:	f000 8084 	beq.w	802062e <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x366>
 8020526:	f8db 216c 	ldr.w	r2, [fp, #364]	; 0x16c
 802052a:	3201      	adds	r2, #1
 802052c:	d1b8      	bne.n	80204a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1d8>
 802052e:	f50b 73b6 	add.w	r3, fp, #364	; 0x16c
 8020532:	9301      	str	r3, [sp, #4]
 8020534:	e034      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 8020536:	f8db 201c 	ldr.w	r2, [fp, #28]
 802053a:	3201      	adds	r2, #1
 802053c:	d054      	beq.n	80205e8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x320>
 802053e:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
 8020542:	3201      	adds	r2, #1
 8020544:	d063      	beq.n	802060e <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x346>
 8020546:	f8db 204c 	ldr.w	r2, [fp, #76]	; 0x4c
 802054a:	3201      	adds	r2, #1
 802054c:	d067      	beq.n	802061e <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x356>
 802054e:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 8020552:	3201      	adds	r2, #1
 8020554:	d073      	beq.n	802063e <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x376>
 8020556:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
 802055a:	3201      	adds	r2, #1
 802055c:	d1a0      	bne.n	80204a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1d8>
 802055e:	f10b 037c 	add.w	r3, fp, #124	; 0x7c
 8020562:	9301      	str	r3, [sp, #4]
 8020564:	e01c      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 8020566:	f10b 0114 	add.w	r1, fp, #20
 802056a:	4620      	mov	r0, r4
 802056c:	f7fd f98e 	bl	801d88c <ucdr_deserialize_bool>
 8020570:	e79d      	b.n	80204ae <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1e6>
 8020572:	f8db 2184 	ldr.w	r2, [fp, #388]	; 0x184
 8020576:	3201      	adds	r2, #1
 8020578:	d03f      	beq.n	80205fa <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x332>
 802057a:	f8db 219c 	ldr.w	r2, [fp, #412]	; 0x19c
 802057e:	3201      	adds	r2, #1
 8020580:	d049      	beq.n	8020616 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x34e>
 8020582:	f8db 21b4 	ldr.w	r2, [fp, #436]	; 0x1b4
 8020586:	3201      	adds	r2, #1
 8020588:	d04d      	beq.n	8020626 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x35e>
 802058a:	f8db 21cc 	ldr.w	r2, [fp, #460]	; 0x1cc
 802058e:	3201      	adds	r2, #1
 8020590:	d059      	beq.n	8020646 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x37e>
 8020592:	f8db 21e4 	ldr.w	r2, [fp, #484]	; 0x1e4
 8020596:	3201      	adds	r2, #1
 8020598:	d182      	bne.n	80204a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1d8>
 802059a:	f50b 73f2 	add.w	r3, fp, #484	; 0x1e4
 802059e:	9301      	str	r3, [sp, #4]
 80205a0:	4620      	mov	r0, r4
 80205a2:	f7fd fd7b 	bl	801e09c <ucdr_buffer_remaining>
 80205a6:	2817      	cmp	r0, #23
 80205a8:	d981      	bls.n	80204ae <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1e6>
 80205aa:	9901      	ldr	r1, [sp, #4]
 80205ac:	2218      	movs	r2, #24
 80205ae:	4620      	mov	r0, r4
 80205b0:	f7fd f938 	bl	801d824 <ucdr_deserialize_array_uint8_t>
 80205b4:	e77b      	b.n	80204ae <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1e6>
 80205b6:	4631      	mov	r1, r6
 80205b8:	220c      	movs	r2, #12
 80205ba:	4620      	mov	r0, r4
 80205bc:	f7fd f932 	bl	801d824 <ucdr_deserialize_array_uint8_t>
 80205c0:	f10b 010e 	add.w	r1, fp, #14
 80205c4:	2203      	movs	r2, #3
 80205c6:	4620      	mov	r0, r4
 80205c8:	f7fd f92c 	bl	801d824 <ucdr_deserialize_array_uint8_t>
 80205cc:	f10b 0111 	add.w	r1, fp, #17
 80205d0:	4620      	mov	r0, r4
 80205d2:	f7fd f989 	bl	801d8e8 <ucdr_deserialize_uint8_t>
 80205d6:	e76a      	b.n	80204ae <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1e6>
 80205d8:	2001      	movs	r0, #1
 80205da:	b005      	add	sp, #20
 80205dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205e0:	f10b 03f4 	add.w	r3, fp, #244	; 0xf4
 80205e4:	9301      	str	r3, [sp, #4]
 80205e6:	e7db      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 80205e8:	f8cd 8004 	str.w	r8, [sp, #4]
 80205ec:	e7d8      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 80205ee:	f8cd a004 	str.w	sl, [sp, #4]
 80205f2:	e7d5      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 80205f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80205f8:	e7d2      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 80205fa:	9701      	str	r7, [sp, #4]
 80205fc:	e7d0      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 80205fe:	f50b 7392 	add.w	r3, fp, #292	; 0x124
 8020602:	9301      	str	r3, [sp, #4]
 8020604:	e7cc      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 8020606:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 802060a:	9301      	str	r3, [sp, #4]
 802060c:	e7c8      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 802060e:	f10b 0334 	add.w	r3, fp, #52	; 0x34
 8020612:	9301      	str	r3, [sp, #4]
 8020614:	e7c4      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 8020616:	f50b 73ce 	add.w	r3, fp, #412	; 0x19c
 802061a:	9301      	str	r3, [sp, #4]
 802061c:	e7c0      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 802061e:	f10b 034c 	add.w	r3, fp, #76	; 0x4c
 8020622:	9301      	str	r3, [sp, #4]
 8020624:	e7bc      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 8020626:	f50b 73da 	add.w	r3, fp, #436	; 0x1b4
 802062a:	9301      	str	r3, [sp, #4]
 802062c:	e7b8      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 802062e:	f50b 73aa 	add.w	r3, fp, #340	; 0x154
 8020632:	9301      	str	r3, [sp, #4]
 8020634:	e7b4      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 8020636:	f50b 739e 	add.w	r3, fp, #316	; 0x13c
 802063a:	9301      	str	r3, [sp, #4]
 802063c:	e7b0      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 802063e:	f10b 0364 	add.w	r3, fp, #100	; 0x64
 8020642:	9301      	str	r3, [sp, #4]
 8020644:	e7ac      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 8020646:	f50b 73e6 	add.w	r3, fp, #460	; 0x1cc
 802064a:	9301      	str	r3, [sp, #4]
 802064c:	e7a8      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 802064e:	f10b 03dc 	add.w	r3, fp, #220	; 0xdc
 8020652:	9301      	str	r3, [sp, #4]
 8020654:	e7a4      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 8020656:	f10b 03c4 	add.w	r3, fp, #196	; 0xc4
 802065a:	9301      	str	r3, [sp, #4]
 802065c:	e7a0      	b.n	80205a0 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x2d8>
 802065e:	bf00      	nop

08020660 <rcl_get_default_domain_id>:
 8020660:	b510      	push	{r4, lr}
 8020662:	2300      	movs	r3, #0
 8020664:	b082      	sub	sp, #8
 8020666:	9300      	str	r3, [sp, #0]
 8020668:	b1e8      	cbz	r0, 80206a6 <rcl_get_default_domain_id+0x46>
 802066a:	4604      	mov	r4, r0
 802066c:	4669      	mov	r1, sp
 802066e:	4813      	ldr	r0, [pc, #76]	; (80206bc <rcl_get_default_domain_id+0x5c>)
 8020670:	f7fe fd8c 	bl	801f18c <rcutils_get_env>
 8020674:	4602      	mov	r2, r0
 8020676:	b110      	cbz	r0, 802067e <rcl_get_default_domain_id+0x1e>
 8020678:	2001      	movs	r0, #1
 802067a:	b002      	add	sp, #8
 802067c:	bd10      	pop	{r4, pc}
 802067e:	9b00      	ldr	r3, [sp, #0]
 8020680:	b1a3      	cbz	r3, 80206ac <rcl_get_default_domain_id+0x4c>
 8020682:	7818      	ldrb	r0, [r3, #0]
 8020684:	2800      	cmp	r0, #0
 8020686:	d0f8      	beq.n	802067a <rcl_get_default_domain_id+0x1a>
 8020688:	4618      	mov	r0, r3
 802068a:	a901      	add	r1, sp, #4
 802068c:	9201      	str	r2, [sp, #4]
 802068e:	f001 fe05 	bl	802229c <strtoul>
 8020692:	b170      	cbz	r0, 80206b2 <rcl_get_default_domain_id+0x52>
 8020694:	1c43      	adds	r3, r0, #1
 8020696:	d103      	bne.n	80206a0 <rcl_get_default_domain_id+0x40>
 8020698:	4b09      	ldr	r3, [pc, #36]	; (80206c0 <rcl_get_default_domain_id+0x60>)
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	2b22      	cmp	r3, #34	; 0x22
 802069e:	d0eb      	beq.n	8020678 <rcl_get_default_domain_id+0x18>
 80206a0:	6020      	str	r0, [r4, #0]
 80206a2:	2000      	movs	r0, #0
 80206a4:	e7e9      	b.n	802067a <rcl_get_default_domain_id+0x1a>
 80206a6:	200b      	movs	r0, #11
 80206a8:	b002      	add	sp, #8
 80206aa:	bd10      	pop	{r4, pc}
 80206ac:	4618      	mov	r0, r3
 80206ae:	b002      	add	sp, #8
 80206b0:	bd10      	pop	{r4, pc}
 80206b2:	9b01      	ldr	r3, [sp, #4]
 80206b4:	781b      	ldrb	r3, [r3, #0]
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d0f2      	beq.n	80206a0 <rcl_get_default_domain_id+0x40>
 80206ba:	e7dd      	b.n	8020678 <rcl_get_default_domain_id+0x18>
 80206bc:	08026b2c 	.word	0x08026b2c
 80206c0:	20044078 	.word	0x20044078

080206c4 <rcl_expand_topic_name>:
 80206c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206c8:	b08b      	sub	sp, #44	; 0x2c
 80206ca:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80206cc:	fab4 f584 	clz	r5, r4
 80206d0:	096d      	lsrs	r5, r5, #5
 80206d2:	2b00      	cmp	r3, #0
 80206d4:	bf08      	it	eq
 80206d6:	2501      	moveq	r5, #1
 80206d8:	2a00      	cmp	r2, #0
 80206da:	bf08      	it	eq
 80206dc:	2501      	moveq	r5, #1
 80206de:	2900      	cmp	r1, #0
 80206e0:	bf08      	it	eq
 80206e2:	2501      	moveq	r5, #1
 80206e4:	2d00      	cmp	r5, #0
 80206e6:	d13d      	bne.n	8020764 <rcl_expand_topic_name+0xa0>
 80206e8:	4616      	mov	r6, r2
 80206ea:	fab0 f280 	clz	r2, r0
 80206ee:	4604      	mov	r4, r0
 80206f0:	0952      	lsrs	r2, r2, #5
 80206f2:	2800      	cmp	r0, #0
 80206f4:	d036      	beq.n	8020764 <rcl_expand_topic_name+0xa0>
 80206f6:	460f      	mov	r7, r1
 80206f8:	a909      	add	r1, sp, #36	; 0x24
 80206fa:	4698      	mov	r8, r3
 80206fc:	f000 f9e0 	bl	8020ac0 <rcl_validate_topic_name>
 8020700:	4605      	mov	r5, r0
 8020702:	bb58      	cbnz	r0, 802075c <rcl_expand_topic_name+0x98>
 8020704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020706:	2b00      	cmp	r3, #0
 8020708:	d135      	bne.n	8020776 <rcl_expand_topic_name+0xb2>
 802070a:	4602      	mov	r2, r0
 802070c:	a909      	add	r1, sp, #36	; 0x24
 802070e:	4638      	mov	r0, r7
 8020710:	f7ff f95e 	bl	801f9d0 <rmw_validate_node_name>
 8020714:	bb58      	cbnz	r0, 802076e <rcl_expand_topic_name+0xaa>
 8020716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020718:	bb93      	cbnz	r3, 8020780 <rcl_expand_topic_name+0xbc>
 802071a:	462a      	mov	r2, r5
 802071c:	a909      	add	r1, sp, #36	; 0x24
 802071e:	4630      	mov	r0, r6
 8020720:	f7ff f938 	bl	801f994 <rmw_validate_namespace>
 8020724:	bb18      	cbnz	r0, 802076e <rcl_expand_topic_name+0xaa>
 8020726:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020728:	2d00      	cmp	r5, #0
 802072a:	f040 809f 	bne.w	802086c <rcl_expand_topic_name+0x1a8>
 802072e:	217b      	movs	r1, #123	; 0x7b
 8020730:	4620      	mov	r0, r4
 8020732:	f001 fd02 	bl	802213a <strchr>
 8020736:	7823      	ldrb	r3, [r4, #0]
 8020738:	4681      	mov	r9, r0
 802073a:	bb18      	cbnz	r0, 8020784 <rcl_expand_topic_name+0xc0>
 802073c:	2b2f      	cmp	r3, #47	; 0x2f
 802073e:	d121      	bne.n	8020784 <rcl_expand_topic_name+0xc0>
 8020740:	ab14      	add	r3, sp, #80	; 0x50
 8020742:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8020746:	e88d 0003 	stmia.w	sp, {r0, r1}
 802074a:	4620      	mov	r0, r4
 802074c:	cb0e      	ldmia	r3, {r1, r2, r3}
 802074e:	f7fe fe2f 	bl	801f3b0 <rcutils_strdup>
 8020752:	2800      	cmp	r0, #0
 8020754:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020756:	bf08      	it	eq
 8020758:	250a      	moveq	r5, #10
 802075a:	6018      	str	r0, [r3, #0]
 802075c:	4628      	mov	r0, r5
 802075e:	b00b      	add	sp, #44	; 0x2c
 8020760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020764:	250b      	movs	r5, #11
 8020766:	4628      	mov	r0, r5
 8020768:	b00b      	add	sp, #44	; 0x2c
 802076a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802076e:	f7fd fcd7 	bl	801e120 <rcl_convert_rmw_ret_to_rcl_ret>
 8020772:	4605      	mov	r5, r0
 8020774:	e7f2      	b.n	802075c <rcl_expand_topic_name+0x98>
 8020776:	2567      	movs	r5, #103	; 0x67
 8020778:	4628      	mov	r0, r5
 802077a:	b00b      	add	sp, #44	; 0x2c
 802077c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020780:	25c9      	movs	r5, #201	; 0xc9
 8020782:	e7eb      	b.n	802075c <rcl_expand_topic_name+0x98>
 8020784:	2b7e      	cmp	r3, #126	; 0x7e
 8020786:	d073      	beq.n	8020870 <rcl_expand_topic_name+0x1ac>
 8020788:	f1b9 0f00 	cmp.w	r9, #0
 802078c:	f000 80c4 	beq.w	8020918 <rcl_expand_topic_name+0x254>
 8020790:	2300      	movs	r3, #0
 8020792:	46a2      	mov	sl, r4
 8020794:	469b      	mov	fp, r3
 8020796:	9506      	str	r5, [sp, #24]
 8020798:	4655      	mov	r5, sl
 802079a:	9407      	str	r4, [sp, #28]
 802079c:	464c      	mov	r4, r9
 802079e:	2c00      	cmp	r4, #0
 80207a0:	f000 80b4 	beq.w	802090c <rcl_expand_topic_name+0x248>
 80207a4:	217d      	movs	r1, #125	; 0x7d
 80207a6:	4628      	mov	r0, r5
 80207a8:	f001 fcc7 	bl	802213a <strchr>
 80207ac:	4681      	mov	r9, r0
 80207ae:	4621      	mov	r1, r4
 80207b0:	486b      	ldr	r0, [pc, #428]	; (8020960 <rcl_expand_topic_name+0x29c>)
 80207b2:	eba9 0904 	sub.w	r9, r9, r4
 80207b6:	f109 0a01 	add.w	sl, r9, #1
 80207ba:	4652      	mov	r2, sl
 80207bc:	f001 fcd2 	bl	8022164 <strncmp>
 80207c0:	2800      	cmp	r0, #0
 80207c2:	d051      	beq.n	8020868 <rcl_expand_topic_name+0x1a4>
 80207c4:	4652      	mov	r2, sl
 80207c6:	4621      	mov	r1, r4
 80207c8:	4866      	ldr	r0, [pc, #408]	; (8020964 <rcl_expand_topic_name+0x2a0>)
 80207ca:	f001 fccb 	bl	8022164 <strncmp>
 80207ce:	b128      	cbz	r0, 80207dc <rcl_expand_topic_name+0x118>
 80207d0:	4652      	mov	r2, sl
 80207d2:	4621      	mov	r1, r4
 80207d4:	4864      	ldr	r0, [pc, #400]	; (8020968 <rcl_expand_topic_name+0x2a4>)
 80207d6:	f001 fcc5 	bl	8022164 <strncmp>
 80207da:	bb38      	cbnz	r0, 802082c <rcl_expand_topic_name+0x168>
 80207dc:	46b1      	mov	r9, r6
 80207de:	ab16      	add	r3, sp, #88	; 0x58
 80207e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80207e4:	ab14      	add	r3, sp, #80	; 0x50
 80207e6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80207ea:	4620      	mov	r0, r4
 80207ec:	4651      	mov	r1, sl
 80207ee:	cb0c      	ldmia	r3, {r2, r3}
 80207f0:	f7fe fe00 	bl	801f3f4 <rcutils_strndup>
 80207f4:	4604      	mov	r4, r0
 80207f6:	2800      	cmp	r0, #0
 80207f8:	f000 80a7 	beq.w	802094a <rcl_expand_topic_name+0x286>
 80207fc:	464a      	mov	r2, r9
 80207fe:	4628      	mov	r0, r5
 8020800:	ab14      	add	r3, sp, #80	; 0x50
 8020802:	4621      	mov	r1, r4
 8020804:	f7fe fcda 	bl	801f1bc <rcutils_repl_str>
 8020808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802080a:	4605      	mov	r5, r0
 802080c:	9918      	ldr	r1, [sp, #96]	; 0x60
 802080e:	4620      	mov	r0, r4
 8020810:	4798      	blx	r3
 8020812:	4658      	mov	r0, fp
 8020814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020816:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020818:	4798      	blx	r3
 802081a:	2d00      	cmp	r5, #0
 802081c:	d071      	beq.n	8020902 <rcl_expand_topic_name+0x23e>
 802081e:	217b      	movs	r1, #123	; 0x7b
 8020820:	4628      	mov	r0, r5
 8020822:	f001 fc8a 	bl	802213a <strchr>
 8020826:	46ab      	mov	fp, r5
 8020828:	4604      	mov	r4, r0
 802082a:	e7b8      	b.n	802079e <rcl_expand_topic_name+0xda>
 802082c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8020830:	1c61      	adds	r1, r4, #1
 8020832:	4640      	mov	r0, r8
 8020834:	f7fe fef6 	bl	801f624 <rcutils_string_map_getn>
 8020838:	4681      	mov	r9, r0
 802083a:	2800      	cmp	r0, #0
 802083c:	d1cf      	bne.n	80207de <rcl_expand_topic_name+0x11a>
 802083e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8020840:	aa16      	add	r2, sp, #88	; 0x58
 8020842:	ab14      	add	r3, sp, #80	; 0x50
 8020844:	2569      	movs	r5, #105	; 0x69
 8020846:	6008      	str	r0, [r1, #0]
 8020848:	ca07      	ldmia	r2, {r0, r1, r2}
 802084a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 802084e:	4651      	mov	r1, sl
 8020850:	4620      	mov	r0, r4
 8020852:	cb0c      	ldmia	r3, {r2, r3}
 8020854:	f7fe fdce 	bl	801f3f4 <rcutils_strndup>
 8020858:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802085a:	9918      	ldr	r1, [sp, #96]	; 0x60
 802085c:	4798      	blx	r3
 802085e:	4658      	mov	r0, fp
 8020860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020862:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020864:	4798      	blx	r3
 8020866:	e779      	b.n	802075c <rcl_expand_topic_name+0x98>
 8020868:	46b9      	mov	r9, r7
 802086a:	e7b8      	b.n	80207de <rcl_expand_topic_name+0x11a>
 802086c:	25ca      	movs	r5, #202	; 0xca
 802086e:	e775      	b.n	802075c <rcl_expand_topic_name+0x98>
 8020870:	4630      	mov	r0, r6
 8020872:	f7df fd27 	bl	80002c4 <strlen>
 8020876:	4a3d      	ldr	r2, [pc, #244]	; (802096c <rcl_expand_topic_name+0x2a8>)
 8020878:	1c63      	adds	r3, r4, #1
 802087a:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8020978 <rcl_expand_topic_name+0x2b4>
 802087e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8020882:	9704      	str	r7, [sp, #16]
 8020884:	2801      	cmp	r0, #1
 8020886:	bf0c      	ite	eq
 8020888:	4610      	moveq	r0, r2
 802088a:	4660      	movne	r0, ip
 802088c:	9305      	str	r3, [sp, #20]
 802088e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8020890:	ab14      	add	r3, sp, #80	; 0x50
 8020892:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8020896:	e9cd 2100 	strd	r2, r1, [sp]
 802089a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802089c:	f7fe fc3c 	bl	801f118 <rcutils_format_string_limit>
 80208a0:	4683      	mov	fp, r0
 80208a2:	b370      	cbz	r0, 8020902 <rcl_expand_topic_name+0x23e>
 80208a4:	f1b9 0f00 	cmp.w	r9, #0
 80208a8:	d005      	beq.n	80208b6 <rcl_expand_topic_name+0x1f2>
 80208aa:	217b      	movs	r1, #123	; 0x7b
 80208ac:	4682      	mov	sl, r0
 80208ae:	f001 fc44 	bl	802213a <strchr>
 80208b2:	4681      	mov	r9, r0
 80208b4:	e76f      	b.n	8020796 <rcl_expand_topic_name+0xd2>
 80208b6:	f89b 3000 	ldrb.w	r3, [fp]
 80208ba:	2b2f      	cmp	r3, #47	; 0x2f
 80208bc:	d01d      	beq.n	80208fa <rcl_expand_topic_name+0x236>
 80208be:	4630      	mov	r0, r6
 80208c0:	f7df fd00 	bl	80002c4 <strlen>
 80208c4:	4b2a      	ldr	r3, [pc, #168]	; (8020970 <rcl_expand_topic_name+0x2ac>)
 80208c6:	492b      	ldr	r1, [pc, #172]	; (8020974 <rcl_expand_topic_name+0x2b0>)
 80208c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80208cc:	f8cd b010 	str.w	fp, [sp, #16]
 80208d0:	2801      	cmp	r0, #1
 80208d2:	bf0c      	ite	eq
 80208d4:	4618      	moveq	r0, r3
 80208d6:	4608      	movne	r0, r1
 80208d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80208da:	e9cd 3200 	strd	r3, r2, [sp]
 80208de:	ab14      	add	r3, sp, #80	; 0x50
 80208e0:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80208e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80208e6:	f7fe fc17 	bl	801f118 <rcutils_format_string_limit>
 80208ea:	4604      	mov	r4, r0
 80208ec:	4658      	mov	r0, fp
 80208ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80208f0:	46a3      	mov	fp, r4
 80208f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80208f4:	4798      	blx	r3
 80208f6:	465b      	mov	r3, fp
 80208f8:	b11b      	cbz	r3, 8020902 <rcl_expand_topic_name+0x23e>
 80208fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80208fc:	f8c3 b000 	str.w	fp, [r3]
 8020900:	e72c      	b.n	802075c <rcl_expand_topic_name+0x98>
 8020902:	2300      	movs	r3, #0
 8020904:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020906:	250a      	movs	r5, #10
 8020908:	6013      	str	r3, [r2, #0]
 802090a:	e727      	b.n	802075c <rcl_expand_topic_name+0x98>
 802090c:	465b      	mov	r3, fp
 802090e:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8020912:	2b00      	cmp	r3, #0
 8020914:	d1cf      	bne.n	80208b6 <rcl_expand_topic_name+0x1f2>
 8020916:	7823      	ldrb	r3, [r4, #0]
 8020918:	2b2f      	cmp	r3, #47	; 0x2f
 802091a:	d01e      	beq.n	802095a <rcl_expand_topic_name+0x296>
 802091c:	4630      	mov	r0, r6
 802091e:	f7df fcd1 	bl	80002c4 <strlen>
 8020922:	4b13      	ldr	r3, [pc, #76]	; (8020970 <rcl_expand_topic_name+0x2ac>)
 8020924:	4913      	ldr	r1, [pc, #76]	; (8020974 <rcl_expand_topic_name+0x2b0>)
 8020926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802092a:	9404      	str	r4, [sp, #16]
 802092c:	2801      	cmp	r0, #1
 802092e:	bf0c      	ite	eq
 8020930:	4618      	moveq	r0, r3
 8020932:	4608      	movne	r0, r1
 8020934:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020936:	e9cd 3200 	strd	r3, r2, [sp]
 802093a:	ab14      	add	r3, sp, #80	; 0x50
 802093c:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8020940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020942:	f7fe fbe9 	bl	801f118 <rcutils_format_string_limit>
 8020946:	4683      	mov	fp, r0
 8020948:	e7d5      	b.n	80208f6 <rcl_expand_topic_name+0x232>
 802094a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802094c:	4658      	mov	r0, fp
 802094e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8020950:	250a      	movs	r5, #10
 8020952:	601c      	str	r4, [r3, #0]
 8020954:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020956:	4798      	blx	r3
 8020958:	e700      	b.n	802075c <rcl_expand_topic_name+0x98>
 802095a:	2300      	movs	r3, #0
 802095c:	469b      	mov	fp, r3
 802095e:	e7cc      	b.n	80208fa <rcl_expand_topic_name+0x236>
 8020960:	08026b44 	.word	0x08026b44
 8020964:	08026b4c 	.word	0x08026b4c
 8020968:	08026b54 	.word	0x08026b54
 802096c:	080263c0 	.word	0x080263c0
 8020970:	080263d0 	.word	0x080263d0
 8020974:	080266cc 	.word	0x080266cc
 8020978:	08026b3c 	.word	0x08026b3c

0802097c <rcl_get_default_topic_name_substitutions>:
 802097c:	2800      	cmp	r0, #0
 802097e:	bf0c      	ite	eq
 8020980:	200b      	moveq	r0, #11
 8020982:	2000      	movne	r0, #0
 8020984:	4770      	bx	lr
 8020986:	bf00      	nop

08020988 <rcl_get_zero_initialized_guard_condition>:
 8020988:	4a03      	ldr	r2, [pc, #12]	; (8020998 <rcl_get_zero_initialized_guard_condition+0x10>)
 802098a:	4603      	mov	r3, r0
 802098c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020990:	e883 0003 	stmia.w	r3, {r0, r1}
 8020994:	4618      	mov	r0, r3
 8020996:	4770      	bx	lr
 8020998:	08026b60 	.word	0x08026b60

0802099c <rcl_guard_condition_init_from_rmw>:
 802099c:	b082      	sub	sp, #8
 802099e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80209a2:	b086      	sub	sp, #24
 80209a4:	4606      	mov	r6, r0
 80209a6:	4688      	mov	r8, r1
 80209a8:	4617      	mov	r7, r2
 80209aa:	ac0c      	add	r4, sp, #48	; 0x30
 80209ac:	ad01      	add	r5, sp, #4
 80209ae:	f844 3f04 	str.w	r3, [r4, #4]!
 80209b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80209b4:	6824      	ldr	r4, [r4, #0]
 80209b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80209b8:	a801      	add	r0, sp, #4
 80209ba:	602c      	str	r4, [r5, #0]
 80209bc:	f7f6 fa4a 	bl	8016e54 <rcutils_allocator_is_valid>
 80209c0:	f080 0001 	eor.w	r0, r0, #1
 80209c4:	f010 0fff 	tst.w	r0, #255	; 0xff
 80209c8:	d123      	bne.n	8020a12 <rcl_guard_condition_init_from_rmw+0x76>
 80209ca:	b316      	cbz	r6, 8020a12 <rcl_guard_condition_init_from_rmw+0x76>
 80209cc:	6874      	ldr	r4, [r6, #4]
 80209ce:	b9cc      	cbnz	r4, 8020a04 <rcl_guard_condition_init_from_rmw+0x68>
 80209d0:	b1ff      	cbz	r7, 8020a12 <rcl_guard_condition_init_from_rmw+0x76>
 80209d2:	4638      	mov	r0, r7
 80209d4:	f7fd fbc8 	bl	801e168 <rcl_context_is_valid>
 80209d8:	b1e8      	cbz	r0, 8020a16 <rcl_guard_condition_init_from_rmw+0x7a>
 80209da:	9b01      	ldr	r3, [sp, #4]
 80209dc:	201c      	movs	r0, #28
 80209de:	9905      	ldr	r1, [sp, #20]
 80209e0:	4798      	blx	r3
 80209e2:	4605      	mov	r5, r0
 80209e4:	6070      	str	r0, [r6, #4]
 80209e6:	b318      	cbz	r0, 8020a30 <rcl_guard_condition_init_from_rmw+0x94>
 80209e8:	f1b8 0f00 	cmp.w	r8, #0
 80209ec:	d015      	beq.n	8020a1a <rcl_guard_condition_init_from_rmw+0x7e>
 80209ee:	f8c0 8000 	str.w	r8, [r0]
 80209f2:	7104      	strb	r4, [r0, #4]
 80209f4:	ac01      	add	r4, sp, #4
 80209f6:	3508      	adds	r5, #8
 80209f8:	2600      	movs	r6, #0
 80209fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80209fc:	6824      	ldr	r4, [r4, #0]
 80209fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020a00:	602c      	str	r4, [r5, #0]
 8020a02:	e000      	b.n	8020a06 <rcl_guard_condition_init_from_rmw+0x6a>
 8020a04:	2664      	movs	r6, #100	; 0x64
 8020a06:	4630      	mov	r0, r6
 8020a08:	b006      	add	sp, #24
 8020a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020a0e:	b002      	add	sp, #8
 8020a10:	4770      	bx	lr
 8020a12:	260b      	movs	r6, #11
 8020a14:	e7f7      	b.n	8020a06 <rcl_guard_condition_init_from_rmw+0x6a>
 8020a16:	2665      	movs	r6, #101	; 0x65
 8020a18:	e7f5      	b.n	8020a06 <rcl_guard_condition_init_from_rmw+0x6a>
 8020a1a:	6838      	ldr	r0, [r7, #0]
 8020a1c:	3028      	adds	r0, #40	; 0x28
 8020a1e:	f000 f917 	bl	8020c50 <rmw_create_guard_condition>
 8020a22:	6028      	str	r0, [r5, #0]
 8020a24:	6875      	ldr	r5, [r6, #4]
 8020a26:	682c      	ldr	r4, [r5, #0]
 8020a28:	b124      	cbz	r4, 8020a34 <rcl_guard_condition_init_from_rmw+0x98>
 8020a2a:	2301      	movs	r3, #1
 8020a2c:	712b      	strb	r3, [r5, #4]
 8020a2e:	e7e1      	b.n	80209f4 <rcl_guard_condition_init_from_rmw+0x58>
 8020a30:	260a      	movs	r6, #10
 8020a32:	e7e8      	b.n	8020a06 <rcl_guard_condition_init_from_rmw+0x6a>
 8020a34:	4628      	mov	r0, r5
 8020a36:	9b02      	ldr	r3, [sp, #8]
 8020a38:	9905      	ldr	r1, [sp, #20]
 8020a3a:	4798      	blx	r3
 8020a3c:	6074      	str	r4, [r6, #4]
 8020a3e:	2601      	movs	r6, #1
 8020a40:	e7e1      	b.n	8020a06 <rcl_guard_condition_init_from_rmw+0x6a>
 8020a42:	bf00      	nop

08020a44 <rcl_guard_condition_fini>:
 8020a44:	b570      	push	{r4, r5, r6, lr}
 8020a46:	b082      	sub	sp, #8
 8020a48:	b1f0      	cbz	r0, 8020a88 <rcl_guard_condition_fini+0x44>
 8020a4a:	6843      	ldr	r3, [r0, #4]
 8020a4c:	4604      	mov	r4, r0
 8020a4e:	b163      	cbz	r3, 8020a6a <rcl_guard_condition_fini+0x26>
 8020a50:	6818      	ldr	r0, [r3, #0]
 8020a52:	68de      	ldr	r6, [r3, #12]
 8020a54:	6999      	ldr	r1, [r3, #24]
 8020a56:	b160      	cbz	r0, 8020a72 <rcl_guard_condition_fini+0x2e>
 8020a58:	791d      	ldrb	r5, [r3, #4]
 8020a5a:	b965      	cbnz	r5, 8020a76 <rcl_guard_condition_fini+0x32>
 8020a5c:	4618      	mov	r0, r3
 8020a5e:	47b0      	blx	r6
 8020a60:	2300      	movs	r3, #0
 8020a62:	4628      	mov	r0, r5
 8020a64:	6063      	str	r3, [r4, #4]
 8020a66:	b002      	add	sp, #8
 8020a68:	bd70      	pop	{r4, r5, r6, pc}
 8020a6a:	461d      	mov	r5, r3
 8020a6c:	4628      	mov	r0, r5
 8020a6e:	b002      	add	sp, #8
 8020a70:	bd70      	pop	{r4, r5, r6, pc}
 8020a72:	4605      	mov	r5, r0
 8020a74:	e7f2      	b.n	8020a5c <rcl_guard_condition_fini+0x18>
 8020a76:	9101      	str	r1, [sp, #4]
 8020a78:	f000 f8fe 	bl	8020c78 <rmw_destroy_guard_condition>
 8020a7c:	1e05      	subs	r5, r0, #0
 8020a7e:	6863      	ldr	r3, [r4, #4]
 8020a80:	9901      	ldr	r1, [sp, #4]
 8020a82:	bf18      	it	ne
 8020a84:	2501      	movne	r5, #1
 8020a86:	e7e9      	b.n	8020a5c <rcl_guard_condition_fini+0x18>
 8020a88:	250b      	movs	r5, #11
 8020a8a:	4628      	mov	r0, r5
 8020a8c:	b002      	add	sp, #8
 8020a8e:	bd70      	pop	{r4, r5, r6, pc}

08020a90 <rcl_guard_condition_get_default_options>:
 8020a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a94:	b086      	sub	sp, #24
 8020a96:	4c09      	ldr	r4, [pc, #36]	; (8020abc <rcl_guard_condition_get_default_options+0x2c>)
 8020a98:	4680      	mov	r8, r0
 8020a9a:	466d      	mov	r5, sp
 8020a9c:	4668      	mov	r0, sp
 8020a9e:	f7f6 f9cb 	bl	8016e38 <rcutils_get_default_allocator>
 8020aa2:	4627      	mov	r7, r4
 8020aa4:	4646      	mov	r6, r8
 8020aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020aa8:	682d      	ldr	r5, [r5, #0]
 8020aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020aac:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8020aae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8020ab0:	4640      	mov	r0, r8
 8020ab2:	6025      	str	r5, [r4, #0]
 8020ab4:	6035      	str	r5, [r6, #0]
 8020ab6:	b006      	add	sp, #24
 8020ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020abc:	20044048 	.word	0x20044048

08020ac0 <rcl_validate_topic_name>:
 8020ac0:	2800      	cmp	r0, #0
 8020ac2:	f000 8083 	beq.w	8020bcc <rcl_validate_topic_name+0x10c>
 8020ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020aca:	460e      	mov	r6, r1
 8020acc:	2900      	cmp	r1, #0
 8020ace:	f000 8084 	beq.w	8020bda <rcl_validate_topic_name+0x11a>
 8020ad2:	4617      	mov	r7, r2
 8020ad4:	4605      	mov	r5, r0
 8020ad6:	f7df fbf5 	bl	80002c4 <strlen>
 8020ada:	b1b0      	cbz	r0, 8020b0a <rcl_validate_topic_name+0x4a>
 8020adc:	f895 8000 	ldrb.w	r8, [r5]
 8020ae0:	f8df c168 	ldr.w	ip, [pc, #360]	; 8020c4c <rcl_validate_topic_name+0x18c>
 8020ae4:	f81c 3008 	ldrb.w	r3, [ip, r8]
 8020ae8:	f013 0304 	ands.w	r3, r3, #4
 8020aec:	d170      	bne.n	8020bd0 <rcl_validate_topic_name+0x110>
 8020aee:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
 8020af2:	f815 2009 	ldrb.w	r2, [r5, r9]
 8020af6:	2a2f      	cmp	r2, #47	; 0x2f
 8020af8:	d10e      	bne.n	8020b18 <rcl_validate_topic_name+0x58>
 8020afa:	2202      	movs	r2, #2
 8020afc:	6032      	str	r2, [r6, #0]
 8020afe:	b36f      	cbz	r7, 8020b5c <rcl_validate_topic_name+0x9c>
 8020b00:	4618      	mov	r0, r3
 8020b02:	f8c7 9000 	str.w	r9, [r7]
 8020b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b0a:	2301      	movs	r3, #1
 8020b0c:	6033      	str	r3, [r6, #0]
 8020b0e:	b32f      	cbz	r7, 8020b5c <rcl_validate_topic_name+0x9c>
 8020b10:	2000      	movs	r0, #0
 8020b12:	6038      	str	r0, [r7, #0]
 8020b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b18:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8020b1c:	461c      	mov	r4, r3
 8020b1e:	4619      	mov	r1, r3
 8020b20:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8020b24:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8020b28:	f1be 0f09 	cmp.w	lr, #9
 8020b2c:	d919      	bls.n	8020b62 <rcl_validate_topic_name+0xa2>
 8020b2e:	f022 0e20 	bic.w	lr, r2, #32
 8020b32:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8020b36:	f1be 0f19 	cmp.w	lr, #25
 8020b3a:	d912      	bls.n	8020b62 <rcl_validate_topic_name+0xa2>
 8020b3c:	2a5f      	cmp	r2, #95	; 0x5f
 8020b3e:	d01d      	beq.n	8020b7c <rcl_validate_topic_name+0xbc>
 8020b40:	2a2f      	cmp	r2, #47	; 0x2f
 8020b42:	d058      	beq.n	8020bf6 <rcl_validate_topic_name+0x136>
 8020b44:	2a7e      	cmp	r2, #126	; 0x7e
 8020b46:	d04a      	beq.n	8020bde <rcl_validate_topic_name+0x11e>
 8020b48:	2a7b      	cmp	r2, #123	; 0x7b
 8020b4a:	d05f      	beq.n	8020c0c <rcl_validate_topic_name+0x14c>
 8020b4c:	2a7d      	cmp	r2, #125	; 0x7d
 8020b4e:	d16c      	bne.n	8020c2a <rcl_validate_topic_name+0x16a>
 8020b50:	2c00      	cmp	r4, #0
 8020b52:	d160      	bne.n	8020c16 <rcl_validate_topic_name+0x156>
 8020b54:	2305      	movs	r3, #5
 8020b56:	6033      	str	r3, [r6, #0]
 8020b58:	b107      	cbz	r7, 8020b5c <rcl_validate_topic_name+0x9c>
 8020b5a:	6039      	str	r1, [r7, #0]
 8020b5c:	2000      	movs	r0, #0
 8020b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b62:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8020b66:	0752      	lsls	r2, r2, #29
 8020b68:	d508      	bpl.n	8020b7c <rcl_validate_topic_name+0xbc>
 8020b6a:	2900      	cmp	r1, #0
 8020b6c:	bf14      	ite	ne
 8020b6e:	4622      	movne	r2, r4
 8020b70:	2200      	moveq	r2, #0
 8020b72:	b11a      	cbz	r2, 8020b7c <rcl_validate_topic_name+0xbc>
 8020b74:	1e4c      	subs	r4, r1, #1
 8020b76:	429c      	cmp	r4, r3
 8020b78:	d038      	beq.n	8020bec <rcl_validate_topic_name+0x12c>
 8020b7a:	4614      	mov	r4, r2
 8020b7c:	3101      	adds	r1, #1
 8020b7e:	4288      	cmp	r0, r1
 8020b80:	d1ce      	bne.n	8020b20 <rcl_validate_topic_name+0x60>
 8020b82:	2c00      	cmp	r4, #0
 8020b84:	d14c      	bne.n	8020c20 <rcl_validate_topic_name+0x160>
 8020b86:	4620      	mov	r0, r4
 8020b88:	f109 0e01 	add.w	lr, r9, #1
 8020b8c:	e009      	b.n	8020ba2 <rcl_validate_topic_name+0xe2>
 8020b8e:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 8020b92:	d101      	bne.n	8020b98 <rcl_validate_topic_name+0xd8>
 8020b94:	2801      	cmp	r0, #1
 8020b96:	d050      	beq.n	8020c3a <rcl_validate_topic_name+0x17a>
 8020b98:	428a      	cmp	r2, r1
 8020b9a:	f105 0501 	add.w	r5, r5, #1
 8020b9e:	4618      	mov	r0, r3
 8020ba0:	d23b      	bcs.n	8020c1a <rcl_validate_topic_name+0x15a>
 8020ba2:	4581      	cmp	r9, r0
 8020ba4:	f100 0301 	add.w	r3, r0, #1
 8020ba8:	d02c      	beq.n	8020c04 <rcl_validate_topic_name+0x144>
 8020baa:	782c      	ldrb	r4, [r5, #0]
 8020bac:	461a      	mov	r2, r3
 8020bae:	2c2f      	cmp	r4, #47	; 0x2f
 8020bb0:	d1ed      	bne.n	8020b8e <rcl_validate_topic_name+0xce>
 8020bb2:	786a      	ldrb	r2, [r5, #1]
 8020bb4:	f81c 0002 	ldrb.w	r0, [ip, r2]
 8020bb8:	461a      	mov	r2, r3
 8020bba:	0740      	lsls	r0, r0, #29
 8020bbc:	d5ec      	bpl.n	8020b98 <rcl_validate_topic_name+0xd8>
 8020bbe:	2204      	movs	r2, #4
 8020bc0:	6032      	str	r2, [r6, #0]
 8020bc2:	2f00      	cmp	r7, #0
 8020bc4:	d0ca      	beq.n	8020b5c <rcl_validate_topic_name+0x9c>
 8020bc6:	2000      	movs	r0, #0
 8020bc8:	603b      	str	r3, [r7, #0]
 8020bca:	e7a3      	b.n	8020b14 <rcl_validate_topic_name+0x54>
 8020bcc:	200b      	movs	r0, #11
 8020bce:	4770      	bx	lr
 8020bd0:	2304      	movs	r3, #4
 8020bd2:	6033      	str	r3, [r6, #0]
 8020bd4:	2f00      	cmp	r7, #0
 8020bd6:	d19b      	bne.n	8020b10 <rcl_validate_topic_name+0x50>
 8020bd8:	e7c0      	b.n	8020b5c <rcl_validate_topic_name+0x9c>
 8020bda:	200b      	movs	r0, #11
 8020bdc:	e79a      	b.n	8020b14 <rcl_validate_topic_name+0x54>
 8020bde:	2900      	cmp	r1, #0
 8020be0:	d0cc      	beq.n	8020b7c <rcl_validate_topic_name+0xbc>
 8020be2:	2306      	movs	r3, #6
 8020be4:	6033      	str	r3, [r6, #0]
 8020be6:	2f00      	cmp	r7, #0
 8020be8:	d1b7      	bne.n	8020b5a <rcl_validate_topic_name+0x9a>
 8020bea:	e7b7      	b.n	8020b5c <rcl_validate_topic_name+0x9c>
 8020bec:	2309      	movs	r3, #9
 8020bee:	6033      	str	r3, [r6, #0]
 8020bf0:	2f00      	cmp	r7, #0
 8020bf2:	d1b2      	bne.n	8020b5a <rcl_validate_topic_name+0x9a>
 8020bf4:	e7b2      	b.n	8020b5c <rcl_validate_topic_name+0x9c>
 8020bf6:	2c00      	cmp	r4, #0
 8020bf8:	d0c0      	beq.n	8020b7c <rcl_validate_topic_name+0xbc>
 8020bfa:	2308      	movs	r3, #8
 8020bfc:	6033      	str	r3, [r6, #0]
 8020bfe:	2f00      	cmp	r7, #0
 8020c00:	d1ab      	bne.n	8020b5a <rcl_validate_topic_name+0x9a>
 8020c02:	e7ab      	b.n	8020b5c <rcl_validate_topic_name+0x9c>
 8020c04:	4672      	mov	r2, lr
 8020c06:	f109 0301 	add.w	r3, r9, #1
 8020c0a:	e7c5      	b.n	8020b98 <rcl_validate_topic_name+0xd8>
 8020c0c:	2c00      	cmp	r4, #0
 8020c0e:	d1f4      	bne.n	8020bfa <rcl_validate_topic_name+0x13a>
 8020c10:	460b      	mov	r3, r1
 8020c12:	2401      	movs	r4, #1
 8020c14:	e7b2      	b.n	8020b7c <rcl_validate_topic_name+0xbc>
 8020c16:	2400      	movs	r4, #0
 8020c18:	e7b0      	b.n	8020b7c <rcl_validate_topic_name+0xbc>
 8020c1a:	2000      	movs	r0, #0
 8020c1c:	6030      	str	r0, [r6, #0]
 8020c1e:	e779      	b.n	8020b14 <rcl_validate_topic_name+0x54>
 8020c20:	2205      	movs	r2, #5
 8020c22:	6032      	str	r2, [r6, #0]
 8020c24:	2f00      	cmp	r7, #0
 8020c26:	d1ce      	bne.n	8020bc6 <rcl_validate_topic_name+0x106>
 8020c28:	e798      	b.n	8020b5c <rcl_validate_topic_name+0x9c>
 8020c2a:	2c00      	cmp	r4, #0
 8020c2c:	bf14      	ite	ne
 8020c2e:	2308      	movne	r3, #8
 8020c30:	2303      	moveq	r3, #3
 8020c32:	6033      	str	r3, [r6, #0]
 8020c34:	2f00      	cmp	r7, #0
 8020c36:	d190      	bne.n	8020b5a <rcl_validate_topic_name+0x9a>
 8020c38:	e790      	b.n	8020b5c <rcl_validate_topic_name+0x9c>
 8020c3a:	2307      	movs	r3, #7
 8020c3c:	6033      	str	r3, [r6, #0]
 8020c3e:	2f00      	cmp	r7, #0
 8020c40:	d08c      	beq.n	8020b5c <rcl_validate_topic_name+0x9c>
 8020c42:	2301      	movs	r3, #1
 8020c44:	2000      	movs	r0, #0
 8020c46:	603b      	str	r3, [r7, #0]
 8020c48:	e764      	b.n	8020b14 <rcl_validate_topic_name+0x54>
 8020c4a:	bf00      	nop
 8020c4c:	08026cc5 	.word	0x08026cc5

08020c50 <rmw_create_guard_condition>:
 8020c50:	b538      	push	{r3, r4, r5, lr}
 8020c52:	4605      	mov	r5, r0
 8020c54:	200c      	movs	r0, #12
 8020c56:	f7fe fd6b 	bl	801f730 <rmw_allocate>
 8020c5a:	4604      	mov	r4, r0
 8020c5c:	6085      	str	r5, [r0, #8]
 8020c5e:	f7fe ff47 	bl	801faf0 <rmw_get_implementation_identifier>
 8020c62:	4603      	mov	r3, r0
 8020c64:	2001      	movs	r0, #1
 8020c66:	6023      	str	r3, [r4, #0]
 8020c68:	f7fe fd62 	bl	801f730 <rmw_allocate>
 8020c6c:	2200      	movs	r2, #0
 8020c6e:	4603      	mov	r3, r0
 8020c70:	4620      	mov	r0, r4
 8020c72:	6063      	str	r3, [r4, #4]
 8020c74:	701a      	strb	r2, [r3, #0]
 8020c76:	bd38      	pop	{r3, r4, r5, pc}

08020c78 <rmw_destroy_guard_condition>:
 8020c78:	b508      	push	{r3, lr}
 8020c7a:	f7fe fd6d 	bl	801f758 <rmw_free>
 8020c7e:	2000      	movs	r0, #0
 8020c80:	bd08      	pop	{r3, pc}
 8020c82:	bf00      	nop

08020c84 <_ZdlPv>:
 8020c84:	f000 bee4 	b.w	8021a50 <free>

08020c88 <_ZdlPvj>:
 8020c88:	f7ff bffc 	b.w	8020c84 <_ZdlPv>

08020c8c <__cxa_end_cleanup>:
 8020c8c:	b41e      	push	{r1, r2, r3, r4}
 8020c8e:	f000 f89c 	bl	8020dca <__gnu_end_cleanup>
 8020c92:	bc1e      	pop	{r1, r2, r3, r4}
 8020c94:	f7e0 fd6e 	bl	8001774 <_Unwind_Resume>

08020c98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8020c98:	7803      	ldrb	r3, [r0, #0]
 8020c9a:	2b47      	cmp	r3, #71	; 0x47
 8020c9c:	d117      	bne.n	8020cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8020c9e:	7843      	ldrb	r3, [r0, #1]
 8020ca0:	2b4e      	cmp	r3, #78	; 0x4e
 8020ca2:	d114      	bne.n	8020cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8020ca4:	7883      	ldrb	r3, [r0, #2]
 8020ca6:	2b55      	cmp	r3, #85	; 0x55
 8020ca8:	d111      	bne.n	8020cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8020caa:	78c3      	ldrb	r3, [r0, #3]
 8020cac:	2b43      	cmp	r3, #67	; 0x43
 8020cae:	d10e      	bne.n	8020cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8020cb0:	7903      	ldrb	r3, [r0, #4]
 8020cb2:	2b43      	cmp	r3, #67	; 0x43
 8020cb4:	d10b      	bne.n	8020cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8020cb6:	7943      	ldrb	r3, [r0, #5]
 8020cb8:	2b2b      	cmp	r3, #43	; 0x2b
 8020cba:	d108      	bne.n	8020cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8020cbc:	7983      	ldrb	r3, [r0, #6]
 8020cbe:	2b2b      	cmp	r3, #43	; 0x2b
 8020cc0:	d105      	bne.n	8020cce <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8020cc2:	79c0      	ldrb	r0, [r0, #7]
 8020cc4:	2801      	cmp	r0, #1
 8020cc6:	bf8c      	ite	hi
 8020cc8:	2000      	movhi	r0, #0
 8020cca:	2001      	movls	r0, #1
 8020ccc:	4770      	bx	lr
 8020cce:	2000      	movs	r0, #0
 8020cd0:	4770      	bx	lr
	...

08020cd4 <__cxa_type_match>:
 8020cd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020cd8:	461d      	mov	r5, r3
 8020cda:	7803      	ldrb	r3, [r0, #0]
 8020cdc:	2b47      	cmp	r3, #71	; 0x47
 8020cde:	460e      	mov	r6, r1
 8020ce0:	4602      	mov	r2, r0
 8020ce2:	79c1      	ldrb	r1, [r0, #7]
 8020ce4:	d113      	bne.n	8020d0e <__cxa_type_match+0x3a>
 8020ce6:	7843      	ldrb	r3, [r0, #1]
 8020ce8:	2b4e      	cmp	r3, #78	; 0x4e
 8020cea:	d110      	bne.n	8020d0e <__cxa_type_match+0x3a>
 8020cec:	7883      	ldrb	r3, [r0, #2]
 8020cee:	2b55      	cmp	r3, #85	; 0x55
 8020cf0:	d10d      	bne.n	8020d0e <__cxa_type_match+0x3a>
 8020cf2:	78c3      	ldrb	r3, [r0, #3]
 8020cf4:	2b43      	cmp	r3, #67	; 0x43
 8020cf6:	d10a      	bne.n	8020d0e <__cxa_type_match+0x3a>
 8020cf8:	7903      	ldrb	r3, [r0, #4]
 8020cfa:	2b46      	cmp	r3, #70	; 0x46
 8020cfc:	d107      	bne.n	8020d0e <__cxa_type_match+0x3a>
 8020cfe:	7943      	ldrb	r3, [r0, #5]
 8020d00:	2b4f      	cmp	r3, #79	; 0x4f
 8020d02:	d104      	bne.n	8020d0e <__cxa_type_match+0x3a>
 8020d04:	7983      	ldrb	r3, [r0, #6]
 8020d06:	2b52      	cmp	r3, #82	; 0x52
 8020d08:	d101      	bne.n	8020d0e <__cxa_type_match+0x3a>
 8020d0a:	2900      	cmp	r1, #0
 8020d0c:	d031      	beq.n	8020d72 <__cxa_type_match+0x9e>
 8020d0e:	4610      	mov	r0, r2
 8020d10:	f7ff ffc2 	bl	8020c98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8020d14:	f080 0001 	eor.w	r0, r0, #1
 8020d18:	b2c4      	uxtb	r4, r0
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	2000      	movs	r0, #0
 8020d1e:	9001      	str	r0, [sp, #4]
 8020d20:	bb53      	cbnz	r3, 8020d78 <__cxa_type_match+0xa4>
 8020d22:	bb5c      	cbnz	r4, 8020d7c <__cxa_type_match+0xa8>
 8020d24:	2901      	cmp	r1, #1
 8020d26:	bf0a      	itet	eq
 8020d28:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8020d2c:	f1a2 0320 	subne.w	r3, r2, #32
 8020d30:	3b78      	subeq	r3, #120	; 0x78
 8020d32:	2901      	cmp	r1, #1
 8020d34:	bf08      	it	eq
 8020d36:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8020d3a:	681c      	ldr	r4, [r3, #0]
 8020d3c:	bf18      	it	ne
 8020d3e:	3258      	addne	r2, #88	; 0x58
 8020d40:	9201      	str	r2, [sp, #4]
 8020d42:	6823      	ldr	r3, [r4, #0]
 8020d44:	4620      	mov	r0, r4
 8020d46:	689b      	ldr	r3, [r3, #8]
 8020d48:	4798      	blx	r3
 8020d4a:	b1c8      	cbz	r0, 8020d80 <__cxa_type_match+0xac>
 8020d4c:	9b01      	ldr	r3, [sp, #4]
 8020d4e:	681b      	ldr	r3, [r3, #0]
 8020d50:	9301      	str	r3, [sp, #4]
 8020d52:	2702      	movs	r7, #2
 8020d54:	6833      	ldr	r3, [r6, #0]
 8020d56:	aa01      	add	r2, sp, #4
 8020d58:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8020d5c:	4621      	mov	r1, r4
 8020d5e:	2301      	movs	r3, #1
 8020d60:	4630      	mov	r0, r6
 8020d62:	47c0      	blx	r8
 8020d64:	b170      	cbz	r0, 8020d84 <__cxa_type_match+0xb0>
 8020d66:	9b01      	ldr	r3, [sp, #4]
 8020d68:	602b      	str	r3, [r5, #0]
 8020d6a:	4638      	mov	r0, r7
 8020d6c:	b002      	add	sp, #8
 8020d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d72:	2301      	movs	r3, #1
 8020d74:	460c      	mov	r4, r1
 8020d76:	e7d1      	b.n	8020d1c <__cxa_type_match+0x48>
 8020d78:	4c03      	ldr	r4, [pc, #12]	; (8020d88 <__cxa_type_match+0xb4>)
 8020d7a:	e7e2      	b.n	8020d42 <__cxa_type_match+0x6e>
 8020d7c:	4c03      	ldr	r4, [pc, #12]	; (8020d8c <__cxa_type_match+0xb8>)
 8020d7e:	e7e0      	b.n	8020d42 <__cxa_type_match+0x6e>
 8020d80:	2701      	movs	r7, #1
 8020d82:	e7e7      	b.n	8020d54 <__cxa_type_match+0x80>
 8020d84:	4607      	mov	r7, r0
 8020d86:	e7f0      	b.n	8020d6a <__cxa_type_match+0x96>
 8020d88:	08026b84 	.word	0x08026b84
 8020d8c:	08026b8c 	.word	0x08026b8c

08020d90 <__cxa_begin_cleanup>:
 8020d90:	b510      	push	{r4, lr}
 8020d92:	4604      	mov	r4, r0
 8020d94:	f000 f832 	bl	8020dfc <__cxa_get_globals>
 8020d98:	4602      	mov	r2, r0
 8020d9a:	4620      	mov	r0, r4
 8020d9c:	f1a4 0120 	sub.w	r1, r4, #32
 8020da0:	f7ff ff7a 	bl	8020c98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8020da4:	b160      	cbz	r0, 8020dc0 <__cxa_begin_cleanup+0x30>
 8020da6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020daa:	3301      	adds	r3, #1
 8020dac:	2b01      	cmp	r3, #1
 8020dae:	f844 3c04 	str.w	r3, [r4, #-4]
 8020db2:	d103      	bne.n	8020dbc <__cxa_begin_cleanup+0x2c>
 8020db4:	6893      	ldr	r3, [r2, #8]
 8020db6:	f844 3c08 	str.w	r3, [r4, #-8]
 8020dba:	6091      	str	r1, [r2, #8]
 8020dbc:	2001      	movs	r0, #1
 8020dbe:	bd10      	pop	{r4, pc}
 8020dc0:	6893      	ldr	r3, [r2, #8]
 8020dc2:	2b00      	cmp	r3, #0
 8020dc4:	d0f9      	beq.n	8020dba <__cxa_begin_cleanup+0x2a>
 8020dc6:	f000 faa5 	bl	8021314 <_ZSt9terminatev>

08020dca <__gnu_end_cleanup>:
 8020dca:	b510      	push	{r4, lr}
 8020dcc:	f000 f816 	bl	8020dfc <__cxa_get_globals>
 8020dd0:	6882      	ldr	r2, [r0, #8]
 8020dd2:	4601      	mov	r1, r0
 8020dd4:	b90a      	cbnz	r2, 8020dda <__gnu_end_cleanup+0x10>
 8020dd6:	f000 fa9d 	bl	8021314 <_ZSt9terminatev>
 8020dda:	f102 0420 	add.w	r4, r2, #32
 8020dde:	4620      	mov	r0, r4
 8020de0:	f7ff ff5a 	bl	8020c98 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8020de4:	b140      	cbz	r0, 8020df8 <__gnu_end_cleanup+0x2e>
 8020de6:	69d3      	ldr	r3, [r2, #28]
 8020de8:	3b01      	subs	r3, #1
 8020dea:	61d3      	str	r3, [r2, #28]
 8020dec:	b913      	cbnz	r3, 8020df4 <__gnu_end_cleanup+0x2a>
 8020dee:	6990      	ldr	r0, [r2, #24]
 8020df0:	6088      	str	r0, [r1, #8]
 8020df2:	6193      	str	r3, [r2, #24]
 8020df4:	4620      	mov	r0, r4
 8020df6:	bd10      	pop	{r4, pc}
 8020df8:	6088      	str	r0, [r1, #8]
 8020dfa:	e7fb      	b.n	8020df4 <__gnu_end_cleanup+0x2a>

08020dfc <__cxa_get_globals>:
 8020dfc:	4800      	ldr	r0, [pc, #0]	; (8020e00 <__cxa_get_globals+0x4>)
 8020dfe:	4770      	bx	lr
 8020e00:	2004405c 	.word	0x2004405c

08020e04 <_ZL12read_uleb128PKhPm>:
 8020e04:	b530      	push	{r4, r5, lr}
 8020e06:	2300      	movs	r3, #0
 8020e08:	461a      	mov	r2, r3
 8020e0a:	f810 5b01 	ldrb.w	r5, [r0], #1
 8020e0e:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 8020e12:	4094      	lsls	r4, r2
 8020e14:	4323      	orrs	r3, r4
 8020e16:	062c      	lsls	r4, r5, #24
 8020e18:	f102 0207 	add.w	r2, r2, #7
 8020e1c:	d4f5      	bmi.n	8020e0a <_ZL12read_uleb128PKhPm+0x6>
 8020e1e:	600b      	str	r3, [r1, #0]
 8020e20:	bd30      	pop	{r4, r5, pc}

08020e22 <_ZL12read_sleb128PKhPl>:
 8020e22:	b530      	push	{r4, r5, lr}
 8020e24:	2300      	movs	r3, #0
 8020e26:	461a      	mov	r2, r3
 8020e28:	f810 4b01 	ldrb.w	r4, [r0], #1
 8020e2c:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8020e30:	4095      	lsls	r5, r2
 8020e32:	432b      	orrs	r3, r5
 8020e34:	0625      	lsls	r5, r4, #24
 8020e36:	f102 0207 	add.w	r2, r2, #7
 8020e3a:	d4f5      	bmi.n	8020e28 <_ZL12read_sleb128PKhPl+0x6>
 8020e3c:	2a1f      	cmp	r2, #31
 8020e3e:	d806      	bhi.n	8020e4e <_ZL12read_sleb128PKhPl+0x2c>
 8020e40:	0664      	lsls	r4, r4, #25
 8020e42:	bf42      	ittt	mi
 8020e44:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 8020e48:	fa04 f202 	lslmi.w	r2, r4, r2
 8020e4c:	4313      	orrmi	r3, r2
 8020e4e:	600b      	str	r3, [r1, #0]
 8020e50:	bd30      	pop	{r4, r5, pc}

08020e52 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8020e52:	2850      	cmp	r0, #80	; 0x50
 8020e54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020e58:	4606      	mov	r6, r0
 8020e5a:	4688      	mov	r8, r1
 8020e5c:	4615      	mov	r5, r2
 8020e5e:	461f      	mov	r7, r3
 8020e60:	d108      	bne.n	8020e74 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8020e62:	3203      	adds	r2, #3
 8020e64:	f022 0003 	bic.w	r0, r2, #3
 8020e68:	f850 4b04 	ldr.w	r4, [r0], #4
 8020e6c:	603c      	str	r4, [r7, #0]
 8020e6e:	b002      	add	sp, #8
 8020e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020e74:	f000 030f 	and.w	r3, r0, #15
 8020e78:	2b0c      	cmp	r3, #12
 8020e7a:	d82e      	bhi.n	8020eda <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8020e7c:	e8df f003 	tbb	[pc, r3]
 8020e80:	251d0725 	.word	0x251d0725
 8020e84:	2d2d2d29 	.word	0x2d2d2d29
 8020e88:	2521182d 	.word	0x2521182d
 8020e8c:	29          	.byte	0x29
 8020e8d:	00          	.byte	0x00
 8020e8e:	a901      	add	r1, sp, #4
 8020e90:	4628      	mov	r0, r5
 8020e92:	f7ff ffb7 	bl	8020e04 <_ZL12read_uleb128PKhPm>
 8020e96:	9c01      	ldr	r4, [sp, #4]
 8020e98:	2c00      	cmp	r4, #0
 8020e9a:	d0e7      	beq.n	8020e6c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8020e9c:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8020ea0:	2b10      	cmp	r3, #16
 8020ea2:	bf08      	it	eq
 8020ea4:	46a8      	moveq	r8, r5
 8020ea6:	4444      	add	r4, r8
 8020ea8:	0633      	lsls	r3, r6, #24
 8020eaa:	bf48      	it	mi
 8020eac:	6824      	ldrmi	r4, [r4, #0]
 8020eae:	e7dd      	b.n	8020e6c <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8020eb0:	a901      	add	r1, sp, #4
 8020eb2:	4628      	mov	r0, r5
 8020eb4:	f7ff ffb5 	bl	8020e22 <_ZL12read_sleb128PKhPl>
 8020eb8:	e7ed      	b.n	8020e96 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8020eba:	4628      	mov	r0, r5
 8020ebc:	f830 4b02 	ldrh.w	r4, [r0], #2
 8020ec0:	e7ea      	b.n	8020e98 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8020ec2:	4628      	mov	r0, r5
 8020ec4:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8020ec8:	e7e6      	b.n	8020e98 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8020eca:	4628      	mov	r0, r5
 8020ecc:	f850 4b04 	ldr.w	r4, [r0], #4
 8020ed0:	e7e2      	b.n	8020e98 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8020ed2:	4628      	mov	r0, r5
 8020ed4:	f850 4b08 	ldr.w	r4, [r0], #8
 8020ed8:	e7de      	b.n	8020e98 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8020eda:	f000 fc3b 	bl	8021754 <abort>

08020ede <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8020ede:	b508      	push	{r3, lr}
 8020ee0:	4603      	mov	r3, r0
 8020ee2:	2bff      	cmp	r3, #255	; 0xff
 8020ee4:	4608      	mov	r0, r1
 8020ee6:	d010      	beq.n	8020f0a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8020ee8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8020eec:	2a30      	cmp	r2, #48	; 0x30
 8020eee:	d012      	beq.n	8020f16 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8020ef0:	d807      	bhi.n	8020f02 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8020ef2:	2a20      	cmp	r2, #32
 8020ef4:	d00b      	beq.n	8020f0e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8020ef6:	d802      	bhi.n	8020efe <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8020ef8:	f013 0f60 	tst.w	r3, #96	; 0x60
 8020efc:	d005      	beq.n	8020f0a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8020efe:	f000 fc29 	bl	8021754 <abort>
 8020f02:	2a40      	cmp	r2, #64	; 0x40
 8020f04:	d00b      	beq.n	8020f1e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8020f06:	2a50      	cmp	r2, #80	; 0x50
 8020f08:	d1f9      	bne.n	8020efe <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8020f0a:	2000      	movs	r0, #0
 8020f0c:	bd08      	pop	{r3, pc}
 8020f0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8020f12:	f002 b922 	b.w	802315a <_Unwind_GetTextRelBase>
 8020f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8020f1a:	f002 b91b 	b.w	8023154 <_Unwind_GetDataRelBase>
 8020f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8020f22:	f7e0 be07 	b.w	8001b34 <_Unwind_GetRegionStart>

08020f26 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8020f26:	b513      	push	{r0, r1, r4, lr}
 8020f28:	460c      	mov	r4, r1
 8020f2a:	4601      	mov	r1, r0
 8020f2c:	4620      	mov	r0, r4
 8020f2e:	e9cd 3200 	strd	r3, r2, [sp]
 8020f32:	f7ff ffd4 	bl	8020ede <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8020f36:	e9dd 3200 	ldrd	r3, r2, [sp]
 8020f3a:	4601      	mov	r1, r0
 8020f3c:	4620      	mov	r0, r4
 8020f3e:	b002      	add	sp, #8
 8020f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020f44:	f7ff bf85 	b.w	8020e52 <_ZL28read_encoded_value_with_basehjPKhPj>

08020f48 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8020f48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020f4a:	460c      	mov	r4, r1
 8020f4c:	4615      	mov	r5, r2
 8020f4e:	4606      	mov	r6, r0
 8020f50:	b328      	cbz	r0, 8020f9e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8020f52:	f7e0 fdef 	bl	8001b34 <_Unwind_GetRegionStart>
 8020f56:	4603      	mov	r3, r0
 8020f58:	4620      	mov	r0, r4
 8020f5a:	602b      	str	r3, [r5, #0]
 8020f5c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8020f60:	29ff      	cmp	r1, #255	; 0xff
 8020f62:	d01e      	beq.n	8020fa2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8020f64:	4602      	mov	r2, r0
 8020f66:	1d2b      	adds	r3, r5, #4
 8020f68:	4630      	mov	r0, r6
 8020f6a:	f7ff ffdc 	bl	8020f26 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8020f6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020f72:	752b      	strb	r3, [r5, #20]
 8020f74:	2bff      	cmp	r3, #255	; 0xff
 8020f76:	d016      	beq.n	8020fa6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8020f78:	2310      	movs	r3, #16
 8020f7a:	752b      	strb	r3, [r5, #20]
 8020f7c:	a901      	add	r1, sp, #4
 8020f7e:	f7ff ff41 	bl	8020e04 <_ZL12read_uleb128PKhPm>
 8020f82:	9b01      	ldr	r3, [sp, #4]
 8020f84:	4403      	add	r3, r0
 8020f86:	60eb      	str	r3, [r5, #12]
 8020f88:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020f8c:	756b      	strb	r3, [r5, #21]
 8020f8e:	a901      	add	r1, sp, #4
 8020f90:	f7ff ff38 	bl	8020e04 <_ZL12read_uleb128PKhPm>
 8020f94:	9b01      	ldr	r3, [sp, #4]
 8020f96:	4403      	add	r3, r0
 8020f98:	612b      	str	r3, [r5, #16]
 8020f9a:	b002      	add	sp, #8
 8020f9c:	bd70      	pop	{r4, r5, r6, pc}
 8020f9e:	4603      	mov	r3, r0
 8020fa0:	e7da      	b.n	8020f58 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8020fa2:	606b      	str	r3, [r5, #4]
 8020fa4:	e7e3      	b.n	8020f6e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8020fa6:	2300      	movs	r3, #0
 8020fa8:	e7ed      	b.n	8020f86 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08020faa <_Unwind_GetGR>:
 8020faa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020fac:	ab03      	add	r3, sp, #12
 8020fae:	9300      	str	r3, [sp, #0]
 8020fb0:	2300      	movs	r3, #0
 8020fb2:	460a      	mov	r2, r1
 8020fb4:	4619      	mov	r1, r3
 8020fb6:	f7e0 f827 	bl	8001008 <_Unwind_VRS_Get>
 8020fba:	9803      	ldr	r0, [sp, #12]
 8020fbc:	b005      	add	sp, #20
 8020fbe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08020fc4 <__gxx_personality_v0>:
 8020fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fc8:	b091      	sub	sp, #68	; 0x44
 8020fca:	2300      	movs	r3, #0
 8020fcc:	9305      	str	r3, [sp, #20]
 8020fce:	f000 0303 	and.w	r3, r0, #3
 8020fd2:	2b01      	cmp	r3, #1
 8020fd4:	4606      	mov	r6, r0
 8020fd6:	460c      	mov	r4, r1
 8020fd8:	4617      	mov	r7, r2
 8020fda:	d00e      	beq.n	8020ffa <__gxx_personality_v0+0x36>
 8020fdc:	2b02      	cmp	r3, #2
 8020fde:	d003      	beq.n	8020fe8 <__gxx_personality_v0+0x24>
 8020fe0:	2b00      	cmp	r3, #0
 8020fe2:	d13b      	bne.n	802105c <__gxx_personality_v0+0x98>
 8020fe4:	0701      	lsls	r1, r0, #28
 8020fe6:	d53b      	bpl.n	8021060 <__gxx_personality_v0+0x9c>
 8020fe8:	4639      	mov	r1, r7
 8020fea:	4620      	mov	r0, r4
 8020fec:	f7e0 fd8c 	bl	8001b08 <__gnu_unwind_frame>
 8020ff0:	b390      	cbz	r0, 8021058 <__gxx_personality_v0+0x94>
 8020ff2:	2009      	movs	r0, #9
 8020ff4:	b011      	add	sp, #68	; 0x44
 8020ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ffa:	0702      	lsls	r2, r0, #28
 8020ffc:	d406      	bmi.n	802100c <__gxx_personality_v0+0x48>
 8020ffe:	6a0d      	ldr	r5, [r1, #32]
 8021000:	4638      	mov	r0, r7
 8021002:	210d      	movs	r1, #13
 8021004:	f7ff ffd1 	bl	8020faa <_Unwind_GetGR>
 8021008:	4285      	cmp	r5, r0
 802100a:	d02b      	beq.n	8021064 <__gxx_personality_v0+0xa0>
 802100c:	2002      	movs	r0, #2
 802100e:	2300      	movs	r3, #0
 8021010:	f006 0608 	and.w	r6, r6, #8
 8021014:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8021018:	4306      	orrs	r6, r0
 802101a:	f8cd a000 	str.w	sl, [sp]
 802101e:	220c      	movs	r2, #12
 8021020:	4619      	mov	r1, r3
 8021022:	4638      	mov	r0, r7
 8021024:	940a      	str	r4, [sp, #40]	; 0x28
 8021026:	f7e0 f815 	bl	8001054 <_Unwind_VRS_Set>
 802102a:	2e06      	cmp	r6, #6
 802102c:	d11c      	bne.n	8021068 <__gxx_personality_v0+0xa4>
 802102e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8021032:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8021036:	f1b8 0f00 	cmp.w	r8, #0
 802103a:	bf0c      	ite	eq
 802103c:	f04f 0b01 	moveq.w	fp, #1
 8021040:	f04f 0b03 	movne.w	fp, #3
 8021044:	f016 0608 	ands.w	r6, r6, #8
 8021048:	f000 8107 	beq.w	802125a <__gxx_personality_v0+0x296>
 802104c:	f1bb 0f01 	cmp.w	fp, #1
 8021050:	f040 80ff 	bne.w	8021252 <__gxx_personality_v0+0x28e>
 8021054:	f000 f95e 	bl	8021314 <_ZSt9terminatev>
 8021058:	2008      	movs	r0, #8
 802105a:	e7cb      	b.n	8020ff4 <__gxx_personality_v0+0x30>
 802105c:	f000 fb7a 	bl	8021754 <abort>
 8021060:	2001      	movs	r0, #1
 8021062:	e7d4      	b.n	802100e <__gxx_personality_v0+0x4a>
 8021064:	2006      	movs	r0, #6
 8021066:	e7d2      	b.n	802100e <__gxx_personality_v0+0x4a>
 8021068:	4638      	mov	r0, r7
 802106a:	f7e0 fd69 	bl	8001b40 <_Unwind_GetLanguageSpecificData>
 802106e:	4681      	mov	r9, r0
 8021070:	2800      	cmp	r0, #0
 8021072:	d0b9      	beq.n	8020fe8 <__gxx_personality_v0+0x24>
 8021074:	4652      	mov	r2, sl
 8021076:	4601      	mov	r1, r0
 8021078:	4638      	mov	r0, r7
 802107a:	f7ff ff65 	bl	8020f48 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 802107e:	4639      	mov	r1, r7
 8021080:	4605      	mov	r5, r0
 8021082:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8021086:	f7ff ff2a 	bl	8020ede <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 802108a:	210f      	movs	r1, #15
 802108c:	900c      	str	r0, [sp, #48]	; 0x30
 802108e:	4638      	mov	r0, r7
 8021090:	f7ff ff8b 	bl	8020faa <_Unwind_GetGR>
 8021094:	f020 0801 	bic.w	r8, r0, #1
 8021098:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 802109c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802109e:	42ab      	cmp	r3, r5
 80210a0:	f240 80bf 	bls.w	8021222 <__gxx_personality_v0+0x25e>
 80210a4:	462a      	mov	r2, r5
 80210a6:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80210aa:	ab06      	add	r3, sp, #24
 80210ac:	2000      	movs	r0, #0
 80210ae:	f7ff ff3a 	bl	8020f26 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80210b2:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80210b6:	4602      	mov	r2, r0
 80210b8:	ab07      	add	r3, sp, #28
 80210ba:	2000      	movs	r0, #0
 80210bc:	f7ff ff33 	bl	8020f26 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80210c0:	ab08      	add	r3, sp, #32
 80210c2:	4602      	mov	r2, r0
 80210c4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80210c8:	2000      	movs	r0, #0
 80210ca:	f7ff ff2c 	bl	8020f26 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80210ce:	a909      	add	r1, sp, #36	; 0x24
 80210d0:	f7ff fe98 	bl	8020e04 <_ZL12read_uleb128PKhPm>
 80210d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210d6:	9a06      	ldr	r2, [sp, #24]
 80210d8:	4413      	add	r3, r2
 80210da:	4543      	cmp	r3, r8
 80210dc:	4605      	mov	r5, r0
 80210de:	d901      	bls.n	80210e4 <__gxx_personality_v0+0x120>
 80210e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80210e2:	e7db      	b.n	802109c <__gxx_personality_v0+0xd8>
 80210e4:	9a07      	ldr	r2, [sp, #28]
 80210e6:	4413      	add	r3, r2
 80210e8:	4543      	cmp	r3, r8
 80210ea:	d9d7      	bls.n	802109c <__gxx_personality_v0+0xd8>
 80210ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80210f0:	f1b8 0f00 	cmp.w	r8, #0
 80210f4:	d001      	beq.n	80210fa <__gxx_personality_v0+0x136>
 80210f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210f8:	4498      	add	r8, r3
 80210fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80210fc:	b115      	cbz	r5, 8021104 <__gxx_personality_v0+0x140>
 80210fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021100:	3d01      	subs	r5, #1
 8021102:	4405      	add	r5, r0
 8021104:	f1b8 0f00 	cmp.w	r8, #0
 8021108:	f43f af6e 	beq.w	8020fe8 <__gxx_personality_v0+0x24>
 802110c:	2d00      	cmp	r5, #0
 802110e:	f000 80f2 	beq.w	80212f6 <__gxx_personality_v0+0x332>
 8021112:	f016 0308 	ands.w	r3, r6, #8
 8021116:	9302      	str	r3, [sp, #8]
 8021118:	d034      	beq.n	8021184 <__gxx_personality_v0+0x1c0>
 802111a:	2347      	movs	r3, #71	; 0x47
 802111c:	7023      	strb	r3, [r4, #0]
 802111e:	234e      	movs	r3, #78	; 0x4e
 8021120:	7063      	strb	r3, [r4, #1]
 8021122:	2355      	movs	r3, #85	; 0x55
 8021124:	70a3      	strb	r3, [r4, #2]
 8021126:	2343      	movs	r3, #67	; 0x43
 8021128:	70e3      	strb	r3, [r4, #3]
 802112a:	2346      	movs	r3, #70	; 0x46
 802112c:	7123      	strb	r3, [r4, #4]
 802112e:	234f      	movs	r3, #79	; 0x4f
 8021130:	7163      	strb	r3, [r4, #5]
 8021132:	2352      	movs	r3, #82	; 0x52
 8021134:	71a3      	strb	r3, [r4, #6]
 8021136:	2300      	movs	r3, #0
 8021138:	71e3      	strb	r3, [r4, #7]
 802113a:	f04f 0b00 	mov.w	fp, #0
 802113e:	a907      	add	r1, sp, #28
 8021140:	4628      	mov	r0, r5
 8021142:	f7ff fe6e 	bl	8020e22 <_ZL12read_sleb128PKhPl>
 8021146:	a908      	add	r1, sp, #32
 8021148:	9003      	str	r0, [sp, #12]
 802114a:	f7ff fe6a 	bl	8020e22 <_ZL12read_sleb128PKhPl>
 802114e:	9907      	ldr	r1, [sp, #28]
 8021150:	2900      	cmp	r1, #0
 8021152:	d063      	beq.n	802121c <__gxx_personality_v0+0x258>
 8021154:	dd3a      	ble.n	80211cc <__gxx_personality_v0+0x208>
 8021156:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 802115a:	28ff      	cmp	r0, #255	; 0xff
 802115c:	d032      	beq.n	80211c4 <__gxx_personality_v0+0x200>
 802115e:	f000 0307 	and.w	r3, r0, #7
 8021162:	2b04      	cmp	r3, #4
 8021164:	f63f af7a 	bhi.w	802105c <__gxx_personality_v0+0x98>
 8021168:	a201      	add	r2, pc, #4	; (adr r2, 8021170 <__gxx_personality_v0+0x1ac>)
 802116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802116e:	bf00      	nop
 8021170:	080211c9 	.word	0x080211c9
 8021174:	0802105d 	.word	0x0802105d
 8021178:	08021197 	.word	0x08021197
 802117c:	080211c9 	.word	0x080211c9
 8021180:	080211c1 	.word	0x080211c1
 8021184:	79e3      	ldrb	r3, [r4, #7]
 8021186:	2b01      	cmp	r3, #1
 8021188:	bf0c      	ite	eq
 802118a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 802118e:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8021192:	9305      	str	r3, [sp, #20]
 8021194:	e7d1      	b.n	802113a <__gxx_personality_v0+0x176>
 8021196:	2502      	movs	r5, #2
 8021198:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802119a:	ab09      	add	r3, sp, #36	; 0x24
 802119c:	fb05 2211 	mls	r2, r5, r1, r2
 80211a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80211a2:	f7ff fe56 	bl	8020e52 <_ZL28read_encoded_value_with_basehjPKhPj>
 80211a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80211a8:	b131      	cbz	r1, 80211b8 <__gxx_personality_v0+0x1f4>
 80211aa:	b35c      	cbz	r4, 8021204 <__gxx_personality_v0+0x240>
 80211ac:	ab05      	add	r3, sp, #20
 80211ae:	2200      	movs	r2, #0
 80211b0:	4620      	mov	r0, r4
 80211b2:	f7ff fd8f 	bl	8020cd4 <__cxa_type_match>
 80211b6:	b328      	cbz	r0, 8021204 <__gxx_personality_v0+0x240>
 80211b8:	9d07      	ldr	r5, [sp, #28]
 80211ba:	f04f 0b03 	mov.w	fp, #3
 80211be:	e034      	b.n	802122a <__gxx_personality_v0+0x266>
 80211c0:	2508      	movs	r5, #8
 80211c2:	e7e9      	b.n	8021198 <__gxx_personality_v0+0x1d4>
 80211c4:	2500      	movs	r5, #0
 80211c6:	e7e7      	b.n	8021198 <__gxx_personality_v0+0x1d4>
 80211c8:	2504      	movs	r5, #4
 80211ca:	e7e5      	b.n	8021198 <__gxx_personality_v0+0x1d4>
 80211cc:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 80211d0:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 80211d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80211d6:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 80211da:	313f      	adds	r1, #63	; 0x3f
 80211dc:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 80211e0:	b1bc      	cbz	r4, 8021212 <__gxx_personality_v0+0x24e>
 80211e2:	9a02      	ldr	r2, [sp, #8]
 80211e4:	b9aa      	cbnz	r2, 8021212 <__gxx_personality_v0+0x24e>
 80211e6:	9b05      	ldr	r3, [sp, #20]
 80211e8:	9309      	str	r3, [sp, #36]	; 0x24
 80211ea:	3d04      	subs	r5, #4
 80211ec:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80211f0:	2900      	cmp	r1, #0
 80211f2:	d0e1      	beq.n	80211b8 <__gxx_personality_v0+0x1f4>
 80211f4:	ab09      	add	r3, sp, #36	; 0x24
 80211f6:	2200      	movs	r2, #0
 80211f8:	4429      	add	r1, r5
 80211fa:	4620      	mov	r0, r4
 80211fc:	f7ff fd6a 	bl	8020cd4 <__cxa_type_match>
 8021200:	2800      	cmp	r0, #0
 8021202:	d0f3      	beq.n	80211ec <__gxx_personality_v0+0x228>
 8021204:	9d08      	ldr	r5, [sp, #32]
 8021206:	2d00      	cmp	r5, #0
 8021208:	d071      	beq.n	80212ee <__gxx_personality_v0+0x32a>
 802120a:	9b03      	ldr	r3, [sp, #12]
 802120c:	442b      	add	r3, r5
 802120e:	461d      	mov	r5, r3
 8021210:	e795      	b.n	802113e <__gxx_personality_v0+0x17a>
 8021212:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021216:	2b00      	cmp	r3, #0
 8021218:	d1f4      	bne.n	8021204 <__gxx_personality_v0+0x240>
 802121a:	e7cd      	b.n	80211b8 <__gxx_personality_v0+0x1f4>
 802121c:	f04f 0b01 	mov.w	fp, #1
 8021220:	e7f0      	b.n	8021204 <__gxx_personality_v0+0x240>
 8021222:	2500      	movs	r5, #0
 8021224:	46a8      	mov	r8, r5
 8021226:	f04f 0b01 	mov.w	fp, #1
 802122a:	07f3      	lsls	r3, r6, #31
 802122c:	f57f af0a 	bpl.w	8021044 <__gxx_personality_v0+0x80>
 8021230:	f1bb 0f02 	cmp.w	fp, #2
 8021234:	f43f aed8 	beq.w	8020fe8 <__gxx_personality_v0+0x24>
 8021238:	210d      	movs	r1, #13
 802123a:	4638      	mov	r0, r7
 802123c:	9e05      	ldr	r6, [sp, #20]
 802123e:	f7ff feb4 	bl	8020faa <_Unwind_GetGR>
 8021242:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8021246:	e9c4 0608 	strd	r0, r6, [r4, #32]
 802124a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 802124e:	2006      	movs	r0, #6
 8021250:	e6d0      	b.n	8020ff4 <__gxx_personality_v0+0x30>
 8021252:	2d00      	cmp	r5, #0
 8021254:	da22      	bge.n	802129c <__gxx_personality_v0+0x2d8>
 8021256:	f000 f86f 	bl	8021338 <_ZSt10unexpectedv>
 802125a:	f1bb 0f01 	cmp.w	fp, #1
 802125e:	d102      	bne.n	8021266 <__gxx_personality_v0+0x2a2>
 8021260:	4620      	mov	r0, r4
 8021262:	f000 fa00 	bl	8021666 <__cxa_call_terminate>
 8021266:	2d00      	cmp	r5, #0
 8021268:	da18      	bge.n	802129c <__gxx_personality_v0+0x2d8>
 802126a:	4652      	mov	r2, sl
 802126c:	4649      	mov	r1, r9
 802126e:	4638      	mov	r0, r7
 8021270:	f7ff fe6a 	bl	8020f48 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8021274:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8021278:	4639      	mov	r1, r7
 802127a:	f7ff fe30 	bl	8020ede <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 802127e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021280:	900c      	str	r0, [sp, #48]	; 0x30
 8021282:	43eb      	mvns	r3, r5
 8021284:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021288:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 802128c:	b10a      	cbz	r2, 8021292 <__gxx_personality_v0+0x2ce>
 802128e:	3601      	adds	r6, #1
 8021290:	e7fa      	b.n	8021288 <__gxx_personality_v0+0x2c4>
 8021292:	2204      	movs	r2, #4
 8021294:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8021298:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 802129c:	2300      	movs	r3, #0
 802129e:	ae09      	add	r6, sp, #36	; 0x24
 80212a0:	461a      	mov	r2, r3
 80212a2:	4619      	mov	r1, r3
 80212a4:	9600      	str	r6, [sp, #0]
 80212a6:	4638      	mov	r0, r7
 80212a8:	9409      	str	r4, [sp, #36]	; 0x24
 80212aa:	f7df fed3 	bl	8001054 <_Unwind_VRS_Set>
 80212ae:	2300      	movs	r3, #0
 80212b0:	4619      	mov	r1, r3
 80212b2:	2201      	movs	r2, #1
 80212b4:	9600      	str	r6, [sp, #0]
 80212b6:	4638      	mov	r0, r7
 80212b8:	9509      	str	r5, [sp, #36]	; 0x24
 80212ba:	f7df fecb 	bl	8001054 <_Unwind_VRS_Set>
 80212be:	210f      	movs	r1, #15
 80212c0:	4638      	mov	r0, r7
 80212c2:	f7ff fe72 	bl	8020faa <_Unwind_GetGR>
 80212c6:	f000 0001 	and.w	r0, r0, #1
 80212ca:	ea40 0008 	orr.w	r0, r0, r8
 80212ce:	2300      	movs	r3, #0
 80212d0:	9009      	str	r0, [sp, #36]	; 0x24
 80212d2:	9600      	str	r6, [sp, #0]
 80212d4:	220f      	movs	r2, #15
 80212d6:	4619      	mov	r1, r3
 80212d8:	4638      	mov	r0, r7
 80212da:	f7df febb 	bl	8001054 <_Unwind_VRS_Set>
 80212de:	f1bb 0f02 	cmp.w	fp, #2
 80212e2:	d102      	bne.n	80212ea <__gxx_personality_v0+0x326>
 80212e4:	4620      	mov	r0, r4
 80212e6:	f7ff fd53 	bl	8020d90 <__cxa_begin_cleanup>
 80212ea:	2007      	movs	r0, #7
 80212ec:	e682      	b.n	8020ff4 <__gxx_personality_v0+0x30>
 80212ee:	f1bb 0f00 	cmp.w	fp, #0
 80212f2:	f43f ae79 	beq.w	8020fe8 <__gxx_personality_v0+0x24>
 80212f6:	f04f 0b02 	mov.w	fp, #2
 80212fa:	e796      	b.n	802122a <__gxx_personality_v0+0x266>

080212fc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80212fc:	b508      	push	{r3, lr}
 80212fe:	4780      	blx	r0
 8021300:	f000 fa28 	bl	8021754 <abort>

08021304 <_ZSt13get_terminatev>:
 8021304:	4b02      	ldr	r3, [pc, #8]	; (8021310 <_ZSt13get_terminatev+0xc>)
 8021306:	6818      	ldr	r0, [r3, #0]
 8021308:	f3bf 8f5b 	dmb	ish
 802130c:	4770      	bx	lr
 802130e:	bf00      	nop
 8021310:	200000c4 	.word	0x200000c4

08021314 <_ZSt9terminatev>:
 8021314:	b508      	push	{r3, lr}
 8021316:	f7ff fff5 	bl	8021304 <_ZSt13get_terminatev>
 802131a:	f7ff ffef 	bl	80212fc <_ZN10__cxxabiv111__terminateEPFvvE>

0802131e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 802131e:	b508      	push	{r3, lr}
 8021320:	4780      	blx	r0
 8021322:	f7ff fff7 	bl	8021314 <_ZSt9terminatev>
	...

08021328 <_ZSt14get_unexpectedv>:
 8021328:	4b02      	ldr	r3, [pc, #8]	; (8021334 <_ZSt14get_unexpectedv+0xc>)
 802132a:	6818      	ldr	r0, [r3, #0]
 802132c:	f3bf 8f5b 	dmb	ish
 8021330:	4770      	bx	lr
 8021332:	bf00      	nop
 8021334:	200000c0 	.word	0x200000c0

08021338 <_ZSt10unexpectedv>:
 8021338:	b508      	push	{r3, lr}
 802133a:	f7ff fff5 	bl	8021328 <_ZSt14get_unexpectedv>
 802133e:	f7ff ffee 	bl	802131e <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08021344 <_ZSt11_Hash_bytesPKvjj>:
 8021344:	b570      	push	{r4, r5, r6, lr}
 8021346:	4c18      	ldr	r4, [pc, #96]	; (80213a8 <_ZSt11_Hash_bytesPKvjj+0x64>)
 8021348:	404a      	eors	r2, r1
 802134a:	460d      	mov	r5, r1
 802134c:	1846      	adds	r6, r0, r1
 802134e:	2d03      	cmp	r5, #3
 8021350:	eba6 0305 	sub.w	r3, r6, r5
 8021354:	d908      	bls.n	8021368 <_ZSt11_Hash_bytesPKvjj+0x24>
 8021356:	681b      	ldr	r3, [r3, #0]
 8021358:	4363      	muls	r3, r4
 802135a:	ea83 6313 	eor.w	r3, r3, r3, lsr #24
 802135e:	4362      	muls	r2, r4
 8021360:	4363      	muls	r3, r4
 8021362:	405a      	eors	r2, r3
 8021364:	3d04      	subs	r5, #4
 8021366:	e7f2      	b.n	802134e <_ZSt11_Hash_bytesPKvjj+0xa>
 8021368:	088b      	lsrs	r3, r1, #2
 802136a:	f06f 0503 	mvn.w	r5, #3
 802136e:	fb05 1103 	mla	r1, r5, r3, r1
 8021372:	2902      	cmp	r1, #2
 8021374:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8021378:	d011      	beq.n	802139e <_ZSt11_Hash_bytesPKvjj+0x5a>
 802137a:	2903      	cmp	r1, #3
 802137c:	d00c      	beq.n	8021398 <_ZSt11_Hash_bytesPKvjj+0x54>
 802137e:	2901      	cmp	r1, #1
 8021380:	d103      	bne.n	802138a <_ZSt11_Hash_bytesPKvjj+0x46>
 8021382:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
 8021386:	4042      	eors	r2, r0
 8021388:	4362      	muls	r2, r4
 802138a:	ea82 3252 	eor.w	r2, r2, r2, lsr #13
 802138e:	fb04 f002 	mul.w	r0, r4, r2
 8021392:	ea80 30d0 	eor.w	r0, r0, r0, lsr #15
 8021396:	bd70      	pop	{r4, r5, r6, pc}
 8021398:	78a9      	ldrb	r1, [r5, #2]
 802139a:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
 802139e:	7869      	ldrb	r1, [r5, #1]
 80213a0:	ea82 2201 	eor.w	r2, r2, r1, lsl #8
 80213a4:	e7ed      	b.n	8021382 <_ZSt11_Hash_bytesPKvjj+0x3e>
 80213a6:	bf00      	nop
 80213a8:	5bd1e995 	.word	0x5bd1e995

080213ac <_Znwj>:
 80213ac:	2801      	cmp	r0, #1
 80213ae:	bf38      	it	cc
 80213b0:	2001      	movcc	r0, #1
 80213b2:	b510      	push	{r4, lr}
 80213b4:	4604      	mov	r4, r0
 80213b6:	4620      	mov	r0, r4
 80213b8:	f000 fb42 	bl	8021a40 <malloc>
 80213bc:	b930      	cbnz	r0, 80213cc <_Znwj+0x20>
 80213be:	f000 f9bb 	bl	8021738 <_ZSt15get_new_handlerv>
 80213c2:	b908      	cbnz	r0, 80213c8 <_Znwj+0x1c>
 80213c4:	f000 f9c6 	bl	8021754 <abort>
 80213c8:	4780      	blx	r0
 80213ca:	e7f4      	b.n	80213b6 <_Znwj+0xa>
 80213cc:	bd10      	pop	{r4, pc}
	...

080213d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80213d0:	b510      	push	{r4, lr}
 80213d2:	4b03      	ldr	r3, [pc, #12]	; (80213e0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80213d4:	6003      	str	r3, [r0, #0]
 80213d6:	4604      	mov	r4, r0
 80213d8:	f000 f8d4 	bl	8021584 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80213dc:	4620      	mov	r0, r4
 80213de:	bd10      	pop	{r4, pc}
 80213e0:	08026c14 	.word	0x08026c14

080213e4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80213e4:	b510      	push	{r4, lr}
 80213e6:	4604      	mov	r4, r0
 80213e8:	f7ff fff2 	bl	80213d0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80213ec:	4620      	mov	r0, r4
 80213ee:	210c      	movs	r1, #12
 80213f0:	f7ff fc4a 	bl	8020c88 <_ZdlPvj>
 80213f4:	4620      	mov	r0, r4
 80213f6:	bd10      	pop	{r4, pc}

080213f8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80213f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80213fa:	9f08      	ldr	r7, [sp, #32]
 80213fc:	4297      	cmp	r7, r2
 80213fe:	4605      	mov	r5, r0
 8021400:	460e      	mov	r6, r1
 8021402:	4614      	mov	r4, r2
 8021404:	d00a      	beq.n	802141c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8021406:	68a8      	ldr	r0, [r5, #8]
 8021408:	6802      	ldr	r2, [r0, #0]
 802140a:	9708      	str	r7, [sp, #32]
 802140c:	6a15      	ldr	r5, [r2, #32]
 802140e:	4631      	mov	r1, r6
 8021410:	4622      	mov	r2, r4
 8021412:	46ac      	mov	ip, r5
 8021414:	b003      	add	sp, #12
 8021416:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802141a:	4760      	bx	ip
 802141c:	4619      	mov	r1, r3
 802141e:	9301      	str	r3, [sp, #4]
 8021420:	f000 f858 	bl	80214d4 <_ZNKSt9type_infoeqERKS_>
 8021424:	9b01      	ldr	r3, [sp, #4]
 8021426:	2800      	cmp	r0, #0
 8021428:	d0ed      	beq.n	8021406 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 802142a:	2006      	movs	r0, #6
 802142c:	b003      	add	sp, #12
 802142e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021430 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8021430:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021434:	460d      	mov	r5, r1
 8021436:	4619      	mov	r1, r3
 8021438:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 802143c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8021440:	4681      	mov	r9, r0
 8021442:	4617      	mov	r7, r2
 8021444:	4698      	mov	r8, r3
 8021446:	f000 f845 	bl	80214d4 <_ZNKSt9type_infoeqERKS_>
 802144a:	b190      	cbz	r0, 8021472 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 802144c:	2d00      	cmp	r5, #0
 802144e:	6034      	str	r4, [r6, #0]
 8021450:	7137      	strb	r7, [r6, #4]
 8021452:	db09      	blt.n	8021468 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8021454:	1961      	adds	r1, r4, r5
 8021456:	458a      	cmp	sl, r1
 8021458:	bf0c      	ite	eq
 802145a:	2106      	moveq	r1, #6
 802145c:	2101      	movne	r1, #1
 802145e:	71b1      	strb	r1, [r6, #6]
 8021460:	2000      	movs	r0, #0
 8021462:	b001      	add	sp, #4
 8021464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021468:	3502      	adds	r5, #2
 802146a:	d1f9      	bne.n	8021460 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 802146c:	2301      	movs	r3, #1
 802146e:	71b3      	strb	r3, [r6, #6]
 8021470:	e7f6      	b.n	8021460 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8021472:	4554      	cmp	r4, sl
 8021474:	d106      	bne.n	8021484 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8021476:	4659      	mov	r1, fp
 8021478:	4648      	mov	r0, r9
 802147a:	f000 f82b 	bl	80214d4 <_ZNKSt9type_infoeqERKS_>
 802147e:	b108      	cbz	r0, 8021484 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8021480:	7177      	strb	r7, [r6, #5]
 8021482:	e7ed      	b.n	8021460 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8021484:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8021488:	6803      	ldr	r3, [r0, #0]
 802148a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 802148e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8021492:	69dc      	ldr	r4, [r3, #28]
 8021494:	463a      	mov	r2, r7
 8021496:	4643      	mov	r3, r8
 8021498:	4629      	mov	r1, r5
 802149a:	46a4      	mov	ip, r4
 802149c:	b001      	add	sp, #4
 802149e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214a2:	4760      	bx	ip

080214a4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80214a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80214a8:	4607      	mov	r7, r0
 80214aa:	460c      	mov	r4, r1
 80214ac:	4615      	mov	r5, r2
 80214ae:	461e      	mov	r6, r3
 80214b0:	f000 f89b 	bl	80215ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80214b4:	b948      	cbnz	r0, 80214ca <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80214b6:	68b8      	ldr	r0, [r7, #8]
 80214b8:	6803      	ldr	r3, [r0, #0]
 80214ba:	699f      	ldr	r7, [r3, #24]
 80214bc:	462a      	mov	r2, r5
 80214be:	4633      	mov	r3, r6
 80214c0:	4621      	mov	r1, r4
 80214c2:	46bc      	mov	ip, r7
 80214c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80214c8:	4760      	bx	ip
 80214ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080214ce <_ZNSt9type_infoD1Ev>:
 80214ce:	4770      	bx	lr

080214d0 <_ZNKSt9type_info14__is_pointer_pEv>:
 80214d0:	2000      	movs	r0, #0
 80214d2:	4770      	bx	lr

080214d4 <_ZNKSt9type_infoeqERKS_>:
 80214d4:	4281      	cmp	r1, r0
 80214d6:	b508      	push	{r3, lr}
 80214d8:	d00e      	beq.n	80214f8 <_ZNKSt9type_infoeqERKS_+0x24>
 80214da:	6840      	ldr	r0, [r0, #4]
 80214dc:	7803      	ldrb	r3, [r0, #0]
 80214de:	2b2a      	cmp	r3, #42	; 0x2a
 80214e0:	d00c      	beq.n	80214fc <_ZNKSt9type_infoeqERKS_+0x28>
 80214e2:	6849      	ldr	r1, [r1, #4]
 80214e4:	780b      	ldrb	r3, [r1, #0]
 80214e6:	2b2a      	cmp	r3, #42	; 0x2a
 80214e8:	bf08      	it	eq
 80214ea:	3101      	addeq	r1, #1
 80214ec:	f7de fee0 	bl	80002b0 <strcmp>
 80214f0:	fab0 f080 	clz	r0, r0
 80214f4:	0940      	lsrs	r0, r0, #5
 80214f6:	bd08      	pop	{r3, pc}
 80214f8:	2001      	movs	r0, #1
 80214fa:	e7fc      	b.n	80214f6 <_ZNKSt9type_infoeqERKS_+0x22>
 80214fc:	2000      	movs	r0, #0
 80214fe:	e7fa      	b.n	80214f6 <_ZNKSt9type_infoeqERKS_+0x22>

08021500 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8021500:	b508      	push	{r3, lr}
 8021502:	680b      	ldr	r3, [r1, #0]
 8021504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021508:	d302      	bcc.n	8021510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 802150a:	480d      	ldr	r0, [pc, #52]	; (8021540 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 802150c:	f000 f91f 	bl	802174e <_ZSt20__throw_length_errorPKc>
 8021510:	4293      	cmp	r3, r2
 8021512:	d90b      	bls.n	802152c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8021514:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8021518:	ea4f 0042 	mov.w	r0, r2, lsl #1
 802151c:	d206      	bcs.n	802152c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 802151e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8021522:	bf2a      	itet	cs
 8021524:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8021528:	6008      	strcc	r0, [r1, #0]
 802152a:	600b      	strcs	r3, [r1, #0]
 802152c:	6808      	ldr	r0, [r1, #0]
 802152e:	3001      	adds	r0, #1
 8021530:	d501      	bpl.n	8021536 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8021532:	f000 f909 	bl	8021748 <_ZSt17__throw_bad_allocv>
 8021536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802153a:	f7ff bf37 	b.w	80213ac <_Znwj>
 802153e:	bf00      	nop
 8021540:	08026c4d 	.word	0x08026c4d

08021544 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8021544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8021546:	2400      	movs	r4, #0
 8021548:	2310      	movs	r3, #16
 802154a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 802154e:	6803      	ldr	r3, [r0, #0]
 8021550:	4615      	mov	r5, r2
 8021552:	699e      	ldr	r6, [r3, #24]
 8021554:	6812      	ldr	r2, [r2, #0]
 8021556:	466b      	mov	r3, sp
 8021558:	e9cd 4400 	strd	r4, r4, [sp]
 802155c:	47b0      	blx	r6
 802155e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8021562:	f003 0306 	and.w	r3, r3, #6
 8021566:	2b06      	cmp	r3, #6
 8021568:	bf03      	ittte	eq
 802156a:	9b00      	ldreq	r3, [sp, #0]
 802156c:	602b      	streq	r3, [r5, #0]
 802156e:	2001      	moveq	r0, #1
 8021570:	4620      	movne	r0, r4
 8021572:	b004      	add	sp, #16
 8021574:	bd70      	pop	{r4, r5, r6, pc}

08021576 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8021576:	9800      	ldr	r0, [sp, #0]
 8021578:	4290      	cmp	r0, r2
 802157a:	bf14      	ite	ne
 802157c:	2001      	movne	r0, #1
 802157e:	2006      	moveq	r0, #6
 8021580:	4770      	bx	lr
	...

08021584 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8021584:	b510      	push	{r4, lr}
 8021586:	4b03      	ldr	r3, [pc, #12]	; (8021594 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8021588:	6003      	str	r3, [r0, #0]
 802158a:	4604      	mov	r4, r0
 802158c:	f7ff ff9f 	bl	80214ce <_ZNSt9type_infoD1Ev>
 8021590:	4620      	mov	r0, r4
 8021592:	bd10      	pop	{r4, pc}
 8021594:	08026ca0 	.word	0x08026ca0

08021598 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8021598:	b510      	push	{r4, lr}
 802159a:	4604      	mov	r4, r0
 802159c:	f7ff fff2 	bl	8021584 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80215a0:	4620      	mov	r0, r4
 80215a2:	2108      	movs	r1, #8
 80215a4:	f7ff fb70 	bl	8020c88 <_ZdlPvj>
 80215a8:	4620      	mov	r0, r4
 80215aa:	bd10      	pop	{r4, pc}

080215ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80215ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215b0:	461f      	mov	r7, r3
 80215b2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80215b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80215ba:	4598      	cmp	r8, r3
 80215bc:	4606      	mov	r6, r0
 80215be:	4615      	mov	r5, r2
 80215c0:	d107      	bne.n	80215d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80215c2:	9907      	ldr	r1, [sp, #28]
 80215c4:	f7ff ff86 	bl	80214d4 <_ZNKSt9type_infoeqERKS_>
 80215c8:	b118      	cbz	r0, 80215d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80215ca:	7165      	strb	r5, [r4, #5]
 80215cc:	2000      	movs	r0, #0
 80215ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80215d2:	4639      	mov	r1, r7
 80215d4:	4630      	mov	r0, r6
 80215d6:	f7ff ff7d 	bl	80214d4 <_ZNKSt9type_infoeqERKS_>
 80215da:	2800      	cmp	r0, #0
 80215dc:	d0f6      	beq.n	80215cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80215de:	2301      	movs	r3, #1
 80215e0:	f8c4 8000 	str.w	r8, [r4]
 80215e4:	7125      	strb	r5, [r4, #4]
 80215e6:	71a3      	strb	r3, [r4, #6]
 80215e8:	e7f0      	b.n	80215cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080215ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80215ea:	b538      	push	{r3, r4, r5, lr}
 80215ec:	4615      	mov	r5, r2
 80215ee:	461c      	mov	r4, r3
 80215f0:	f7ff ff70 	bl	80214d4 <_ZNKSt9type_infoeqERKS_>
 80215f4:	b120      	cbz	r0, 8021600 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80215f6:	2308      	movs	r3, #8
 80215f8:	60e3      	str	r3, [r4, #12]
 80215fa:	2306      	movs	r3, #6
 80215fc:	6025      	str	r5, [r4, #0]
 80215fe:	7123      	strb	r3, [r4, #4]
 8021600:	bd38      	pop	{r3, r4, r5, pc}

08021602 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8021602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021604:	4605      	mov	r5, r0
 8021606:	460c      	mov	r4, r1
 8021608:	9201      	str	r2, [sp, #4]
 802160a:	461e      	mov	r6, r3
 802160c:	f7ff ff62 	bl	80214d4 <_ZNKSt9type_infoeqERKS_>
 8021610:	b950      	cbnz	r0, 8021628 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8021612:	2e03      	cmp	r6, #3
 8021614:	d808      	bhi.n	8021628 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8021616:	6823      	ldr	r3, [r4, #0]
 8021618:	9a01      	ldr	r2, [sp, #4]
 802161a:	695b      	ldr	r3, [r3, #20]
 802161c:	4629      	mov	r1, r5
 802161e:	4620      	mov	r0, r4
 8021620:	b002      	add	sp, #8
 8021622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021626:	4718      	bx	r3
 8021628:	b002      	add	sp, #8
 802162a:	bd70      	pop	{r4, r5, r6, pc}

0802162c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 802162c:	7803      	ldrb	r3, [r0, #0]
 802162e:	2b47      	cmp	r3, #71	; 0x47
 8021630:	d117      	bne.n	8021662 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8021632:	7843      	ldrb	r3, [r0, #1]
 8021634:	2b4e      	cmp	r3, #78	; 0x4e
 8021636:	d114      	bne.n	8021662 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8021638:	7883      	ldrb	r3, [r0, #2]
 802163a:	2b55      	cmp	r3, #85	; 0x55
 802163c:	d111      	bne.n	8021662 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 802163e:	78c3      	ldrb	r3, [r0, #3]
 8021640:	2b43      	cmp	r3, #67	; 0x43
 8021642:	d10e      	bne.n	8021662 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8021644:	7903      	ldrb	r3, [r0, #4]
 8021646:	2b43      	cmp	r3, #67	; 0x43
 8021648:	d10b      	bne.n	8021662 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 802164a:	7943      	ldrb	r3, [r0, #5]
 802164c:	2b2b      	cmp	r3, #43	; 0x2b
 802164e:	d108      	bne.n	8021662 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8021650:	7983      	ldrb	r3, [r0, #6]
 8021652:	2b2b      	cmp	r3, #43	; 0x2b
 8021654:	d105      	bne.n	8021662 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8021656:	79c0      	ldrb	r0, [r0, #7]
 8021658:	2801      	cmp	r0, #1
 802165a:	bf8c      	ite	hi
 802165c:	2000      	movhi	r0, #0
 802165e:	2001      	movls	r0, #1
 8021660:	4770      	bx	lr
 8021662:	2000      	movs	r0, #0
 8021664:	4770      	bx	lr

08021666 <__cxa_call_terminate>:
 8021666:	b510      	push	{r4, lr}
 8021668:	4604      	mov	r4, r0
 802166a:	b148      	cbz	r0, 8021680 <__cxa_call_terminate+0x1a>
 802166c:	f000 f83b 	bl	80216e6 <__cxa_begin_catch>
 8021670:	4620      	mov	r0, r4
 8021672:	f7ff ffdb 	bl	802162c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8021676:	b118      	cbz	r0, 8021680 <__cxa_call_terminate+0x1a>
 8021678:	f854 0c14 	ldr.w	r0, [r4, #-20]
 802167c:	f7ff fe3e 	bl	80212fc <_ZN10__cxxabiv111__terminateEPFvvE>
 8021680:	f7ff fe48 	bl	8021314 <_ZSt9terminatev>

08021684 <__cxa_call_unexpected>:
 8021684:	b538      	push	{r3, r4, r5, lr}
 8021686:	4602      	mov	r2, r0
 8021688:	f7ff ffd0 	bl	802162c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 802168c:	4604      	mov	r4, r0
 802168e:	b140      	cbz	r0, 80216a2 <__cxa_call_unexpected+0x1e>
 8021690:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8021694:	2500      	movs	r5, #0
 8021696:	4610      	mov	r0, r2
 8021698:	f000 f825 	bl	80216e6 <__cxa_begin_catch>
 802169c:	b11d      	cbz	r5, 80216a6 <__cxa_call_unexpected+0x22>
 802169e:	f7ff fe4b 	bl	8021338 <_ZSt10unexpectedv>
 80216a2:	2501      	movs	r5, #1
 80216a4:	e7f7      	b.n	8021696 <__cxa_call_unexpected+0x12>
 80216a6:	4620      	mov	r0, r4
 80216a8:	f7ff fe39 	bl	802131e <_ZN10__cxxabiv112__unexpectedEPFvvE>

080216ac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80216ac:	7803      	ldrb	r3, [r0, #0]
 80216ae:	2b47      	cmp	r3, #71	; 0x47
 80216b0:	d117      	bne.n	80216e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80216b2:	7843      	ldrb	r3, [r0, #1]
 80216b4:	2b4e      	cmp	r3, #78	; 0x4e
 80216b6:	d114      	bne.n	80216e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80216b8:	7883      	ldrb	r3, [r0, #2]
 80216ba:	2b55      	cmp	r3, #85	; 0x55
 80216bc:	d111      	bne.n	80216e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80216be:	78c3      	ldrb	r3, [r0, #3]
 80216c0:	2b43      	cmp	r3, #67	; 0x43
 80216c2:	d10e      	bne.n	80216e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80216c4:	7903      	ldrb	r3, [r0, #4]
 80216c6:	2b43      	cmp	r3, #67	; 0x43
 80216c8:	d10b      	bne.n	80216e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80216ca:	7943      	ldrb	r3, [r0, #5]
 80216cc:	2b2b      	cmp	r3, #43	; 0x2b
 80216ce:	d108      	bne.n	80216e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80216d0:	7983      	ldrb	r3, [r0, #6]
 80216d2:	2b2b      	cmp	r3, #43	; 0x2b
 80216d4:	d105      	bne.n	80216e2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80216d6:	79c0      	ldrb	r0, [r0, #7]
 80216d8:	2801      	cmp	r0, #1
 80216da:	bf8c      	ite	hi
 80216dc:	2000      	movhi	r0, #0
 80216de:	2001      	movls	r0, #1
 80216e0:	4770      	bx	lr
 80216e2:	2000      	movs	r0, #0
 80216e4:	4770      	bx	lr

080216e6 <__cxa_begin_catch>:
 80216e6:	b538      	push	{r3, r4, r5, lr}
 80216e8:	4604      	mov	r4, r0
 80216ea:	f7ff fb87 	bl	8020dfc <__cxa_get_globals>
 80216ee:	6805      	ldr	r5, [r0, #0]
 80216f0:	4602      	mov	r2, r0
 80216f2:	4620      	mov	r0, r4
 80216f4:	f1a4 0120 	sub.w	r1, r4, #32
 80216f8:	f7ff ffd8 	bl	80216ac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80216fc:	b928      	cbnz	r0, 802170a <__cxa_begin_catch+0x24>
 80216fe:	b10d      	cbz	r5, 8021704 <__cxa_begin_catch+0x1e>
 8021700:	f7ff fe08 	bl	8021314 <_ZSt9terminatev>
 8021704:	6011      	str	r1, [r2, #0]
 8021706:	4628      	mov	r0, r5
 8021708:	bd38      	pop	{r3, r4, r5, pc}
 802170a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 802170e:	2b00      	cmp	r3, #0
 8021710:	bfb4      	ite	lt
 8021712:	f1c3 0301 	rsblt	r3, r3, #1
 8021716:	3301      	addge	r3, #1
 8021718:	f844 3c0c 	str.w	r3, [r4, #-12]
 802171c:	6853      	ldr	r3, [r2, #4]
 802171e:	428d      	cmp	r5, r1
 8021720:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8021724:	6053      	str	r3, [r2, #4]
 8021726:	4620      	mov	r0, r4
 8021728:	bf1c      	itt	ne
 802172a:	f844 5c10 	strne.w	r5, [r4, #-16]
 802172e:	6011      	strne	r1, [r2, #0]
 8021730:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8021732:	f7df fc61 	bl	8000ff8 <_Unwind_Complete>
 8021736:	e7e6      	b.n	8021706 <__cxa_begin_catch+0x20>

08021738 <_ZSt15get_new_handlerv>:
 8021738:	4b02      	ldr	r3, [pc, #8]	; (8021744 <_ZSt15get_new_handlerv+0xc>)
 802173a:	6818      	ldr	r0, [r3, #0]
 802173c:	f3bf 8f5b 	dmb	ish
 8021740:	4770      	bx	lr
 8021742:	bf00      	nop
 8021744:	20044068 	.word	0x20044068

08021748 <_ZSt17__throw_bad_allocv>:
 8021748:	b508      	push	{r3, lr}
 802174a:	f000 f803 	bl	8021754 <abort>

0802174e <_ZSt20__throw_length_errorPKc>:
 802174e:	b508      	push	{r3, lr}
 8021750:	f000 f800 	bl	8021754 <abort>

08021754 <abort>:
 8021754:	b508      	push	{r3, lr}
 8021756:	2006      	movs	r0, #6
 8021758:	f000 fc5c 	bl	8022014 <raise>
 802175c:	2001      	movs	r0, #1
 802175e:	f7e1 f92f 	bl	80029c0 <_exit>
	...

08021764 <calloc>:
 8021764:	4b02      	ldr	r3, [pc, #8]	; (8021770 <calloc+0xc>)
 8021766:	460a      	mov	r2, r1
 8021768:	4601      	mov	r1, r0
 802176a:	6818      	ldr	r0, [r3, #0]
 802176c:	f000 b9b8 	b.w	8021ae0 <_calloc_r>
 8021770:	200000c8 	.word	0x200000c8

08021774 <std>:
 8021774:	2300      	movs	r3, #0
 8021776:	b510      	push	{r4, lr}
 8021778:	4604      	mov	r4, r0
 802177a:	e9c0 3300 	strd	r3, r3, [r0]
 802177e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021782:	6083      	str	r3, [r0, #8]
 8021784:	8181      	strh	r1, [r0, #12]
 8021786:	6643      	str	r3, [r0, #100]	; 0x64
 8021788:	81c2      	strh	r2, [r0, #14]
 802178a:	6183      	str	r3, [r0, #24]
 802178c:	4619      	mov	r1, r3
 802178e:	2208      	movs	r2, #8
 8021790:	305c      	adds	r0, #92	; 0x5c
 8021792:	f000 f99d 	bl	8021ad0 <memset>
 8021796:	4b05      	ldr	r3, [pc, #20]	; (80217ac <std+0x38>)
 8021798:	6263      	str	r3, [r4, #36]	; 0x24
 802179a:	4b05      	ldr	r3, [pc, #20]	; (80217b0 <std+0x3c>)
 802179c:	62a3      	str	r3, [r4, #40]	; 0x28
 802179e:	4b05      	ldr	r3, [pc, #20]	; (80217b4 <std+0x40>)
 80217a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80217a2:	4b05      	ldr	r3, [pc, #20]	; (80217b8 <std+0x44>)
 80217a4:	6224      	str	r4, [r4, #32]
 80217a6:	6323      	str	r3, [r4, #48]	; 0x30
 80217a8:	bd10      	pop	{r4, pc}
 80217aa:	bf00      	nop
 80217ac:	080220b5 	.word	0x080220b5
 80217b0:	080220d7 	.word	0x080220d7
 80217b4:	0802210f 	.word	0x0802210f
 80217b8:	08022133 	.word	0x08022133

080217bc <_cleanup_r>:
 80217bc:	4901      	ldr	r1, [pc, #4]	; (80217c4 <_cleanup_r+0x8>)
 80217be:	f000 b8af 	b.w	8021920 <_fwalk_reent>
 80217c2:	bf00      	nop
 80217c4:	08022649 	.word	0x08022649

080217c8 <__sfmoreglue>:
 80217c8:	b570      	push	{r4, r5, r6, lr}
 80217ca:	2268      	movs	r2, #104	; 0x68
 80217cc:	1e4d      	subs	r5, r1, #1
 80217ce:	4355      	muls	r5, r2
 80217d0:	460e      	mov	r6, r1
 80217d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80217d6:	f000 fa05 	bl	8021be4 <_malloc_r>
 80217da:	4604      	mov	r4, r0
 80217dc:	b140      	cbz	r0, 80217f0 <__sfmoreglue+0x28>
 80217de:	2100      	movs	r1, #0
 80217e0:	e9c0 1600 	strd	r1, r6, [r0]
 80217e4:	300c      	adds	r0, #12
 80217e6:	60a0      	str	r0, [r4, #8]
 80217e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80217ec:	f000 f970 	bl	8021ad0 <memset>
 80217f0:	4620      	mov	r0, r4
 80217f2:	bd70      	pop	{r4, r5, r6, pc}

080217f4 <__sfp_lock_acquire>:
 80217f4:	4801      	ldr	r0, [pc, #4]	; (80217fc <__sfp_lock_acquire+0x8>)
 80217f6:	f000 b920 	b.w	8021a3a <__retarget_lock_acquire_recursive>
 80217fa:	bf00      	nop
 80217fc:	2004406e 	.word	0x2004406e

08021800 <__sfp_lock_release>:
 8021800:	4801      	ldr	r0, [pc, #4]	; (8021808 <__sfp_lock_release+0x8>)
 8021802:	f000 b91b 	b.w	8021a3c <__retarget_lock_release_recursive>
 8021806:	bf00      	nop
 8021808:	2004406e 	.word	0x2004406e

0802180c <__sinit_lock_acquire>:
 802180c:	4801      	ldr	r0, [pc, #4]	; (8021814 <__sinit_lock_acquire+0x8>)
 802180e:	f000 b914 	b.w	8021a3a <__retarget_lock_acquire_recursive>
 8021812:	bf00      	nop
 8021814:	2004406f 	.word	0x2004406f

08021818 <__sinit_lock_release>:
 8021818:	4801      	ldr	r0, [pc, #4]	; (8021820 <__sinit_lock_release+0x8>)
 802181a:	f000 b90f 	b.w	8021a3c <__retarget_lock_release_recursive>
 802181e:	bf00      	nop
 8021820:	2004406f 	.word	0x2004406f

08021824 <__sinit>:
 8021824:	b510      	push	{r4, lr}
 8021826:	4604      	mov	r4, r0
 8021828:	f7ff fff0 	bl	802180c <__sinit_lock_acquire>
 802182c:	69a3      	ldr	r3, [r4, #24]
 802182e:	b11b      	cbz	r3, 8021838 <__sinit+0x14>
 8021830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021834:	f7ff bff0 	b.w	8021818 <__sinit_lock_release>
 8021838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802183c:	6523      	str	r3, [r4, #80]	; 0x50
 802183e:	4b13      	ldr	r3, [pc, #76]	; (802188c <__sinit+0x68>)
 8021840:	4a13      	ldr	r2, [pc, #76]	; (8021890 <__sinit+0x6c>)
 8021842:	681b      	ldr	r3, [r3, #0]
 8021844:	62a2      	str	r2, [r4, #40]	; 0x28
 8021846:	42a3      	cmp	r3, r4
 8021848:	bf04      	itt	eq
 802184a:	2301      	moveq	r3, #1
 802184c:	61a3      	streq	r3, [r4, #24]
 802184e:	4620      	mov	r0, r4
 8021850:	f000 f820 	bl	8021894 <__sfp>
 8021854:	6060      	str	r0, [r4, #4]
 8021856:	4620      	mov	r0, r4
 8021858:	f000 f81c 	bl	8021894 <__sfp>
 802185c:	60a0      	str	r0, [r4, #8]
 802185e:	4620      	mov	r0, r4
 8021860:	f000 f818 	bl	8021894 <__sfp>
 8021864:	2200      	movs	r2, #0
 8021866:	60e0      	str	r0, [r4, #12]
 8021868:	2104      	movs	r1, #4
 802186a:	6860      	ldr	r0, [r4, #4]
 802186c:	f7ff ff82 	bl	8021774 <std>
 8021870:	68a0      	ldr	r0, [r4, #8]
 8021872:	2201      	movs	r2, #1
 8021874:	2109      	movs	r1, #9
 8021876:	f7ff ff7d 	bl	8021774 <std>
 802187a:	68e0      	ldr	r0, [r4, #12]
 802187c:	2202      	movs	r2, #2
 802187e:	2112      	movs	r1, #18
 8021880:	f7ff ff78 	bl	8021774 <std>
 8021884:	2301      	movs	r3, #1
 8021886:	61a3      	str	r3, [r4, #24]
 8021888:	e7d2      	b.n	8021830 <__sinit+0xc>
 802188a:	bf00      	nop
 802188c:	08026e28 	.word	0x08026e28
 8021890:	080217bd 	.word	0x080217bd

08021894 <__sfp>:
 8021894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021896:	4607      	mov	r7, r0
 8021898:	f7ff ffac 	bl	80217f4 <__sfp_lock_acquire>
 802189c:	4b1e      	ldr	r3, [pc, #120]	; (8021918 <__sfp+0x84>)
 802189e:	681e      	ldr	r6, [r3, #0]
 80218a0:	69b3      	ldr	r3, [r6, #24]
 80218a2:	b913      	cbnz	r3, 80218aa <__sfp+0x16>
 80218a4:	4630      	mov	r0, r6
 80218a6:	f7ff ffbd 	bl	8021824 <__sinit>
 80218aa:	3648      	adds	r6, #72	; 0x48
 80218ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80218b0:	3b01      	subs	r3, #1
 80218b2:	d503      	bpl.n	80218bc <__sfp+0x28>
 80218b4:	6833      	ldr	r3, [r6, #0]
 80218b6:	b30b      	cbz	r3, 80218fc <__sfp+0x68>
 80218b8:	6836      	ldr	r6, [r6, #0]
 80218ba:	e7f7      	b.n	80218ac <__sfp+0x18>
 80218bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80218c0:	b9d5      	cbnz	r5, 80218f8 <__sfp+0x64>
 80218c2:	4b16      	ldr	r3, [pc, #88]	; (802191c <__sfp+0x88>)
 80218c4:	60e3      	str	r3, [r4, #12]
 80218c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80218ca:	6665      	str	r5, [r4, #100]	; 0x64
 80218cc:	f000 f8b4 	bl	8021a38 <__retarget_lock_init_recursive>
 80218d0:	f7ff ff96 	bl	8021800 <__sfp_lock_release>
 80218d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80218d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80218dc:	6025      	str	r5, [r4, #0]
 80218de:	61a5      	str	r5, [r4, #24]
 80218e0:	2208      	movs	r2, #8
 80218e2:	4629      	mov	r1, r5
 80218e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80218e8:	f000 f8f2 	bl	8021ad0 <memset>
 80218ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80218f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80218f4:	4620      	mov	r0, r4
 80218f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80218f8:	3468      	adds	r4, #104	; 0x68
 80218fa:	e7d9      	b.n	80218b0 <__sfp+0x1c>
 80218fc:	2104      	movs	r1, #4
 80218fe:	4638      	mov	r0, r7
 8021900:	f7ff ff62 	bl	80217c8 <__sfmoreglue>
 8021904:	4604      	mov	r4, r0
 8021906:	6030      	str	r0, [r6, #0]
 8021908:	2800      	cmp	r0, #0
 802190a:	d1d5      	bne.n	80218b8 <__sfp+0x24>
 802190c:	f7ff ff78 	bl	8021800 <__sfp_lock_release>
 8021910:	230c      	movs	r3, #12
 8021912:	603b      	str	r3, [r7, #0]
 8021914:	e7ee      	b.n	80218f4 <__sfp+0x60>
 8021916:	bf00      	nop
 8021918:	08026e28 	.word	0x08026e28
 802191c:	ffff0001 	.word	0xffff0001

08021920 <_fwalk_reent>:
 8021920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021924:	4606      	mov	r6, r0
 8021926:	4688      	mov	r8, r1
 8021928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802192c:	2700      	movs	r7, #0
 802192e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021932:	f1b9 0901 	subs.w	r9, r9, #1
 8021936:	d505      	bpl.n	8021944 <_fwalk_reent+0x24>
 8021938:	6824      	ldr	r4, [r4, #0]
 802193a:	2c00      	cmp	r4, #0
 802193c:	d1f7      	bne.n	802192e <_fwalk_reent+0xe>
 802193e:	4638      	mov	r0, r7
 8021940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021944:	89ab      	ldrh	r3, [r5, #12]
 8021946:	2b01      	cmp	r3, #1
 8021948:	d907      	bls.n	802195a <_fwalk_reent+0x3a>
 802194a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802194e:	3301      	adds	r3, #1
 8021950:	d003      	beq.n	802195a <_fwalk_reent+0x3a>
 8021952:	4629      	mov	r1, r5
 8021954:	4630      	mov	r0, r6
 8021956:	47c0      	blx	r8
 8021958:	4307      	orrs	r7, r0
 802195a:	3568      	adds	r5, #104	; 0x68
 802195c:	e7e9      	b.n	8021932 <_fwalk_reent+0x12>
	...

08021960 <getenv>:
 8021960:	b507      	push	{r0, r1, r2, lr}
 8021962:	4b04      	ldr	r3, [pc, #16]	; (8021974 <getenv+0x14>)
 8021964:	4601      	mov	r1, r0
 8021966:	aa01      	add	r2, sp, #4
 8021968:	6818      	ldr	r0, [r3, #0]
 802196a:	f000 f805 	bl	8021978 <_findenv_r>
 802196e:	b003      	add	sp, #12
 8021970:	f85d fb04 	ldr.w	pc, [sp], #4
 8021974:	200000c8 	.word	0x200000c8

08021978 <_findenv_r>:
 8021978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802197c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80219ec <_findenv_r+0x74>
 8021980:	4607      	mov	r7, r0
 8021982:	4689      	mov	r9, r1
 8021984:	4616      	mov	r6, r2
 8021986:	f000 fdcd 	bl	8022524 <__env_lock>
 802198a:	f8da 4000 	ldr.w	r4, [sl]
 802198e:	b134      	cbz	r4, 802199e <_findenv_r+0x26>
 8021990:	464b      	mov	r3, r9
 8021992:	4698      	mov	r8, r3
 8021994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021998:	b13a      	cbz	r2, 80219aa <_findenv_r+0x32>
 802199a:	2a3d      	cmp	r2, #61	; 0x3d
 802199c:	d1f9      	bne.n	8021992 <_findenv_r+0x1a>
 802199e:	4638      	mov	r0, r7
 80219a0:	f000 fdc6 	bl	8022530 <__env_unlock>
 80219a4:	2000      	movs	r0, #0
 80219a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219aa:	eba8 0809 	sub.w	r8, r8, r9
 80219ae:	46a3      	mov	fp, r4
 80219b0:	f854 0b04 	ldr.w	r0, [r4], #4
 80219b4:	2800      	cmp	r0, #0
 80219b6:	d0f2      	beq.n	802199e <_findenv_r+0x26>
 80219b8:	4642      	mov	r2, r8
 80219ba:	4649      	mov	r1, r9
 80219bc:	f000 fbd2 	bl	8022164 <strncmp>
 80219c0:	2800      	cmp	r0, #0
 80219c2:	d1f4      	bne.n	80219ae <_findenv_r+0x36>
 80219c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80219c8:	eb03 0508 	add.w	r5, r3, r8
 80219cc:	f813 3008 	ldrb.w	r3, [r3, r8]
 80219d0:	2b3d      	cmp	r3, #61	; 0x3d
 80219d2:	d1ec      	bne.n	80219ae <_findenv_r+0x36>
 80219d4:	f8da 3000 	ldr.w	r3, [sl]
 80219d8:	ebab 0303 	sub.w	r3, fp, r3
 80219dc:	109b      	asrs	r3, r3, #2
 80219de:	4638      	mov	r0, r7
 80219e0:	6033      	str	r3, [r6, #0]
 80219e2:	f000 fda5 	bl	8022530 <__env_unlock>
 80219e6:	1c68      	adds	r0, r5, #1
 80219e8:	e7dd      	b.n	80219a6 <_findenv_r+0x2e>
 80219ea:	bf00      	nop
 80219ec:	20000000 	.word	0x20000000

080219f0 <__libc_init_array>:
 80219f0:	b570      	push	{r4, r5, r6, lr}
 80219f2:	4d0d      	ldr	r5, [pc, #52]	; (8021a28 <__libc_init_array+0x38>)
 80219f4:	4c0d      	ldr	r4, [pc, #52]	; (8021a2c <__libc_init_array+0x3c>)
 80219f6:	1b64      	subs	r4, r4, r5
 80219f8:	10a4      	asrs	r4, r4, #2
 80219fa:	2600      	movs	r6, #0
 80219fc:	42a6      	cmp	r6, r4
 80219fe:	d109      	bne.n	8021a14 <__libc_init_array+0x24>
 8021a00:	4d0b      	ldr	r5, [pc, #44]	; (8021a30 <__libc_init_array+0x40>)
 8021a02:	4c0c      	ldr	r4, [pc, #48]	; (8021a34 <__libc_init_array+0x44>)
 8021a04:	f001 fbac 	bl	8023160 <_init>
 8021a08:	1b64      	subs	r4, r4, r5
 8021a0a:	10a4      	asrs	r4, r4, #2
 8021a0c:	2600      	movs	r6, #0
 8021a0e:	42a6      	cmp	r6, r4
 8021a10:	d105      	bne.n	8021a1e <__libc_init_array+0x2e>
 8021a12:	bd70      	pop	{r4, r5, r6, pc}
 8021a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a18:	4798      	blx	r3
 8021a1a:	3601      	adds	r6, #1
 8021a1c:	e7ee      	b.n	80219fc <__libc_init_array+0xc>
 8021a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a22:	4798      	blx	r3
 8021a24:	3601      	adds	r6, #1
 8021a26:	e7f2      	b.n	8021a0e <__libc_init_array+0x1e>
 8021a28:	08027928 	.word	0x08027928
 8021a2c:	08027928 	.word	0x08027928
 8021a30:	08027928 	.word	0x08027928
 8021a34:	08027930 	.word	0x08027930

08021a38 <__retarget_lock_init_recursive>:
 8021a38:	4770      	bx	lr

08021a3a <__retarget_lock_acquire_recursive>:
 8021a3a:	4770      	bx	lr

08021a3c <__retarget_lock_release_recursive>:
 8021a3c:	4770      	bx	lr
	...

08021a40 <malloc>:
 8021a40:	4b02      	ldr	r3, [pc, #8]	; (8021a4c <malloc+0xc>)
 8021a42:	4601      	mov	r1, r0
 8021a44:	6818      	ldr	r0, [r3, #0]
 8021a46:	f000 b8cd 	b.w	8021be4 <_malloc_r>
 8021a4a:	bf00      	nop
 8021a4c:	200000c8 	.word	0x200000c8

08021a50 <free>:
 8021a50:	4b02      	ldr	r3, [pc, #8]	; (8021a5c <free+0xc>)
 8021a52:	4601      	mov	r1, r0
 8021a54:	6818      	ldr	r0, [r3, #0]
 8021a56:	f000 b859 	b.w	8021b0c <_free_r>
 8021a5a:	bf00      	nop
 8021a5c:	200000c8 	.word	0x200000c8

08021a60 <memcmp>:
 8021a60:	b510      	push	{r4, lr}
 8021a62:	3901      	subs	r1, #1
 8021a64:	4402      	add	r2, r0
 8021a66:	4290      	cmp	r0, r2
 8021a68:	d101      	bne.n	8021a6e <memcmp+0xe>
 8021a6a:	2000      	movs	r0, #0
 8021a6c:	e005      	b.n	8021a7a <memcmp+0x1a>
 8021a6e:	7803      	ldrb	r3, [r0, #0]
 8021a70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021a74:	42a3      	cmp	r3, r4
 8021a76:	d001      	beq.n	8021a7c <memcmp+0x1c>
 8021a78:	1b18      	subs	r0, r3, r4
 8021a7a:	bd10      	pop	{r4, pc}
 8021a7c:	3001      	adds	r0, #1
 8021a7e:	e7f2      	b.n	8021a66 <memcmp+0x6>

08021a80 <memcpy>:
 8021a80:	440a      	add	r2, r1
 8021a82:	4291      	cmp	r1, r2
 8021a84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8021a88:	d100      	bne.n	8021a8c <memcpy+0xc>
 8021a8a:	4770      	bx	lr
 8021a8c:	b510      	push	{r4, lr}
 8021a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021a96:	4291      	cmp	r1, r2
 8021a98:	d1f9      	bne.n	8021a8e <memcpy+0xe>
 8021a9a:	bd10      	pop	{r4, pc}

08021a9c <memmove>:
 8021a9c:	4288      	cmp	r0, r1
 8021a9e:	b510      	push	{r4, lr}
 8021aa0:	eb01 0402 	add.w	r4, r1, r2
 8021aa4:	d902      	bls.n	8021aac <memmove+0x10>
 8021aa6:	4284      	cmp	r4, r0
 8021aa8:	4623      	mov	r3, r4
 8021aaa:	d807      	bhi.n	8021abc <memmove+0x20>
 8021aac:	1e43      	subs	r3, r0, #1
 8021aae:	42a1      	cmp	r1, r4
 8021ab0:	d008      	beq.n	8021ac4 <memmove+0x28>
 8021ab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021ab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021aba:	e7f8      	b.n	8021aae <memmove+0x12>
 8021abc:	4402      	add	r2, r0
 8021abe:	4601      	mov	r1, r0
 8021ac0:	428a      	cmp	r2, r1
 8021ac2:	d100      	bne.n	8021ac6 <memmove+0x2a>
 8021ac4:	bd10      	pop	{r4, pc}
 8021ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021aca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021ace:	e7f7      	b.n	8021ac0 <memmove+0x24>

08021ad0 <memset>:
 8021ad0:	4402      	add	r2, r0
 8021ad2:	4603      	mov	r3, r0
 8021ad4:	4293      	cmp	r3, r2
 8021ad6:	d100      	bne.n	8021ada <memset+0xa>
 8021ad8:	4770      	bx	lr
 8021ada:	f803 1b01 	strb.w	r1, [r3], #1
 8021ade:	e7f9      	b.n	8021ad4 <memset+0x4>

08021ae0 <_calloc_r>:
 8021ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021ae2:	fba1 2402 	umull	r2, r4, r1, r2
 8021ae6:	b94c      	cbnz	r4, 8021afc <_calloc_r+0x1c>
 8021ae8:	4611      	mov	r1, r2
 8021aea:	9201      	str	r2, [sp, #4]
 8021aec:	f000 f87a 	bl	8021be4 <_malloc_r>
 8021af0:	9a01      	ldr	r2, [sp, #4]
 8021af2:	4605      	mov	r5, r0
 8021af4:	b930      	cbnz	r0, 8021b04 <_calloc_r+0x24>
 8021af6:	4628      	mov	r0, r5
 8021af8:	b003      	add	sp, #12
 8021afa:	bd30      	pop	{r4, r5, pc}
 8021afc:	220c      	movs	r2, #12
 8021afe:	6002      	str	r2, [r0, #0]
 8021b00:	2500      	movs	r5, #0
 8021b02:	e7f8      	b.n	8021af6 <_calloc_r+0x16>
 8021b04:	4621      	mov	r1, r4
 8021b06:	f7ff ffe3 	bl	8021ad0 <memset>
 8021b0a:	e7f4      	b.n	8021af6 <_calloc_r+0x16>

08021b0c <_free_r>:
 8021b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021b0e:	2900      	cmp	r1, #0
 8021b10:	d044      	beq.n	8021b9c <_free_r+0x90>
 8021b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021b16:	9001      	str	r0, [sp, #4]
 8021b18:	2b00      	cmp	r3, #0
 8021b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8021b1e:	bfb8      	it	lt
 8021b20:	18e4      	addlt	r4, r4, r3
 8021b22:	f000 fe57 	bl	80227d4 <__malloc_lock>
 8021b26:	4a1e      	ldr	r2, [pc, #120]	; (8021ba0 <_free_r+0x94>)
 8021b28:	9801      	ldr	r0, [sp, #4]
 8021b2a:	6813      	ldr	r3, [r2, #0]
 8021b2c:	b933      	cbnz	r3, 8021b3c <_free_r+0x30>
 8021b2e:	6063      	str	r3, [r4, #4]
 8021b30:	6014      	str	r4, [r2, #0]
 8021b32:	b003      	add	sp, #12
 8021b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021b38:	f000 be52 	b.w	80227e0 <__malloc_unlock>
 8021b3c:	42a3      	cmp	r3, r4
 8021b3e:	d908      	bls.n	8021b52 <_free_r+0x46>
 8021b40:	6825      	ldr	r5, [r4, #0]
 8021b42:	1961      	adds	r1, r4, r5
 8021b44:	428b      	cmp	r3, r1
 8021b46:	bf01      	itttt	eq
 8021b48:	6819      	ldreq	r1, [r3, #0]
 8021b4a:	685b      	ldreq	r3, [r3, #4]
 8021b4c:	1949      	addeq	r1, r1, r5
 8021b4e:	6021      	streq	r1, [r4, #0]
 8021b50:	e7ed      	b.n	8021b2e <_free_r+0x22>
 8021b52:	461a      	mov	r2, r3
 8021b54:	685b      	ldr	r3, [r3, #4]
 8021b56:	b10b      	cbz	r3, 8021b5c <_free_r+0x50>
 8021b58:	42a3      	cmp	r3, r4
 8021b5a:	d9fa      	bls.n	8021b52 <_free_r+0x46>
 8021b5c:	6811      	ldr	r1, [r2, #0]
 8021b5e:	1855      	adds	r5, r2, r1
 8021b60:	42a5      	cmp	r5, r4
 8021b62:	d10b      	bne.n	8021b7c <_free_r+0x70>
 8021b64:	6824      	ldr	r4, [r4, #0]
 8021b66:	4421      	add	r1, r4
 8021b68:	1854      	adds	r4, r2, r1
 8021b6a:	42a3      	cmp	r3, r4
 8021b6c:	6011      	str	r1, [r2, #0]
 8021b6e:	d1e0      	bne.n	8021b32 <_free_r+0x26>
 8021b70:	681c      	ldr	r4, [r3, #0]
 8021b72:	685b      	ldr	r3, [r3, #4]
 8021b74:	6053      	str	r3, [r2, #4]
 8021b76:	4421      	add	r1, r4
 8021b78:	6011      	str	r1, [r2, #0]
 8021b7a:	e7da      	b.n	8021b32 <_free_r+0x26>
 8021b7c:	d902      	bls.n	8021b84 <_free_r+0x78>
 8021b7e:	230c      	movs	r3, #12
 8021b80:	6003      	str	r3, [r0, #0]
 8021b82:	e7d6      	b.n	8021b32 <_free_r+0x26>
 8021b84:	6825      	ldr	r5, [r4, #0]
 8021b86:	1961      	adds	r1, r4, r5
 8021b88:	428b      	cmp	r3, r1
 8021b8a:	bf04      	itt	eq
 8021b8c:	6819      	ldreq	r1, [r3, #0]
 8021b8e:	685b      	ldreq	r3, [r3, #4]
 8021b90:	6063      	str	r3, [r4, #4]
 8021b92:	bf04      	itt	eq
 8021b94:	1949      	addeq	r1, r1, r5
 8021b96:	6021      	streq	r1, [r4, #0]
 8021b98:	6054      	str	r4, [r2, #4]
 8021b9a:	e7ca      	b.n	8021b32 <_free_r+0x26>
 8021b9c:	b003      	add	sp, #12
 8021b9e:	bd30      	pop	{r4, r5, pc}
 8021ba0:	20044070 	.word	0x20044070

08021ba4 <sbrk_aligned>:
 8021ba4:	b570      	push	{r4, r5, r6, lr}
 8021ba6:	4e0e      	ldr	r6, [pc, #56]	; (8021be0 <sbrk_aligned+0x3c>)
 8021ba8:	460c      	mov	r4, r1
 8021baa:	6831      	ldr	r1, [r6, #0]
 8021bac:	4605      	mov	r5, r0
 8021bae:	b911      	cbnz	r1, 8021bb6 <sbrk_aligned+0x12>
 8021bb0:	f000 f9f8 	bl	8021fa4 <_sbrk_r>
 8021bb4:	6030      	str	r0, [r6, #0]
 8021bb6:	4621      	mov	r1, r4
 8021bb8:	4628      	mov	r0, r5
 8021bba:	f000 f9f3 	bl	8021fa4 <_sbrk_r>
 8021bbe:	1c43      	adds	r3, r0, #1
 8021bc0:	d00a      	beq.n	8021bd8 <sbrk_aligned+0x34>
 8021bc2:	1cc4      	adds	r4, r0, #3
 8021bc4:	f024 0403 	bic.w	r4, r4, #3
 8021bc8:	42a0      	cmp	r0, r4
 8021bca:	d007      	beq.n	8021bdc <sbrk_aligned+0x38>
 8021bcc:	1a21      	subs	r1, r4, r0
 8021bce:	4628      	mov	r0, r5
 8021bd0:	f000 f9e8 	bl	8021fa4 <_sbrk_r>
 8021bd4:	3001      	adds	r0, #1
 8021bd6:	d101      	bne.n	8021bdc <sbrk_aligned+0x38>
 8021bd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8021bdc:	4620      	mov	r0, r4
 8021bde:	bd70      	pop	{r4, r5, r6, pc}
 8021be0:	20044074 	.word	0x20044074

08021be4 <_malloc_r>:
 8021be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021be8:	1ccd      	adds	r5, r1, #3
 8021bea:	f025 0503 	bic.w	r5, r5, #3
 8021bee:	3508      	adds	r5, #8
 8021bf0:	2d0c      	cmp	r5, #12
 8021bf2:	bf38      	it	cc
 8021bf4:	250c      	movcc	r5, #12
 8021bf6:	2d00      	cmp	r5, #0
 8021bf8:	4607      	mov	r7, r0
 8021bfa:	db01      	blt.n	8021c00 <_malloc_r+0x1c>
 8021bfc:	42a9      	cmp	r1, r5
 8021bfe:	d905      	bls.n	8021c0c <_malloc_r+0x28>
 8021c00:	230c      	movs	r3, #12
 8021c02:	603b      	str	r3, [r7, #0]
 8021c04:	2600      	movs	r6, #0
 8021c06:	4630      	mov	r0, r6
 8021c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c0c:	4e2e      	ldr	r6, [pc, #184]	; (8021cc8 <_malloc_r+0xe4>)
 8021c0e:	f000 fde1 	bl	80227d4 <__malloc_lock>
 8021c12:	6833      	ldr	r3, [r6, #0]
 8021c14:	461c      	mov	r4, r3
 8021c16:	bb34      	cbnz	r4, 8021c66 <_malloc_r+0x82>
 8021c18:	4629      	mov	r1, r5
 8021c1a:	4638      	mov	r0, r7
 8021c1c:	f7ff ffc2 	bl	8021ba4 <sbrk_aligned>
 8021c20:	1c43      	adds	r3, r0, #1
 8021c22:	4604      	mov	r4, r0
 8021c24:	d14d      	bne.n	8021cc2 <_malloc_r+0xde>
 8021c26:	6834      	ldr	r4, [r6, #0]
 8021c28:	4626      	mov	r6, r4
 8021c2a:	2e00      	cmp	r6, #0
 8021c2c:	d140      	bne.n	8021cb0 <_malloc_r+0xcc>
 8021c2e:	6823      	ldr	r3, [r4, #0]
 8021c30:	4631      	mov	r1, r6
 8021c32:	4638      	mov	r0, r7
 8021c34:	eb04 0803 	add.w	r8, r4, r3
 8021c38:	f000 f9b4 	bl	8021fa4 <_sbrk_r>
 8021c3c:	4580      	cmp	r8, r0
 8021c3e:	d13a      	bne.n	8021cb6 <_malloc_r+0xd2>
 8021c40:	6821      	ldr	r1, [r4, #0]
 8021c42:	3503      	adds	r5, #3
 8021c44:	1a6d      	subs	r5, r5, r1
 8021c46:	f025 0503 	bic.w	r5, r5, #3
 8021c4a:	3508      	adds	r5, #8
 8021c4c:	2d0c      	cmp	r5, #12
 8021c4e:	bf38      	it	cc
 8021c50:	250c      	movcc	r5, #12
 8021c52:	4629      	mov	r1, r5
 8021c54:	4638      	mov	r0, r7
 8021c56:	f7ff ffa5 	bl	8021ba4 <sbrk_aligned>
 8021c5a:	3001      	adds	r0, #1
 8021c5c:	d02b      	beq.n	8021cb6 <_malloc_r+0xd2>
 8021c5e:	6823      	ldr	r3, [r4, #0]
 8021c60:	442b      	add	r3, r5
 8021c62:	6023      	str	r3, [r4, #0]
 8021c64:	e00e      	b.n	8021c84 <_malloc_r+0xa0>
 8021c66:	6822      	ldr	r2, [r4, #0]
 8021c68:	1b52      	subs	r2, r2, r5
 8021c6a:	d41e      	bmi.n	8021caa <_malloc_r+0xc6>
 8021c6c:	2a0b      	cmp	r2, #11
 8021c6e:	d916      	bls.n	8021c9e <_malloc_r+0xba>
 8021c70:	1961      	adds	r1, r4, r5
 8021c72:	42a3      	cmp	r3, r4
 8021c74:	6025      	str	r5, [r4, #0]
 8021c76:	bf18      	it	ne
 8021c78:	6059      	strne	r1, [r3, #4]
 8021c7a:	6863      	ldr	r3, [r4, #4]
 8021c7c:	bf08      	it	eq
 8021c7e:	6031      	streq	r1, [r6, #0]
 8021c80:	5162      	str	r2, [r4, r5]
 8021c82:	604b      	str	r3, [r1, #4]
 8021c84:	4638      	mov	r0, r7
 8021c86:	f104 060b 	add.w	r6, r4, #11
 8021c8a:	f000 fda9 	bl	80227e0 <__malloc_unlock>
 8021c8e:	f026 0607 	bic.w	r6, r6, #7
 8021c92:	1d23      	adds	r3, r4, #4
 8021c94:	1af2      	subs	r2, r6, r3
 8021c96:	d0b6      	beq.n	8021c06 <_malloc_r+0x22>
 8021c98:	1b9b      	subs	r3, r3, r6
 8021c9a:	50a3      	str	r3, [r4, r2]
 8021c9c:	e7b3      	b.n	8021c06 <_malloc_r+0x22>
 8021c9e:	6862      	ldr	r2, [r4, #4]
 8021ca0:	42a3      	cmp	r3, r4
 8021ca2:	bf0c      	ite	eq
 8021ca4:	6032      	streq	r2, [r6, #0]
 8021ca6:	605a      	strne	r2, [r3, #4]
 8021ca8:	e7ec      	b.n	8021c84 <_malloc_r+0xa0>
 8021caa:	4623      	mov	r3, r4
 8021cac:	6864      	ldr	r4, [r4, #4]
 8021cae:	e7b2      	b.n	8021c16 <_malloc_r+0x32>
 8021cb0:	4634      	mov	r4, r6
 8021cb2:	6876      	ldr	r6, [r6, #4]
 8021cb4:	e7b9      	b.n	8021c2a <_malloc_r+0x46>
 8021cb6:	230c      	movs	r3, #12
 8021cb8:	603b      	str	r3, [r7, #0]
 8021cba:	4638      	mov	r0, r7
 8021cbc:	f000 fd90 	bl	80227e0 <__malloc_unlock>
 8021cc0:	e7a1      	b.n	8021c06 <_malloc_r+0x22>
 8021cc2:	6025      	str	r5, [r4, #0]
 8021cc4:	e7de      	b.n	8021c84 <_malloc_r+0xa0>
 8021cc6:	bf00      	nop
 8021cc8:	20044070 	.word	0x20044070

08021ccc <iprintf>:
 8021ccc:	b40f      	push	{r0, r1, r2, r3}
 8021cce:	4b0a      	ldr	r3, [pc, #40]	; (8021cf8 <iprintf+0x2c>)
 8021cd0:	b513      	push	{r0, r1, r4, lr}
 8021cd2:	681c      	ldr	r4, [r3, #0]
 8021cd4:	b124      	cbz	r4, 8021ce0 <iprintf+0x14>
 8021cd6:	69a3      	ldr	r3, [r4, #24]
 8021cd8:	b913      	cbnz	r3, 8021ce0 <iprintf+0x14>
 8021cda:	4620      	mov	r0, r4
 8021cdc:	f7ff fda2 	bl	8021824 <__sinit>
 8021ce0:	ab05      	add	r3, sp, #20
 8021ce2:	9a04      	ldr	r2, [sp, #16]
 8021ce4:	68a1      	ldr	r1, [r4, #8]
 8021ce6:	9301      	str	r3, [sp, #4]
 8021ce8:	4620      	mov	r0, r4
 8021cea:	f000 ff33 	bl	8022b54 <_vfiprintf_r>
 8021cee:	b002      	add	sp, #8
 8021cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021cf4:	b004      	add	sp, #16
 8021cf6:	4770      	bx	lr
 8021cf8:	200000c8 	.word	0x200000c8

08021cfc <_puts_r>:
 8021cfc:	b570      	push	{r4, r5, r6, lr}
 8021cfe:	460e      	mov	r6, r1
 8021d00:	4605      	mov	r5, r0
 8021d02:	b118      	cbz	r0, 8021d0c <_puts_r+0x10>
 8021d04:	6983      	ldr	r3, [r0, #24]
 8021d06:	b90b      	cbnz	r3, 8021d0c <_puts_r+0x10>
 8021d08:	f7ff fd8c 	bl	8021824 <__sinit>
 8021d0c:	69ab      	ldr	r3, [r5, #24]
 8021d0e:	68ac      	ldr	r4, [r5, #8]
 8021d10:	b913      	cbnz	r3, 8021d18 <_puts_r+0x1c>
 8021d12:	4628      	mov	r0, r5
 8021d14:	f7ff fd86 	bl	8021824 <__sinit>
 8021d18:	4b2c      	ldr	r3, [pc, #176]	; (8021dcc <_puts_r+0xd0>)
 8021d1a:	429c      	cmp	r4, r3
 8021d1c:	d120      	bne.n	8021d60 <_puts_r+0x64>
 8021d1e:	686c      	ldr	r4, [r5, #4]
 8021d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021d22:	07db      	lsls	r3, r3, #31
 8021d24:	d405      	bmi.n	8021d32 <_puts_r+0x36>
 8021d26:	89a3      	ldrh	r3, [r4, #12]
 8021d28:	0598      	lsls	r0, r3, #22
 8021d2a:	d402      	bmi.n	8021d32 <_puts_r+0x36>
 8021d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d2e:	f7ff fe84 	bl	8021a3a <__retarget_lock_acquire_recursive>
 8021d32:	89a3      	ldrh	r3, [r4, #12]
 8021d34:	0719      	lsls	r1, r3, #28
 8021d36:	d51d      	bpl.n	8021d74 <_puts_r+0x78>
 8021d38:	6923      	ldr	r3, [r4, #16]
 8021d3a:	b1db      	cbz	r3, 8021d74 <_puts_r+0x78>
 8021d3c:	3e01      	subs	r6, #1
 8021d3e:	68a3      	ldr	r3, [r4, #8]
 8021d40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021d44:	3b01      	subs	r3, #1
 8021d46:	60a3      	str	r3, [r4, #8]
 8021d48:	bb39      	cbnz	r1, 8021d9a <_puts_r+0x9e>
 8021d4a:	2b00      	cmp	r3, #0
 8021d4c:	da38      	bge.n	8021dc0 <_puts_r+0xc4>
 8021d4e:	4622      	mov	r2, r4
 8021d50:	210a      	movs	r1, #10
 8021d52:	4628      	mov	r0, r5
 8021d54:	f000 fae6 	bl	8022324 <__swbuf_r>
 8021d58:	3001      	adds	r0, #1
 8021d5a:	d011      	beq.n	8021d80 <_puts_r+0x84>
 8021d5c:	250a      	movs	r5, #10
 8021d5e:	e011      	b.n	8021d84 <_puts_r+0x88>
 8021d60:	4b1b      	ldr	r3, [pc, #108]	; (8021dd0 <_puts_r+0xd4>)
 8021d62:	429c      	cmp	r4, r3
 8021d64:	d101      	bne.n	8021d6a <_puts_r+0x6e>
 8021d66:	68ac      	ldr	r4, [r5, #8]
 8021d68:	e7da      	b.n	8021d20 <_puts_r+0x24>
 8021d6a:	4b1a      	ldr	r3, [pc, #104]	; (8021dd4 <_puts_r+0xd8>)
 8021d6c:	429c      	cmp	r4, r3
 8021d6e:	bf08      	it	eq
 8021d70:	68ec      	ldreq	r4, [r5, #12]
 8021d72:	e7d5      	b.n	8021d20 <_puts_r+0x24>
 8021d74:	4621      	mov	r1, r4
 8021d76:	4628      	mov	r0, r5
 8021d78:	f000 fb38 	bl	80223ec <__swsetup_r>
 8021d7c:	2800      	cmp	r0, #0
 8021d7e:	d0dd      	beq.n	8021d3c <_puts_r+0x40>
 8021d80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8021d84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021d86:	07da      	lsls	r2, r3, #31
 8021d88:	d405      	bmi.n	8021d96 <_puts_r+0x9a>
 8021d8a:	89a3      	ldrh	r3, [r4, #12]
 8021d8c:	059b      	lsls	r3, r3, #22
 8021d8e:	d402      	bmi.n	8021d96 <_puts_r+0x9a>
 8021d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d92:	f7ff fe53 	bl	8021a3c <__retarget_lock_release_recursive>
 8021d96:	4628      	mov	r0, r5
 8021d98:	bd70      	pop	{r4, r5, r6, pc}
 8021d9a:	2b00      	cmp	r3, #0
 8021d9c:	da04      	bge.n	8021da8 <_puts_r+0xac>
 8021d9e:	69a2      	ldr	r2, [r4, #24]
 8021da0:	429a      	cmp	r2, r3
 8021da2:	dc06      	bgt.n	8021db2 <_puts_r+0xb6>
 8021da4:	290a      	cmp	r1, #10
 8021da6:	d004      	beq.n	8021db2 <_puts_r+0xb6>
 8021da8:	6823      	ldr	r3, [r4, #0]
 8021daa:	1c5a      	adds	r2, r3, #1
 8021dac:	6022      	str	r2, [r4, #0]
 8021dae:	7019      	strb	r1, [r3, #0]
 8021db0:	e7c5      	b.n	8021d3e <_puts_r+0x42>
 8021db2:	4622      	mov	r2, r4
 8021db4:	4628      	mov	r0, r5
 8021db6:	f000 fab5 	bl	8022324 <__swbuf_r>
 8021dba:	3001      	adds	r0, #1
 8021dbc:	d1bf      	bne.n	8021d3e <_puts_r+0x42>
 8021dbe:	e7df      	b.n	8021d80 <_puts_r+0x84>
 8021dc0:	6823      	ldr	r3, [r4, #0]
 8021dc2:	250a      	movs	r5, #10
 8021dc4:	1c5a      	adds	r2, r3, #1
 8021dc6:	6022      	str	r2, [r4, #0]
 8021dc8:	701d      	strb	r5, [r3, #0]
 8021dca:	e7db      	b.n	8021d84 <_puts_r+0x88>
 8021dcc:	08026de8 	.word	0x08026de8
 8021dd0:	08026e08 	.word	0x08026e08
 8021dd4:	08026dc8 	.word	0x08026dc8

08021dd8 <puts>:
 8021dd8:	4b02      	ldr	r3, [pc, #8]	; (8021de4 <puts+0xc>)
 8021dda:	4601      	mov	r1, r0
 8021ddc:	6818      	ldr	r0, [r3, #0]
 8021dde:	f7ff bf8d 	b.w	8021cfc <_puts_r>
 8021de2:	bf00      	nop
 8021de4:	200000c8 	.word	0x200000c8

08021de8 <srand>:
 8021de8:	b538      	push	{r3, r4, r5, lr}
 8021dea:	4b10      	ldr	r3, [pc, #64]	; (8021e2c <srand+0x44>)
 8021dec:	681d      	ldr	r5, [r3, #0]
 8021dee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021df0:	4604      	mov	r4, r0
 8021df2:	b9b3      	cbnz	r3, 8021e22 <srand+0x3a>
 8021df4:	2018      	movs	r0, #24
 8021df6:	f7ff fe23 	bl	8021a40 <malloc>
 8021dfa:	4602      	mov	r2, r0
 8021dfc:	63a8      	str	r0, [r5, #56]	; 0x38
 8021dfe:	b920      	cbnz	r0, 8021e0a <srand+0x22>
 8021e00:	4b0b      	ldr	r3, [pc, #44]	; (8021e30 <srand+0x48>)
 8021e02:	480c      	ldr	r0, [pc, #48]	; (8021e34 <srand+0x4c>)
 8021e04:	2142      	movs	r1, #66	; 0x42
 8021e06:	f000 fb5f 	bl	80224c8 <__assert_func>
 8021e0a:	490b      	ldr	r1, [pc, #44]	; (8021e38 <srand+0x50>)
 8021e0c:	4b0b      	ldr	r3, [pc, #44]	; (8021e3c <srand+0x54>)
 8021e0e:	e9c0 1300 	strd	r1, r3, [r0]
 8021e12:	4b0b      	ldr	r3, [pc, #44]	; (8021e40 <srand+0x58>)
 8021e14:	6083      	str	r3, [r0, #8]
 8021e16:	230b      	movs	r3, #11
 8021e18:	8183      	strh	r3, [r0, #12]
 8021e1a:	2100      	movs	r1, #0
 8021e1c:	2001      	movs	r0, #1
 8021e1e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021e22:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8021e24:	2200      	movs	r2, #0
 8021e26:	611c      	str	r4, [r3, #16]
 8021e28:	615a      	str	r2, [r3, #20]
 8021e2a:	bd38      	pop	{r3, r4, r5, pc}
 8021e2c:	200000c8 	.word	0x200000c8
 8021e30:	08026e2c 	.word	0x08026e2c
 8021e34:	08026e43 	.word	0x08026e43
 8021e38:	abcd330e 	.word	0xabcd330e
 8021e3c:	e66d1234 	.word	0xe66d1234
 8021e40:	0005deec 	.word	0x0005deec

08021e44 <rand>:
 8021e44:	4b16      	ldr	r3, [pc, #88]	; (8021ea0 <rand+0x5c>)
 8021e46:	b510      	push	{r4, lr}
 8021e48:	681c      	ldr	r4, [r3, #0]
 8021e4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021e4c:	b9b3      	cbnz	r3, 8021e7c <rand+0x38>
 8021e4e:	2018      	movs	r0, #24
 8021e50:	f7ff fdf6 	bl	8021a40 <malloc>
 8021e54:	63a0      	str	r0, [r4, #56]	; 0x38
 8021e56:	b928      	cbnz	r0, 8021e64 <rand+0x20>
 8021e58:	4602      	mov	r2, r0
 8021e5a:	4b12      	ldr	r3, [pc, #72]	; (8021ea4 <rand+0x60>)
 8021e5c:	4812      	ldr	r0, [pc, #72]	; (8021ea8 <rand+0x64>)
 8021e5e:	214e      	movs	r1, #78	; 0x4e
 8021e60:	f000 fb32 	bl	80224c8 <__assert_func>
 8021e64:	4a11      	ldr	r2, [pc, #68]	; (8021eac <rand+0x68>)
 8021e66:	4b12      	ldr	r3, [pc, #72]	; (8021eb0 <rand+0x6c>)
 8021e68:	e9c0 2300 	strd	r2, r3, [r0]
 8021e6c:	4b11      	ldr	r3, [pc, #68]	; (8021eb4 <rand+0x70>)
 8021e6e:	6083      	str	r3, [r0, #8]
 8021e70:	230b      	movs	r3, #11
 8021e72:	8183      	strh	r3, [r0, #12]
 8021e74:	2201      	movs	r2, #1
 8021e76:	2300      	movs	r3, #0
 8021e78:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021e7c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8021e7e:	4a0e      	ldr	r2, [pc, #56]	; (8021eb8 <rand+0x74>)
 8021e80:	6920      	ldr	r0, [r4, #16]
 8021e82:	6963      	ldr	r3, [r4, #20]
 8021e84:	490d      	ldr	r1, [pc, #52]	; (8021ebc <rand+0x78>)
 8021e86:	4342      	muls	r2, r0
 8021e88:	fb01 2203 	mla	r2, r1, r3, r2
 8021e8c:	fba0 0101 	umull	r0, r1, r0, r1
 8021e90:	1c43      	adds	r3, r0, #1
 8021e92:	eb42 0001 	adc.w	r0, r2, r1
 8021e96:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8021e9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8021e9e:	bd10      	pop	{r4, pc}
 8021ea0:	200000c8 	.word	0x200000c8
 8021ea4:	08026e2c 	.word	0x08026e2c
 8021ea8:	08026e43 	.word	0x08026e43
 8021eac:	abcd330e 	.word	0xabcd330e
 8021eb0:	e66d1234 	.word	0xe66d1234
 8021eb4:	0005deec 	.word	0x0005deec
 8021eb8:	5851f42d 	.word	0x5851f42d
 8021ebc:	4c957f2d 	.word	0x4c957f2d

08021ec0 <realloc>:
 8021ec0:	4b02      	ldr	r3, [pc, #8]	; (8021ecc <realloc+0xc>)
 8021ec2:	460a      	mov	r2, r1
 8021ec4:	4601      	mov	r1, r0
 8021ec6:	6818      	ldr	r0, [r3, #0]
 8021ec8:	f000 bc90 	b.w	80227ec <_realloc_r>
 8021ecc:	200000c8 	.word	0x200000c8

08021ed0 <cleanup_glue>:
 8021ed0:	b538      	push	{r3, r4, r5, lr}
 8021ed2:	460c      	mov	r4, r1
 8021ed4:	6809      	ldr	r1, [r1, #0]
 8021ed6:	4605      	mov	r5, r0
 8021ed8:	b109      	cbz	r1, 8021ede <cleanup_glue+0xe>
 8021eda:	f7ff fff9 	bl	8021ed0 <cleanup_glue>
 8021ede:	4621      	mov	r1, r4
 8021ee0:	4628      	mov	r0, r5
 8021ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021ee6:	f7ff be11 	b.w	8021b0c <_free_r>
	...

08021eec <_reclaim_reent>:
 8021eec:	4b2c      	ldr	r3, [pc, #176]	; (8021fa0 <_reclaim_reent+0xb4>)
 8021eee:	681b      	ldr	r3, [r3, #0]
 8021ef0:	4283      	cmp	r3, r0
 8021ef2:	b570      	push	{r4, r5, r6, lr}
 8021ef4:	4604      	mov	r4, r0
 8021ef6:	d051      	beq.n	8021f9c <_reclaim_reent+0xb0>
 8021ef8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8021efa:	b143      	cbz	r3, 8021f0e <_reclaim_reent+0x22>
 8021efc:	68db      	ldr	r3, [r3, #12]
 8021efe:	2b00      	cmp	r3, #0
 8021f00:	d14a      	bne.n	8021f98 <_reclaim_reent+0xac>
 8021f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021f04:	6819      	ldr	r1, [r3, #0]
 8021f06:	b111      	cbz	r1, 8021f0e <_reclaim_reent+0x22>
 8021f08:	4620      	mov	r0, r4
 8021f0a:	f7ff fdff 	bl	8021b0c <_free_r>
 8021f0e:	6961      	ldr	r1, [r4, #20]
 8021f10:	b111      	cbz	r1, 8021f18 <_reclaim_reent+0x2c>
 8021f12:	4620      	mov	r0, r4
 8021f14:	f7ff fdfa 	bl	8021b0c <_free_r>
 8021f18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8021f1a:	b111      	cbz	r1, 8021f22 <_reclaim_reent+0x36>
 8021f1c:	4620      	mov	r0, r4
 8021f1e:	f7ff fdf5 	bl	8021b0c <_free_r>
 8021f22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021f24:	b111      	cbz	r1, 8021f2c <_reclaim_reent+0x40>
 8021f26:	4620      	mov	r0, r4
 8021f28:	f7ff fdf0 	bl	8021b0c <_free_r>
 8021f2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8021f2e:	b111      	cbz	r1, 8021f36 <_reclaim_reent+0x4a>
 8021f30:	4620      	mov	r0, r4
 8021f32:	f7ff fdeb 	bl	8021b0c <_free_r>
 8021f36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021f38:	b111      	cbz	r1, 8021f40 <_reclaim_reent+0x54>
 8021f3a:	4620      	mov	r0, r4
 8021f3c:	f7ff fde6 	bl	8021b0c <_free_r>
 8021f40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021f42:	b111      	cbz	r1, 8021f4a <_reclaim_reent+0x5e>
 8021f44:	4620      	mov	r0, r4
 8021f46:	f7ff fde1 	bl	8021b0c <_free_r>
 8021f4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8021f4c:	b111      	cbz	r1, 8021f54 <_reclaim_reent+0x68>
 8021f4e:	4620      	mov	r0, r4
 8021f50:	f7ff fddc 	bl	8021b0c <_free_r>
 8021f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021f56:	b111      	cbz	r1, 8021f5e <_reclaim_reent+0x72>
 8021f58:	4620      	mov	r0, r4
 8021f5a:	f7ff fdd7 	bl	8021b0c <_free_r>
 8021f5e:	69a3      	ldr	r3, [r4, #24]
 8021f60:	b1e3      	cbz	r3, 8021f9c <_reclaim_reent+0xb0>
 8021f62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021f64:	4620      	mov	r0, r4
 8021f66:	4798      	blx	r3
 8021f68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8021f6a:	b1b9      	cbz	r1, 8021f9c <_reclaim_reent+0xb0>
 8021f6c:	4620      	mov	r0, r4
 8021f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021f72:	f7ff bfad 	b.w	8021ed0 <cleanup_glue>
 8021f76:	5949      	ldr	r1, [r1, r5]
 8021f78:	b941      	cbnz	r1, 8021f8c <_reclaim_reent+0xa0>
 8021f7a:	3504      	adds	r5, #4
 8021f7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021f7e:	2d80      	cmp	r5, #128	; 0x80
 8021f80:	68d9      	ldr	r1, [r3, #12]
 8021f82:	d1f8      	bne.n	8021f76 <_reclaim_reent+0x8a>
 8021f84:	4620      	mov	r0, r4
 8021f86:	f7ff fdc1 	bl	8021b0c <_free_r>
 8021f8a:	e7ba      	b.n	8021f02 <_reclaim_reent+0x16>
 8021f8c:	680e      	ldr	r6, [r1, #0]
 8021f8e:	4620      	mov	r0, r4
 8021f90:	f7ff fdbc 	bl	8021b0c <_free_r>
 8021f94:	4631      	mov	r1, r6
 8021f96:	e7ef      	b.n	8021f78 <_reclaim_reent+0x8c>
 8021f98:	2500      	movs	r5, #0
 8021f9a:	e7ef      	b.n	8021f7c <_reclaim_reent+0x90>
 8021f9c:	bd70      	pop	{r4, r5, r6, pc}
 8021f9e:	bf00      	nop
 8021fa0:	200000c8 	.word	0x200000c8

08021fa4 <_sbrk_r>:
 8021fa4:	b538      	push	{r3, r4, r5, lr}
 8021fa6:	4d06      	ldr	r5, [pc, #24]	; (8021fc0 <_sbrk_r+0x1c>)
 8021fa8:	2300      	movs	r3, #0
 8021faa:	4604      	mov	r4, r0
 8021fac:	4608      	mov	r0, r1
 8021fae:	602b      	str	r3, [r5, #0]
 8021fb0:	f7e0 fd7e 	bl	8002ab0 <_sbrk>
 8021fb4:	1c43      	adds	r3, r0, #1
 8021fb6:	d102      	bne.n	8021fbe <_sbrk_r+0x1a>
 8021fb8:	682b      	ldr	r3, [r5, #0]
 8021fba:	b103      	cbz	r3, 8021fbe <_sbrk_r+0x1a>
 8021fbc:	6023      	str	r3, [r4, #0]
 8021fbe:	bd38      	pop	{r3, r4, r5, pc}
 8021fc0:	20044078 	.word	0x20044078

08021fc4 <_raise_r>:
 8021fc4:	291f      	cmp	r1, #31
 8021fc6:	b538      	push	{r3, r4, r5, lr}
 8021fc8:	4604      	mov	r4, r0
 8021fca:	460d      	mov	r5, r1
 8021fcc:	d904      	bls.n	8021fd8 <_raise_r+0x14>
 8021fce:	2316      	movs	r3, #22
 8021fd0:	6003      	str	r3, [r0, #0]
 8021fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021fd6:	bd38      	pop	{r3, r4, r5, pc}
 8021fd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8021fda:	b112      	cbz	r2, 8021fe2 <_raise_r+0x1e>
 8021fdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021fe0:	b94b      	cbnz	r3, 8021ff6 <_raise_r+0x32>
 8021fe2:	4620      	mov	r0, r4
 8021fe4:	f000 f830 	bl	8022048 <_getpid_r>
 8021fe8:	462a      	mov	r2, r5
 8021fea:	4601      	mov	r1, r0
 8021fec:	4620      	mov	r0, r4
 8021fee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021ff2:	f000 b817 	b.w	8022024 <_kill_r>
 8021ff6:	2b01      	cmp	r3, #1
 8021ff8:	d00a      	beq.n	8022010 <_raise_r+0x4c>
 8021ffa:	1c59      	adds	r1, r3, #1
 8021ffc:	d103      	bne.n	8022006 <_raise_r+0x42>
 8021ffe:	2316      	movs	r3, #22
 8022000:	6003      	str	r3, [r0, #0]
 8022002:	2001      	movs	r0, #1
 8022004:	e7e7      	b.n	8021fd6 <_raise_r+0x12>
 8022006:	2400      	movs	r4, #0
 8022008:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802200c:	4628      	mov	r0, r5
 802200e:	4798      	blx	r3
 8022010:	2000      	movs	r0, #0
 8022012:	e7e0      	b.n	8021fd6 <_raise_r+0x12>

08022014 <raise>:
 8022014:	4b02      	ldr	r3, [pc, #8]	; (8022020 <raise+0xc>)
 8022016:	4601      	mov	r1, r0
 8022018:	6818      	ldr	r0, [r3, #0]
 802201a:	f7ff bfd3 	b.w	8021fc4 <_raise_r>
 802201e:	bf00      	nop
 8022020:	200000c8 	.word	0x200000c8

08022024 <_kill_r>:
 8022024:	b538      	push	{r3, r4, r5, lr}
 8022026:	4d07      	ldr	r5, [pc, #28]	; (8022044 <_kill_r+0x20>)
 8022028:	2300      	movs	r3, #0
 802202a:	4604      	mov	r4, r0
 802202c:	4608      	mov	r0, r1
 802202e:	4611      	mov	r1, r2
 8022030:	602b      	str	r3, [r5, #0]
 8022032:	f7e0 fcb3 	bl	800299c <_kill>
 8022036:	1c43      	adds	r3, r0, #1
 8022038:	d102      	bne.n	8022040 <_kill_r+0x1c>
 802203a:	682b      	ldr	r3, [r5, #0]
 802203c:	b103      	cbz	r3, 8022040 <_kill_r+0x1c>
 802203e:	6023      	str	r3, [r4, #0]
 8022040:	bd38      	pop	{r3, r4, r5, pc}
 8022042:	bf00      	nop
 8022044:	20044078 	.word	0x20044078

08022048 <_getpid_r>:
 8022048:	f7e0 bca0 	b.w	800298c <_getpid>

0802204c <sniprintf>:
 802204c:	b40c      	push	{r2, r3}
 802204e:	b530      	push	{r4, r5, lr}
 8022050:	4b17      	ldr	r3, [pc, #92]	; (80220b0 <sniprintf+0x64>)
 8022052:	1e0c      	subs	r4, r1, #0
 8022054:	681d      	ldr	r5, [r3, #0]
 8022056:	b09d      	sub	sp, #116	; 0x74
 8022058:	da08      	bge.n	802206c <sniprintf+0x20>
 802205a:	238b      	movs	r3, #139	; 0x8b
 802205c:	602b      	str	r3, [r5, #0]
 802205e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022062:	b01d      	add	sp, #116	; 0x74
 8022064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022068:	b002      	add	sp, #8
 802206a:	4770      	bx	lr
 802206c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8022070:	f8ad 3014 	strh.w	r3, [sp, #20]
 8022074:	bf14      	ite	ne
 8022076:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 802207a:	4623      	moveq	r3, r4
 802207c:	9304      	str	r3, [sp, #16]
 802207e:	9307      	str	r3, [sp, #28]
 8022080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022084:	9002      	str	r0, [sp, #8]
 8022086:	9006      	str	r0, [sp, #24]
 8022088:	f8ad 3016 	strh.w	r3, [sp, #22]
 802208c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802208e:	ab21      	add	r3, sp, #132	; 0x84
 8022090:	a902      	add	r1, sp, #8
 8022092:	4628      	mov	r0, r5
 8022094:	9301      	str	r3, [sp, #4]
 8022096:	f000 fc33 	bl	8022900 <_svfiprintf_r>
 802209a:	1c43      	adds	r3, r0, #1
 802209c:	bfbc      	itt	lt
 802209e:	238b      	movlt	r3, #139	; 0x8b
 80220a0:	602b      	strlt	r3, [r5, #0]
 80220a2:	2c00      	cmp	r4, #0
 80220a4:	d0dd      	beq.n	8022062 <sniprintf+0x16>
 80220a6:	9b02      	ldr	r3, [sp, #8]
 80220a8:	2200      	movs	r2, #0
 80220aa:	701a      	strb	r2, [r3, #0]
 80220ac:	e7d9      	b.n	8022062 <sniprintf+0x16>
 80220ae:	bf00      	nop
 80220b0:	200000c8 	.word	0x200000c8

080220b4 <__sread>:
 80220b4:	b510      	push	{r4, lr}
 80220b6:	460c      	mov	r4, r1
 80220b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220bc:	f001 f80e 	bl	80230dc <_read_r>
 80220c0:	2800      	cmp	r0, #0
 80220c2:	bfab      	itete	ge
 80220c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80220c6:	89a3      	ldrhlt	r3, [r4, #12]
 80220c8:	181b      	addge	r3, r3, r0
 80220ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80220ce:	bfac      	ite	ge
 80220d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80220d2:	81a3      	strhlt	r3, [r4, #12]
 80220d4:	bd10      	pop	{r4, pc}

080220d6 <__swrite>:
 80220d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80220da:	461f      	mov	r7, r3
 80220dc:	898b      	ldrh	r3, [r1, #12]
 80220de:	05db      	lsls	r3, r3, #23
 80220e0:	4605      	mov	r5, r0
 80220e2:	460c      	mov	r4, r1
 80220e4:	4616      	mov	r6, r2
 80220e6:	d505      	bpl.n	80220f4 <__swrite+0x1e>
 80220e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80220ec:	2302      	movs	r3, #2
 80220ee:	2200      	movs	r2, #0
 80220f0:	f000 faf8 	bl	80226e4 <_lseek_r>
 80220f4:	89a3      	ldrh	r3, [r4, #12]
 80220f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80220fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80220fe:	81a3      	strh	r3, [r4, #12]
 8022100:	4632      	mov	r2, r6
 8022102:	463b      	mov	r3, r7
 8022104:	4628      	mov	r0, r5
 8022106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802210a:	f000 b95d 	b.w	80223c8 <_write_r>

0802210e <__sseek>:
 802210e:	b510      	push	{r4, lr}
 8022110:	460c      	mov	r4, r1
 8022112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022116:	f000 fae5 	bl	80226e4 <_lseek_r>
 802211a:	1c43      	adds	r3, r0, #1
 802211c:	89a3      	ldrh	r3, [r4, #12]
 802211e:	bf15      	itete	ne
 8022120:	6560      	strne	r0, [r4, #84]	; 0x54
 8022122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802212a:	81a3      	strheq	r3, [r4, #12]
 802212c:	bf18      	it	ne
 802212e:	81a3      	strhne	r3, [r4, #12]
 8022130:	bd10      	pop	{r4, pc}

08022132 <__sclose>:
 8022132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022136:	f000 b9e5 	b.w	8022504 <_close_r>

0802213a <strchr>:
 802213a:	b2c9      	uxtb	r1, r1
 802213c:	4603      	mov	r3, r0
 802213e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022142:	b11a      	cbz	r2, 802214c <strchr+0x12>
 8022144:	428a      	cmp	r2, r1
 8022146:	d1f9      	bne.n	802213c <strchr+0x2>
 8022148:	4618      	mov	r0, r3
 802214a:	4770      	bx	lr
 802214c:	2900      	cmp	r1, #0
 802214e:	bf18      	it	ne
 8022150:	2300      	movne	r3, #0
 8022152:	e7f9      	b.n	8022148 <strchr+0xe>

08022154 <strcpy>:
 8022154:	4603      	mov	r3, r0
 8022156:	f811 2b01 	ldrb.w	r2, [r1], #1
 802215a:	f803 2b01 	strb.w	r2, [r3], #1
 802215e:	2a00      	cmp	r2, #0
 8022160:	d1f9      	bne.n	8022156 <strcpy+0x2>
 8022162:	4770      	bx	lr

08022164 <strncmp>:
 8022164:	b510      	push	{r4, lr}
 8022166:	b17a      	cbz	r2, 8022188 <strncmp+0x24>
 8022168:	4603      	mov	r3, r0
 802216a:	3901      	subs	r1, #1
 802216c:	1884      	adds	r4, r0, r2
 802216e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8022172:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8022176:	4290      	cmp	r0, r2
 8022178:	d101      	bne.n	802217e <strncmp+0x1a>
 802217a:	42a3      	cmp	r3, r4
 802217c:	d101      	bne.n	8022182 <strncmp+0x1e>
 802217e:	1a80      	subs	r0, r0, r2
 8022180:	bd10      	pop	{r4, pc}
 8022182:	2800      	cmp	r0, #0
 8022184:	d1f3      	bne.n	802216e <strncmp+0xa>
 8022186:	e7fa      	b.n	802217e <strncmp+0x1a>
 8022188:	4610      	mov	r0, r2
 802218a:	e7f9      	b.n	8022180 <strncmp+0x1c>

0802218c <strstr>:
 802218c:	780a      	ldrb	r2, [r1, #0]
 802218e:	b570      	push	{r4, r5, r6, lr}
 8022190:	b96a      	cbnz	r2, 80221ae <strstr+0x22>
 8022192:	bd70      	pop	{r4, r5, r6, pc}
 8022194:	429a      	cmp	r2, r3
 8022196:	d109      	bne.n	80221ac <strstr+0x20>
 8022198:	460c      	mov	r4, r1
 802219a:	4605      	mov	r5, r0
 802219c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80221a0:	2b00      	cmp	r3, #0
 80221a2:	d0f6      	beq.n	8022192 <strstr+0x6>
 80221a4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80221a8:	429e      	cmp	r6, r3
 80221aa:	d0f7      	beq.n	802219c <strstr+0x10>
 80221ac:	3001      	adds	r0, #1
 80221ae:	7803      	ldrb	r3, [r0, #0]
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	d1ef      	bne.n	8022194 <strstr+0x8>
 80221b4:	4618      	mov	r0, r3
 80221b6:	e7ec      	b.n	8022192 <strstr+0x6>

080221b8 <_strtoul_l.constprop.0>:
 80221b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80221bc:	4f36      	ldr	r7, [pc, #216]	; (8022298 <_strtoul_l.constprop.0+0xe0>)
 80221be:	4686      	mov	lr, r0
 80221c0:	460d      	mov	r5, r1
 80221c2:	4628      	mov	r0, r5
 80221c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80221c8:	5de6      	ldrb	r6, [r4, r7]
 80221ca:	f016 0608 	ands.w	r6, r6, #8
 80221ce:	d1f8      	bne.n	80221c2 <_strtoul_l.constprop.0+0xa>
 80221d0:	2c2d      	cmp	r4, #45	; 0x2d
 80221d2:	d12f      	bne.n	8022234 <_strtoul_l.constprop.0+0x7c>
 80221d4:	782c      	ldrb	r4, [r5, #0]
 80221d6:	2601      	movs	r6, #1
 80221d8:	1c85      	adds	r5, r0, #2
 80221da:	2b00      	cmp	r3, #0
 80221dc:	d057      	beq.n	802228e <_strtoul_l.constprop.0+0xd6>
 80221de:	2b10      	cmp	r3, #16
 80221e0:	d109      	bne.n	80221f6 <_strtoul_l.constprop.0+0x3e>
 80221e2:	2c30      	cmp	r4, #48	; 0x30
 80221e4:	d107      	bne.n	80221f6 <_strtoul_l.constprop.0+0x3e>
 80221e6:	7828      	ldrb	r0, [r5, #0]
 80221e8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80221ec:	2858      	cmp	r0, #88	; 0x58
 80221ee:	d149      	bne.n	8022284 <_strtoul_l.constprop.0+0xcc>
 80221f0:	786c      	ldrb	r4, [r5, #1]
 80221f2:	2310      	movs	r3, #16
 80221f4:	3502      	adds	r5, #2
 80221f6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80221fa:	2700      	movs	r7, #0
 80221fc:	fbb8 f8f3 	udiv	r8, r8, r3
 8022200:	fb03 f908 	mul.w	r9, r3, r8
 8022204:	ea6f 0909 	mvn.w	r9, r9
 8022208:	4638      	mov	r0, r7
 802220a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802220e:	f1bc 0f09 	cmp.w	ip, #9
 8022212:	d814      	bhi.n	802223e <_strtoul_l.constprop.0+0x86>
 8022214:	4664      	mov	r4, ip
 8022216:	42a3      	cmp	r3, r4
 8022218:	dd22      	ble.n	8022260 <_strtoul_l.constprop.0+0xa8>
 802221a:	2f00      	cmp	r7, #0
 802221c:	db1d      	blt.n	802225a <_strtoul_l.constprop.0+0xa2>
 802221e:	4580      	cmp	r8, r0
 8022220:	d31b      	bcc.n	802225a <_strtoul_l.constprop.0+0xa2>
 8022222:	d101      	bne.n	8022228 <_strtoul_l.constprop.0+0x70>
 8022224:	45a1      	cmp	r9, r4
 8022226:	db18      	blt.n	802225a <_strtoul_l.constprop.0+0xa2>
 8022228:	fb00 4003 	mla	r0, r0, r3, r4
 802222c:	2701      	movs	r7, #1
 802222e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022232:	e7ea      	b.n	802220a <_strtoul_l.constprop.0+0x52>
 8022234:	2c2b      	cmp	r4, #43	; 0x2b
 8022236:	bf04      	itt	eq
 8022238:	782c      	ldrbeq	r4, [r5, #0]
 802223a:	1c85      	addeq	r5, r0, #2
 802223c:	e7cd      	b.n	80221da <_strtoul_l.constprop.0+0x22>
 802223e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8022242:	f1bc 0f19 	cmp.w	ip, #25
 8022246:	d801      	bhi.n	802224c <_strtoul_l.constprop.0+0x94>
 8022248:	3c37      	subs	r4, #55	; 0x37
 802224a:	e7e4      	b.n	8022216 <_strtoul_l.constprop.0+0x5e>
 802224c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8022250:	f1bc 0f19 	cmp.w	ip, #25
 8022254:	d804      	bhi.n	8022260 <_strtoul_l.constprop.0+0xa8>
 8022256:	3c57      	subs	r4, #87	; 0x57
 8022258:	e7dd      	b.n	8022216 <_strtoul_l.constprop.0+0x5e>
 802225a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802225e:	e7e6      	b.n	802222e <_strtoul_l.constprop.0+0x76>
 8022260:	2f00      	cmp	r7, #0
 8022262:	da07      	bge.n	8022274 <_strtoul_l.constprop.0+0xbc>
 8022264:	2322      	movs	r3, #34	; 0x22
 8022266:	f8ce 3000 	str.w	r3, [lr]
 802226a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802226e:	b932      	cbnz	r2, 802227e <_strtoul_l.constprop.0+0xc6>
 8022270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022274:	b106      	cbz	r6, 8022278 <_strtoul_l.constprop.0+0xc0>
 8022276:	4240      	negs	r0, r0
 8022278:	2a00      	cmp	r2, #0
 802227a:	d0f9      	beq.n	8022270 <_strtoul_l.constprop.0+0xb8>
 802227c:	b107      	cbz	r7, 8022280 <_strtoul_l.constprop.0+0xc8>
 802227e:	1e69      	subs	r1, r5, #1
 8022280:	6011      	str	r1, [r2, #0]
 8022282:	e7f5      	b.n	8022270 <_strtoul_l.constprop.0+0xb8>
 8022284:	2430      	movs	r4, #48	; 0x30
 8022286:	2b00      	cmp	r3, #0
 8022288:	d1b5      	bne.n	80221f6 <_strtoul_l.constprop.0+0x3e>
 802228a:	2308      	movs	r3, #8
 802228c:	e7b3      	b.n	80221f6 <_strtoul_l.constprop.0+0x3e>
 802228e:	2c30      	cmp	r4, #48	; 0x30
 8022290:	d0a9      	beq.n	80221e6 <_strtoul_l.constprop.0+0x2e>
 8022292:	230a      	movs	r3, #10
 8022294:	e7af      	b.n	80221f6 <_strtoul_l.constprop.0+0x3e>
 8022296:	bf00      	nop
 8022298:	08026cc5 	.word	0x08026cc5

0802229c <strtoul>:
 802229c:	4613      	mov	r3, r2
 802229e:	460a      	mov	r2, r1
 80222a0:	4601      	mov	r1, r0
 80222a2:	4802      	ldr	r0, [pc, #8]	; (80222ac <strtoul+0x10>)
 80222a4:	6800      	ldr	r0, [r0, #0]
 80222a6:	f7ff bf87 	b.w	80221b8 <_strtoul_l.constprop.0>
 80222aa:	bf00      	nop
 80222ac:	200000c8 	.word	0x200000c8

080222b0 <_vsniprintf_r>:
 80222b0:	b530      	push	{r4, r5, lr}
 80222b2:	4614      	mov	r4, r2
 80222b4:	2c00      	cmp	r4, #0
 80222b6:	b09b      	sub	sp, #108	; 0x6c
 80222b8:	4605      	mov	r5, r0
 80222ba:	461a      	mov	r2, r3
 80222bc:	da05      	bge.n	80222ca <_vsniprintf_r+0x1a>
 80222be:	238b      	movs	r3, #139	; 0x8b
 80222c0:	6003      	str	r3, [r0, #0]
 80222c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80222c6:	b01b      	add	sp, #108	; 0x6c
 80222c8:	bd30      	pop	{r4, r5, pc}
 80222ca:	f44f 7302 	mov.w	r3, #520	; 0x208
 80222ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80222d2:	bf14      	ite	ne
 80222d4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80222d8:	4623      	moveq	r3, r4
 80222da:	9302      	str	r3, [sp, #8]
 80222dc:	9305      	str	r3, [sp, #20]
 80222de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80222e2:	9100      	str	r1, [sp, #0]
 80222e4:	9104      	str	r1, [sp, #16]
 80222e6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80222ea:	4669      	mov	r1, sp
 80222ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80222ee:	f000 fb07 	bl	8022900 <_svfiprintf_r>
 80222f2:	1c43      	adds	r3, r0, #1
 80222f4:	bfbc      	itt	lt
 80222f6:	238b      	movlt	r3, #139	; 0x8b
 80222f8:	602b      	strlt	r3, [r5, #0]
 80222fa:	2c00      	cmp	r4, #0
 80222fc:	d0e3      	beq.n	80222c6 <_vsniprintf_r+0x16>
 80222fe:	9b00      	ldr	r3, [sp, #0]
 8022300:	2200      	movs	r2, #0
 8022302:	701a      	strb	r2, [r3, #0]
 8022304:	e7df      	b.n	80222c6 <_vsniprintf_r+0x16>
	...

08022308 <vsniprintf>:
 8022308:	b507      	push	{r0, r1, r2, lr}
 802230a:	9300      	str	r3, [sp, #0]
 802230c:	4613      	mov	r3, r2
 802230e:	460a      	mov	r2, r1
 8022310:	4601      	mov	r1, r0
 8022312:	4803      	ldr	r0, [pc, #12]	; (8022320 <vsniprintf+0x18>)
 8022314:	6800      	ldr	r0, [r0, #0]
 8022316:	f7ff ffcb 	bl	80222b0 <_vsniprintf_r>
 802231a:	b003      	add	sp, #12
 802231c:	f85d fb04 	ldr.w	pc, [sp], #4
 8022320:	200000c8 	.word	0x200000c8

08022324 <__swbuf_r>:
 8022324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022326:	460e      	mov	r6, r1
 8022328:	4614      	mov	r4, r2
 802232a:	4605      	mov	r5, r0
 802232c:	b118      	cbz	r0, 8022336 <__swbuf_r+0x12>
 802232e:	6983      	ldr	r3, [r0, #24]
 8022330:	b90b      	cbnz	r3, 8022336 <__swbuf_r+0x12>
 8022332:	f7ff fa77 	bl	8021824 <__sinit>
 8022336:	4b21      	ldr	r3, [pc, #132]	; (80223bc <__swbuf_r+0x98>)
 8022338:	429c      	cmp	r4, r3
 802233a:	d12b      	bne.n	8022394 <__swbuf_r+0x70>
 802233c:	686c      	ldr	r4, [r5, #4]
 802233e:	69a3      	ldr	r3, [r4, #24]
 8022340:	60a3      	str	r3, [r4, #8]
 8022342:	89a3      	ldrh	r3, [r4, #12]
 8022344:	071a      	lsls	r2, r3, #28
 8022346:	d52f      	bpl.n	80223a8 <__swbuf_r+0x84>
 8022348:	6923      	ldr	r3, [r4, #16]
 802234a:	b36b      	cbz	r3, 80223a8 <__swbuf_r+0x84>
 802234c:	6923      	ldr	r3, [r4, #16]
 802234e:	6820      	ldr	r0, [r4, #0]
 8022350:	1ac0      	subs	r0, r0, r3
 8022352:	6963      	ldr	r3, [r4, #20]
 8022354:	b2f6      	uxtb	r6, r6
 8022356:	4283      	cmp	r3, r0
 8022358:	4637      	mov	r7, r6
 802235a:	dc04      	bgt.n	8022366 <__swbuf_r+0x42>
 802235c:	4621      	mov	r1, r4
 802235e:	4628      	mov	r0, r5
 8022360:	f000 f972 	bl	8022648 <_fflush_r>
 8022364:	bb30      	cbnz	r0, 80223b4 <__swbuf_r+0x90>
 8022366:	68a3      	ldr	r3, [r4, #8]
 8022368:	3b01      	subs	r3, #1
 802236a:	60a3      	str	r3, [r4, #8]
 802236c:	6823      	ldr	r3, [r4, #0]
 802236e:	1c5a      	adds	r2, r3, #1
 8022370:	6022      	str	r2, [r4, #0]
 8022372:	701e      	strb	r6, [r3, #0]
 8022374:	6963      	ldr	r3, [r4, #20]
 8022376:	3001      	adds	r0, #1
 8022378:	4283      	cmp	r3, r0
 802237a:	d004      	beq.n	8022386 <__swbuf_r+0x62>
 802237c:	89a3      	ldrh	r3, [r4, #12]
 802237e:	07db      	lsls	r3, r3, #31
 8022380:	d506      	bpl.n	8022390 <__swbuf_r+0x6c>
 8022382:	2e0a      	cmp	r6, #10
 8022384:	d104      	bne.n	8022390 <__swbuf_r+0x6c>
 8022386:	4621      	mov	r1, r4
 8022388:	4628      	mov	r0, r5
 802238a:	f000 f95d 	bl	8022648 <_fflush_r>
 802238e:	b988      	cbnz	r0, 80223b4 <__swbuf_r+0x90>
 8022390:	4638      	mov	r0, r7
 8022392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022394:	4b0a      	ldr	r3, [pc, #40]	; (80223c0 <__swbuf_r+0x9c>)
 8022396:	429c      	cmp	r4, r3
 8022398:	d101      	bne.n	802239e <__swbuf_r+0x7a>
 802239a:	68ac      	ldr	r4, [r5, #8]
 802239c:	e7cf      	b.n	802233e <__swbuf_r+0x1a>
 802239e:	4b09      	ldr	r3, [pc, #36]	; (80223c4 <__swbuf_r+0xa0>)
 80223a0:	429c      	cmp	r4, r3
 80223a2:	bf08      	it	eq
 80223a4:	68ec      	ldreq	r4, [r5, #12]
 80223a6:	e7ca      	b.n	802233e <__swbuf_r+0x1a>
 80223a8:	4621      	mov	r1, r4
 80223aa:	4628      	mov	r0, r5
 80223ac:	f000 f81e 	bl	80223ec <__swsetup_r>
 80223b0:	2800      	cmp	r0, #0
 80223b2:	d0cb      	beq.n	802234c <__swbuf_r+0x28>
 80223b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80223b8:	e7ea      	b.n	8022390 <__swbuf_r+0x6c>
 80223ba:	bf00      	nop
 80223bc:	08026de8 	.word	0x08026de8
 80223c0:	08026e08 	.word	0x08026e08
 80223c4:	08026dc8 	.word	0x08026dc8

080223c8 <_write_r>:
 80223c8:	b538      	push	{r3, r4, r5, lr}
 80223ca:	4d07      	ldr	r5, [pc, #28]	; (80223e8 <_write_r+0x20>)
 80223cc:	4604      	mov	r4, r0
 80223ce:	4608      	mov	r0, r1
 80223d0:	4611      	mov	r1, r2
 80223d2:	2200      	movs	r2, #0
 80223d4:	602a      	str	r2, [r5, #0]
 80223d6:	461a      	mov	r2, r3
 80223d8:	f7e0 fb19 	bl	8002a0e <_write>
 80223dc:	1c43      	adds	r3, r0, #1
 80223de:	d102      	bne.n	80223e6 <_write_r+0x1e>
 80223e0:	682b      	ldr	r3, [r5, #0]
 80223e2:	b103      	cbz	r3, 80223e6 <_write_r+0x1e>
 80223e4:	6023      	str	r3, [r4, #0]
 80223e6:	bd38      	pop	{r3, r4, r5, pc}
 80223e8:	20044078 	.word	0x20044078

080223ec <__swsetup_r>:
 80223ec:	4b32      	ldr	r3, [pc, #200]	; (80224b8 <__swsetup_r+0xcc>)
 80223ee:	b570      	push	{r4, r5, r6, lr}
 80223f0:	681d      	ldr	r5, [r3, #0]
 80223f2:	4606      	mov	r6, r0
 80223f4:	460c      	mov	r4, r1
 80223f6:	b125      	cbz	r5, 8022402 <__swsetup_r+0x16>
 80223f8:	69ab      	ldr	r3, [r5, #24]
 80223fa:	b913      	cbnz	r3, 8022402 <__swsetup_r+0x16>
 80223fc:	4628      	mov	r0, r5
 80223fe:	f7ff fa11 	bl	8021824 <__sinit>
 8022402:	4b2e      	ldr	r3, [pc, #184]	; (80224bc <__swsetup_r+0xd0>)
 8022404:	429c      	cmp	r4, r3
 8022406:	d10f      	bne.n	8022428 <__swsetup_r+0x3c>
 8022408:	686c      	ldr	r4, [r5, #4]
 802240a:	89a3      	ldrh	r3, [r4, #12]
 802240c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022410:	0719      	lsls	r1, r3, #28
 8022412:	d42c      	bmi.n	802246e <__swsetup_r+0x82>
 8022414:	06dd      	lsls	r5, r3, #27
 8022416:	d411      	bmi.n	802243c <__swsetup_r+0x50>
 8022418:	2309      	movs	r3, #9
 802241a:	6033      	str	r3, [r6, #0]
 802241c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022420:	81a3      	strh	r3, [r4, #12]
 8022422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022426:	e03e      	b.n	80224a6 <__swsetup_r+0xba>
 8022428:	4b25      	ldr	r3, [pc, #148]	; (80224c0 <__swsetup_r+0xd4>)
 802242a:	429c      	cmp	r4, r3
 802242c:	d101      	bne.n	8022432 <__swsetup_r+0x46>
 802242e:	68ac      	ldr	r4, [r5, #8]
 8022430:	e7eb      	b.n	802240a <__swsetup_r+0x1e>
 8022432:	4b24      	ldr	r3, [pc, #144]	; (80224c4 <__swsetup_r+0xd8>)
 8022434:	429c      	cmp	r4, r3
 8022436:	bf08      	it	eq
 8022438:	68ec      	ldreq	r4, [r5, #12]
 802243a:	e7e6      	b.n	802240a <__swsetup_r+0x1e>
 802243c:	0758      	lsls	r0, r3, #29
 802243e:	d512      	bpl.n	8022466 <__swsetup_r+0x7a>
 8022440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022442:	b141      	cbz	r1, 8022456 <__swsetup_r+0x6a>
 8022444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022448:	4299      	cmp	r1, r3
 802244a:	d002      	beq.n	8022452 <__swsetup_r+0x66>
 802244c:	4630      	mov	r0, r6
 802244e:	f7ff fb5d 	bl	8021b0c <_free_r>
 8022452:	2300      	movs	r3, #0
 8022454:	6363      	str	r3, [r4, #52]	; 0x34
 8022456:	89a3      	ldrh	r3, [r4, #12]
 8022458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802245c:	81a3      	strh	r3, [r4, #12]
 802245e:	2300      	movs	r3, #0
 8022460:	6063      	str	r3, [r4, #4]
 8022462:	6923      	ldr	r3, [r4, #16]
 8022464:	6023      	str	r3, [r4, #0]
 8022466:	89a3      	ldrh	r3, [r4, #12]
 8022468:	f043 0308 	orr.w	r3, r3, #8
 802246c:	81a3      	strh	r3, [r4, #12]
 802246e:	6923      	ldr	r3, [r4, #16]
 8022470:	b94b      	cbnz	r3, 8022486 <__swsetup_r+0x9a>
 8022472:	89a3      	ldrh	r3, [r4, #12]
 8022474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802247c:	d003      	beq.n	8022486 <__swsetup_r+0x9a>
 802247e:	4621      	mov	r1, r4
 8022480:	4630      	mov	r0, r6
 8022482:	f000 f967 	bl	8022754 <__smakebuf_r>
 8022486:	89a0      	ldrh	r0, [r4, #12]
 8022488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802248c:	f010 0301 	ands.w	r3, r0, #1
 8022490:	d00a      	beq.n	80224a8 <__swsetup_r+0xbc>
 8022492:	2300      	movs	r3, #0
 8022494:	60a3      	str	r3, [r4, #8]
 8022496:	6963      	ldr	r3, [r4, #20]
 8022498:	425b      	negs	r3, r3
 802249a:	61a3      	str	r3, [r4, #24]
 802249c:	6923      	ldr	r3, [r4, #16]
 802249e:	b943      	cbnz	r3, 80224b2 <__swsetup_r+0xc6>
 80224a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80224a4:	d1ba      	bne.n	802241c <__swsetup_r+0x30>
 80224a6:	bd70      	pop	{r4, r5, r6, pc}
 80224a8:	0781      	lsls	r1, r0, #30
 80224aa:	bf58      	it	pl
 80224ac:	6963      	ldrpl	r3, [r4, #20]
 80224ae:	60a3      	str	r3, [r4, #8]
 80224b0:	e7f4      	b.n	802249c <__swsetup_r+0xb0>
 80224b2:	2000      	movs	r0, #0
 80224b4:	e7f7      	b.n	80224a6 <__swsetup_r+0xba>
 80224b6:	bf00      	nop
 80224b8:	200000c8 	.word	0x200000c8
 80224bc:	08026de8 	.word	0x08026de8
 80224c0:	08026e08 	.word	0x08026e08
 80224c4:	08026dc8 	.word	0x08026dc8

080224c8 <__assert_func>:
 80224c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80224ca:	4614      	mov	r4, r2
 80224cc:	461a      	mov	r2, r3
 80224ce:	4b09      	ldr	r3, [pc, #36]	; (80224f4 <__assert_func+0x2c>)
 80224d0:	681b      	ldr	r3, [r3, #0]
 80224d2:	4605      	mov	r5, r0
 80224d4:	68d8      	ldr	r0, [r3, #12]
 80224d6:	b14c      	cbz	r4, 80224ec <__assert_func+0x24>
 80224d8:	4b07      	ldr	r3, [pc, #28]	; (80224f8 <__assert_func+0x30>)
 80224da:	9100      	str	r1, [sp, #0]
 80224dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80224e0:	4906      	ldr	r1, [pc, #24]	; (80224fc <__assert_func+0x34>)
 80224e2:	462b      	mov	r3, r5
 80224e4:	f000 f8ec 	bl	80226c0 <fiprintf>
 80224e8:	f7ff f934 	bl	8021754 <abort>
 80224ec:	4b04      	ldr	r3, [pc, #16]	; (8022500 <__assert_func+0x38>)
 80224ee:	461c      	mov	r4, r3
 80224f0:	e7f3      	b.n	80224da <__assert_func+0x12>
 80224f2:	bf00      	nop
 80224f4:	200000c8 	.word	0x200000c8
 80224f8:	08026e9e 	.word	0x08026e9e
 80224fc:	08026eab 	.word	0x08026eab
 8022500:	08026ed9 	.word	0x08026ed9

08022504 <_close_r>:
 8022504:	b538      	push	{r3, r4, r5, lr}
 8022506:	4d06      	ldr	r5, [pc, #24]	; (8022520 <_close_r+0x1c>)
 8022508:	2300      	movs	r3, #0
 802250a:	4604      	mov	r4, r0
 802250c:	4608      	mov	r0, r1
 802250e:	602b      	str	r3, [r5, #0]
 8022510:	f7e0 fa99 	bl	8002a46 <_close>
 8022514:	1c43      	adds	r3, r0, #1
 8022516:	d102      	bne.n	802251e <_close_r+0x1a>
 8022518:	682b      	ldr	r3, [r5, #0]
 802251a:	b103      	cbz	r3, 802251e <_close_r+0x1a>
 802251c:	6023      	str	r3, [r4, #0]
 802251e:	bd38      	pop	{r3, r4, r5, pc}
 8022520:	20044078 	.word	0x20044078

08022524 <__env_lock>:
 8022524:	4801      	ldr	r0, [pc, #4]	; (802252c <__env_lock+0x8>)
 8022526:	f7ff ba88 	b.w	8021a3a <__retarget_lock_acquire_recursive>
 802252a:	bf00      	nop
 802252c:	2004406c 	.word	0x2004406c

08022530 <__env_unlock>:
 8022530:	4801      	ldr	r0, [pc, #4]	; (8022538 <__env_unlock+0x8>)
 8022532:	f7ff ba83 	b.w	8021a3c <__retarget_lock_release_recursive>
 8022536:	bf00      	nop
 8022538:	2004406c 	.word	0x2004406c

0802253c <__sflush_r>:
 802253c:	898a      	ldrh	r2, [r1, #12]
 802253e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022542:	4605      	mov	r5, r0
 8022544:	0710      	lsls	r0, r2, #28
 8022546:	460c      	mov	r4, r1
 8022548:	d458      	bmi.n	80225fc <__sflush_r+0xc0>
 802254a:	684b      	ldr	r3, [r1, #4]
 802254c:	2b00      	cmp	r3, #0
 802254e:	dc05      	bgt.n	802255c <__sflush_r+0x20>
 8022550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022552:	2b00      	cmp	r3, #0
 8022554:	dc02      	bgt.n	802255c <__sflush_r+0x20>
 8022556:	2000      	movs	r0, #0
 8022558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802255c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802255e:	2e00      	cmp	r6, #0
 8022560:	d0f9      	beq.n	8022556 <__sflush_r+0x1a>
 8022562:	2300      	movs	r3, #0
 8022564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022568:	682f      	ldr	r7, [r5, #0]
 802256a:	602b      	str	r3, [r5, #0]
 802256c:	d032      	beq.n	80225d4 <__sflush_r+0x98>
 802256e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022570:	89a3      	ldrh	r3, [r4, #12]
 8022572:	075a      	lsls	r2, r3, #29
 8022574:	d505      	bpl.n	8022582 <__sflush_r+0x46>
 8022576:	6863      	ldr	r3, [r4, #4]
 8022578:	1ac0      	subs	r0, r0, r3
 802257a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802257c:	b10b      	cbz	r3, 8022582 <__sflush_r+0x46>
 802257e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022580:	1ac0      	subs	r0, r0, r3
 8022582:	2300      	movs	r3, #0
 8022584:	4602      	mov	r2, r0
 8022586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022588:	6a21      	ldr	r1, [r4, #32]
 802258a:	4628      	mov	r0, r5
 802258c:	47b0      	blx	r6
 802258e:	1c43      	adds	r3, r0, #1
 8022590:	89a3      	ldrh	r3, [r4, #12]
 8022592:	d106      	bne.n	80225a2 <__sflush_r+0x66>
 8022594:	6829      	ldr	r1, [r5, #0]
 8022596:	291d      	cmp	r1, #29
 8022598:	d82c      	bhi.n	80225f4 <__sflush_r+0xb8>
 802259a:	4a2a      	ldr	r2, [pc, #168]	; (8022644 <__sflush_r+0x108>)
 802259c:	40ca      	lsrs	r2, r1
 802259e:	07d6      	lsls	r6, r2, #31
 80225a0:	d528      	bpl.n	80225f4 <__sflush_r+0xb8>
 80225a2:	2200      	movs	r2, #0
 80225a4:	6062      	str	r2, [r4, #4]
 80225a6:	04d9      	lsls	r1, r3, #19
 80225a8:	6922      	ldr	r2, [r4, #16]
 80225aa:	6022      	str	r2, [r4, #0]
 80225ac:	d504      	bpl.n	80225b8 <__sflush_r+0x7c>
 80225ae:	1c42      	adds	r2, r0, #1
 80225b0:	d101      	bne.n	80225b6 <__sflush_r+0x7a>
 80225b2:	682b      	ldr	r3, [r5, #0]
 80225b4:	b903      	cbnz	r3, 80225b8 <__sflush_r+0x7c>
 80225b6:	6560      	str	r0, [r4, #84]	; 0x54
 80225b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80225ba:	602f      	str	r7, [r5, #0]
 80225bc:	2900      	cmp	r1, #0
 80225be:	d0ca      	beq.n	8022556 <__sflush_r+0x1a>
 80225c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80225c4:	4299      	cmp	r1, r3
 80225c6:	d002      	beq.n	80225ce <__sflush_r+0x92>
 80225c8:	4628      	mov	r0, r5
 80225ca:	f7ff fa9f 	bl	8021b0c <_free_r>
 80225ce:	2000      	movs	r0, #0
 80225d0:	6360      	str	r0, [r4, #52]	; 0x34
 80225d2:	e7c1      	b.n	8022558 <__sflush_r+0x1c>
 80225d4:	6a21      	ldr	r1, [r4, #32]
 80225d6:	2301      	movs	r3, #1
 80225d8:	4628      	mov	r0, r5
 80225da:	47b0      	blx	r6
 80225dc:	1c41      	adds	r1, r0, #1
 80225de:	d1c7      	bne.n	8022570 <__sflush_r+0x34>
 80225e0:	682b      	ldr	r3, [r5, #0]
 80225e2:	2b00      	cmp	r3, #0
 80225e4:	d0c4      	beq.n	8022570 <__sflush_r+0x34>
 80225e6:	2b1d      	cmp	r3, #29
 80225e8:	d001      	beq.n	80225ee <__sflush_r+0xb2>
 80225ea:	2b16      	cmp	r3, #22
 80225ec:	d101      	bne.n	80225f2 <__sflush_r+0xb6>
 80225ee:	602f      	str	r7, [r5, #0]
 80225f0:	e7b1      	b.n	8022556 <__sflush_r+0x1a>
 80225f2:	89a3      	ldrh	r3, [r4, #12]
 80225f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80225f8:	81a3      	strh	r3, [r4, #12]
 80225fa:	e7ad      	b.n	8022558 <__sflush_r+0x1c>
 80225fc:	690f      	ldr	r7, [r1, #16]
 80225fe:	2f00      	cmp	r7, #0
 8022600:	d0a9      	beq.n	8022556 <__sflush_r+0x1a>
 8022602:	0793      	lsls	r3, r2, #30
 8022604:	680e      	ldr	r6, [r1, #0]
 8022606:	bf08      	it	eq
 8022608:	694b      	ldreq	r3, [r1, #20]
 802260a:	600f      	str	r7, [r1, #0]
 802260c:	bf18      	it	ne
 802260e:	2300      	movne	r3, #0
 8022610:	eba6 0807 	sub.w	r8, r6, r7
 8022614:	608b      	str	r3, [r1, #8]
 8022616:	f1b8 0f00 	cmp.w	r8, #0
 802261a:	dd9c      	ble.n	8022556 <__sflush_r+0x1a>
 802261c:	6a21      	ldr	r1, [r4, #32]
 802261e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022620:	4643      	mov	r3, r8
 8022622:	463a      	mov	r2, r7
 8022624:	4628      	mov	r0, r5
 8022626:	47b0      	blx	r6
 8022628:	2800      	cmp	r0, #0
 802262a:	dc06      	bgt.n	802263a <__sflush_r+0xfe>
 802262c:	89a3      	ldrh	r3, [r4, #12]
 802262e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022632:	81a3      	strh	r3, [r4, #12]
 8022634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022638:	e78e      	b.n	8022558 <__sflush_r+0x1c>
 802263a:	4407      	add	r7, r0
 802263c:	eba8 0800 	sub.w	r8, r8, r0
 8022640:	e7e9      	b.n	8022616 <__sflush_r+0xda>
 8022642:	bf00      	nop
 8022644:	20400001 	.word	0x20400001

08022648 <_fflush_r>:
 8022648:	b538      	push	{r3, r4, r5, lr}
 802264a:	690b      	ldr	r3, [r1, #16]
 802264c:	4605      	mov	r5, r0
 802264e:	460c      	mov	r4, r1
 8022650:	b913      	cbnz	r3, 8022658 <_fflush_r+0x10>
 8022652:	2500      	movs	r5, #0
 8022654:	4628      	mov	r0, r5
 8022656:	bd38      	pop	{r3, r4, r5, pc}
 8022658:	b118      	cbz	r0, 8022662 <_fflush_r+0x1a>
 802265a:	6983      	ldr	r3, [r0, #24]
 802265c:	b90b      	cbnz	r3, 8022662 <_fflush_r+0x1a>
 802265e:	f7ff f8e1 	bl	8021824 <__sinit>
 8022662:	4b14      	ldr	r3, [pc, #80]	; (80226b4 <_fflush_r+0x6c>)
 8022664:	429c      	cmp	r4, r3
 8022666:	d11b      	bne.n	80226a0 <_fflush_r+0x58>
 8022668:	686c      	ldr	r4, [r5, #4]
 802266a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802266e:	2b00      	cmp	r3, #0
 8022670:	d0ef      	beq.n	8022652 <_fflush_r+0xa>
 8022672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022674:	07d0      	lsls	r0, r2, #31
 8022676:	d404      	bmi.n	8022682 <_fflush_r+0x3a>
 8022678:	0599      	lsls	r1, r3, #22
 802267a:	d402      	bmi.n	8022682 <_fflush_r+0x3a>
 802267c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802267e:	f7ff f9dc 	bl	8021a3a <__retarget_lock_acquire_recursive>
 8022682:	4628      	mov	r0, r5
 8022684:	4621      	mov	r1, r4
 8022686:	f7ff ff59 	bl	802253c <__sflush_r>
 802268a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802268c:	07da      	lsls	r2, r3, #31
 802268e:	4605      	mov	r5, r0
 8022690:	d4e0      	bmi.n	8022654 <_fflush_r+0xc>
 8022692:	89a3      	ldrh	r3, [r4, #12]
 8022694:	059b      	lsls	r3, r3, #22
 8022696:	d4dd      	bmi.n	8022654 <_fflush_r+0xc>
 8022698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802269a:	f7ff f9cf 	bl	8021a3c <__retarget_lock_release_recursive>
 802269e:	e7d9      	b.n	8022654 <_fflush_r+0xc>
 80226a0:	4b05      	ldr	r3, [pc, #20]	; (80226b8 <_fflush_r+0x70>)
 80226a2:	429c      	cmp	r4, r3
 80226a4:	d101      	bne.n	80226aa <_fflush_r+0x62>
 80226a6:	68ac      	ldr	r4, [r5, #8]
 80226a8:	e7df      	b.n	802266a <_fflush_r+0x22>
 80226aa:	4b04      	ldr	r3, [pc, #16]	; (80226bc <_fflush_r+0x74>)
 80226ac:	429c      	cmp	r4, r3
 80226ae:	bf08      	it	eq
 80226b0:	68ec      	ldreq	r4, [r5, #12]
 80226b2:	e7da      	b.n	802266a <_fflush_r+0x22>
 80226b4:	08026de8 	.word	0x08026de8
 80226b8:	08026e08 	.word	0x08026e08
 80226bc:	08026dc8 	.word	0x08026dc8

080226c0 <fiprintf>:
 80226c0:	b40e      	push	{r1, r2, r3}
 80226c2:	b503      	push	{r0, r1, lr}
 80226c4:	4601      	mov	r1, r0
 80226c6:	ab03      	add	r3, sp, #12
 80226c8:	4805      	ldr	r0, [pc, #20]	; (80226e0 <fiprintf+0x20>)
 80226ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80226ce:	6800      	ldr	r0, [r0, #0]
 80226d0:	9301      	str	r3, [sp, #4]
 80226d2:	f000 fa3f 	bl	8022b54 <_vfiprintf_r>
 80226d6:	b002      	add	sp, #8
 80226d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80226dc:	b003      	add	sp, #12
 80226de:	4770      	bx	lr
 80226e0:	200000c8 	.word	0x200000c8

080226e4 <_lseek_r>:
 80226e4:	b538      	push	{r3, r4, r5, lr}
 80226e6:	4d07      	ldr	r5, [pc, #28]	; (8022704 <_lseek_r+0x20>)
 80226e8:	4604      	mov	r4, r0
 80226ea:	4608      	mov	r0, r1
 80226ec:	4611      	mov	r1, r2
 80226ee:	2200      	movs	r2, #0
 80226f0:	602a      	str	r2, [r5, #0]
 80226f2:	461a      	mov	r2, r3
 80226f4:	f7e0 f9ce 	bl	8002a94 <_lseek>
 80226f8:	1c43      	adds	r3, r0, #1
 80226fa:	d102      	bne.n	8022702 <_lseek_r+0x1e>
 80226fc:	682b      	ldr	r3, [r5, #0]
 80226fe:	b103      	cbz	r3, 8022702 <_lseek_r+0x1e>
 8022700:	6023      	str	r3, [r4, #0]
 8022702:	bd38      	pop	{r3, r4, r5, pc}
 8022704:	20044078 	.word	0x20044078

08022708 <__swhatbuf_r>:
 8022708:	b570      	push	{r4, r5, r6, lr}
 802270a:	460e      	mov	r6, r1
 802270c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022710:	2900      	cmp	r1, #0
 8022712:	b096      	sub	sp, #88	; 0x58
 8022714:	4614      	mov	r4, r2
 8022716:	461d      	mov	r5, r3
 8022718:	da08      	bge.n	802272c <__swhatbuf_r+0x24>
 802271a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802271e:	2200      	movs	r2, #0
 8022720:	602a      	str	r2, [r5, #0]
 8022722:	061a      	lsls	r2, r3, #24
 8022724:	d410      	bmi.n	8022748 <__swhatbuf_r+0x40>
 8022726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802272a:	e00e      	b.n	802274a <__swhatbuf_r+0x42>
 802272c:	466a      	mov	r2, sp
 802272e:	f000 fce7 	bl	8023100 <_fstat_r>
 8022732:	2800      	cmp	r0, #0
 8022734:	dbf1      	blt.n	802271a <__swhatbuf_r+0x12>
 8022736:	9a01      	ldr	r2, [sp, #4]
 8022738:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802273c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022740:	425a      	negs	r2, r3
 8022742:	415a      	adcs	r2, r3
 8022744:	602a      	str	r2, [r5, #0]
 8022746:	e7ee      	b.n	8022726 <__swhatbuf_r+0x1e>
 8022748:	2340      	movs	r3, #64	; 0x40
 802274a:	2000      	movs	r0, #0
 802274c:	6023      	str	r3, [r4, #0]
 802274e:	b016      	add	sp, #88	; 0x58
 8022750:	bd70      	pop	{r4, r5, r6, pc}
	...

08022754 <__smakebuf_r>:
 8022754:	898b      	ldrh	r3, [r1, #12]
 8022756:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022758:	079d      	lsls	r5, r3, #30
 802275a:	4606      	mov	r6, r0
 802275c:	460c      	mov	r4, r1
 802275e:	d507      	bpl.n	8022770 <__smakebuf_r+0x1c>
 8022760:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022764:	6023      	str	r3, [r4, #0]
 8022766:	6123      	str	r3, [r4, #16]
 8022768:	2301      	movs	r3, #1
 802276a:	6163      	str	r3, [r4, #20]
 802276c:	b002      	add	sp, #8
 802276e:	bd70      	pop	{r4, r5, r6, pc}
 8022770:	ab01      	add	r3, sp, #4
 8022772:	466a      	mov	r2, sp
 8022774:	f7ff ffc8 	bl	8022708 <__swhatbuf_r>
 8022778:	9900      	ldr	r1, [sp, #0]
 802277a:	4605      	mov	r5, r0
 802277c:	4630      	mov	r0, r6
 802277e:	f7ff fa31 	bl	8021be4 <_malloc_r>
 8022782:	b948      	cbnz	r0, 8022798 <__smakebuf_r+0x44>
 8022784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022788:	059a      	lsls	r2, r3, #22
 802278a:	d4ef      	bmi.n	802276c <__smakebuf_r+0x18>
 802278c:	f023 0303 	bic.w	r3, r3, #3
 8022790:	f043 0302 	orr.w	r3, r3, #2
 8022794:	81a3      	strh	r3, [r4, #12]
 8022796:	e7e3      	b.n	8022760 <__smakebuf_r+0xc>
 8022798:	4b0d      	ldr	r3, [pc, #52]	; (80227d0 <__smakebuf_r+0x7c>)
 802279a:	62b3      	str	r3, [r6, #40]	; 0x28
 802279c:	89a3      	ldrh	r3, [r4, #12]
 802279e:	6020      	str	r0, [r4, #0]
 80227a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80227a4:	81a3      	strh	r3, [r4, #12]
 80227a6:	9b00      	ldr	r3, [sp, #0]
 80227a8:	6163      	str	r3, [r4, #20]
 80227aa:	9b01      	ldr	r3, [sp, #4]
 80227ac:	6120      	str	r0, [r4, #16]
 80227ae:	b15b      	cbz	r3, 80227c8 <__smakebuf_r+0x74>
 80227b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80227b4:	4630      	mov	r0, r6
 80227b6:	f000 fcb5 	bl	8023124 <_isatty_r>
 80227ba:	b128      	cbz	r0, 80227c8 <__smakebuf_r+0x74>
 80227bc:	89a3      	ldrh	r3, [r4, #12]
 80227be:	f023 0303 	bic.w	r3, r3, #3
 80227c2:	f043 0301 	orr.w	r3, r3, #1
 80227c6:	81a3      	strh	r3, [r4, #12]
 80227c8:	89a0      	ldrh	r0, [r4, #12]
 80227ca:	4305      	orrs	r5, r0
 80227cc:	81a5      	strh	r5, [r4, #12]
 80227ce:	e7cd      	b.n	802276c <__smakebuf_r+0x18>
 80227d0:	080217bd 	.word	0x080217bd

080227d4 <__malloc_lock>:
 80227d4:	4801      	ldr	r0, [pc, #4]	; (80227dc <__malloc_lock+0x8>)
 80227d6:	f7ff b930 	b.w	8021a3a <__retarget_lock_acquire_recursive>
 80227da:	bf00      	nop
 80227dc:	2004406d 	.word	0x2004406d

080227e0 <__malloc_unlock>:
 80227e0:	4801      	ldr	r0, [pc, #4]	; (80227e8 <__malloc_unlock+0x8>)
 80227e2:	f7ff b92b 	b.w	8021a3c <__retarget_lock_release_recursive>
 80227e6:	bf00      	nop
 80227e8:	2004406d 	.word	0x2004406d

080227ec <_realloc_r>:
 80227ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227f0:	4680      	mov	r8, r0
 80227f2:	4614      	mov	r4, r2
 80227f4:	460e      	mov	r6, r1
 80227f6:	b921      	cbnz	r1, 8022802 <_realloc_r+0x16>
 80227f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80227fc:	4611      	mov	r1, r2
 80227fe:	f7ff b9f1 	b.w	8021be4 <_malloc_r>
 8022802:	b92a      	cbnz	r2, 8022810 <_realloc_r+0x24>
 8022804:	f7ff f982 	bl	8021b0c <_free_r>
 8022808:	4625      	mov	r5, r4
 802280a:	4628      	mov	r0, r5
 802280c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022810:	f000 fc98 	bl	8023144 <_malloc_usable_size_r>
 8022814:	4284      	cmp	r4, r0
 8022816:	4607      	mov	r7, r0
 8022818:	d802      	bhi.n	8022820 <_realloc_r+0x34>
 802281a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802281e:	d812      	bhi.n	8022846 <_realloc_r+0x5a>
 8022820:	4621      	mov	r1, r4
 8022822:	4640      	mov	r0, r8
 8022824:	f7ff f9de 	bl	8021be4 <_malloc_r>
 8022828:	4605      	mov	r5, r0
 802282a:	2800      	cmp	r0, #0
 802282c:	d0ed      	beq.n	802280a <_realloc_r+0x1e>
 802282e:	42bc      	cmp	r4, r7
 8022830:	4622      	mov	r2, r4
 8022832:	4631      	mov	r1, r6
 8022834:	bf28      	it	cs
 8022836:	463a      	movcs	r2, r7
 8022838:	f7ff f922 	bl	8021a80 <memcpy>
 802283c:	4631      	mov	r1, r6
 802283e:	4640      	mov	r0, r8
 8022840:	f7ff f964 	bl	8021b0c <_free_r>
 8022844:	e7e1      	b.n	802280a <_realloc_r+0x1e>
 8022846:	4635      	mov	r5, r6
 8022848:	e7df      	b.n	802280a <_realloc_r+0x1e>

0802284a <__ssputs_r>:
 802284a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802284e:	688e      	ldr	r6, [r1, #8]
 8022850:	429e      	cmp	r6, r3
 8022852:	4682      	mov	sl, r0
 8022854:	460c      	mov	r4, r1
 8022856:	4690      	mov	r8, r2
 8022858:	461f      	mov	r7, r3
 802285a:	d838      	bhi.n	80228ce <__ssputs_r+0x84>
 802285c:	898a      	ldrh	r2, [r1, #12]
 802285e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022862:	d032      	beq.n	80228ca <__ssputs_r+0x80>
 8022864:	6825      	ldr	r5, [r4, #0]
 8022866:	6909      	ldr	r1, [r1, #16]
 8022868:	eba5 0901 	sub.w	r9, r5, r1
 802286c:	6965      	ldr	r5, [r4, #20]
 802286e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022872:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022876:	3301      	adds	r3, #1
 8022878:	444b      	add	r3, r9
 802287a:	106d      	asrs	r5, r5, #1
 802287c:	429d      	cmp	r5, r3
 802287e:	bf38      	it	cc
 8022880:	461d      	movcc	r5, r3
 8022882:	0553      	lsls	r3, r2, #21
 8022884:	d531      	bpl.n	80228ea <__ssputs_r+0xa0>
 8022886:	4629      	mov	r1, r5
 8022888:	f7ff f9ac 	bl	8021be4 <_malloc_r>
 802288c:	4606      	mov	r6, r0
 802288e:	b950      	cbnz	r0, 80228a6 <__ssputs_r+0x5c>
 8022890:	230c      	movs	r3, #12
 8022892:	f8ca 3000 	str.w	r3, [sl]
 8022896:	89a3      	ldrh	r3, [r4, #12]
 8022898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802289c:	81a3      	strh	r3, [r4, #12]
 802289e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80228a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80228a6:	6921      	ldr	r1, [r4, #16]
 80228a8:	464a      	mov	r2, r9
 80228aa:	f7ff f8e9 	bl	8021a80 <memcpy>
 80228ae:	89a3      	ldrh	r3, [r4, #12]
 80228b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80228b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80228b8:	81a3      	strh	r3, [r4, #12]
 80228ba:	6126      	str	r6, [r4, #16]
 80228bc:	6165      	str	r5, [r4, #20]
 80228be:	444e      	add	r6, r9
 80228c0:	eba5 0509 	sub.w	r5, r5, r9
 80228c4:	6026      	str	r6, [r4, #0]
 80228c6:	60a5      	str	r5, [r4, #8]
 80228c8:	463e      	mov	r6, r7
 80228ca:	42be      	cmp	r6, r7
 80228cc:	d900      	bls.n	80228d0 <__ssputs_r+0x86>
 80228ce:	463e      	mov	r6, r7
 80228d0:	6820      	ldr	r0, [r4, #0]
 80228d2:	4632      	mov	r2, r6
 80228d4:	4641      	mov	r1, r8
 80228d6:	f7ff f8e1 	bl	8021a9c <memmove>
 80228da:	68a3      	ldr	r3, [r4, #8]
 80228dc:	1b9b      	subs	r3, r3, r6
 80228de:	60a3      	str	r3, [r4, #8]
 80228e0:	6823      	ldr	r3, [r4, #0]
 80228e2:	4433      	add	r3, r6
 80228e4:	6023      	str	r3, [r4, #0]
 80228e6:	2000      	movs	r0, #0
 80228e8:	e7db      	b.n	80228a2 <__ssputs_r+0x58>
 80228ea:	462a      	mov	r2, r5
 80228ec:	f7ff ff7e 	bl	80227ec <_realloc_r>
 80228f0:	4606      	mov	r6, r0
 80228f2:	2800      	cmp	r0, #0
 80228f4:	d1e1      	bne.n	80228ba <__ssputs_r+0x70>
 80228f6:	6921      	ldr	r1, [r4, #16]
 80228f8:	4650      	mov	r0, sl
 80228fa:	f7ff f907 	bl	8021b0c <_free_r>
 80228fe:	e7c7      	b.n	8022890 <__ssputs_r+0x46>

08022900 <_svfiprintf_r>:
 8022900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022904:	4698      	mov	r8, r3
 8022906:	898b      	ldrh	r3, [r1, #12]
 8022908:	061b      	lsls	r3, r3, #24
 802290a:	b09d      	sub	sp, #116	; 0x74
 802290c:	4607      	mov	r7, r0
 802290e:	460d      	mov	r5, r1
 8022910:	4614      	mov	r4, r2
 8022912:	d50e      	bpl.n	8022932 <_svfiprintf_r+0x32>
 8022914:	690b      	ldr	r3, [r1, #16]
 8022916:	b963      	cbnz	r3, 8022932 <_svfiprintf_r+0x32>
 8022918:	2140      	movs	r1, #64	; 0x40
 802291a:	f7ff f963 	bl	8021be4 <_malloc_r>
 802291e:	6028      	str	r0, [r5, #0]
 8022920:	6128      	str	r0, [r5, #16]
 8022922:	b920      	cbnz	r0, 802292e <_svfiprintf_r+0x2e>
 8022924:	230c      	movs	r3, #12
 8022926:	603b      	str	r3, [r7, #0]
 8022928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802292c:	e0d1      	b.n	8022ad2 <_svfiprintf_r+0x1d2>
 802292e:	2340      	movs	r3, #64	; 0x40
 8022930:	616b      	str	r3, [r5, #20]
 8022932:	2300      	movs	r3, #0
 8022934:	9309      	str	r3, [sp, #36]	; 0x24
 8022936:	2320      	movs	r3, #32
 8022938:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802293c:	f8cd 800c 	str.w	r8, [sp, #12]
 8022940:	2330      	movs	r3, #48	; 0x30
 8022942:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022aec <_svfiprintf_r+0x1ec>
 8022946:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802294a:	f04f 0901 	mov.w	r9, #1
 802294e:	4623      	mov	r3, r4
 8022950:	469a      	mov	sl, r3
 8022952:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022956:	b10a      	cbz	r2, 802295c <_svfiprintf_r+0x5c>
 8022958:	2a25      	cmp	r2, #37	; 0x25
 802295a:	d1f9      	bne.n	8022950 <_svfiprintf_r+0x50>
 802295c:	ebba 0b04 	subs.w	fp, sl, r4
 8022960:	d00b      	beq.n	802297a <_svfiprintf_r+0x7a>
 8022962:	465b      	mov	r3, fp
 8022964:	4622      	mov	r2, r4
 8022966:	4629      	mov	r1, r5
 8022968:	4638      	mov	r0, r7
 802296a:	f7ff ff6e 	bl	802284a <__ssputs_r>
 802296e:	3001      	adds	r0, #1
 8022970:	f000 80aa 	beq.w	8022ac8 <_svfiprintf_r+0x1c8>
 8022974:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022976:	445a      	add	r2, fp
 8022978:	9209      	str	r2, [sp, #36]	; 0x24
 802297a:	f89a 3000 	ldrb.w	r3, [sl]
 802297e:	2b00      	cmp	r3, #0
 8022980:	f000 80a2 	beq.w	8022ac8 <_svfiprintf_r+0x1c8>
 8022984:	2300      	movs	r3, #0
 8022986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802298a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802298e:	f10a 0a01 	add.w	sl, sl, #1
 8022992:	9304      	str	r3, [sp, #16]
 8022994:	9307      	str	r3, [sp, #28]
 8022996:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802299a:	931a      	str	r3, [sp, #104]	; 0x68
 802299c:	4654      	mov	r4, sl
 802299e:	2205      	movs	r2, #5
 80229a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80229a4:	4851      	ldr	r0, [pc, #324]	; (8022aec <_svfiprintf_r+0x1ec>)
 80229a6:	f7dd fc33 	bl	8000210 <memchr>
 80229aa:	9a04      	ldr	r2, [sp, #16]
 80229ac:	b9d8      	cbnz	r0, 80229e6 <_svfiprintf_r+0xe6>
 80229ae:	06d0      	lsls	r0, r2, #27
 80229b0:	bf44      	itt	mi
 80229b2:	2320      	movmi	r3, #32
 80229b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80229b8:	0711      	lsls	r1, r2, #28
 80229ba:	bf44      	itt	mi
 80229bc:	232b      	movmi	r3, #43	; 0x2b
 80229be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80229c2:	f89a 3000 	ldrb.w	r3, [sl]
 80229c6:	2b2a      	cmp	r3, #42	; 0x2a
 80229c8:	d015      	beq.n	80229f6 <_svfiprintf_r+0xf6>
 80229ca:	9a07      	ldr	r2, [sp, #28]
 80229cc:	4654      	mov	r4, sl
 80229ce:	2000      	movs	r0, #0
 80229d0:	f04f 0c0a 	mov.w	ip, #10
 80229d4:	4621      	mov	r1, r4
 80229d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80229da:	3b30      	subs	r3, #48	; 0x30
 80229dc:	2b09      	cmp	r3, #9
 80229de:	d94e      	bls.n	8022a7e <_svfiprintf_r+0x17e>
 80229e0:	b1b0      	cbz	r0, 8022a10 <_svfiprintf_r+0x110>
 80229e2:	9207      	str	r2, [sp, #28]
 80229e4:	e014      	b.n	8022a10 <_svfiprintf_r+0x110>
 80229e6:	eba0 0308 	sub.w	r3, r0, r8
 80229ea:	fa09 f303 	lsl.w	r3, r9, r3
 80229ee:	4313      	orrs	r3, r2
 80229f0:	9304      	str	r3, [sp, #16]
 80229f2:	46a2      	mov	sl, r4
 80229f4:	e7d2      	b.n	802299c <_svfiprintf_r+0x9c>
 80229f6:	9b03      	ldr	r3, [sp, #12]
 80229f8:	1d19      	adds	r1, r3, #4
 80229fa:	681b      	ldr	r3, [r3, #0]
 80229fc:	9103      	str	r1, [sp, #12]
 80229fe:	2b00      	cmp	r3, #0
 8022a00:	bfbb      	ittet	lt
 8022a02:	425b      	neglt	r3, r3
 8022a04:	f042 0202 	orrlt.w	r2, r2, #2
 8022a08:	9307      	strge	r3, [sp, #28]
 8022a0a:	9307      	strlt	r3, [sp, #28]
 8022a0c:	bfb8      	it	lt
 8022a0e:	9204      	strlt	r2, [sp, #16]
 8022a10:	7823      	ldrb	r3, [r4, #0]
 8022a12:	2b2e      	cmp	r3, #46	; 0x2e
 8022a14:	d10c      	bne.n	8022a30 <_svfiprintf_r+0x130>
 8022a16:	7863      	ldrb	r3, [r4, #1]
 8022a18:	2b2a      	cmp	r3, #42	; 0x2a
 8022a1a:	d135      	bne.n	8022a88 <_svfiprintf_r+0x188>
 8022a1c:	9b03      	ldr	r3, [sp, #12]
 8022a1e:	1d1a      	adds	r2, r3, #4
 8022a20:	681b      	ldr	r3, [r3, #0]
 8022a22:	9203      	str	r2, [sp, #12]
 8022a24:	2b00      	cmp	r3, #0
 8022a26:	bfb8      	it	lt
 8022a28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022a2c:	3402      	adds	r4, #2
 8022a2e:	9305      	str	r3, [sp, #20]
 8022a30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022afc <_svfiprintf_r+0x1fc>
 8022a34:	7821      	ldrb	r1, [r4, #0]
 8022a36:	2203      	movs	r2, #3
 8022a38:	4650      	mov	r0, sl
 8022a3a:	f7dd fbe9 	bl	8000210 <memchr>
 8022a3e:	b140      	cbz	r0, 8022a52 <_svfiprintf_r+0x152>
 8022a40:	2340      	movs	r3, #64	; 0x40
 8022a42:	eba0 000a 	sub.w	r0, r0, sl
 8022a46:	fa03 f000 	lsl.w	r0, r3, r0
 8022a4a:	9b04      	ldr	r3, [sp, #16]
 8022a4c:	4303      	orrs	r3, r0
 8022a4e:	3401      	adds	r4, #1
 8022a50:	9304      	str	r3, [sp, #16]
 8022a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a56:	4826      	ldr	r0, [pc, #152]	; (8022af0 <_svfiprintf_r+0x1f0>)
 8022a58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022a5c:	2206      	movs	r2, #6
 8022a5e:	f7dd fbd7 	bl	8000210 <memchr>
 8022a62:	2800      	cmp	r0, #0
 8022a64:	d038      	beq.n	8022ad8 <_svfiprintf_r+0x1d8>
 8022a66:	4b23      	ldr	r3, [pc, #140]	; (8022af4 <_svfiprintf_r+0x1f4>)
 8022a68:	bb1b      	cbnz	r3, 8022ab2 <_svfiprintf_r+0x1b2>
 8022a6a:	9b03      	ldr	r3, [sp, #12]
 8022a6c:	3307      	adds	r3, #7
 8022a6e:	f023 0307 	bic.w	r3, r3, #7
 8022a72:	3308      	adds	r3, #8
 8022a74:	9303      	str	r3, [sp, #12]
 8022a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a78:	4433      	add	r3, r6
 8022a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8022a7c:	e767      	b.n	802294e <_svfiprintf_r+0x4e>
 8022a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022a82:	460c      	mov	r4, r1
 8022a84:	2001      	movs	r0, #1
 8022a86:	e7a5      	b.n	80229d4 <_svfiprintf_r+0xd4>
 8022a88:	2300      	movs	r3, #0
 8022a8a:	3401      	adds	r4, #1
 8022a8c:	9305      	str	r3, [sp, #20]
 8022a8e:	4619      	mov	r1, r3
 8022a90:	f04f 0c0a 	mov.w	ip, #10
 8022a94:	4620      	mov	r0, r4
 8022a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022a9a:	3a30      	subs	r2, #48	; 0x30
 8022a9c:	2a09      	cmp	r2, #9
 8022a9e:	d903      	bls.n	8022aa8 <_svfiprintf_r+0x1a8>
 8022aa0:	2b00      	cmp	r3, #0
 8022aa2:	d0c5      	beq.n	8022a30 <_svfiprintf_r+0x130>
 8022aa4:	9105      	str	r1, [sp, #20]
 8022aa6:	e7c3      	b.n	8022a30 <_svfiprintf_r+0x130>
 8022aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8022aac:	4604      	mov	r4, r0
 8022aae:	2301      	movs	r3, #1
 8022ab0:	e7f0      	b.n	8022a94 <_svfiprintf_r+0x194>
 8022ab2:	ab03      	add	r3, sp, #12
 8022ab4:	9300      	str	r3, [sp, #0]
 8022ab6:	462a      	mov	r2, r5
 8022ab8:	4b0f      	ldr	r3, [pc, #60]	; (8022af8 <_svfiprintf_r+0x1f8>)
 8022aba:	a904      	add	r1, sp, #16
 8022abc:	4638      	mov	r0, r7
 8022abe:	f3af 8000 	nop.w
 8022ac2:	1c42      	adds	r2, r0, #1
 8022ac4:	4606      	mov	r6, r0
 8022ac6:	d1d6      	bne.n	8022a76 <_svfiprintf_r+0x176>
 8022ac8:	89ab      	ldrh	r3, [r5, #12]
 8022aca:	065b      	lsls	r3, r3, #25
 8022acc:	f53f af2c 	bmi.w	8022928 <_svfiprintf_r+0x28>
 8022ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022ad2:	b01d      	add	sp, #116	; 0x74
 8022ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ad8:	ab03      	add	r3, sp, #12
 8022ada:	9300      	str	r3, [sp, #0]
 8022adc:	462a      	mov	r2, r5
 8022ade:	4b06      	ldr	r3, [pc, #24]	; (8022af8 <_svfiprintf_r+0x1f8>)
 8022ae0:	a904      	add	r1, sp, #16
 8022ae2:	4638      	mov	r0, r7
 8022ae4:	f000 f9d4 	bl	8022e90 <_printf_i>
 8022ae8:	e7eb      	b.n	8022ac2 <_svfiprintf_r+0x1c2>
 8022aea:	bf00      	nop
 8022aec:	08026eda 	.word	0x08026eda
 8022af0:	08026ee4 	.word	0x08026ee4
 8022af4:	00000000 	.word	0x00000000
 8022af8:	0802284b 	.word	0x0802284b
 8022afc:	08026ee0 	.word	0x08026ee0

08022b00 <__sfputc_r>:
 8022b00:	6893      	ldr	r3, [r2, #8]
 8022b02:	3b01      	subs	r3, #1
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	b410      	push	{r4}
 8022b08:	6093      	str	r3, [r2, #8]
 8022b0a:	da08      	bge.n	8022b1e <__sfputc_r+0x1e>
 8022b0c:	6994      	ldr	r4, [r2, #24]
 8022b0e:	42a3      	cmp	r3, r4
 8022b10:	db01      	blt.n	8022b16 <__sfputc_r+0x16>
 8022b12:	290a      	cmp	r1, #10
 8022b14:	d103      	bne.n	8022b1e <__sfputc_r+0x1e>
 8022b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b1a:	f7ff bc03 	b.w	8022324 <__swbuf_r>
 8022b1e:	6813      	ldr	r3, [r2, #0]
 8022b20:	1c58      	adds	r0, r3, #1
 8022b22:	6010      	str	r0, [r2, #0]
 8022b24:	7019      	strb	r1, [r3, #0]
 8022b26:	4608      	mov	r0, r1
 8022b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022b2c:	4770      	bx	lr

08022b2e <__sfputs_r>:
 8022b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b30:	4606      	mov	r6, r0
 8022b32:	460f      	mov	r7, r1
 8022b34:	4614      	mov	r4, r2
 8022b36:	18d5      	adds	r5, r2, r3
 8022b38:	42ac      	cmp	r4, r5
 8022b3a:	d101      	bne.n	8022b40 <__sfputs_r+0x12>
 8022b3c:	2000      	movs	r0, #0
 8022b3e:	e007      	b.n	8022b50 <__sfputs_r+0x22>
 8022b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b44:	463a      	mov	r2, r7
 8022b46:	4630      	mov	r0, r6
 8022b48:	f7ff ffda 	bl	8022b00 <__sfputc_r>
 8022b4c:	1c43      	adds	r3, r0, #1
 8022b4e:	d1f3      	bne.n	8022b38 <__sfputs_r+0xa>
 8022b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022b54 <_vfiprintf_r>:
 8022b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b58:	460d      	mov	r5, r1
 8022b5a:	b09d      	sub	sp, #116	; 0x74
 8022b5c:	4614      	mov	r4, r2
 8022b5e:	4698      	mov	r8, r3
 8022b60:	4606      	mov	r6, r0
 8022b62:	b118      	cbz	r0, 8022b6c <_vfiprintf_r+0x18>
 8022b64:	6983      	ldr	r3, [r0, #24]
 8022b66:	b90b      	cbnz	r3, 8022b6c <_vfiprintf_r+0x18>
 8022b68:	f7fe fe5c 	bl	8021824 <__sinit>
 8022b6c:	4b89      	ldr	r3, [pc, #548]	; (8022d94 <_vfiprintf_r+0x240>)
 8022b6e:	429d      	cmp	r5, r3
 8022b70:	d11b      	bne.n	8022baa <_vfiprintf_r+0x56>
 8022b72:	6875      	ldr	r5, [r6, #4]
 8022b74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b76:	07d9      	lsls	r1, r3, #31
 8022b78:	d405      	bmi.n	8022b86 <_vfiprintf_r+0x32>
 8022b7a:	89ab      	ldrh	r3, [r5, #12]
 8022b7c:	059a      	lsls	r2, r3, #22
 8022b7e:	d402      	bmi.n	8022b86 <_vfiprintf_r+0x32>
 8022b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022b82:	f7fe ff5a 	bl	8021a3a <__retarget_lock_acquire_recursive>
 8022b86:	89ab      	ldrh	r3, [r5, #12]
 8022b88:	071b      	lsls	r3, r3, #28
 8022b8a:	d501      	bpl.n	8022b90 <_vfiprintf_r+0x3c>
 8022b8c:	692b      	ldr	r3, [r5, #16]
 8022b8e:	b9eb      	cbnz	r3, 8022bcc <_vfiprintf_r+0x78>
 8022b90:	4629      	mov	r1, r5
 8022b92:	4630      	mov	r0, r6
 8022b94:	f7ff fc2a 	bl	80223ec <__swsetup_r>
 8022b98:	b1c0      	cbz	r0, 8022bcc <_vfiprintf_r+0x78>
 8022b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b9c:	07dc      	lsls	r4, r3, #31
 8022b9e:	d50e      	bpl.n	8022bbe <_vfiprintf_r+0x6a>
 8022ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022ba4:	b01d      	add	sp, #116	; 0x74
 8022ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022baa:	4b7b      	ldr	r3, [pc, #492]	; (8022d98 <_vfiprintf_r+0x244>)
 8022bac:	429d      	cmp	r5, r3
 8022bae:	d101      	bne.n	8022bb4 <_vfiprintf_r+0x60>
 8022bb0:	68b5      	ldr	r5, [r6, #8]
 8022bb2:	e7df      	b.n	8022b74 <_vfiprintf_r+0x20>
 8022bb4:	4b79      	ldr	r3, [pc, #484]	; (8022d9c <_vfiprintf_r+0x248>)
 8022bb6:	429d      	cmp	r5, r3
 8022bb8:	bf08      	it	eq
 8022bba:	68f5      	ldreq	r5, [r6, #12]
 8022bbc:	e7da      	b.n	8022b74 <_vfiprintf_r+0x20>
 8022bbe:	89ab      	ldrh	r3, [r5, #12]
 8022bc0:	0598      	lsls	r0, r3, #22
 8022bc2:	d4ed      	bmi.n	8022ba0 <_vfiprintf_r+0x4c>
 8022bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022bc6:	f7fe ff39 	bl	8021a3c <__retarget_lock_release_recursive>
 8022bca:	e7e9      	b.n	8022ba0 <_vfiprintf_r+0x4c>
 8022bcc:	2300      	movs	r3, #0
 8022bce:	9309      	str	r3, [sp, #36]	; 0x24
 8022bd0:	2320      	movs	r3, #32
 8022bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8022bda:	2330      	movs	r3, #48	; 0x30
 8022bdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022da0 <_vfiprintf_r+0x24c>
 8022be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022be4:	f04f 0901 	mov.w	r9, #1
 8022be8:	4623      	mov	r3, r4
 8022bea:	469a      	mov	sl, r3
 8022bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022bf0:	b10a      	cbz	r2, 8022bf6 <_vfiprintf_r+0xa2>
 8022bf2:	2a25      	cmp	r2, #37	; 0x25
 8022bf4:	d1f9      	bne.n	8022bea <_vfiprintf_r+0x96>
 8022bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8022bfa:	d00b      	beq.n	8022c14 <_vfiprintf_r+0xc0>
 8022bfc:	465b      	mov	r3, fp
 8022bfe:	4622      	mov	r2, r4
 8022c00:	4629      	mov	r1, r5
 8022c02:	4630      	mov	r0, r6
 8022c04:	f7ff ff93 	bl	8022b2e <__sfputs_r>
 8022c08:	3001      	adds	r0, #1
 8022c0a:	f000 80aa 	beq.w	8022d62 <_vfiprintf_r+0x20e>
 8022c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c10:	445a      	add	r2, fp
 8022c12:	9209      	str	r2, [sp, #36]	; 0x24
 8022c14:	f89a 3000 	ldrb.w	r3, [sl]
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	f000 80a2 	beq.w	8022d62 <_vfiprintf_r+0x20e>
 8022c1e:	2300      	movs	r3, #0
 8022c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022c28:	f10a 0a01 	add.w	sl, sl, #1
 8022c2c:	9304      	str	r3, [sp, #16]
 8022c2e:	9307      	str	r3, [sp, #28]
 8022c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022c34:	931a      	str	r3, [sp, #104]	; 0x68
 8022c36:	4654      	mov	r4, sl
 8022c38:	2205      	movs	r2, #5
 8022c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022c3e:	4858      	ldr	r0, [pc, #352]	; (8022da0 <_vfiprintf_r+0x24c>)
 8022c40:	f7dd fae6 	bl	8000210 <memchr>
 8022c44:	9a04      	ldr	r2, [sp, #16]
 8022c46:	b9d8      	cbnz	r0, 8022c80 <_vfiprintf_r+0x12c>
 8022c48:	06d1      	lsls	r1, r2, #27
 8022c4a:	bf44      	itt	mi
 8022c4c:	2320      	movmi	r3, #32
 8022c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022c52:	0713      	lsls	r3, r2, #28
 8022c54:	bf44      	itt	mi
 8022c56:	232b      	movmi	r3, #43	; 0x2b
 8022c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8022c60:	2b2a      	cmp	r3, #42	; 0x2a
 8022c62:	d015      	beq.n	8022c90 <_vfiprintf_r+0x13c>
 8022c64:	9a07      	ldr	r2, [sp, #28]
 8022c66:	4654      	mov	r4, sl
 8022c68:	2000      	movs	r0, #0
 8022c6a:	f04f 0c0a 	mov.w	ip, #10
 8022c6e:	4621      	mov	r1, r4
 8022c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022c74:	3b30      	subs	r3, #48	; 0x30
 8022c76:	2b09      	cmp	r3, #9
 8022c78:	d94e      	bls.n	8022d18 <_vfiprintf_r+0x1c4>
 8022c7a:	b1b0      	cbz	r0, 8022caa <_vfiprintf_r+0x156>
 8022c7c:	9207      	str	r2, [sp, #28]
 8022c7e:	e014      	b.n	8022caa <_vfiprintf_r+0x156>
 8022c80:	eba0 0308 	sub.w	r3, r0, r8
 8022c84:	fa09 f303 	lsl.w	r3, r9, r3
 8022c88:	4313      	orrs	r3, r2
 8022c8a:	9304      	str	r3, [sp, #16]
 8022c8c:	46a2      	mov	sl, r4
 8022c8e:	e7d2      	b.n	8022c36 <_vfiprintf_r+0xe2>
 8022c90:	9b03      	ldr	r3, [sp, #12]
 8022c92:	1d19      	adds	r1, r3, #4
 8022c94:	681b      	ldr	r3, [r3, #0]
 8022c96:	9103      	str	r1, [sp, #12]
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	bfbb      	ittet	lt
 8022c9c:	425b      	neglt	r3, r3
 8022c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8022ca2:	9307      	strge	r3, [sp, #28]
 8022ca4:	9307      	strlt	r3, [sp, #28]
 8022ca6:	bfb8      	it	lt
 8022ca8:	9204      	strlt	r2, [sp, #16]
 8022caa:	7823      	ldrb	r3, [r4, #0]
 8022cac:	2b2e      	cmp	r3, #46	; 0x2e
 8022cae:	d10c      	bne.n	8022cca <_vfiprintf_r+0x176>
 8022cb0:	7863      	ldrb	r3, [r4, #1]
 8022cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8022cb4:	d135      	bne.n	8022d22 <_vfiprintf_r+0x1ce>
 8022cb6:	9b03      	ldr	r3, [sp, #12]
 8022cb8:	1d1a      	adds	r2, r3, #4
 8022cba:	681b      	ldr	r3, [r3, #0]
 8022cbc:	9203      	str	r2, [sp, #12]
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	bfb8      	it	lt
 8022cc2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022cc6:	3402      	adds	r4, #2
 8022cc8:	9305      	str	r3, [sp, #20]
 8022cca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022db0 <_vfiprintf_r+0x25c>
 8022cce:	7821      	ldrb	r1, [r4, #0]
 8022cd0:	2203      	movs	r2, #3
 8022cd2:	4650      	mov	r0, sl
 8022cd4:	f7dd fa9c 	bl	8000210 <memchr>
 8022cd8:	b140      	cbz	r0, 8022cec <_vfiprintf_r+0x198>
 8022cda:	2340      	movs	r3, #64	; 0x40
 8022cdc:	eba0 000a 	sub.w	r0, r0, sl
 8022ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8022ce4:	9b04      	ldr	r3, [sp, #16]
 8022ce6:	4303      	orrs	r3, r0
 8022ce8:	3401      	adds	r4, #1
 8022cea:	9304      	str	r3, [sp, #16]
 8022cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022cf0:	482c      	ldr	r0, [pc, #176]	; (8022da4 <_vfiprintf_r+0x250>)
 8022cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022cf6:	2206      	movs	r2, #6
 8022cf8:	f7dd fa8a 	bl	8000210 <memchr>
 8022cfc:	2800      	cmp	r0, #0
 8022cfe:	d03f      	beq.n	8022d80 <_vfiprintf_r+0x22c>
 8022d00:	4b29      	ldr	r3, [pc, #164]	; (8022da8 <_vfiprintf_r+0x254>)
 8022d02:	bb1b      	cbnz	r3, 8022d4c <_vfiprintf_r+0x1f8>
 8022d04:	9b03      	ldr	r3, [sp, #12]
 8022d06:	3307      	adds	r3, #7
 8022d08:	f023 0307 	bic.w	r3, r3, #7
 8022d0c:	3308      	adds	r3, #8
 8022d0e:	9303      	str	r3, [sp, #12]
 8022d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d12:	443b      	add	r3, r7
 8022d14:	9309      	str	r3, [sp, #36]	; 0x24
 8022d16:	e767      	b.n	8022be8 <_vfiprintf_r+0x94>
 8022d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8022d1c:	460c      	mov	r4, r1
 8022d1e:	2001      	movs	r0, #1
 8022d20:	e7a5      	b.n	8022c6e <_vfiprintf_r+0x11a>
 8022d22:	2300      	movs	r3, #0
 8022d24:	3401      	adds	r4, #1
 8022d26:	9305      	str	r3, [sp, #20]
 8022d28:	4619      	mov	r1, r3
 8022d2a:	f04f 0c0a 	mov.w	ip, #10
 8022d2e:	4620      	mov	r0, r4
 8022d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022d34:	3a30      	subs	r2, #48	; 0x30
 8022d36:	2a09      	cmp	r2, #9
 8022d38:	d903      	bls.n	8022d42 <_vfiprintf_r+0x1ee>
 8022d3a:	2b00      	cmp	r3, #0
 8022d3c:	d0c5      	beq.n	8022cca <_vfiprintf_r+0x176>
 8022d3e:	9105      	str	r1, [sp, #20]
 8022d40:	e7c3      	b.n	8022cca <_vfiprintf_r+0x176>
 8022d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8022d46:	4604      	mov	r4, r0
 8022d48:	2301      	movs	r3, #1
 8022d4a:	e7f0      	b.n	8022d2e <_vfiprintf_r+0x1da>
 8022d4c:	ab03      	add	r3, sp, #12
 8022d4e:	9300      	str	r3, [sp, #0]
 8022d50:	462a      	mov	r2, r5
 8022d52:	4b16      	ldr	r3, [pc, #88]	; (8022dac <_vfiprintf_r+0x258>)
 8022d54:	a904      	add	r1, sp, #16
 8022d56:	4630      	mov	r0, r6
 8022d58:	f3af 8000 	nop.w
 8022d5c:	4607      	mov	r7, r0
 8022d5e:	1c78      	adds	r0, r7, #1
 8022d60:	d1d6      	bne.n	8022d10 <_vfiprintf_r+0x1bc>
 8022d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022d64:	07d9      	lsls	r1, r3, #31
 8022d66:	d405      	bmi.n	8022d74 <_vfiprintf_r+0x220>
 8022d68:	89ab      	ldrh	r3, [r5, #12]
 8022d6a:	059a      	lsls	r2, r3, #22
 8022d6c:	d402      	bmi.n	8022d74 <_vfiprintf_r+0x220>
 8022d6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022d70:	f7fe fe64 	bl	8021a3c <__retarget_lock_release_recursive>
 8022d74:	89ab      	ldrh	r3, [r5, #12]
 8022d76:	065b      	lsls	r3, r3, #25
 8022d78:	f53f af12 	bmi.w	8022ba0 <_vfiprintf_r+0x4c>
 8022d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022d7e:	e711      	b.n	8022ba4 <_vfiprintf_r+0x50>
 8022d80:	ab03      	add	r3, sp, #12
 8022d82:	9300      	str	r3, [sp, #0]
 8022d84:	462a      	mov	r2, r5
 8022d86:	4b09      	ldr	r3, [pc, #36]	; (8022dac <_vfiprintf_r+0x258>)
 8022d88:	a904      	add	r1, sp, #16
 8022d8a:	4630      	mov	r0, r6
 8022d8c:	f000 f880 	bl	8022e90 <_printf_i>
 8022d90:	e7e4      	b.n	8022d5c <_vfiprintf_r+0x208>
 8022d92:	bf00      	nop
 8022d94:	08026de8 	.word	0x08026de8
 8022d98:	08026e08 	.word	0x08026e08
 8022d9c:	08026dc8 	.word	0x08026dc8
 8022da0:	08026eda 	.word	0x08026eda
 8022da4:	08026ee4 	.word	0x08026ee4
 8022da8:	00000000 	.word	0x00000000
 8022dac:	08022b2f 	.word	0x08022b2f
 8022db0:	08026ee0 	.word	0x08026ee0

08022db4 <_printf_common>:
 8022db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022db8:	4616      	mov	r6, r2
 8022dba:	4699      	mov	r9, r3
 8022dbc:	688a      	ldr	r2, [r1, #8]
 8022dbe:	690b      	ldr	r3, [r1, #16]
 8022dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022dc4:	4293      	cmp	r3, r2
 8022dc6:	bfb8      	it	lt
 8022dc8:	4613      	movlt	r3, r2
 8022dca:	6033      	str	r3, [r6, #0]
 8022dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022dd0:	4607      	mov	r7, r0
 8022dd2:	460c      	mov	r4, r1
 8022dd4:	b10a      	cbz	r2, 8022dda <_printf_common+0x26>
 8022dd6:	3301      	adds	r3, #1
 8022dd8:	6033      	str	r3, [r6, #0]
 8022dda:	6823      	ldr	r3, [r4, #0]
 8022ddc:	0699      	lsls	r1, r3, #26
 8022dde:	bf42      	ittt	mi
 8022de0:	6833      	ldrmi	r3, [r6, #0]
 8022de2:	3302      	addmi	r3, #2
 8022de4:	6033      	strmi	r3, [r6, #0]
 8022de6:	6825      	ldr	r5, [r4, #0]
 8022de8:	f015 0506 	ands.w	r5, r5, #6
 8022dec:	d106      	bne.n	8022dfc <_printf_common+0x48>
 8022dee:	f104 0a19 	add.w	sl, r4, #25
 8022df2:	68e3      	ldr	r3, [r4, #12]
 8022df4:	6832      	ldr	r2, [r6, #0]
 8022df6:	1a9b      	subs	r3, r3, r2
 8022df8:	42ab      	cmp	r3, r5
 8022dfa:	dc26      	bgt.n	8022e4a <_printf_common+0x96>
 8022dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022e00:	1e13      	subs	r3, r2, #0
 8022e02:	6822      	ldr	r2, [r4, #0]
 8022e04:	bf18      	it	ne
 8022e06:	2301      	movne	r3, #1
 8022e08:	0692      	lsls	r2, r2, #26
 8022e0a:	d42b      	bmi.n	8022e64 <_printf_common+0xb0>
 8022e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022e10:	4649      	mov	r1, r9
 8022e12:	4638      	mov	r0, r7
 8022e14:	47c0      	blx	r8
 8022e16:	3001      	adds	r0, #1
 8022e18:	d01e      	beq.n	8022e58 <_printf_common+0xa4>
 8022e1a:	6823      	ldr	r3, [r4, #0]
 8022e1c:	68e5      	ldr	r5, [r4, #12]
 8022e1e:	6832      	ldr	r2, [r6, #0]
 8022e20:	f003 0306 	and.w	r3, r3, #6
 8022e24:	2b04      	cmp	r3, #4
 8022e26:	bf08      	it	eq
 8022e28:	1aad      	subeq	r5, r5, r2
 8022e2a:	68a3      	ldr	r3, [r4, #8]
 8022e2c:	6922      	ldr	r2, [r4, #16]
 8022e2e:	bf0c      	ite	eq
 8022e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022e34:	2500      	movne	r5, #0
 8022e36:	4293      	cmp	r3, r2
 8022e38:	bfc4      	itt	gt
 8022e3a:	1a9b      	subgt	r3, r3, r2
 8022e3c:	18ed      	addgt	r5, r5, r3
 8022e3e:	2600      	movs	r6, #0
 8022e40:	341a      	adds	r4, #26
 8022e42:	42b5      	cmp	r5, r6
 8022e44:	d11a      	bne.n	8022e7c <_printf_common+0xc8>
 8022e46:	2000      	movs	r0, #0
 8022e48:	e008      	b.n	8022e5c <_printf_common+0xa8>
 8022e4a:	2301      	movs	r3, #1
 8022e4c:	4652      	mov	r2, sl
 8022e4e:	4649      	mov	r1, r9
 8022e50:	4638      	mov	r0, r7
 8022e52:	47c0      	blx	r8
 8022e54:	3001      	adds	r0, #1
 8022e56:	d103      	bne.n	8022e60 <_printf_common+0xac>
 8022e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e60:	3501      	adds	r5, #1
 8022e62:	e7c6      	b.n	8022df2 <_printf_common+0x3e>
 8022e64:	18e1      	adds	r1, r4, r3
 8022e66:	1c5a      	adds	r2, r3, #1
 8022e68:	2030      	movs	r0, #48	; 0x30
 8022e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022e6e:	4422      	add	r2, r4
 8022e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022e78:	3302      	adds	r3, #2
 8022e7a:	e7c7      	b.n	8022e0c <_printf_common+0x58>
 8022e7c:	2301      	movs	r3, #1
 8022e7e:	4622      	mov	r2, r4
 8022e80:	4649      	mov	r1, r9
 8022e82:	4638      	mov	r0, r7
 8022e84:	47c0      	blx	r8
 8022e86:	3001      	adds	r0, #1
 8022e88:	d0e6      	beq.n	8022e58 <_printf_common+0xa4>
 8022e8a:	3601      	adds	r6, #1
 8022e8c:	e7d9      	b.n	8022e42 <_printf_common+0x8e>
	...

08022e90 <_printf_i>:
 8022e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022e94:	7e0f      	ldrb	r7, [r1, #24]
 8022e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022e98:	2f78      	cmp	r7, #120	; 0x78
 8022e9a:	4691      	mov	r9, r2
 8022e9c:	4680      	mov	r8, r0
 8022e9e:	460c      	mov	r4, r1
 8022ea0:	469a      	mov	sl, r3
 8022ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8022ea6:	d807      	bhi.n	8022eb8 <_printf_i+0x28>
 8022ea8:	2f62      	cmp	r7, #98	; 0x62
 8022eaa:	d80a      	bhi.n	8022ec2 <_printf_i+0x32>
 8022eac:	2f00      	cmp	r7, #0
 8022eae:	f000 80d8 	beq.w	8023062 <_printf_i+0x1d2>
 8022eb2:	2f58      	cmp	r7, #88	; 0x58
 8022eb4:	f000 80a3 	beq.w	8022ffe <_printf_i+0x16e>
 8022eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022ec0:	e03a      	b.n	8022f38 <_printf_i+0xa8>
 8022ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022ec6:	2b15      	cmp	r3, #21
 8022ec8:	d8f6      	bhi.n	8022eb8 <_printf_i+0x28>
 8022eca:	a101      	add	r1, pc, #4	; (adr r1, 8022ed0 <_printf_i+0x40>)
 8022ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022ed0:	08022f29 	.word	0x08022f29
 8022ed4:	08022f3d 	.word	0x08022f3d
 8022ed8:	08022eb9 	.word	0x08022eb9
 8022edc:	08022eb9 	.word	0x08022eb9
 8022ee0:	08022eb9 	.word	0x08022eb9
 8022ee4:	08022eb9 	.word	0x08022eb9
 8022ee8:	08022f3d 	.word	0x08022f3d
 8022eec:	08022eb9 	.word	0x08022eb9
 8022ef0:	08022eb9 	.word	0x08022eb9
 8022ef4:	08022eb9 	.word	0x08022eb9
 8022ef8:	08022eb9 	.word	0x08022eb9
 8022efc:	08023049 	.word	0x08023049
 8022f00:	08022f6d 	.word	0x08022f6d
 8022f04:	0802302b 	.word	0x0802302b
 8022f08:	08022eb9 	.word	0x08022eb9
 8022f0c:	08022eb9 	.word	0x08022eb9
 8022f10:	0802306b 	.word	0x0802306b
 8022f14:	08022eb9 	.word	0x08022eb9
 8022f18:	08022f6d 	.word	0x08022f6d
 8022f1c:	08022eb9 	.word	0x08022eb9
 8022f20:	08022eb9 	.word	0x08022eb9
 8022f24:	08023033 	.word	0x08023033
 8022f28:	682b      	ldr	r3, [r5, #0]
 8022f2a:	1d1a      	adds	r2, r3, #4
 8022f2c:	681b      	ldr	r3, [r3, #0]
 8022f2e:	602a      	str	r2, [r5, #0]
 8022f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022f38:	2301      	movs	r3, #1
 8022f3a:	e0a3      	b.n	8023084 <_printf_i+0x1f4>
 8022f3c:	6820      	ldr	r0, [r4, #0]
 8022f3e:	6829      	ldr	r1, [r5, #0]
 8022f40:	0606      	lsls	r6, r0, #24
 8022f42:	f101 0304 	add.w	r3, r1, #4
 8022f46:	d50a      	bpl.n	8022f5e <_printf_i+0xce>
 8022f48:	680e      	ldr	r6, [r1, #0]
 8022f4a:	602b      	str	r3, [r5, #0]
 8022f4c:	2e00      	cmp	r6, #0
 8022f4e:	da03      	bge.n	8022f58 <_printf_i+0xc8>
 8022f50:	232d      	movs	r3, #45	; 0x2d
 8022f52:	4276      	negs	r6, r6
 8022f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022f58:	485e      	ldr	r0, [pc, #376]	; (80230d4 <_printf_i+0x244>)
 8022f5a:	230a      	movs	r3, #10
 8022f5c:	e019      	b.n	8022f92 <_printf_i+0x102>
 8022f5e:	680e      	ldr	r6, [r1, #0]
 8022f60:	602b      	str	r3, [r5, #0]
 8022f62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022f66:	bf18      	it	ne
 8022f68:	b236      	sxthne	r6, r6
 8022f6a:	e7ef      	b.n	8022f4c <_printf_i+0xbc>
 8022f6c:	682b      	ldr	r3, [r5, #0]
 8022f6e:	6820      	ldr	r0, [r4, #0]
 8022f70:	1d19      	adds	r1, r3, #4
 8022f72:	6029      	str	r1, [r5, #0]
 8022f74:	0601      	lsls	r1, r0, #24
 8022f76:	d501      	bpl.n	8022f7c <_printf_i+0xec>
 8022f78:	681e      	ldr	r6, [r3, #0]
 8022f7a:	e002      	b.n	8022f82 <_printf_i+0xf2>
 8022f7c:	0646      	lsls	r6, r0, #25
 8022f7e:	d5fb      	bpl.n	8022f78 <_printf_i+0xe8>
 8022f80:	881e      	ldrh	r6, [r3, #0]
 8022f82:	4854      	ldr	r0, [pc, #336]	; (80230d4 <_printf_i+0x244>)
 8022f84:	2f6f      	cmp	r7, #111	; 0x6f
 8022f86:	bf0c      	ite	eq
 8022f88:	2308      	moveq	r3, #8
 8022f8a:	230a      	movne	r3, #10
 8022f8c:	2100      	movs	r1, #0
 8022f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022f92:	6865      	ldr	r5, [r4, #4]
 8022f94:	60a5      	str	r5, [r4, #8]
 8022f96:	2d00      	cmp	r5, #0
 8022f98:	bfa2      	ittt	ge
 8022f9a:	6821      	ldrge	r1, [r4, #0]
 8022f9c:	f021 0104 	bicge.w	r1, r1, #4
 8022fa0:	6021      	strge	r1, [r4, #0]
 8022fa2:	b90e      	cbnz	r6, 8022fa8 <_printf_i+0x118>
 8022fa4:	2d00      	cmp	r5, #0
 8022fa6:	d04d      	beq.n	8023044 <_printf_i+0x1b4>
 8022fa8:	4615      	mov	r5, r2
 8022faa:	fbb6 f1f3 	udiv	r1, r6, r3
 8022fae:	fb03 6711 	mls	r7, r3, r1, r6
 8022fb2:	5dc7      	ldrb	r7, [r0, r7]
 8022fb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022fb8:	4637      	mov	r7, r6
 8022fba:	42bb      	cmp	r3, r7
 8022fbc:	460e      	mov	r6, r1
 8022fbe:	d9f4      	bls.n	8022faa <_printf_i+0x11a>
 8022fc0:	2b08      	cmp	r3, #8
 8022fc2:	d10b      	bne.n	8022fdc <_printf_i+0x14c>
 8022fc4:	6823      	ldr	r3, [r4, #0]
 8022fc6:	07de      	lsls	r6, r3, #31
 8022fc8:	d508      	bpl.n	8022fdc <_printf_i+0x14c>
 8022fca:	6923      	ldr	r3, [r4, #16]
 8022fcc:	6861      	ldr	r1, [r4, #4]
 8022fce:	4299      	cmp	r1, r3
 8022fd0:	bfde      	ittt	le
 8022fd2:	2330      	movle	r3, #48	; 0x30
 8022fd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022fd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8022fdc:	1b52      	subs	r2, r2, r5
 8022fde:	6122      	str	r2, [r4, #16]
 8022fe0:	f8cd a000 	str.w	sl, [sp]
 8022fe4:	464b      	mov	r3, r9
 8022fe6:	aa03      	add	r2, sp, #12
 8022fe8:	4621      	mov	r1, r4
 8022fea:	4640      	mov	r0, r8
 8022fec:	f7ff fee2 	bl	8022db4 <_printf_common>
 8022ff0:	3001      	adds	r0, #1
 8022ff2:	d14c      	bne.n	802308e <_printf_i+0x1fe>
 8022ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022ff8:	b004      	add	sp, #16
 8022ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ffe:	4835      	ldr	r0, [pc, #212]	; (80230d4 <_printf_i+0x244>)
 8023000:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023004:	6829      	ldr	r1, [r5, #0]
 8023006:	6823      	ldr	r3, [r4, #0]
 8023008:	f851 6b04 	ldr.w	r6, [r1], #4
 802300c:	6029      	str	r1, [r5, #0]
 802300e:	061d      	lsls	r5, r3, #24
 8023010:	d514      	bpl.n	802303c <_printf_i+0x1ac>
 8023012:	07df      	lsls	r7, r3, #31
 8023014:	bf44      	itt	mi
 8023016:	f043 0320 	orrmi.w	r3, r3, #32
 802301a:	6023      	strmi	r3, [r4, #0]
 802301c:	b91e      	cbnz	r6, 8023026 <_printf_i+0x196>
 802301e:	6823      	ldr	r3, [r4, #0]
 8023020:	f023 0320 	bic.w	r3, r3, #32
 8023024:	6023      	str	r3, [r4, #0]
 8023026:	2310      	movs	r3, #16
 8023028:	e7b0      	b.n	8022f8c <_printf_i+0xfc>
 802302a:	6823      	ldr	r3, [r4, #0]
 802302c:	f043 0320 	orr.w	r3, r3, #32
 8023030:	6023      	str	r3, [r4, #0]
 8023032:	2378      	movs	r3, #120	; 0x78
 8023034:	4828      	ldr	r0, [pc, #160]	; (80230d8 <_printf_i+0x248>)
 8023036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802303a:	e7e3      	b.n	8023004 <_printf_i+0x174>
 802303c:	0659      	lsls	r1, r3, #25
 802303e:	bf48      	it	mi
 8023040:	b2b6      	uxthmi	r6, r6
 8023042:	e7e6      	b.n	8023012 <_printf_i+0x182>
 8023044:	4615      	mov	r5, r2
 8023046:	e7bb      	b.n	8022fc0 <_printf_i+0x130>
 8023048:	682b      	ldr	r3, [r5, #0]
 802304a:	6826      	ldr	r6, [r4, #0]
 802304c:	6961      	ldr	r1, [r4, #20]
 802304e:	1d18      	adds	r0, r3, #4
 8023050:	6028      	str	r0, [r5, #0]
 8023052:	0635      	lsls	r5, r6, #24
 8023054:	681b      	ldr	r3, [r3, #0]
 8023056:	d501      	bpl.n	802305c <_printf_i+0x1cc>
 8023058:	6019      	str	r1, [r3, #0]
 802305a:	e002      	b.n	8023062 <_printf_i+0x1d2>
 802305c:	0670      	lsls	r0, r6, #25
 802305e:	d5fb      	bpl.n	8023058 <_printf_i+0x1c8>
 8023060:	8019      	strh	r1, [r3, #0]
 8023062:	2300      	movs	r3, #0
 8023064:	6123      	str	r3, [r4, #16]
 8023066:	4615      	mov	r5, r2
 8023068:	e7ba      	b.n	8022fe0 <_printf_i+0x150>
 802306a:	682b      	ldr	r3, [r5, #0]
 802306c:	1d1a      	adds	r2, r3, #4
 802306e:	602a      	str	r2, [r5, #0]
 8023070:	681d      	ldr	r5, [r3, #0]
 8023072:	6862      	ldr	r2, [r4, #4]
 8023074:	2100      	movs	r1, #0
 8023076:	4628      	mov	r0, r5
 8023078:	f7dd f8ca 	bl	8000210 <memchr>
 802307c:	b108      	cbz	r0, 8023082 <_printf_i+0x1f2>
 802307e:	1b40      	subs	r0, r0, r5
 8023080:	6060      	str	r0, [r4, #4]
 8023082:	6863      	ldr	r3, [r4, #4]
 8023084:	6123      	str	r3, [r4, #16]
 8023086:	2300      	movs	r3, #0
 8023088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802308c:	e7a8      	b.n	8022fe0 <_printf_i+0x150>
 802308e:	6923      	ldr	r3, [r4, #16]
 8023090:	462a      	mov	r2, r5
 8023092:	4649      	mov	r1, r9
 8023094:	4640      	mov	r0, r8
 8023096:	47d0      	blx	sl
 8023098:	3001      	adds	r0, #1
 802309a:	d0ab      	beq.n	8022ff4 <_printf_i+0x164>
 802309c:	6823      	ldr	r3, [r4, #0]
 802309e:	079b      	lsls	r3, r3, #30
 80230a0:	d413      	bmi.n	80230ca <_printf_i+0x23a>
 80230a2:	68e0      	ldr	r0, [r4, #12]
 80230a4:	9b03      	ldr	r3, [sp, #12]
 80230a6:	4298      	cmp	r0, r3
 80230a8:	bfb8      	it	lt
 80230aa:	4618      	movlt	r0, r3
 80230ac:	e7a4      	b.n	8022ff8 <_printf_i+0x168>
 80230ae:	2301      	movs	r3, #1
 80230b0:	4632      	mov	r2, r6
 80230b2:	4649      	mov	r1, r9
 80230b4:	4640      	mov	r0, r8
 80230b6:	47d0      	blx	sl
 80230b8:	3001      	adds	r0, #1
 80230ba:	d09b      	beq.n	8022ff4 <_printf_i+0x164>
 80230bc:	3501      	adds	r5, #1
 80230be:	68e3      	ldr	r3, [r4, #12]
 80230c0:	9903      	ldr	r1, [sp, #12]
 80230c2:	1a5b      	subs	r3, r3, r1
 80230c4:	42ab      	cmp	r3, r5
 80230c6:	dcf2      	bgt.n	80230ae <_printf_i+0x21e>
 80230c8:	e7eb      	b.n	80230a2 <_printf_i+0x212>
 80230ca:	2500      	movs	r5, #0
 80230cc:	f104 0619 	add.w	r6, r4, #25
 80230d0:	e7f5      	b.n	80230be <_printf_i+0x22e>
 80230d2:	bf00      	nop
 80230d4:	08026eeb 	.word	0x08026eeb
 80230d8:	08026efc 	.word	0x08026efc

080230dc <_read_r>:
 80230dc:	b538      	push	{r3, r4, r5, lr}
 80230de:	4d07      	ldr	r5, [pc, #28]	; (80230fc <_read_r+0x20>)
 80230e0:	4604      	mov	r4, r0
 80230e2:	4608      	mov	r0, r1
 80230e4:	4611      	mov	r1, r2
 80230e6:	2200      	movs	r2, #0
 80230e8:	602a      	str	r2, [r5, #0]
 80230ea:	461a      	mov	r2, r3
 80230ec:	f7df fc72 	bl	80029d4 <_read>
 80230f0:	1c43      	adds	r3, r0, #1
 80230f2:	d102      	bne.n	80230fa <_read_r+0x1e>
 80230f4:	682b      	ldr	r3, [r5, #0]
 80230f6:	b103      	cbz	r3, 80230fa <_read_r+0x1e>
 80230f8:	6023      	str	r3, [r4, #0]
 80230fa:	bd38      	pop	{r3, r4, r5, pc}
 80230fc:	20044078 	.word	0x20044078

08023100 <_fstat_r>:
 8023100:	b538      	push	{r3, r4, r5, lr}
 8023102:	4d07      	ldr	r5, [pc, #28]	; (8023120 <_fstat_r+0x20>)
 8023104:	2300      	movs	r3, #0
 8023106:	4604      	mov	r4, r0
 8023108:	4608      	mov	r0, r1
 802310a:	4611      	mov	r1, r2
 802310c:	602b      	str	r3, [r5, #0]
 802310e:	f7df fca6 	bl	8002a5e <_fstat>
 8023112:	1c43      	adds	r3, r0, #1
 8023114:	d102      	bne.n	802311c <_fstat_r+0x1c>
 8023116:	682b      	ldr	r3, [r5, #0]
 8023118:	b103      	cbz	r3, 802311c <_fstat_r+0x1c>
 802311a:	6023      	str	r3, [r4, #0]
 802311c:	bd38      	pop	{r3, r4, r5, pc}
 802311e:	bf00      	nop
 8023120:	20044078 	.word	0x20044078

08023124 <_isatty_r>:
 8023124:	b538      	push	{r3, r4, r5, lr}
 8023126:	4d06      	ldr	r5, [pc, #24]	; (8023140 <_isatty_r+0x1c>)
 8023128:	2300      	movs	r3, #0
 802312a:	4604      	mov	r4, r0
 802312c:	4608      	mov	r0, r1
 802312e:	602b      	str	r3, [r5, #0]
 8023130:	f7df fca5 	bl	8002a7e <_isatty>
 8023134:	1c43      	adds	r3, r0, #1
 8023136:	d102      	bne.n	802313e <_isatty_r+0x1a>
 8023138:	682b      	ldr	r3, [r5, #0]
 802313a:	b103      	cbz	r3, 802313e <_isatty_r+0x1a>
 802313c:	6023      	str	r3, [r4, #0]
 802313e:	bd38      	pop	{r3, r4, r5, pc}
 8023140:	20044078 	.word	0x20044078

08023144 <_malloc_usable_size_r>:
 8023144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023148:	1f18      	subs	r0, r3, #4
 802314a:	2b00      	cmp	r3, #0
 802314c:	bfbc      	itt	lt
 802314e:	580b      	ldrlt	r3, [r1, r0]
 8023150:	18c0      	addlt	r0, r0, r3
 8023152:	4770      	bx	lr

08023154 <_Unwind_GetDataRelBase>:
 8023154:	b508      	push	{r3, lr}
 8023156:	f7fe fafd 	bl	8021754 <abort>

0802315a <_Unwind_GetTextRelBase>:
 802315a:	b508      	push	{r3, lr}
 802315c:	f7ff fffa 	bl	8023154 <_Unwind_GetDataRelBase>

08023160 <_init>:
 8023160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023162:	bf00      	nop
 8023164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023166:	bc08      	pop	{r3}
 8023168:	469e      	mov	lr, r3
 802316a:	4770      	bx	lr

0802316c <_fini>:
 802316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802316e:	bf00      	nop
 8023170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023172:	bc08      	pop	{r3}
 8023174:	469e      	mov	lr, r3
 8023176:	4770      	bx	lr
